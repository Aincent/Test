// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MoneyInsatence/MoneyInsatence.proto

#ifndef PROTOBUF_MoneyInsatence_2fMoneyInsatence_2eproto__INCLUDED
#define PROTOBUF_MoneyInsatence_2fMoneyInsatence_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MoneyInstancePackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

class ReqBuyItem;
class AckBuyItem;
class AckUseSkill;
class AckBuyAttr;
class AckFitchMoney;
class AckMoneyInstanceRank;
class RankData;
class FlushNotice;
class FlushMonster;
class MonsterAttr;
class TowerAttrAlter;
class TowerAttr;
class DuplicateAttrAlter;
class DuplicateAttr;
class MoneyInstanceResult;
class ReqRank;
class AckRank;

// ===================================================================

class ReqBuyItem : public ::google::protobuf::Message {
 public:
  ReqBuyItem();
  virtual ~ReqBuyItem();

  ReqBuyItem(const ReqBuyItem& from);

  inline ReqBuyItem& operator=(const ReqBuyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBuyItem& default_instance();

  void Swap(ReqBuyItem* other);

  // implements Message ----------------------------------------------

  ReqBuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqBuyItem& from);
  void MergeFrom(const ReqBuyItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.ReqBuyItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static ReqBuyItem* default_instance_;
};
// -------------------------------------------------------------------

class AckBuyItem : public ::google::protobuf::Message {
 public:
  AckBuyItem();
  virtual ~AckBuyItem();

  AckBuyItem(const AckBuyItem& from);

  inline AckBuyItem& operator=(const AckBuyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBuyItem& default_instance();

  void Swap(AckBuyItem* other);

  // implements Message ----------------------------------------------

  AckBuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBuyItem& from);
  void MergeFrom(const AckBuyItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.AckBuyItem)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static AckBuyItem* default_instance_;
};
// -------------------------------------------------------------------

class AckUseSkill : public ::google::protobuf::Message {
 public:
  AckUseSkill();
  virtual ~AckUseSkill();

  AckUseSkill(const AckUseSkill& from);

  inline AckUseSkill& operator=(const AckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckUseSkill& default_instance();

  void Swap(AckUseSkill* other);

  // implements Message ----------------------------------------------

  AckUseSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckUseSkill& from);
  void MergeFrom(const AckUseSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.AckUseSkill)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static AckUseSkill* default_instance_;
};
// -------------------------------------------------------------------

class AckBuyAttr : public ::google::protobuf::Message {
 public:
  AckBuyAttr();
  virtual ~AckBuyAttr();

  AckBuyAttr(const AckBuyAttr& from);

  inline AckBuyAttr& operator=(const AckBuyAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBuyAttr& default_instance();

  void Swap(AckBuyAttr* other);

  // implements Message ----------------------------------------------

  AckBuyAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBuyAttr& from);
  void MergeFrom(const AckBuyAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.AckBuyAttr)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static AckBuyAttr* default_instance_;
};
// -------------------------------------------------------------------

class AckFitchMoney : public ::google::protobuf::Message {
 public:
  AckFitchMoney();
  virtual ~AckFitchMoney();

  AckFitchMoney(const AckFitchMoney& from);

  inline AckFitchMoney& operator=(const AckFitchMoney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFitchMoney& default_instance();

  void Swap(AckFitchMoney* other);

  // implements Message ----------------------------------------------

  AckFitchMoney* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFitchMoney& from);
  void MergeFrom(const AckFitchMoney& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.AckFitchMoney)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static AckFitchMoney* default_instance_;
};
// -------------------------------------------------------------------

class AckMoneyInstanceRank : public ::google::protobuf::Message {
 public:
  AckMoneyInstanceRank();
  virtual ~AckMoneyInstanceRank();

  AckMoneyInstanceRank(const AckMoneyInstanceRank& from);

  inline AckMoneyInstanceRank& operator=(const AckMoneyInstanceRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMoneyInstanceRank& default_instance();

  void Swap(AckMoneyInstanceRank* other);

  // implements Message ----------------------------------------------

  AckMoneyInstanceRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMoneyInstanceRank& from);
  void MergeFrom(const AckMoneyInstanceRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 maxCount = 1;
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxCountFieldNumber = 1;
  inline ::google::protobuf::int32 maxcount() const;
  inline void set_maxcount(::google::protobuf::int32 value);

  // optional int32 leftCount = 2;
  inline bool has_leftcount() const;
  inline void clear_leftcount();
  static const int kLeftCountFieldNumber = 2;
  inline ::google::protobuf::int32 leftcount() const;
  inline void set_leftcount(::google::protobuf::int32 value);

  // optional int32 maxbuyCount = 3;
  inline bool has_maxbuycount() const;
  inline void clear_maxbuycount();
  static const int kMaxbuyCountFieldNumber = 3;
  inline ::google::protobuf::int32 maxbuycount() const;
  inline void set_maxbuycount(::google::protobuf::int32 value);

  // optional int32 buyCount = 4;
  inline bool has_buycount() const;
  inline void clear_buycount();
  static const int kBuyCountFieldNumber = 4;
  inline ::google::protobuf::int32 buycount() const;
  inline void set_buycount(::google::protobuf::int32 value);

  // repeated .MoneyInstancePackage.RankData ranklist = 5;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRanklistFieldNumber = 5;
  inline const ::MoneyInstancePackage::RankData& ranklist(int index) const;
  inline ::MoneyInstancePackage::RankData* mutable_ranklist(int index);
  inline ::MoneyInstancePackage::RankData* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.AckMoneyInstanceRank)
 private:
  inline void set_has_maxcount();
  inline void clear_has_maxcount();
  inline void set_has_leftcount();
  inline void clear_has_leftcount();
  inline void set_has_maxbuycount();
  inline void clear_has_maxbuycount();
  inline void set_has_buycount();
  inline void clear_has_buycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 maxcount_;
  ::google::protobuf::int32 leftcount_;
  ::google::protobuf::int32 maxbuycount_;
  ::google::protobuf::int32 buycount_;
  ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData > ranklist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static AckMoneyInstanceRank* default_instance_;
};
// -------------------------------------------------------------------

class RankData : public ::google::protobuf::Message {
 public:
  RankData();
  virtual ~RankData();

  RankData(const RankData& from);

  inline RankData& operator=(const RankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankData& default_instance();

  void Swap(RankData* other);

  // implements Message ----------------------------------------------

  RankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankData& from);
  void MergeFrom(const RankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.RankData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static RankData* default_instance_;
};
// -------------------------------------------------------------------

class FlushNotice : public ::google::protobuf::Message {
 public:
  FlushNotice();
  virtual ~FlushNotice();

  FlushNotice(const FlushNotice& from);

  inline FlushNotice& operator=(const FlushNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushNotice& default_instance();

  void Swap(FlushNotice* other);

  // implements Message ----------------------------------------------

  FlushNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushNotice& from);
  void MergeFrom(const FlushNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 queue = 3;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 3;
  inline ::google::protobuf::int32 queue() const;
  inline void set_queue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.FlushNotice)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_queue();
  inline void clear_has_queue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 queue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static FlushNotice* default_instance_;
};
// -------------------------------------------------------------------

class FlushMonster : public ::google::protobuf::Message {
 public:
  FlushMonster();
  virtual ~FlushMonster();

  FlushMonster(const FlushMonster& from);

  inline FlushMonster& operator=(const FlushMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlushMonster& default_instance();

  void Swap(FlushMonster* other);

  // implements Message ----------------------------------------------

  FlushMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlushMonster& from);
  void MergeFrom(const FlushMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 queue = 1;
  inline bool has_queue() const;
  inline void clear_queue();
  static const int kQueueFieldNumber = 1;
  inline ::google::protobuf::int32 queue() const;
  inline void set_queue(::google::protobuf::int32 value);

  // repeated .MoneyInstancePackage.MonsterAttr mons = 2;
  inline int mons_size() const;
  inline void clear_mons();
  static const int kMonsFieldNumber = 2;
  inline const ::MoneyInstancePackage::MonsterAttr& mons(int index) const;
  inline ::MoneyInstancePackage::MonsterAttr* mutable_mons(int index);
  inline ::MoneyInstancePackage::MonsterAttr* add_mons();
  inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::MonsterAttr >&
      mons() const;
  inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::MonsterAttr >*
      mutable_mons();

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.FlushMonster)
 private:
  inline void set_has_queue();
  inline void clear_has_queue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::MonsterAttr > mons_;
  ::google::protobuf::int32 queue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static FlushMonster* default_instance_;
};
// -------------------------------------------------------------------

class MonsterAttr : public ::google::protobuf::Message {
 public:
  MonsterAttr();
  virtual ~MonsterAttr();

  MonsterAttr(const MonsterAttr& from);

  inline MonsterAttr& operator=(const MonsterAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterAttr& default_instance();

  void Swap(MonsterAttr* other);

  // implements Message ----------------------------------------------

  MonsterAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterAttr& from);
  void MergeFrom(const MonsterAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.MonsterAttr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static MonsterAttr* default_instance_;
};
// -------------------------------------------------------------------

class TowerAttrAlter : public ::google::protobuf::Message {
 public:
  TowerAttrAlter();
  virtual ~TowerAttrAlter();

  TowerAttrAlter(const TowerAttrAlter& from);

  inline TowerAttrAlter& operator=(const TowerAttrAlter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TowerAttrAlter& default_instance();

  void Swap(TowerAttrAlter* other);

  // implements Message ----------------------------------------------

  TowerAttrAlter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TowerAttrAlter& from);
  void MergeFrom(const TowerAttrAlter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MoneyInstancePackage.TowerAttr attr = 1;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 1;
  inline const ::MoneyInstancePackage::TowerAttr& attr(int index) const;
  inline ::MoneyInstancePackage::TowerAttr* mutable_attr(int index);
  inline ::MoneyInstancePackage::TowerAttr* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::TowerAttr >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::TowerAttr >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.TowerAttrAlter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::TowerAttr > attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static TowerAttrAlter* default_instance_;
};
// -------------------------------------------------------------------

class TowerAttr : public ::google::protobuf::Message {
 public:
  TowerAttr();
  virtual ~TowerAttr();

  TowerAttr(const TowerAttr& from);

  inline TowerAttr& operator=(const TowerAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TowerAttr& default_instance();

  void Swap(TowerAttr* other);

  // implements Message ----------------------------------------------

  TowerAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TowerAttr& from);
  void MergeFrom(const TowerAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.TowerAttr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static TowerAttr* default_instance_;
};
// -------------------------------------------------------------------

class DuplicateAttrAlter : public ::google::protobuf::Message {
 public:
  DuplicateAttrAlter();
  virtual ~DuplicateAttrAlter();

  DuplicateAttrAlter(const DuplicateAttrAlter& from);

  inline DuplicateAttrAlter& operator=(const DuplicateAttrAlter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplicateAttrAlter& default_instance();

  void Swap(DuplicateAttrAlter* other);

  // implements Message ----------------------------------------------

  DuplicateAttrAlter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplicateAttrAlter& from);
  void MergeFrom(const DuplicateAttrAlter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MoneyInstancePackage.DuplicateAttr attrlist = 1;
  inline int attrlist_size() const;
  inline void clear_attrlist();
  static const int kAttrlistFieldNumber = 1;
  inline const ::MoneyInstancePackage::DuplicateAttr& attrlist(int index) const;
  inline ::MoneyInstancePackage::DuplicateAttr* mutable_attrlist(int index);
  inline ::MoneyInstancePackage::DuplicateAttr* add_attrlist();
  inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::DuplicateAttr >&
      attrlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::DuplicateAttr >*
      mutable_attrlist();

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.DuplicateAttrAlter)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::DuplicateAttr > attrlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static DuplicateAttrAlter* default_instance_;
};
// -------------------------------------------------------------------

class DuplicateAttr : public ::google::protobuf::Message {
 public:
  DuplicateAttr();
  virtual ~DuplicateAttr();

  DuplicateAttr(const DuplicateAttr& from);

  inline DuplicateAttr& operator=(const DuplicateAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DuplicateAttr& default_instance();

  void Swap(DuplicateAttr* other);

  // implements Message ----------------------------------------------

  DuplicateAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DuplicateAttr& from);
  void MergeFrom(const DuplicateAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.DuplicateAttr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static DuplicateAttr* default_instance_;
};
// -------------------------------------------------------------------

class MoneyInstanceResult : public ::google::protobuf::Message {
 public:
  MoneyInstanceResult();
  virtual ~MoneyInstanceResult();

  MoneyInstanceResult(const MoneyInstanceResult& from);

  inline MoneyInstanceResult& operator=(const MoneyInstanceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneyInstanceResult& default_instance();

  void Swap(MoneyInstanceResult* other);

  // implements Message ----------------------------------------------

  MoneyInstanceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoneyInstanceResult& from);
  void MergeFrom(const MoneyInstanceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.MoneyInstanceResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int64 money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static MoneyInstanceResult* default_instance_;
};
// -------------------------------------------------------------------

class ReqRank : public ::google::protobuf::Message {
 public:
  ReqRank();
  virtual ~ReqRank();

  ReqRank(const ReqRank& from);

  inline ReqRank& operator=(const ReqRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRank& default_instance();

  void Swap(ReqRank* other);

  // implements Message ----------------------------------------------

  ReqRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRank& from);
  void MergeFrom(const ReqRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.ReqRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static ReqRank* default_instance_;
};
// -------------------------------------------------------------------

class AckRank : public ::google::protobuf::Message {
 public:
  AckRank();
  virtual ~AckRank();

  AckRank(const AckRank& from);

  inline AckRank& operator=(const AckRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRank& default_instance();

  void Swap(AckRank* other);

  // implements Message ----------------------------------------------

  AckRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRank& from);
  void MergeFrom(const AckRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MoneyInstancePackage.RankData ranklist = 1;
  inline int ranklist_size() const;
  inline void clear_ranklist();
  static const int kRanklistFieldNumber = 1;
  inline const ::MoneyInstancePackage::RankData& ranklist(int index) const;
  inline ::MoneyInstancePackage::RankData* mutable_ranklist(int index);
  inline ::MoneyInstancePackage::RankData* add_ranklist();
  inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >&
      ranklist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >*
      mutable_ranklist();

  // @@protoc_insertion_point(class_scope:MoneyInstancePackage.AckRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData > ranklist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  friend void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto();

  void InitAsDefaultInstance();
  static AckRank* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqBuyItem

// required int32 id = 1;
inline bool ReqBuyItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqBuyItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqBuyItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqBuyItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqBuyItem::id() const {
  return id_;
}
inline void ReqBuyItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckBuyItem

// required int32 ret = 1;
inline bool AckBuyItem::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBuyItem::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBuyItem::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBuyItem::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckBuyItem::ret() const {
  return ret_;
}
inline void AckBuyItem::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// AckUseSkill

// required int32 ret = 1;
inline bool AckUseSkill::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckUseSkill::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckUseSkill::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckUseSkill::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckUseSkill::ret() const {
  return ret_;
}
inline void AckUseSkill::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// AckBuyAttr

// required int32 ret = 1;
inline bool AckBuyAttr::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBuyAttr::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBuyAttr::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBuyAttr::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckBuyAttr::ret() const {
  return ret_;
}
inline void AckBuyAttr::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// AckFitchMoney

// required int32 ret = 1;
inline bool AckFitchMoney::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFitchMoney::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFitchMoney::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFitchMoney::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckFitchMoney::ret() const {
  return ret_;
}
inline void AckFitchMoney::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// AckMoneyInstanceRank

// required int32 maxCount = 1;
inline bool AckMoneyInstanceRank::has_maxcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckMoneyInstanceRank::set_has_maxcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckMoneyInstanceRank::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckMoneyInstanceRank::clear_maxcount() {
  maxcount_ = 0;
  clear_has_maxcount();
}
inline ::google::protobuf::int32 AckMoneyInstanceRank::maxcount() const {
  return maxcount_;
}
inline void AckMoneyInstanceRank::set_maxcount(::google::protobuf::int32 value) {
  set_has_maxcount();
  maxcount_ = value;
}

// optional int32 leftCount = 2;
inline bool AckMoneyInstanceRank::has_leftcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckMoneyInstanceRank::set_has_leftcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckMoneyInstanceRank::clear_has_leftcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckMoneyInstanceRank::clear_leftcount() {
  leftcount_ = 0;
  clear_has_leftcount();
}
inline ::google::protobuf::int32 AckMoneyInstanceRank::leftcount() const {
  return leftcount_;
}
inline void AckMoneyInstanceRank::set_leftcount(::google::protobuf::int32 value) {
  set_has_leftcount();
  leftcount_ = value;
}

// optional int32 maxbuyCount = 3;
inline bool AckMoneyInstanceRank::has_maxbuycount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckMoneyInstanceRank::set_has_maxbuycount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckMoneyInstanceRank::clear_has_maxbuycount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckMoneyInstanceRank::clear_maxbuycount() {
  maxbuycount_ = 0;
  clear_has_maxbuycount();
}
inline ::google::protobuf::int32 AckMoneyInstanceRank::maxbuycount() const {
  return maxbuycount_;
}
inline void AckMoneyInstanceRank::set_maxbuycount(::google::protobuf::int32 value) {
  set_has_maxbuycount();
  maxbuycount_ = value;
}

// optional int32 buyCount = 4;
inline bool AckMoneyInstanceRank::has_buycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckMoneyInstanceRank::set_has_buycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckMoneyInstanceRank::clear_has_buycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckMoneyInstanceRank::clear_buycount() {
  buycount_ = 0;
  clear_has_buycount();
}
inline ::google::protobuf::int32 AckMoneyInstanceRank::buycount() const {
  return buycount_;
}
inline void AckMoneyInstanceRank::set_buycount(::google::protobuf::int32 value) {
  set_has_buycount();
  buycount_ = value;
}

// repeated .MoneyInstancePackage.RankData ranklist = 5;
inline int AckMoneyInstanceRank::ranklist_size() const {
  return ranklist_.size();
}
inline void AckMoneyInstanceRank::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::MoneyInstancePackage::RankData& AckMoneyInstanceRank::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::MoneyInstancePackage::RankData* AckMoneyInstanceRank::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::MoneyInstancePackage::RankData* AckMoneyInstanceRank::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >&
AckMoneyInstanceRank::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >*
AckMoneyInstanceRank::mutable_ranklist() {
  return &ranklist_;
}

// -------------------------------------------------------------------

// RankData

// required int64 id = 1;
inline bool RankData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankData::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 RankData::id() const {
  return id_;
}
inline void RankData::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool RankData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankData::name() const {
  return *name_;
}
inline void RankData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RankData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 money = 3;
inline bool RankData::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankData::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankData::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankData::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 RankData::money() const {
  return money_;
}
inline void RankData::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// FlushNotice

// required int32 type = 1;
inline bool FlushNotice::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushNotice::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushNotice::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushNotice::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FlushNotice::type() const {
  return type_;
}
inline void FlushNotice::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 time = 2;
inline bool FlushNotice::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlushNotice::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlushNotice::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlushNotice::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 FlushNotice::time() const {
  return time_;
}
inline void FlushNotice::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 queue = 3;
inline bool FlushNotice::has_queue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlushNotice::set_has_queue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlushNotice::clear_has_queue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlushNotice::clear_queue() {
  queue_ = 0;
  clear_has_queue();
}
inline ::google::protobuf::int32 FlushNotice::queue() const {
  return queue_;
}
inline void FlushNotice::set_queue(::google::protobuf::int32 value) {
  set_has_queue();
  queue_ = value;
}

// -------------------------------------------------------------------

// FlushMonster

// required int32 queue = 1;
inline bool FlushMonster::has_queue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlushMonster::set_has_queue() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlushMonster::clear_has_queue() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlushMonster::clear_queue() {
  queue_ = 0;
  clear_has_queue();
}
inline ::google::protobuf::int32 FlushMonster::queue() const {
  return queue_;
}
inline void FlushMonster::set_queue(::google::protobuf::int32 value) {
  set_has_queue();
  queue_ = value;
}

// repeated .MoneyInstancePackage.MonsterAttr mons = 2;
inline int FlushMonster::mons_size() const {
  return mons_.size();
}
inline void FlushMonster::clear_mons() {
  mons_.Clear();
}
inline const ::MoneyInstancePackage::MonsterAttr& FlushMonster::mons(int index) const {
  return mons_.Get(index);
}
inline ::MoneyInstancePackage::MonsterAttr* FlushMonster::mutable_mons(int index) {
  return mons_.Mutable(index);
}
inline ::MoneyInstancePackage::MonsterAttr* FlushMonster::add_mons() {
  return mons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::MonsterAttr >&
FlushMonster::mons() const {
  return mons_;
}
inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::MonsterAttr >*
FlushMonster::mutable_mons() {
  return &mons_;
}

// -------------------------------------------------------------------

// MonsterAttr

// required int32 id = 1;
inline bool MonsterAttr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterAttr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterAttr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterAttr::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MonsterAttr::id() const {
  return id_;
}
inline void MonsterAttr::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 key = 2;
inline bool MonsterAttr::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterAttr::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterAttr::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterAttr::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 MonsterAttr::key() const {
  return key_;
}
inline void MonsterAttr::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 level = 3;
inline bool MonsterAttr::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterAttr::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterAttr::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterAttr::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MonsterAttr::level() const {
  return level_;
}
inline void MonsterAttr::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 hp = 4;
inline bool MonsterAttr::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MonsterAttr::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MonsterAttr::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MonsterAttr::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 MonsterAttr::hp() const {
  return hp_;
}
inline void MonsterAttr::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// TowerAttrAlter

// repeated .MoneyInstancePackage.TowerAttr attr = 1;
inline int TowerAttrAlter::attr_size() const {
  return attr_.size();
}
inline void TowerAttrAlter::clear_attr() {
  attr_.Clear();
}
inline const ::MoneyInstancePackage::TowerAttr& TowerAttrAlter::attr(int index) const {
  return attr_.Get(index);
}
inline ::MoneyInstancePackage::TowerAttr* TowerAttrAlter::mutable_attr(int index) {
  return attr_.Mutable(index);
}
inline ::MoneyInstancePackage::TowerAttr* TowerAttrAlter::add_attr() {
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::TowerAttr >&
TowerAttrAlter::attr() const {
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::TowerAttr >*
TowerAttrAlter::mutable_attr() {
  return &attr_;
}

// -------------------------------------------------------------------

// TowerAttr

// required int32 id = 1;
inline bool TowerAttr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TowerAttr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TowerAttr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TowerAttr::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TowerAttr::id() const {
  return id_;
}
inline void TowerAttr::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool TowerAttr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TowerAttr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TowerAttr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TowerAttr::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 TowerAttr::value() const {
  return value_;
}
inline void TowerAttr::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// DuplicateAttrAlter

// repeated .MoneyInstancePackage.DuplicateAttr attrlist = 1;
inline int DuplicateAttrAlter::attrlist_size() const {
  return attrlist_.size();
}
inline void DuplicateAttrAlter::clear_attrlist() {
  attrlist_.Clear();
}
inline const ::MoneyInstancePackage::DuplicateAttr& DuplicateAttrAlter::attrlist(int index) const {
  return attrlist_.Get(index);
}
inline ::MoneyInstancePackage::DuplicateAttr* DuplicateAttrAlter::mutable_attrlist(int index) {
  return attrlist_.Mutable(index);
}
inline ::MoneyInstancePackage::DuplicateAttr* DuplicateAttrAlter::add_attrlist() {
  return attrlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::DuplicateAttr >&
DuplicateAttrAlter::attrlist() const {
  return attrlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::DuplicateAttr >*
DuplicateAttrAlter::mutable_attrlist() {
  return &attrlist_;
}

// -------------------------------------------------------------------

// DuplicateAttr

// required int32 id = 1;
inline bool DuplicateAttr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DuplicateAttr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DuplicateAttr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DuplicateAttr::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DuplicateAttr::id() const {
  return id_;
}
inline void DuplicateAttr::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 value = 2;
inline bool DuplicateAttr::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DuplicateAttr::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DuplicateAttr::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DuplicateAttr::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 DuplicateAttr::value() const {
  return value_;
}
inline void DuplicateAttr::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// MoneyInstanceResult

// required int64 id = 1;
inline bool MoneyInstanceResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoneyInstanceResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoneyInstanceResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoneyInstanceResult::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 MoneyInstanceResult::id() const {
  return id_;
}
inline void MoneyInstanceResult::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool MoneyInstanceResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoneyInstanceResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoneyInstanceResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoneyInstanceResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MoneyInstanceResult::name() const {
  return *name_;
}
inline void MoneyInstanceResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MoneyInstanceResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MoneyInstanceResult::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MoneyInstanceResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MoneyInstanceResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MoneyInstanceResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 money = 3;
inline bool MoneyInstanceResult::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoneyInstanceResult::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoneyInstanceResult::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoneyInstanceResult::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 MoneyInstanceResult::money() const {
  return money_;
}
inline void MoneyInstanceResult::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// ReqRank

// required int64 charid = 1;
inline bool ReqRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRank::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ReqRank::charid() const {
  return charid_;
}
inline void ReqRank::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// AckRank

// repeated .MoneyInstancePackage.RankData ranklist = 1;
inline int AckRank::ranklist_size() const {
  return ranklist_.size();
}
inline void AckRank::clear_ranklist() {
  ranklist_.Clear();
}
inline const ::MoneyInstancePackage::RankData& AckRank::ranklist(int index) const {
  return ranklist_.Get(index);
}
inline ::MoneyInstancePackage::RankData* AckRank::mutable_ranklist(int index) {
  return ranklist_.Mutable(index);
}
inline ::MoneyInstancePackage::RankData* AckRank::add_ranklist() {
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >&
AckRank::ranklist() const {
  return ranklist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MoneyInstancePackage::RankData >*
AckRank::mutable_ranklist() {
  return &ranklist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MoneyInstancePackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MoneyInsatence_2fMoneyInsatence_2eproto__INCLUDED
