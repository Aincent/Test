// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/LucklyTurntable.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/LucklyTurntable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LucklyTurntable {

namespace {

const ::google::protobuf::Descriptor* AckLucklyTurntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLucklyTurntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRefulshOrGetLucklyTurntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRefulshOrGetLucklyTurntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetLucklyTurntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetLucklyTurntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRollLucklyTurntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRollLucklyTurntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRollLucklyTurntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRollLucklyTurntable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto() {
  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/LucklyTurntable.proto");
  GOOGLE_CHECK(file != NULL);
  AckLucklyTurntable_descriptor_ = file->message_type(0);
  static const int AckLucklyTurntable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, entertm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, reawidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, freenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, num_),
  };
  AckLucklyTurntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLucklyTurntable_descriptor_,
      AckLucklyTurntable::default_instance_,
      AckLucklyTurntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLucklyTurntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLucklyTurntable));
  AckRefulshOrGetLucklyTurntable_descriptor_ = file->message_type(1);
  static const int AckRefulshOrGetLucklyTurntable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRefulshOrGetLucklyTurntable, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRefulshOrGetLucklyTurntable, entertm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRefulshOrGetLucklyTurntable, reawidlist_),
  };
  AckRefulshOrGetLucklyTurntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRefulshOrGetLucklyTurntable_descriptor_,
      AckRefulshOrGetLucklyTurntable::default_instance_,
      AckRefulshOrGetLucklyTurntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRefulshOrGetLucklyTurntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRefulshOrGetLucklyTurntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRefulshOrGetLucklyTurntable));
  AckGetLucklyTurntable_descriptor_ = file->message_type(2);
  static const int AckGetLucklyTurntable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetLucklyTurntable, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetLucklyTurntable, notadd_),
  };
  AckGetLucklyTurntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGetLucklyTurntable_descriptor_,
      AckGetLucklyTurntable::default_instance_,
      AckGetLucklyTurntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetLucklyTurntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetLucklyTurntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGetLucklyTurntable));
  ClientRollLucklyTurntable_descriptor_ = file->message_type(3);
  static const int ClientRollLucklyTurntable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRollLucklyTurntable, num_),
  };
  ClientRollLucklyTurntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRollLucklyTurntable_descriptor_,
      ClientRollLucklyTurntable::default_instance_,
      ClientRollLucklyTurntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRollLucklyTurntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRollLucklyTurntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRollLucklyTurntable));
  AckRollLucklyTurntable_descriptor_ = file->message_type(4);
  static const int AckRollLucklyTurntable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRollLucklyTurntable, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRollLucklyTurntable, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRollLucklyTurntable, num_),
  };
  AckRollLucklyTurntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRollLucklyTurntable_descriptor_,
      AckRollLucklyTurntable::default_instance_,
      AckRollLucklyTurntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRollLucklyTurntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRollLucklyTurntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRollLucklyTurntable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLucklyTurntable_descriptor_, &AckLucklyTurntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRefulshOrGetLucklyTurntable_descriptor_, &AckRefulshOrGetLucklyTurntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGetLucklyTurntable_descriptor_, &AckGetLucklyTurntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRollLucklyTurntable_descriptor_, &ClientRollLucklyTurntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRollLucklyTurntable_descriptor_, &AckRollLucklyTurntable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto() {
  delete AckLucklyTurntable::default_instance_;
  delete AckLucklyTurntable_reflection_;
  delete AckRefulshOrGetLucklyTurntable::default_instance_;
  delete AckRefulshOrGetLucklyTurntable_reflection_;
  delete AckGetLucklyTurntable::default_instance_;
  delete AckGetLucklyTurntable_reflection_;
  delete ClientRollLucklyTurntable::default_instance_;
  delete ClientRollLucklyTurntable_reflection_;
  delete AckRollLucklyTurntable::default_instance_;
  delete AckRollLucklyTurntable_reflection_;
}

void protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037CharLogin/LucklyTurntable.proto\022\017Luckl"
    "yTurntable\"t\n\022AckLucklyTurntable\022\013\n\003ret\030"
    "\001 \002(\005\022\017\n\007enterTm\030\002 \001(\001\022\022\n\nreawIDList\030\003 \003"
    "(\005\022\017\n\007freeNum\030\004 \001(\005\022\016\n\006itemID\030\005 \003(\005\022\013\n\003n"
    "um\030\006 \003(\005\"R\n\036AckRefulshOrGetLucklyTurntab"
    "le\022\013\n\003ret\030\001 \002(\005\022\017\n\007enterTm\030\002 \001(\005\022\022\n\nreaw"
    "IDList\030\003 \003(\005\"4\n\025AckGetLucklyTurntable\022\013\n"
    "\003ret\030\001 \002(\005\022\016\n\006notAdd\030\002 \001(\005\"(\n\031ClientRoll"
    "LucklyTurntable\022\013\n\003num\030\001 \002(\005\"B\n\026AckRollL"
    "ucklyTurntable\022\013\n\003ret\030\001 \002(\005\022\016\n\006itemID\030\002 "
    "\003(\005\022\013\n\003num\030\003 \003(\005", 416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/LucklyTurntable.proto", &protobuf_RegisterTypes);
  AckLucklyTurntable::default_instance_ = new AckLucklyTurntable();
  AckRefulshOrGetLucklyTurntable::default_instance_ = new AckRefulshOrGetLucklyTurntable();
  AckGetLucklyTurntable::default_instance_ = new AckGetLucklyTurntable();
  ClientRollLucklyTurntable::default_instance_ = new ClientRollLucklyTurntable();
  AckRollLucklyTurntable::default_instance_ = new AckRollLucklyTurntable();
  AckLucklyTurntable::default_instance_->InitAsDefaultInstance();
  AckRefulshOrGetLucklyTurntable::default_instance_->InitAsDefaultInstance();
  AckGetLucklyTurntable::default_instance_->InitAsDefaultInstance();
  ClientRollLucklyTurntable::default_instance_->InitAsDefaultInstance();
  AckRollLucklyTurntable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fLucklyTurntable_2eproto {
  StaticDescriptorInitializer_CharLogin_2fLucklyTurntable_2eproto() {
    protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fLucklyTurntable_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckLucklyTurntable::kRetFieldNumber;
const int AckLucklyTurntable::kEnterTmFieldNumber;
const int AckLucklyTurntable::kReawIDListFieldNumber;
const int AckLucklyTurntable::kFreeNumFieldNumber;
const int AckLucklyTurntable::kItemIDFieldNumber;
const int AckLucklyTurntable::kNumFieldNumber;
#endif  // !_MSC_VER

AckLucklyTurntable::AckLucklyTurntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLucklyTurntable::InitAsDefaultInstance() {
}

AckLucklyTurntable::AckLucklyTurntable(const AckLucklyTurntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLucklyTurntable::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  entertm_ = 0;
  freenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLucklyTurntable::~AckLucklyTurntable() {
  SharedDtor();
}

void AckLucklyTurntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLucklyTurntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLucklyTurntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLucklyTurntable_descriptor_;
}

const AckLucklyTurntable& AckLucklyTurntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  return *default_instance_;
}

AckLucklyTurntable* AckLucklyTurntable::default_instance_ = NULL;

AckLucklyTurntable* AckLucklyTurntable::New() const {
  return new AckLucklyTurntable;
}

void AckLucklyTurntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    entertm_ = 0;
    freenum_ = 0;
  }
  reawidlist_.Clear();
  itemid_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLucklyTurntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_enterTm;
        break;
      }

      // optional double enterTm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_enterTm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &entertm_)));
          set_has_entertm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reawIDList;
        break;
      }

      // repeated int32 reawIDList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reawIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_reawidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reawidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reawIDList;
        if (input->ExpectTag(32)) goto parse_freeNum;
        break;
      }

      // optional int32 freeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemID;
        break;
      }

      // repeated int32 itemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemID;
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // repeated int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLucklyTurntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional double enterTm = 2;
  if (has_entertm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->entertm(), output);
  }

  // repeated int32 reawIDList = 3;
  for (int i = 0; i < this->reawidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->reawidlist(i), output);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freenum(), output);
  }

  // repeated int32 itemID = 5;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->itemid(i), output);
  }

  // repeated int32 num = 6;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLucklyTurntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional double enterTm = 2;
  if (has_entertm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->entertm(), target);
  }

  // repeated int32 reawIDList = 3;
  for (int i = 0; i < this->reawidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->reawidlist(i), target);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freenum(), target);
  }

  // repeated int32 itemID = 5;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->itemid(i), target);
  }

  // repeated int32 num = 6;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLucklyTurntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional double enterTm = 2;
    if (has_entertm()) {
      total_size += 1 + 8;
    }

    // optional int32 freeNum = 4;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }

  }
  // repeated int32 reawIDList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reawidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reawidlist(i));
    }
    total_size += 1 * this->reawidlist_size() + data_size;
  }

  // repeated int32 itemID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 num = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLucklyTurntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLucklyTurntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLucklyTurntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLucklyTurntable::MergeFrom(const AckLucklyTurntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  reawidlist_.MergeFrom(from.reawidlist_);
  itemid_.MergeFrom(from.itemid_);
  num_.MergeFrom(from.num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_entertm()) {
      set_entertm(from.entertm());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLucklyTurntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLucklyTurntable::CopyFrom(const AckLucklyTurntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLucklyTurntable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLucklyTurntable::Swap(AckLucklyTurntable* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(entertm_, other->entertm_);
    reawidlist_.Swap(&other->reawidlist_);
    std::swap(freenum_, other->freenum_);
    itemid_.Swap(&other->itemid_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLucklyTurntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLucklyTurntable_descriptor_;
  metadata.reflection = AckLucklyTurntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRefulshOrGetLucklyTurntable::kRetFieldNumber;
const int AckRefulshOrGetLucklyTurntable::kEnterTmFieldNumber;
const int AckRefulshOrGetLucklyTurntable::kReawIDListFieldNumber;
#endif  // !_MSC_VER

AckRefulshOrGetLucklyTurntable::AckRefulshOrGetLucklyTurntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRefulshOrGetLucklyTurntable::InitAsDefaultInstance() {
}

AckRefulshOrGetLucklyTurntable::AckRefulshOrGetLucklyTurntable(const AckRefulshOrGetLucklyTurntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRefulshOrGetLucklyTurntable::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  entertm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRefulshOrGetLucklyTurntable::~AckRefulshOrGetLucklyTurntable() {
  SharedDtor();
}

void AckRefulshOrGetLucklyTurntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRefulshOrGetLucklyTurntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRefulshOrGetLucklyTurntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRefulshOrGetLucklyTurntable_descriptor_;
}

const AckRefulshOrGetLucklyTurntable& AckRefulshOrGetLucklyTurntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  return *default_instance_;
}

AckRefulshOrGetLucklyTurntable* AckRefulshOrGetLucklyTurntable::default_instance_ = NULL;

AckRefulshOrGetLucklyTurntable* AckRefulshOrGetLucklyTurntable::New() const {
  return new AckRefulshOrGetLucklyTurntable;
}

void AckRefulshOrGetLucklyTurntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    entertm_ = 0;
  }
  reawidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRefulshOrGetLucklyTurntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enterTm;
        break;
      }

      // optional int32 enterTm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterTm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entertm_)));
          set_has_entertm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reawIDList;
        break;
      }

      // repeated int32 reawIDList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reawIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_reawidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reawidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reawIDList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRefulshOrGetLucklyTurntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 enterTm = 2;
  if (has_entertm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entertm(), output);
  }

  // repeated int32 reawIDList = 3;
  for (int i = 0; i < this->reawidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->reawidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRefulshOrGetLucklyTurntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 enterTm = 2;
  if (has_entertm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entertm(), target);
  }

  // repeated int32 reawIDList = 3;
  for (int i = 0; i < this->reawidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->reawidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRefulshOrGetLucklyTurntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 enterTm = 2;
    if (has_entertm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entertm());
    }

  }
  // repeated int32 reawIDList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reawidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reawidlist(i));
    }
    total_size += 1 * this->reawidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRefulshOrGetLucklyTurntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRefulshOrGetLucklyTurntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRefulshOrGetLucklyTurntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRefulshOrGetLucklyTurntable::MergeFrom(const AckRefulshOrGetLucklyTurntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  reawidlist_.MergeFrom(from.reawidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_entertm()) {
      set_entertm(from.entertm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRefulshOrGetLucklyTurntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRefulshOrGetLucklyTurntable::CopyFrom(const AckRefulshOrGetLucklyTurntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRefulshOrGetLucklyTurntable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckRefulshOrGetLucklyTurntable::Swap(AckRefulshOrGetLucklyTurntable* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(entertm_, other->entertm_);
    reawidlist_.Swap(&other->reawidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRefulshOrGetLucklyTurntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRefulshOrGetLucklyTurntable_descriptor_;
  metadata.reflection = AckRefulshOrGetLucklyTurntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGetLucklyTurntable::kRetFieldNumber;
const int AckGetLucklyTurntable::kNotAddFieldNumber;
#endif  // !_MSC_VER

AckGetLucklyTurntable::AckGetLucklyTurntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGetLucklyTurntable::InitAsDefaultInstance() {
}

AckGetLucklyTurntable::AckGetLucklyTurntable(const AckGetLucklyTurntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGetLucklyTurntable::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  notadd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetLucklyTurntable::~AckGetLucklyTurntable() {
  SharedDtor();
}

void AckGetLucklyTurntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetLucklyTurntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetLucklyTurntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetLucklyTurntable_descriptor_;
}

const AckGetLucklyTurntable& AckGetLucklyTurntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  return *default_instance_;
}

AckGetLucklyTurntable* AckGetLucklyTurntable::default_instance_ = NULL;

AckGetLucklyTurntable* AckGetLucklyTurntable::New() const {
  return new AckGetLucklyTurntable;
}

void AckGetLucklyTurntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    notadd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGetLucklyTurntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notAdd;
        break;
      }

      // optional int32 notAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notadd_)));
          set_has_notadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGetLucklyTurntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 notAdd = 2;
  if (has_notadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->notadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGetLucklyTurntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 notAdd = 2;
  if (has_notadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->notadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGetLucklyTurntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 notAdd = 2;
    if (has_notadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notadd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetLucklyTurntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGetLucklyTurntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGetLucklyTurntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGetLucklyTurntable::MergeFrom(const AckGetLucklyTurntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_notadd()) {
      set_notadd(from.notadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGetLucklyTurntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetLucklyTurntable::CopyFrom(const AckGetLucklyTurntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetLucklyTurntable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGetLucklyTurntable::Swap(AckGetLucklyTurntable* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(notadd_, other->notadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGetLucklyTurntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetLucklyTurntable_descriptor_;
  metadata.reflection = AckGetLucklyTurntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientRollLucklyTurntable::kNumFieldNumber;
#endif  // !_MSC_VER

ClientRollLucklyTurntable::ClientRollLucklyTurntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRollLucklyTurntable::InitAsDefaultInstance() {
}

ClientRollLucklyTurntable::ClientRollLucklyTurntable(const ClientRollLucklyTurntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRollLucklyTurntable::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRollLucklyTurntable::~ClientRollLucklyTurntable() {
  SharedDtor();
}

void ClientRollLucklyTurntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRollLucklyTurntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRollLucklyTurntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRollLucklyTurntable_descriptor_;
}

const ClientRollLucklyTurntable& ClientRollLucklyTurntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  return *default_instance_;
}

ClientRollLucklyTurntable* ClientRollLucklyTurntable::default_instance_ = NULL;

ClientRollLucklyTurntable* ClientRollLucklyTurntable::New() const {
  return new ClientRollLucklyTurntable;
}

void ClientRollLucklyTurntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRollLucklyTurntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientRollLucklyTurntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRollLucklyTurntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRollLucklyTurntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRollLucklyTurntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRollLucklyTurntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRollLucklyTurntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRollLucklyTurntable::MergeFrom(const ClientRollLucklyTurntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRollLucklyTurntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRollLucklyTurntable::CopyFrom(const ClientRollLucklyTurntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRollLucklyTurntable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientRollLucklyTurntable::Swap(ClientRollLucklyTurntable* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRollLucklyTurntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRollLucklyTurntable_descriptor_;
  metadata.reflection = ClientRollLucklyTurntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRollLucklyTurntable::kRetFieldNumber;
const int AckRollLucklyTurntable::kItemIDFieldNumber;
const int AckRollLucklyTurntable::kNumFieldNumber;
#endif  // !_MSC_VER

AckRollLucklyTurntable::AckRollLucklyTurntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRollLucklyTurntable::InitAsDefaultInstance() {
}

AckRollLucklyTurntable::AckRollLucklyTurntable(const AckRollLucklyTurntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRollLucklyTurntable::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRollLucklyTurntable::~AckRollLucklyTurntable() {
  SharedDtor();
}

void AckRollLucklyTurntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRollLucklyTurntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRollLucklyTurntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRollLucklyTurntable_descriptor_;
}

const AckRollLucklyTurntable& AckRollLucklyTurntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  return *default_instance_;
}

AckRollLucklyTurntable* AckRollLucklyTurntable::default_instance_ = NULL;

AckRollLucklyTurntable* AckRollLucklyTurntable::New() const {
  return new AckRollLucklyTurntable;
}

void AckRollLucklyTurntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  itemid_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRollLucklyTurntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // repeated int32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // repeated int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRollLucklyTurntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated int32 itemID = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // repeated int32 num = 3;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRollLucklyTurntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated int32 itemID = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // repeated int32 num = 3;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRollLucklyTurntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 itemID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 num = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRollLucklyTurntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRollLucklyTurntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRollLucklyTurntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRollLucklyTurntable::MergeFrom(const AckRollLucklyTurntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  num_.MergeFrom(from.num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRollLucklyTurntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRollLucklyTurntable::CopyFrom(const AckRollLucklyTurntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRollLucklyTurntable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckRollLucklyTurntable::Swap(AckRollLucklyTurntable* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    itemid_.Swap(&other->itemid_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRollLucklyTurntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRollLucklyTurntable_descriptor_;
  metadata.reflection = AckRollLucklyTurntable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LucklyTurntable

// @@protoc_insertion_point(global_scope)
