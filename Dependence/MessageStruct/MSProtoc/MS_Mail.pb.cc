// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/MS_Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MS_MailInfo {

namespace {

const ::google::protobuf::Descriptor* SpecialItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialMailItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialMailItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSSimDBSendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSSimDBSendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSReqMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSReqMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSRetMailList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSRetMailList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSReqMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSReqMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSRetMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSRetMailInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fMS_5fMail_2eproto() {
  protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/MS_Mail.proto");
  GOOGLE_CHECK(file != NULL);
  SpecialItem_descriptor_ = file->message_type(0);
  static const int SpecialItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, num_),
  };
  SpecialItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialItem_descriptor_,
      SpecialItem::default_instance_,
      SpecialItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialItem));
  SpecialMailItemList_descriptor_ = file->message_type(1);
  static const int SpecialMailItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMailItemList, itemlist_),
  };
  SpecialMailItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialMailItemList_descriptor_,
      SpecialMailItemList::default_instance_,
      SpecialMailItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMailItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMailItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialMailItemList));
  ClientItemInfo_descriptor_ = file->message_type(2);
  static const int ClientItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, newattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, inlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, refineattrlv_),
  };
  ClientItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientItemInfo_descriptor_,
      ClientItemInfo::default_instance_,
      ClientItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientItemInfo));
  MSSimDBSendMail_descriptor_ = file->message_type(3);
  static const int MSSimDBSendMail_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, endname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, substance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, endcharidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, openidlist_),
  };
  MSSimDBSendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSSimDBSendMail_descriptor_,
      MSSimDBSendMail::default_instance_,
      MSSimDBSendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSSimDBSendMail));
  MailBaseInfo_descriptor_ = file->message_type(4);
  static const int MailBaseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBaseInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBaseInfo, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBaseInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBaseInfo, opened_),
  };
  MailBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailBaseInfo_descriptor_,
      MailBaseInfo::default_instance_,
      MailBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailBaseInfo));
  MSReqMailList_descriptor_ = file->message_type(5);
  static const int MSReqMailList_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, endtime_),
  };
  MSReqMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSReqMailList_descriptor_,
      MSReqMailList::default_instance_,
      MSReqMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSReqMailList));
  MSRetMailList_descriptor_ = file->message_type(6);
  static const int MSRetMailList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailList, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailList, maillist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailList, count_),
  };
  MSRetMailList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSRetMailList_descriptor_,
      MSRetMailList::default_instance_,
      MSRetMailList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSRetMailList));
  MSReqMailInfo_descriptor_ = file->message_type(7);
  static const int MSReqMailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailInfo, type_),
  };
  MSReqMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSReqMailInfo_descriptor_,
      MSReqMailInfo::default_instance_,
      MSReqMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSReqMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSReqMailInfo));
  MSRetMailInfo_descriptor_ = file->message_type(8);
  static const int MSRetMailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailInfo, mail_),
  };
  MSRetMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSRetMailInfo_descriptor_,
      MSRetMailInfo::default_instance_,
      MSRetMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSRetMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSRetMailInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fMS_5fMail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialItem_descriptor_, &SpecialItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialMailItemList_descriptor_, &SpecialMailItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientItemInfo_descriptor_, &ClientItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSSimDBSendMail_descriptor_, &MSSimDBSendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailBaseInfo_descriptor_, &MailBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSReqMailList_descriptor_, &MSReqMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSRetMailList_descriptor_, &MSRetMailList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSReqMailInfo_descriptor_, &MSReqMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSRetMailInfo_descriptor_, &MSRetMailInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fMS_5fMail_2eproto() {
  delete SpecialItem::default_instance_;
  delete SpecialItem_reflection_;
  delete SpecialMailItemList::default_instance_;
  delete SpecialMailItemList_reflection_;
  delete ClientItemInfo::default_instance_;
  delete ClientItemInfo_reflection_;
  delete MSSimDBSendMail::default_instance_;
  delete MSSimDBSendMail_reflection_;
  delete MailBaseInfo::default_instance_;
  delete MailBaseInfo_reflection_;
  delete MSReqMailList::default_instance_;
  delete MSReqMailList_reflection_;
  delete MSRetMailList::default_instance_;
  delete MSRetMailList_reflection_;
  delete MSReqMailInfo::default_instance_;
  delete MSReqMailInfo_reflection_;
  delete MSRetMailInfo::default_instance_;
  delete MSRetMailInfo_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MSProtoc/MS_Mail.proto\022\013MS_MailInfo\"*\n"
    "\013SpecialItem\022\016\n\006itemID\030\001 \002(\005\022\013\n\003num\030\002 \002("
    "\005\"A\n\023SpecialMailItemList\022*\n\010itemList\030\001 \003"
    "(\0132\030.MS_MailInfo.SpecialItem\"\217\001\n\016ClientI"
    "temInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004flag\030\002 \001(\005\022\017\n\007new"
    "attr\030\003 \003(\005\022\017\n\007stoneid\030\004 \003(\005\022\014\n\004time\030\005 \001("
    "\005\022\013\n\003num\030\006 \001(\005\022\020\n\010inlayPos\030\007 \003(\005\022\024\n\014refi"
    "neAttrLv\030\010 \003(\005\"\357\001\n\017MSSimDBSendMail\022\020\n\010se"
    "ndname\030\001 \002(\t\022\017\n\007endname\030\002 \003(\t\022\r\n\005theme\030\003"
    " \001(\t\022\021\n\tsubstance\030\004 \001(\t\022*\n\005goods\030\005 \003(\0132\033"
    ".MS_MailInfo.ClientItemInfo\0222\n\010itemList\030"
    "\006 \001(\0132 .MS_MailInfo.SpecialMailItemList\022"
    "\014\n\004type\030\007 \002(\005\022\025\n\rendCharIDList\030\010 \003(\003\022\022\n\n"
    "openIDList\030\t \003(\t\"O\n\014MailBaseInfo\022\016\n\006mail"
    "ID\030\001 \002(\003\022\r\n\005theme\030\002 \001(\t\022\020\n\010sendTime\030\003 \001("
    "\003\022\016\n\006opened\030\004 \001(\005\"m\n\rMSReqMailList\022\016\n\006ch"
    "arID\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\r\n\005begin\030\003 \002(\005\022"
    "\013\n\003end\030\004 \002(\005\022\021\n\tbeginTime\030\005 \002(\003\022\017\n\007endTi"
    "me\030\006 \002(\003\"X\n\rMSRetMailList\022\013\n\003ret\030\001 \002(\005\022+"
    "\n\010mailList\030\002 \003(\0132\031.MS_MailInfo.MailBaseI"
    "nfo\022\r\n\005count\030\003 \001(\005\"-\n\rMSReqMailInfo\022\016\n\006m"
    "ailID\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\"H\n\rMSRetMailIn"
    "fo\022\013\n\003ret\030\001 \002(\005\022*\n\004mail\030\002 \001(\0132\034.MS_MailI"
    "nfo.MSSimDBSendMail", 939);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/MS_Mail.proto", &protobuf_RegisterTypes);
  SpecialItem::default_instance_ = new SpecialItem();
  SpecialMailItemList::default_instance_ = new SpecialMailItemList();
  ClientItemInfo::default_instance_ = new ClientItemInfo();
  MSSimDBSendMail::default_instance_ = new MSSimDBSendMail();
  MailBaseInfo::default_instance_ = new MailBaseInfo();
  MSReqMailList::default_instance_ = new MSReqMailList();
  MSRetMailList::default_instance_ = new MSRetMailList();
  MSReqMailInfo::default_instance_ = new MSReqMailInfo();
  MSRetMailInfo::default_instance_ = new MSRetMailInfo();
  SpecialItem::default_instance_->InitAsDefaultInstance();
  SpecialMailItemList::default_instance_->InitAsDefaultInstance();
  ClientItemInfo::default_instance_->InitAsDefaultInstance();
  MSSimDBSendMail::default_instance_->InitAsDefaultInstance();
  MailBaseInfo::default_instance_->InitAsDefaultInstance();
  MSReqMailList::default_instance_->InitAsDefaultInstance();
  MSRetMailList::default_instance_->InitAsDefaultInstance();
  MSReqMailInfo::default_instance_->InitAsDefaultInstance();
  MSRetMailInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fMS_5fMail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fMS_5fMail_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fMS_5fMail_2eproto() {
    protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fMS_5fMail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpecialItem::kItemIDFieldNumber;
const int SpecialItem::kNumFieldNumber;
#endif  // !_MSC_VER

SpecialItem::SpecialItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialItem::InitAsDefaultInstance() {
}

SpecialItem::SpecialItem(const SpecialItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialItem::~SpecialItem() {
  SharedDtor();
}

void SpecialItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialItem_descriptor_;
}

const SpecialItem& SpecialItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

SpecialItem* SpecialItem::default_instance_ = NULL;

SpecialItem* SpecialItem::New() const {
  return new SpecialItem;
}

void SpecialItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialItem::MergeFrom(const SpecialItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialItem::CopyFrom(const SpecialItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpecialItem::Swap(SpecialItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialItem_descriptor_;
  metadata.reflection = SpecialItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialMailItemList::kItemListFieldNumber;
#endif  // !_MSC_VER

SpecialMailItemList::SpecialMailItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialMailItemList::InitAsDefaultInstance() {
}

SpecialMailItemList::SpecialMailItemList(const SpecialMailItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialMailItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialMailItemList::~SpecialMailItemList() {
  SharedDtor();
}

void SpecialMailItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialMailItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialMailItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialMailItemList_descriptor_;
}

const SpecialMailItemList& SpecialMailItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

SpecialMailItemList* SpecialMailItemList::default_instance_ = NULL;

SpecialMailItemList* SpecialMailItemList::New() const {
  return new SpecialMailItemList;
}

void SpecialMailItemList::Clear() {
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialMailItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MS_MailInfo.SpecialItem itemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialMailItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MS_MailInfo.SpecialItem itemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialMailItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MS_MailInfo.SpecialItem itemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialMailItemList::ByteSize() const {
  int total_size = 0;

  // repeated .MS_MailInfo.SpecialItem itemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialMailItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialMailItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialMailItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialMailItemList::MergeFrom(const SpecialMailItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialMailItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialMailItemList::CopyFrom(const SpecialMailItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialMailItemList::IsInitialized() const {

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void SpecialMailItemList::Swap(SpecialMailItemList* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialMailItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialMailItemList_descriptor_;
  metadata.reflection = SpecialMailItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientItemInfo::kIdFieldNumber;
const int ClientItemInfo::kFlagFieldNumber;
const int ClientItemInfo::kNewattrFieldNumber;
const int ClientItemInfo::kStoneidFieldNumber;
const int ClientItemInfo::kTimeFieldNumber;
const int ClientItemInfo::kNumFieldNumber;
const int ClientItemInfo::kInlayPosFieldNumber;
const int ClientItemInfo::kRefineAttrLvFieldNumber;
#endif  // !_MSC_VER

ClientItemInfo::ClientItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientItemInfo::InitAsDefaultInstance() {
}

ClientItemInfo::ClientItemInfo(const ClientItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  flag_ = 0;
  time_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientItemInfo::~ClientItemInfo() {
  SharedDtor();
}

void ClientItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientItemInfo_descriptor_;
}

const ClientItemInfo& ClientItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

ClientItemInfo* ClientItemInfo::default_instance_ = NULL;

ClientItemInfo* ClientItemInfo::New() const {
  return new ClientItemInfo;
}

void ClientItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    flag_ = 0;
    time_ = 0;
    num_ = 0;
  }
  newattr_.Clear();
  stoneid_.Clear();
  inlaypos_.Clear();
  refineattrlv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        break;
      }

      // repeated int32 newattr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_newattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_newattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        if (input->ExpectTag(32)) goto parse_stoneid;
        break;
      }

      // repeated int32 stoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stoneid;
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        break;
      }

      // repeated int32 inlayPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_inlaypos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inlaypos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        break;
      }

      // repeated int32 refineAttrLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttrLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_refineattrlv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_refineattrlv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // repeated int32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->newattr(i), output);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stoneid(i), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->inlaypos(i), output);
  }

  // repeated int32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->refineattrlv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // repeated int32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->newattr(i), target);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stoneid(i), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->inlaypos(i), target);
  }

  // repeated int32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->refineattrlv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated int32 newattr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->newattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->newattr(i));
    }
    total_size += 1 * this->newattr_size() + data_size;
  }

  // repeated int32 stoneid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stoneid(i));
    }
    total_size += 1 * this->stoneid_size() + data_size;
  }

  // repeated int32 inlayPos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlaypos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inlaypos(i));
    }
    total_size += 1 * this->inlaypos_size() + data_size;
  }

  // repeated int32 refineAttrLv = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->refineattrlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->refineattrlv(i));
    }
    total_size += 1 * this->refineattrlv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientItemInfo::MergeFrom(const ClientItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newattr_.MergeFrom(from.newattr_);
  stoneid_.MergeFrom(from.stoneid_);
  inlaypos_.MergeFrom(from.inlaypos_);
  refineattrlv_.MergeFrom(from.refineattrlv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientItemInfo::CopyFrom(const ClientItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientItemInfo::Swap(ClientItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    newattr_.Swap(&other->newattr_);
    stoneid_.Swap(&other->stoneid_);
    std::swap(time_, other->time_);
    std::swap(num_, other->num_);
    inlaypos_.Swap(&other->inlaypos_);
    refineattrlv_.Swap(&other->refineattrlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientItemInfo_descriptor_;
  metadata.reflection = ClientItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSSimDBSendMail::kSendnameFieldNumber;
const int MSSimDBSendMail::kEndnameFieldNumber;
const int MSSimDBSendMail::kThemeFieldNumber;
const int MSSimDBSendMail::kSubstanceFieldNumber;
const int MSSimDBSendMail::kGoodsFieldNumber;
const int MSSimDBSendMail::kItemListFieldNumber;
const int MSSimDBSendMail::kTypeFieldNumber;
const int MSSimDBSendMail::kEndCharIDListFieldNumber;
const int MSSimDBSendMail::kOpenIDListFieldNumber;
#endif  // !_MSC_VER

MSSimDBSendMail::MSSimDBSendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSSimDBSendMail::InitAsDefaultInstance() {
  itemlist_ = const_cast< ::MS_MailInfo::SpecialMailItemList*>(&::MS_MailInfo::SpecialMailItemList::default_instance());
}

MSSimDBSendMail::MSSimDBSendMail(const MSSimDBSendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSSimDBSendMail::SharedCtor() {
  _cached_size_ = 0;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemlist_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSSimDBSendMail::~MSSimDBSendMail() {
  SharedDtor();
}

void MSSimDBSendMail::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (this != default_instance_) {
    delete itemlist_;
  }
}

void MSSimDBSendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSSimDBSendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSSimDBSendMail_descriptor_;
}

const MSSimDBSendMail& MSSimDBSendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

MSSimDBSendMail* MSSimDBSendMail::default_instance_ = NULL;

MSSimDBSendMail* MSSimDBSendMail::New() const {
  return new MSSimDBSendMail;
}

void MSSimDBSendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    if (has_substance()) {
      if (substance_ != &::google::protobuf::internal::kEmptyString) {
        substance_->clear();
      }
    }
    if (has_itemlist()) {
      if (itemlist_ != NULL) itemlist_->::MS_MailInfo::SpecialMailItemList::Clear();
    }
    type_ = 0;
  }
  endname_.Clear();
  goods_.Clear();
  endcharidlist_.Clear();
  openidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSSimDBSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sendname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endname;
        break;
      }

      // repeated string endname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_endname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endname(this->endname_size() - 1).data(),
            this->endname(this->endname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endname;
        if (input->ExpectTag(26)) goto parse_theme;
        break;
      }

      // optional string theme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_substance;
        break;
      }

      // optional string substance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_substance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->substance().data(), this->substance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_goods;
        break;
      }

      // repeated .MS_MailInfo.ClientItemInfo goods = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_goods;
        if (input->ExpectTag(50)) goto parse_itemList;
        break;
      }

      // optional .MS_MailInfo.SpecialMailItemList itemList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // required int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_endCharIDList;
        break;
      }

      // repeated int64 endCharIDList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endCharIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 64, input, this->mutable_endcharidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_endcharidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_endCharIDList;
        if (input->ExpectTag(74)) goto parse_openIDList;
        break;
      }

      // repeated string openIDList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openIDList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_openidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openidlist(this->openidlist_size() - 1).data(),
            this->openidlist(this->openidlist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_openIDList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSSimDBSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sendname = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendname(), output);
  }

  // repeated string endname = 2;
  for (int i = 0; i < this->endname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->endname(i).data(), this->endname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->endname(i), output);
  }

  // optional string theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->theme(), output);
  }

  // optional string substance = 4;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->substance(), output);
  }

  // repeated .MS_MailInfo.ClientItemInfo goods = 5;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->goods(i), output);
  }

  // optional .MS_MailInfo.SpecialMailItemList itemList = 6;
  if (has_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemlist(), output);
  }

  // required int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // repeated int64 endCharIDList = 8;
  for (int i = 0; i < this->endcharidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      8, this->endcharidlist(i), output);
  }

  // repeated string openIDList = 9;
  for (int i = 0; i < this->openidlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->openidlist(i).data(), this->openidlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->openidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSSimDBSendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sendname = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendname(), target);
  }

  // repeated string endname = 2;
  for (int i = 0; i < this->endname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endname(i).data(), this->endname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->endname(i), target);
  }

  // optional string theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->theme(), target);
  }

  // optional string substance = 4;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->substance(), target);
  }

  // repeated .MS_MailInfo.ClientItemInfo goods = 5;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->goods(i), target);
  }

  // optional .MS_MailInfo.SpecialMailItemList itemList = 6;
  if (has_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemlist(), target);
  }

  // required int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // repeated int64 endCharIDList = 8;
  for (int i = 0; i < this->endcharidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(8, this->endcharidlist(i), target);
  }

  // repeated string openIDList = 9;
  for (int i = 0; i < this->openidlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openidlist(i).data(), this->openidlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->openidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSSimDBSendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sendname = 1;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // optional string theme = 3;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // optional string substance = 4;
    if (has_substance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->substance());
    }

    // optional .MS_MailInfo.SpecialMailItemList itemList = 6;
    if (has_itemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist());
    }

    // required int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated string endname = 2;
  total_size += 1 * this->endname_size();
  for (int i = 0; i < this->endname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->endname(i));
  }

  // repeated .MS_MailInfo.ClientItemInfo goods = 5;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  // repeated int64 endCharIDList = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->endcharidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->endcharidlist(i));
    }
    total_size += 1 * this->endcharidlist_size() + data_size;
  }

  // repeated string openIDList = 9;
  total_size += 1 * this->openidlist_size();
  for (int i = 0; i < this->openidlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->openidlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSSimDBSendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSSimDBSendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSSimDBSendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSSimDBSendMail::MergeFrom(const MSSimDBSendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  endname_.MergeFrom(from.endname_);
  goods_.MergeFrom(from.goods_);
  endcharidlist_.MergeFrom(from.endcharidlist_);
  openidlist_.MergeFrom(from.openidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_substance()) {
      set_substance(from.substance());
    }
    if (from.has_itemlist()) {
      mutable_itemlist()->::MS_MailInfo::SpecialMailItemList::MergeFrom(from.itemlist());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSSimDBSendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSSimDBSendMail::CopyFrom(const MSSimDBSendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSSimDBSendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  for (int i = 0; i < goods_size(); i++) {
    if (!this->goods(i).IsInitialized()) return false;
  }
  if (has_itemlist()) {
    if (!this->itemlist().IsInitialized()) return false;
  }
  return true;
}

void MSSimDBSendMail::Swap(MSSimDBSendMail* other) {
  if (other != this) {
    std::swap(sendname_, other->sendname_);
    endname_.Swap(&other->endname_);
    std::swap(theme_, other->theme_);
    std::swap(substance_, other->substance_);
    goods_.Swap(&other->goods_);
    std::swap(itemlist_, other->itemlist_);
    std::swap(type_, other->type_);
    endcharidlist_.Swap(&other->endcharidlist_);
    openidlist_.Swap(&other->openidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSSimDBSendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSSimDBSendMail_descriptor_;
  metadata.reflection = MSSimDBSendMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailBaseInfo::kMailIDFieldNumber;
const int MailBaseInfo::kThemeFieldNumber;
const int MailBaseInfo::kSendTimeFieldNumber;
const int MailBaseInfo::kOpenedFieldNumber;
#endif  // !_MSC_VER

MailBaseInfo::MailBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailBaseInfo::InitAsDefaultInstance() {
}

MailBaseInfo::MailBaseInfo(const MailBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = GOOGLE_LONGLONG(0);
  opened_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailBaseInfo::~MailBaseInfo() {
  SharedDtor();
}

void MailBaseInfo::SharedDtor() {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (this != default_instance_) {
  }
}

void MailBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailBaseInfo_descriptor_;
}

const MailBaseInfo& MailBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

MailBaseInfo* MailBaseInfo::default_instance_ = NULL;

MailBaseInfo* MailBaseInfo::New() const {
  return new MailBaseInfo;
}

void MailBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    sendtime_ = GOOGLE_LONGLONG(0);
    opened_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_theme;
        break;
      }

      // optional string theme = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendTime;
        break;
      }

      // optional int64 sendTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opened;
        break;
      }

      // optional int32 opened = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opened_)));
          set_has_opened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // optional string theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->theme(), output);
  }

  // optional int64 sendTime = 3;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sendtime(), output);
  }

  // optional int32 opened = 4;
  if (has_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opened(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // optional string theme = 2;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->theme(), target);
  }

  // optional int64 sendTime = 3;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sendtime(), target);
  }

  // optional int32 opened = 4;
  if (has_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->opened(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // optional string theme = 2;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // optional int64 sendTime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sendtime());
    }

    // optional int32 opened = 4;
    if (has_opened()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opened());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailBaseInfo::MergeFrom(const MailBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_opened()) {
      set_opened(from.opened());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailBaseInfo::CopyFrom(const MailBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MailBaseInfo::Swap(MailBaseInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(theme_, other->theme_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(opened_, other->opened_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailBaseInfo_descriptor_;
  metadata.reflection = MailBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSReqMailList::kCharIDFieldNumber;
const int MSReqMailList::kTypeFieldNumber;
const int MSReqMailList::kBeginFieldNumber;
const int MSReqMailList::kEndFieldNumber;
const int MSReqMailList::kBeginTimeFieldNumber;
const int MSReqMailList::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MSReqMailList::MSReqMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSReqMailList::InitAsDefaultInstance() {
}

MSReqMailList::MSReqMailList(const MSReqMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSReqMailList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  begin_ = 0;
  end_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSReqMailList::~MSReqMailList() {
  SharedDtor();
}

void MSReqMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSReqMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSReqMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSReqMailList_descriptor_;
}

const MSReqMailList& MSReqMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

MSReqMailList* MSReqMailList::default_instance_ = NULL;

MSReqMailList* MSReqMailList::New() const {
  return new MSReqMailList;
}

void MSReqMailList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    begin_ = 0;
    end_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSReqMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin;
        break;
      }

      // required int32 begin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }

      // required int32 end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_beginTime;
        break;
      }

      // required int64 beginTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_endTime;
        break;
      }

      // required int64 endTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSReqMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 begin = 3;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->begin(), output);
  }

  // required int32 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end(), output);
  }

  // required int64 beginTime = 5;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->begintime(), output);
  }

  // required int64 endTime = 6;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSReqMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 begin = 3;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->begin(), target);
  }

  // required int32 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end(), target);
  }

  // required int64 beginTime = 5;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->begintime(), target);
  }

  // required int64 endTime = 6;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSReqMailList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 begin = 3;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // required int64 beginTime = 5;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // required int64 endTime = 6;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSReqMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSReqMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSReqMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSReqMailList::MergeFrom(const MSReqMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSReqMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSReqMailList::CopyFrom(const MSReqMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSReqMailList::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MSReqMailList::Swap(MSReqMailList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSReqMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSReqMailList_descriptor_;
  metadata.reflection = MSReqMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSRetMailList::kRetFieldNumber;
const int MSRetMailList::kMailListFieldNumber;
const int MSRetMailList::kCountFieldNumber;
#endif  // !_MSC_VER

MSRetMailList::MSRetMailList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSRetMailList::InitAsDefaultInstance() {
}

MSRetMailList::MSRetMailList(const MSRetMailList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSRetMailList::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSRetMailList::~MSRetMailList() {
  SharedDtor();
}

void MSRetMailList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSRetMailList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSRetMailList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSRetMailList_descriptor_;
}

const MSRetMailList& MSRetMailList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

MSRetMailList* MSRetMailList::default_instance_ = NULL;

MSRetMailList* MSRetMailList::New() const {
  return new MSRetMailList;
}

void MSRetMailList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    count_ = 0;
  }
  maillist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSRetMailList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mailList;
        break;
      }

      // repeated .MS_MailInfo.MailBaseInfo mailList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mailList;
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSRetMailList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .MS_MailInfo.MailBaseInfo mailList = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->maillist(i), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSRetMailList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .MS_MailInfo.MailBaseInfo mailList = 2;
  for (int i = 0; i < this->maillist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->maillist(i), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSRetMailList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .MS_MailInfo.MailBaseInfo mailList = 2;
  total_size += 1 * this->maillist_size();
  for (int i = 0; i < this->maillist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSRetMailList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSRetMailList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSRetMailList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSRetMailList::MergeFrom(const MSRetMailList& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillist_.MergeFrom(from.maillist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSRetMailList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSRetMailList::CopyFrom(const MSRetMailList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSRetMailList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < maillist_size(); i++) {
    if (!this->maillist(i).IsInitialized()) return false;
  }
  return true;
}

void MSRetMailList::Swap(MSRetMailList* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    maillist_.Swap(&other->maillist_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSRetMailList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSRetMailList_descriptor_;
  metadata.reflection = MSRetMailList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSReqMailInfo::kMailIDFieldNumber;
const int MSReqMailInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

MSReqMailInfo::MSReqMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSReqMailInfo::InitAsDefaultInstance() {
}

MSReqMailInfo::MSReqMailInfo(const MSReqMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSReqMailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSReqMailInfo::~MSReqMailInfo() {
  SharedDtor();
}

void MSReqMailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MSReqMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSReqMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSReqMailInfo_descriptor_;
}

const MSReqMailInfo& MSReqMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

MSReqMailInfo* MSReqMailInfo::default_instance_ = NULL;

MSReqMailInfo* MSReqMailInfo::New() const {
  return new MSReqMailInfo;
}

void MSReqMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSReqMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSReqMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSReqMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mailID = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSReqMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSReqMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSReqMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSReqMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSReqMailInfo::MergeFrom(const MSReqMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSReqMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSReqMailInfo::CopyFrom(const MSReqMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSReqMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MSReqMailInfo::Swap(MSReqMailInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSReqMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSReqMailInfo_descriptor_;
  metadata.reflection = MSReqMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSRetMailInfo::kRetFieldNumber;
const int MSRetMailInfo::kMailFieldNumber;
#endif  // !_MSC_VER

MSRetMailInfo::MSRetMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSRetMailInfo::InitAsDefaultInstance() {
  mail_ = const_cast< ::MS_MailInfo::MSSimDBSendMail*>(&::MS_MailInfo::MSSimDBSendMail::default_instance());
}

MSRetMailInfo::MSRetMailInfo(const MSRetMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSRetMailInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSRetMailInfo::~MSRetMailInfo() {
  SharedDtor();
}

void MSRetMailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mail_;
  }
}

void MSRetMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSRetMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSRetMailInfo_descriptor_;
}

const MSRetMailInfo& MSRetMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  return *default_instance_;
}

MSRetMailInfo* MSRetMailInfo::default_instance_ = NULL;

MSRetMailInfo* MSRetMailInfo::New() const {
  return new MSRetMailInfo;
}

void MSRetMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_mail()) {
      if (mail_ != NULL) mail_->::MS_MailInfo::MSSimDBSendMail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSRetMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mail;
        break;
      }

      // optional .MS_MailInfo.MSSimDBSendMail mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSRetMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .MS_MailInfo.MSSimDBSendMail mail = 2;
  if (has_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSRetMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .MS_MailInfo.MSSimDBSendMail mail = 2;
  if (has_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSRetMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .MS_MailInfo.MSSimDBSendMail mail = 2;
    if (has_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSRetMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSRetMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSRetMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSRetMailInfo::MergeFrom(const MSRetMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mail()) {
      mutable_mail()->::MS_MailInfo::MSSimDBSendMail::MergeFrom(from.mail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSRetMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSRetMailInfo::CopyFrom(const MSRetMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSRetMailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mail()) {
    if (!this->mail().IsInitialized()) return false;
  }
  return true;
}

void MSRetMailInfo::Swap(MSRetMailInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mail_, other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSRetMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSRetMailInfo_descriptor_;
  metadata.reflection = MSRetMailInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_MailInfo

// @@protoc_insertion_point(global_scope)
