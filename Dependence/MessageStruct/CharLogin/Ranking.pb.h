// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Ranking.proto

#ifndef PROTOBUF_CharLogin_2fRanking_2eproto__INCLUDED
#define PROTOBUF_CharLogin_2fRanking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RankingInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

class ReqRankingInfo;
class ReqMeRankingInfo;
class RankingInfo;
class RankingItem;
class MeRankingInfo;
class GTtoWSRankingInfo;
class GTtoWSMeRankingInfo;
class SRankingInfo;
class SRankingItem;
class SmallRankingItem;

// ===================================================================

class ReqRankingInfo : public ::google::protobuf::Message {
 public:
  ReqRankingInfo();
  virtual ~ReqRankingInfo();

  ReqRankingInfo(const ReqRankingInfo& from);

  inline ReqRankingInfo& operator=(const ReqRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRankingInfo& default_instance();

  void Swap(ReqRankingInfo* other);

  // implements Message ----------------------------------------------

  ReqRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRankingInfo& from);
  void MergeFrom(const ReqRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.ReqRankingInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static ReqRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqMeRankingInfo : public ::google::protobuf::Message {
 public:
  ReqMeRankingInfo();
  virtual ~ReqMeRankingInfo();

  ReqMeRankingInfo(const ReqMeRankingInfo& from);

  inline ReqMeRankingInfo& operator=(const ReqMeRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMeRankingInfo& default_instance();

  void Swap(ReqMeRankingInfo* other);

  // implements Message ----------------------------------------------

  ReqMeRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMeRankingInfo& from);
  void MergeFrom(const ReqMeRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.ReqMeRankingInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static ReqMeRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankingInfo : public ::google::protobuf::Message {
 public:
  RankingInfo();
  virtual ~RankingInfo();

  RankingInfo(const RankingInfo& from);

  inline RankingInfo& operator=(const RankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingInfo& default_instance();

  void Swap(RankingInfo* other);

  // implements Message ----------------------------------------------

  RankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankingInfo& from);
  void MergeFrom(const RankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 indexCount = 1;
  inline bool has_indexcount() const;
  inline void clear_indexcount();
  static const int kIndexCountFieldNumber = 1;
  inline ::google::protobuf::int32 indexcount() const;
  inline void set_indexcount(::google::protobuf::int32 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .RankingInfo.RankingItem item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::RankingInfo::RankingItem& item(int index) const;
  inline ::RankingInfo::RankingItem* mutable_item(int index);
  inline ::RankingInfo::RankingItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::RankingInfo::RankingItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::RankingInfo::RankingItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:RankingInfo.RankingInfo)
 private:
  inline void set_has_indexcount();
  inline void clear_has_indexcount();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 indexcount_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::RepeatedPtrField< ::RankingInfo::RankingItem > item_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static RankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankingItem : public ::google::protobuf::Message {
 public:
  RankingItem();
  virtual ~RankingItem();

  RankingItem(const RankingItem& from);

  inline RankingItem& operator=(const RankingItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingItem& default_instance();

  void Swap(RankingItem* other);

  // implements Message ----------------------------------------------

  RankingItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankingItem& from);
  void MergeFrom(const RankingItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required int32 ProFlo = 5;
  inline bool has_proflo() const;
  inline void clear_proflo();
  static const int kProFloFieldNumber = 5;
  inline ::google::protobuf::int32 proflo() const;
  inline void set_proflo(::google::protobuf::int32 value);

  // required int32 country = 6;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 6;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // required int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 vip = 8;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 8;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // required int32 lv = 9;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 9;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 glory = 10;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 10;
  inline ::google::protobuf::int32 glory() const;
  inline void set_glory(::google::protobuf::int32 value);

  // optional string clanname = 11;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClannameFieldNumber = 11;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const char* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // @@protoc_insertion_point(class_scope:RankingInfo.RankingItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_proflo();
  inline void clear_has_proflo();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_glory();
  inline void clear_has_glory();
  inline void set_has_clanname();
  inline void clear_has_clanname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 proflo_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 glory_;
  ::std::string* clanname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static RankingItem* default_instance_;
};
// -------------------------------------------------------------------

class MeRankingInfo : public ::google::protobuf::Message {
 public:
  MeRankingInfo();
  virtual ~MeRankingInfo();

  MeRankingInfo(const MeRankingInfo& from);

  inline MeRankingInfo& operator=(const MeRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeRankingInfo& default_instance();

  void Swap(MeRankingInfo* other);

  // implements Message ----------------------------------------------

  MeRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeRankingInfo& from);
  void MergeFrom(const MeRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // required int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required int32 ProFlo = 4;
  inline bool has_proflo() const;
  inline void clear_proflo();
  static const int kProFloFieldNumber = 4;
  inline ::google::protobuf::int32 proflo() const;
  inline void set_proflo(::google::protobuf::int32 value);

  // optional int32 glory = 5;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 5;
  inline ::google::protobuf::int32 glory() const;
  inline void set_glory(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.MeRankingInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_proflo();
  inline void clear_has_proflo();
  inline void set_has_glory();
  inline void clear_has_glory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 proflo_;
  ::google::protobuf::int32 glory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static MeRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class GTtoWSRankingInfo : public ::google::protobuf::Message {
 public:
  GTtoWSRankingInfo();
  virtual ~GTtoWSRankingInfo();

  GTtoWSRankingInfo(const GTtoWSRankingInfo& from);

  inline GTtoWSRankingInfo& operator=(const GTtoWSRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GTtoWSRankingInfo& default_instance();

  void Swap(GTtoWSRankingInfo* other);

  // implements Message ----------------------------------------------

  GTtoWSRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GTtoWSRankingInfo& from);
  void MergeFrom(const GTtoWSRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.GTtoWSRankingInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static GTtoWSRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class GTtoWSMeRankingInfo : public ::google::protobuf::Message {
 public:
  GTtoWSMeRankingInfo();
  virtual ~GTtoWSMeRankingInfo();

  GTtoWSMeRankingInfo(const GTtoWSMeRankingInfo& from);

  inline GTtoWSMeRankingInfo& operator=(const GTtoWSMeRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GTtoWSMeRankingInfo& default_instance();

  void Swap(GTtoWSMeRankingInfo* other);

  // implements Message ----------------------------------------------

  GTtoWSMeRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GTtoWSMeRankingInfo& from);
  void MergeFrom(const GTtoWSMeRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.GTtoWSMeRankingInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static GTtoWSMeRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class SRankingInfo : public ::google::protobuf::Message {
 public:
  SRankingInfo();
  virtual ~SRankingInfo();

  SRankingInfo(const SRankingInfo& from);

  inline SRankingInfo& operator=(const SRankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRankingInfo& default_instance();

  void Swap(SRankingInfo* other);

  // implements Message ----------------------------------------------

  SRankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRankingInfo& from);
  void MergeFrom(const SRankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RankingInfo.SmallRankingItem Ranking = 1;
  inline int ranking_size() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 1;
  inline const ::RankingInfo::SmallRankingItem& ranking(int index) const;
  inline ::RankingInfo::SmallRankingItem* mutable_ranking(int index);
  inline ::RankingInfo::SmallRankingItem* add_ranking();
  inline const ::google::protobuf::RepeatedPtrField< ::RankingInfo::SmallRankingItem >&
      ranking() const;
  inline ::google::protobuf::RepeatedPtrField< ::RankingInfo::SmallRankingItem >*
      mutable_ranking();

  // @@protoc_insertion_point(class_scope:RankingInfo.SRankingInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::RankingInfo::SmallRankingItem > ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static SRankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class SRankingItem : public ::google::protobuf::Message {
 public:
  SRankingItem();
  virtual ~SRankingItem();

  SRankingItem(const SRankingItem& from);

  inline SRankingItem& operator=(const SRankingItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SRankingItem& default_instance();

  void Swap(SRankingItem* other);

  // implements Message ----------------------------------------------

  SRankingItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SRankingItem& from);
  void MergeFrom(const SRankingItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 Lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int64 Ex = 4;
  inline bool has_ex() const;
  inline void clear_ex();
  static const int kExFieldNumber = 4;
  inline ::google::protobuf::int64 ex() const;
  inline void set_ex(::google::protobuf::int64 value);

  // required int32 Profession = 5;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 5;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 CombatPower = 6;
  inline bool has_combatpower() const;
  inline void clear_combatpower();
  static const int kCombatPowerFieldNumber = 6;
  inline ::google::protobuf::int32 combatpower() const;
  inline void set_combatpower(::google::protobuf::int32 value);

  // required int32 Achievement = 7;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 7;
  inline ::google::protobuf::int32 achievement() const;
  inline void set_achievement(::google::protobuf::int32 value);

  // required int32 HoLv = 8;
  inline bool has_holv() const;
  inline void clear_holv();
  static const int kHoLvFieldNumber = 8;
  inline ::google::protobuf::int32 holv() const;
  inline void set_holv(::google::protobuf::int32 value);

  // required int64 HoEx = 9;
  inline bool has_hoex() const;
  inline void clear_hoex();
  static const int kHoExFieldNumber = 9;
  inline ::google::protobuf::int64 hoex() const;
  inline void set_hoex(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.SRankingItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_ex();
  inline void clear_has_ex();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_combatpower();
  inline void clear_has_combatpower();
  inline void set_has_achievement();
  inline void clear_has_achievement();
  inline void set_has_holv();
  inline void clear_has_holv();
  inline void set_has_hoex();
  inline void clear_has_hoex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int64 ex_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 combatpower_;
  ::google::protobuf::int32 achievement_;
  ::google::protobuf::int64 hoex_;
  ::google::protobuf::int32 holv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static SRankingItem* default_instance_;
};
// -------------------------------------------------------------------

class SmallRankingItem : public ::google::protobuf::Message {
 public:
  SmallRankingItem();
  virtual ~SmallRankingItem();

  SmallRankingItem(const SmallRankingItem& from);

  inline SmallRankingItem& operator=(const SmallRankingItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SmallRankingItem& default_instance();

  void Swap(SmallRankingItem* other);

  // implements Message ----------------------------------------------

  SmallRankingItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SmallRankingItem& from);
  void MergeFrom(const SmallRankingItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // required int32 ProFlo = 4;
  inline bool has_proflo() const;
  inline void clear_proflo();
  static const int kProFloFieldNumber = 4;
  inline ::google::protobuf::int32 proflo() const;
  inline void set_proflo(::google::protobuf::int32 value);

  // optional int32 glory = 5;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 5;
  inline ::google::protobuf::int32 glory() const;
  inline void set_glory(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RankingInfo.SmallRankingItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_proflo();
  inline void clear_has_proflo();
  inline void set_has_glory();
  inline void clear_has_glory();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 proflo_;
  ::google::protobuf::int32 glory_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fRanking_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fRanking_2eproto();

  void InitAsDefaultInstance();
  static SmallRankingItem* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqRankingInfo

// required int32 type = 1;
inline bool ReqRankingInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRankingInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRankingInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRankingInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqRankingInfo::type() const {
  return type_;
}
inline void ReqRankingInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 index = 2;
inline bool ReqRankingInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRankingInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRankingInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRankingInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ReqRankingInfo::index() const {
  return index_;
}
inline void ReqRankingInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// ReqMeRankingInfo

// required int32 type = 1;
inline bool ReqMeRankingInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMeRankingInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMeRankingInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMeRankingInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqMeRankingInfo::type() const {
  return type_;
}
inline void ReqMeRankingInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RankingInfo

// required int32 indexCount = 1;
inline bool RankingInfo::has_indexcount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingInfo::set_has_indexcount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingInfo::clear_has_indexcount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingInfo::clear_indexcount() {
  indexcount_ = 0;
  clear_has_indexcount();
}
inline ::google::protobuf::int32 RankingInfo::indexcount() const {
  return indexcount_;
}
inline void RankingInfo::set_indexcount(::google::protobuf::int32 value) {
  set_has_indexcount();
  indexcount_ = value;
}

// required int32 index = 2;
inline bool RankingInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RankingInfo::index() const {
  return index_;
}
inline void RankingInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required int32 type = 3;
inline bool RankingInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankingInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankingInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankingInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RankingInfo::type() const {
  return type_;
}
inline void RankingInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .RankingInfo.RankingItem item = 4;
inline int RankingInfo::item_size() const {
  return item_.size();
}
inline void RankingInfo::clear_item() {
  item_.Clear();
}
inline const ::RankingInfo::RankingItem& RankingInfo::item(int index) const {
  return item_.Get(index);
}
inline ::RankingInfo::RankingItem* RankingInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::RankingInfo::RankingItem* RankingInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RankingInfo::RankingItem >&
RankingInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::RankingInfo::RankingItem >*
RankingInfo::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// RankingItem

// required int64 charid = 1;
inline bool RankingItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingItem::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 RankingItem::charid() const {
  return charid_;
}
inline void RankingItem::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 num = 2;
inline bool RankingItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 RankingItem::num() const {
  return num_;
}
inline void RankingItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required string name = 3;
inline bool RankingItem::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankingItem::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankingItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankingItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankingItem::name() const {
  return *name_;
}
inline void RankingItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankingItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RankingItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankingItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RankingItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankingItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 value = 4;
inline bool RankingItem::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankingItem::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankingItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankingItem::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 RankingItem::value() const {
  return value_;
}
inline void RankingItem::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required int32 ProFlo = 5;
inline bool RankingItem::has_proflo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankingItem::set_has_proflo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankingItem::clear_has_proflo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankingItem::clear_proflo() {
  proflo_ = 0;
  clear_has_proflo();
}
inline ::google::protobuf::int32 RankingItem::proflo() const {
  return proflo_;
}
inline void RankingItem::set_proflo(::google::protobuf::int32 value) {
  set_has_proflo();
  proflo_ = value;
}

// required int32 country = 6;
inline bool RankingItem::has_country() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankingItem::set_has_country() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankingItem::clear_has_country() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankingItem::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 RankingItem::country() const {
  return country_;
}
inline void RankingItem::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// required int32 sex = 7;
inline bool RankingItem::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankingItem::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankingItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankingItem::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 RankingItem::sex() const {
  return sex_;
}
inline void RankingItem::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 vip = 8;
inline bool RankingItem::has_vip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankingItem::set_has_vip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankingItem::clear_has_vip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankingItem::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 RankingItem::vip() const {
  return vip_;
}
inline void RankingItem::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// required int32 lv = 9;
inline bool RankingItem::has_lv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankingItem::set_has_lv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankingItem::clear_has_lv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankingItem::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 RankingItem::lv() const {
  return lv_;
}
inline void RankingItem::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 glory = 10;
inline bool RankingItem::has_glory() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankingItem::set_has_glory() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankingItem::clear_has_glory() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankingItem::clear_glory() {
  glory_ = 0;
  clear_has_glory();
}
inline ::google::protobuf::int32 RankingItem::glory() const {
  return glory_;
}
inline void RankingItem::set_glory(::google::protobuf::int32 value) {
  set_has_glory();
  glory_ = value;
}

// optional string clanname = 11;
inline bool RankingItem::has_clanname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RankingItem::set_has_clanname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RankingItem::clear_has_clanname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RankingItem::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& RankingItem::clanname() const {
  return *clanname_;
}
inline void RankingItem::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void RankingItem::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void RankingItem::set_clanname(const char* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankingItem::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* RankingItem::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankingItem::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MeRankingInfo

// required int32 type = 1;
inline bool MeRankingInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeRankingInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeRankingInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeRankingInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MeRankingInfo::type() const {
  return type_;
}
inline void MeRankingInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 num = 2;
inline bool MeRankingInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeRankingInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeRankingInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeRankingInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 MeRankingInfo::num() const {
  return num_;
}
inline void MeRankingInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// required int32 value = 3;
inline bool MeRankingInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeRankingInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeRankingInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeRankingInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 MeRankingInfo::value() const {
  return value_;
}
inline void MeRankingInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required int32 ProFlo = 4;
inline bool MeRankingInfo::has_proflo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeRankingInfo::set_has_proflo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeRankingInfo::clear_has_proflo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeRankingInfo::clear_proflo() {
  proflo_ = 0;
  clear_has_proflo();
}
inline ::google::protobuf::int32 MeRankingInfo::proflo() const {
  return proflo_;
}
inline void MeRankingInfo::set_proflo(::google::protobuf::int32 value) {
  set_has_proflo();
  proflo_ = value;
}

// optional int32 glory = 5;
inline bool MeRankingInfo::has_glory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeRankingInfo::set_has_glory() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeRankingInfo::clear_has_glory() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeRankingInfo::clear_glory() {
  glory_ = 0;
  clear_has_glory();
}
inline ::google::protobuf::int32 MeRankingInfo::glory() const {
  return glory_;
}
inline void MeRankingInfo::set_glory(::google::protobuf::int32 value) {
  set_has_glory();
  glory_ = value;
}

// -------------------------------------------------------------------

// GTtoWSRankingInfo

// required int64 charid = 1;
inline bool GTtoWSRankingInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTtoWSRankingInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTtoWSRankingInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTtoWSRankingInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 GTtoWSRankingInfo::charid() const {
  return charid_;
}
inline void GTtoWSRankingInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 type = 2;
inline bool GTtoWSRankingInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GTtoWSRankingInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GTtoWSRankingInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GTtoWSRankingInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GTtoWSRankingInfo::type() const {
  return type_;
}
inline void GTtoWSRankingInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 index = 3;
inline bool GTtoWSRankingInfo::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GTtoWSRankingInfo::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GTtoWSRankingInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GTtoWSRankingInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GTtoWSRankingInfo::index() const {
  return index_;
}
inline void GTtoWSRankingInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// GTtoWSMeRankingInfo

// required int64 charid = 1;
inline bool GTtoWSMeRankingInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GTtoWSMeRankingInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GTtoWSMeRankingInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GTtoWSMeRankingInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 GTtoWSMeRankingInfo::charid() const {
  return charid_;
}
inline void GTtoWSMeRankingInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 type = 2;
inline bool GTtoWSMeRankingInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GTtoWSMeRankingInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GTtoWSMeRankingInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GTtoWSMeRankingInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GTtoWSMeRankingInfo::type() const {
  return type_;
}
inline void GTtoWSMeRankingInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SRankingInfo

// repeated .RankingInfo.SmallRankingItem Ranking = 1;
inline int SRankingInfo::ranking_size() const {
  return ranking_.size();
}
inline void SRankingInfo::clear_ranking() {
  ranking_.Clear();
}
inline const ::RankingInfo::SmallRankingItem& SRankingInfo::ranking(int index) const {
  return ranking_.Get(index);
}
inline ::RankingInfo::SmallRankingItem* SRankingInfo::mutable_ranking(int index) {
  return ranking_.Mutable(index);
}
inline ::RankingInfo::SmallRankingItem* SRankingInfo::add_ranking() {
  return ranking_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RankingInfo::SmallRankingItem >&
SRankingInfo::ranking() const {
  return ranking_;
}
inline ::google::protobuf::RepeatedPtrField< ::RankingInfo::SmallRankingItem >*
SRankingInfo::mutable_ranking() {
  return &ranking_;
}

// -------------------------------------------------------------------

// SRankingItem

// required int64 charid = 1;
inline bool SRankingItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SRankingItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SRankingItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SRankingItem::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SRankingItem::charid() const {
  return charid_;
}
inline void SRankingItem::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string name = 2;
inline bool SRankingItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SRankingItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SRankingItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SRankingItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SRankingItem::name() const {
  return *name_;
}
inline void SRankingItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRankingItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SRankingItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SRankingItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SRankingItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SRankingItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 Lv = 3;
inline bool SRankingItem::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SRankingItem::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SRankingItem::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SRankingItem::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 SRankingItem::lv() const {
  return lv_;
}
inline void SRankingItem::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int64 Ex = 4;
inline bool SRankingItem::has_ex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SRankingItem::set_has_ex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SRankingItem::clear_has_ex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SRankingItem::clear_ex() {
  ex_ = GOOGLE_LONGLONG(0);
  clear_has_ex();
}
inline ::google::protobuf::int64 SRankingItem::ex() const {
  return ex_;
}
inline void SRankingItem::set_ex(::google::protobuf::int64 value) {
  set_has_ex();
  ex_ = value;
}

// required int32 Profession = 5;
inline bool SRankingItem::has_profession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SRankingItem::set_has_profession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SRankingItem::clear_has_profession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SRankingItem::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 SRankingItem::profession() const {
  return profession_;
}
inline void SRankingItem::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 CombatPower = 6;
inline bool SRankingItem::has_combatpower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SRankingItem::set_has_combatpower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SRankingItem::clear_has_combatpower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SRankingItem::clear_combatpower() {
  combatpower_ = 0;
  clear_has_combatpower();
}
inline ::google::protobuf::int32 SRankingItem::combatpower() const {
  return combatpower_;
}
inline void SRankingItem::set_combatpower(::google::protobuf::int32 value) {
  set_has_combatpower();
  combatpower_ = value;
}

// required int32 Achievement = 7;
inline bool SRankingItem::has_achievement() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SRankingItem::set_has_achievement() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SRankingItem::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SRankingItem::clear_achievement() {
  achievement_ = 0;
  clear_has_achievement();
}
inline ::google::protobuf::int32 SRankingItem::achievement() const {
  return achievement_;
}
inline void SRankingItem::set_achievement(::google::protobuf::int32 value) {
  set_has_achievement();
  achievement_ = value;
}

// required int32 HoLv = 8;
inline bool SRankingItem::has_holv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SRankingItem::set_has_holv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SRankingItem::clear_has_holv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SRankingItem::clear_holv() {
  holv_ = 0;
  clear_has_holv();
}
inline ::google::protobuf::int32 SRankingItem::holv() const {
  return holv_;
}
inline void SRankingItem::set_holv(::google::protobuf::int32 value) {
  set_has_holv();
  holv_ = value;
}

// required int64 HoEx = 9;
inline bool SRankingItem::has_hoex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SRankingItem::set_has_hoex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SRankingItem::clear_has_hoex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SRankingItem::clear_hoex() {
  hoex_ = GOOGLE_LONGLONG(0);
  clear_has_hoex();
}
inline ::google::protobuf::int64 SRankingItem::hoex() const {
  return hoex_;
}
inline void SRankingItem::set_hoex(::google::protobuf::int64 value) {
  set_has_hoex();
  hoex_ = value;
}

// -------------------------------------------------------------------

// SmallRankingItem

// required int64 charid = 1;
inline bool SmallRankingItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SmallRankingItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SmallRankingItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SmallRankingItem::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SmallRankingItem::charid() const {
  return charid_;
}
inline void SmallRankingItem::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string name = 2;
inline bool SmallRankingItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SmallRankingItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SmallRankingItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SmallRankingItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SmallRankingItem::name() const {
  return *name_;
}
inline void SmallRankingItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SmallRankingItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SmallRankingItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SmallRankingItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SmallRankingItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SmallRankingItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 value = 3;
inline bool SmallRankingItem::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SmallRankingItem::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SmallRankingItem::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SmallRankingItem::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 SmallRankingItem::value() const {
  return value_;
}
inline void SmallRankingItem::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// required int32 ProFlo = 4;
inline bool SmallRankingItem::has_proflo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SmallRankingItem::set_has_proflo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SmallRankingItem::clear_has_proflo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SmallRankingItem::clear_proflo() {
  proflo_ = 0;
  clear_has_proflo();
}
inline ::google::protobuf::int32 SmallRankingItem::proflo() const {
  return proflo_;
}
inline void SmallRankingItem::set_proflo(::google::protobuf::int32 value) {
  set_has_proflo();
  proflo_ = value;
}

// optional int32 glory = 5;
inline bool SmallRankingItem::has_glory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SmallRankingItem::set_has_glory() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SmallRankingItem::clear_has_glory() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SmallRankingItem::clear_glory() {
  glory_ = 0;
  clear_has_glory();
}
inline ::google::protobuf::int32 SmallRankingItem::glory() const {
  return glory_;
}
inline void SmallRankingItem::set_glory(::google::protobuf::int32 value) {
  set_has_glory();
  glory_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RankingInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CharLogin_2fRanking_2eproto__INCLUDED
