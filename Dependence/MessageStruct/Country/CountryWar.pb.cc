// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/CountryWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Country/CountryWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CountryWar {

namespace {

const ::google::protobuf::Descriptor* AckReqElementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqElementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqFitchTaskReWard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqFitchTaskReWard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFitchTaskReWard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFitchTaskReWard_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqHistoryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqHistoryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOccupyElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOccupyElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqOccupyElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqOccupyElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqCountryWarMapID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqCountryWarMapID_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryWarPrizeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryWarPrizeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementStateAlter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementStateAlter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryWarAttrAlter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryWarAttrAlter_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryWarTaskUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryWarTaskUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementProtectedTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementProtectedTimeOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupyElementSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupyElementSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ElementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ElementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* taskinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  taskinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HistoryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HistoryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryWarResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryWarResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMCountryBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMCountryBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Country_2fCountryWar_2eproto() {
  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Country/CountryWar.proto");
  GOOGLE_CHECK(file != NULL);
  AckReqElementInfo_descriptor_ = file->message_type(0);
  static const int AckReqElementInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqElementInfo, item_),
  };
  AckReqElementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqElementInfo_descriptor_,
      AckReqElementInfo::default_instance_,
      AckReqElementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqElementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqElementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqElementInfo));
  AckClientReqWarData_descriptor_ = file->message_type(1);
  static const int AckClientReqWarData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, scoresui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, scoretang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, bekilled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, time_),
  };
  AckClientReqWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqWarData_descriptor_,
      AckClientReqWarData::default_instance_,
      AckClientReqWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqWarData));
  ClientReqFitchTaskReWard_descriptor_ = file->message_type(2);
  static const int ClientReqFitchTaskReWard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqFitchTaskReWard, id_),
  };
  ClientReqFitchTaskReWard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqFitchTaskReWard_descriptor_,
      ClientReqFitchTaskReWard::default_instance_,
      ClientReqFitchTaskReWard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqFitchTaskReWard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqFitchTaskReWard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqFitchTaskReWard));
  AckFitchTaskReWard_descriptor_ = file->message_type(3);
  static const int AckFitchTaskReWard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchTaskReWard, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchTaskReWard, success_),
  };
  AckFitchTaskReWard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFitchTaskReWard_descriptor_,
      AckFitchTaskReWard::default_instance_,
      AckFitchTaskReWard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchTaskReWard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchTaskReWard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFitchTaskReWard));
  AckReqHistoryRecord_descriptor_ = file->message_type(4);
  static const int AckReqHistoryRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqHistoryRecord, suiwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqHistoryRecord, suilose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqHistoryRecord, tangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqHistoryRecord, tanglose_),
  };
  AckReqHistoryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqHistoryRecord_descriptor_,
      AckReqHistoryRecord::default_instance_,
      AckReqHistoryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqHistoryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqHistoryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqHistoryRecord));
  ReqOccupyElement_descriptor_ = file->message_type(5);
  static const int ReqOccupyElement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOccupyElement, id_),
  };
  ReqOccupyElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOccupyElement_descriptor_,
      ReqOccupyElement::default_instance_,
      ReqOccupyElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOccupyElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOccupyElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOccupyElement));
  AckReqOccupyElement_descriptor_ = file->message_type(6);
  static const int AckReqOccupyElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqOccupyElement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqOccupyElement, success_),
  };
  AckReqOccupyElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqOccupyElement_descriptor_,
      AckReqOccupyElement::default_instance_,
      AckReqOccupyElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqOccupyElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqOccupyElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqOccupyElement));
  AckReqCountryWarMapID_descriptor_ = file->message_type(7);
  static const int AckReqCountryWarMapID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCountryWarMapID, id_),
  };
  AckReqCountryWarMapID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqCountryWarMapID_descriptor_,
      AckReqCountryWarMapID::default_instance_,
      AckReqCountryWarMapID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCountryWarMapID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCountryWarMapID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqCountryWarMapID));
  CountryWarPrizeResult_descriptor_ = file->message_type(8);
  static const int CountryWarPrizeResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, scoresui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, scoretang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, item_),
  };
  CountryWarPrizeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryWarPrizeResult_descriptor_,
      CountryWarPrizeResult::default_instance_,
      CountryWarPrizeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarPrizeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryWarPrizeResult));
  ElementStateAlter_descriptor_ = file->message_type(9);
  static const int ElementStateAlter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementStateAlter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementStateAlter, value_),
  };
  ElementStateAlter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElementStateAlter_descriptor_,
      ElementStateAlter::default_instance_,
      ElementStateAlter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementStateAlter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementStateAlter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElementStateAlter));
  CountryWarAttrAlter_descriptor_ = file->message_type(10);
  static const int CountryWarAttrAlter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarAttrAlter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarAttrAlter, value_),
  };
  CountryWarAttrAlter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryWarAttrAlter_descriptor_,
      CountryWarAttrAlter::default_instance_,
      CountryWarAttrAlter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarAttrAlter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarAttrAlter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryWarAttrAlter));
  CountryWarTaskUpdate_descriptor_ = file->message_type(11);
  static const int CountryWarTaskUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarTaskUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarTaskUpdate, count_),
  };
  CountryWarTaskUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryWarTaskUpdate_descriptor_,
      CountryWarTaskUpdate::default_instance_,
      CountryWarTaskUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarTaskUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarTaskUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryWarTaskUpdate));
  ElementProtectedTimeOut_descriptor_ = file->message_type(12);
  static const int ElementProtectedTimeOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementProtectedTimeOut, id_),
  };
  ElementProtectedTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElementProtectedTimeOut_descriptor_,
      ElementProtectedTimeOut::default_instance_,
      ElementProtectedTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementProtectedTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementProtectedTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElementProtectedTimeOut));
  OccupyElementSuccess_descriptor_ = file->message_type(13);
  static const int OccupyElementSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyElementSuccess, id_),
  };
  OccupyElementSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupyElementSuccess_descriptor_,
      OccupyElementSuccess::default_instance_,
      OccupyElementSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyElementSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyElementSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupyElementSuccess));
  PrizeItem_descriptor_ = file->message_type(14);
  static const int PrizeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, num_),
  };
  PrizeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeItem_descriptor_,
      PrizeItem::default_instance_,
      PrizeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeItem));
  ElementInfo_descriptor_ = file->message_type(15);
  static const int ElementInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, ower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, monster_),
  };
  ElementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ElementInfo_descriptor_,
      ElementInfo::default_instance_,
      ElementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ElementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ElementInfo));
  taskinfo_descriptor_ = file->message_type(16);
  static const int taskinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskinfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskinfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskinfo, flag_),
  };
  taskinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      taskinfo_descriptor_,
      taskinfo::default_instance_,
      taskinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(taskinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(taskinfo));
  HistoryRecord_descriptor_ = file->message_type(17);
  static const int HistoryRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, item_),
  };
  HistoryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HistoryRecord_descriptor_,
      HistoryRecord::default_instance_,
      HistoryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HistoryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HistoryRecord));
  RecordItem_descriptor_ = file->message_type(18);
  static const int RecordItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, lose_),
  };
  RecordItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordItem_descriptor_,
      RecordItem::default_instance_,
      RecordItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordItem));
  CountryWarResult_descriptor_ = file->message_type(19);
  static const int CountryWarResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarResult, lose_),
  };
  CountryWarResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryWarResult_descriptor_,
      CountryWarResult::default_instance_,
      CountryWarResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryWarResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryWarResult));
  WSToGMCountryBattle_descriptor_ = file->message_type(20);
  static const int WSToGMCountryBattle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, wartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, charid_),
  };
  WSToGMCountryBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMCountryBattle_descriptor_,
      WSToGMCountryBattle::default_instance_,
      WSToGMCountryBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMCountryBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Country_2fCountryWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqElementInfo_descriptor_, &AckReqElementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqWarData_descriptor_, &AckClientReqWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqFitchTaskReWard_descriptor_, &ClientReqFitchTaskReWard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFitchTaskReWard_descriptor_, &AckFitchTaskReWard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqHistoryRecord_descriptor_, &AckReqHistoryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOccupyElement_descriptor_, &ReqOccupyElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqOccupyElement_descriptor_, &AckReqOccupyElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqCountryWarMapID_descriptor_, &AckReqCountryWarMapID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryWarPrizeResult_descriptor_, &CountryWarPrizeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElementStateAlter_descriptor_, &ElementStateAlter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryWarAttrAlter_descriptor_, &CountryWarAttrAlter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryWarTaskUpdate_descriptor_, &CountryWarTaskUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElementProtectedTimeOut_descriptor_, &ElementProtectedTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupyElementSuccess_descriptor_, &OccupyElementSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeItem_descriptor_, &PrizeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ElementInfo_descriptor_, &ElementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    taskinfo_descriptor_, &taskinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HistoryRecord_descriptor_, &HistoryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordItem_descriptor_, &RecordItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryWarResult_descriptor_, &CountryWarResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMCountryBattle_descriptor_, &WSToGMCountryBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Country_2fCountryWar_2eproto() {
  delete AckReqElementInfo::default_instance_;
  delete AckReqElementInfo_reflection_;
  delete AckClientReqWarData::default_instance_;
  delete AckClientReqWarData_reflection_;
  delete ClientReqFitchTaskReWard::default_instance_;
  delete ClientReqFitchTaskReWard_reflection_;
  delete AckFitchTaskReWard::default_instance_;
  delete AckFitchTaskReWard_reflection_;
  delete AckReqHistoryRecord::default_instance_;
  delete AckReqHistoryRecord_reflection_;
  delete ReqOccupyElement::default_instance_;
  delete ReqOccupyElement_reflection_;
  delete AckReqOccupyElement::default_instance_;
  delete AckReqOccupyElement_reflection_;
  delete AckReqCountryWarMapID::default_instance_;
  delete AckReqCountryWarMapID_reflection_;
  delete CountryWarPrizeResult::default_instance_;
  delete CountryWarPrizeResult_reflection_;
  delete ElementStateAlter::default_instance_;
  delete ElementStateAlter_reflection_;
  delete CountryWarAttrAlter::default_instance_;
  delete CountryWarAttrAlter_reflection_;
  delete CountryWarTaskUpdate::default_instance_;
  delete CountryWarTaskUpdate_reflection_;
  delete ElementProtectedTimeOut::default_instance_;
  delete ElementProtectedTimeOut_reflection_;
  delete OccupyElementSuccess::default_instance_;
  delete OccupyElementSuccess_reflection_;
  delete PrizeItem::default_instance_;
  delete PrizeItem_reflection_;
  delete ElementInfo::default_instance_;
  delete ElementInfo_reflection_;
  delete taskinfo::default_instance_;
  delete taskinfo_reflection_;
  delete HistoryRecord::default_instance_;
  delete HistoryRecord_reflection_;
  delete RecordItem::default_instance_;
  delete RecordItem_reflection_;
  delete CountryWarResult::default_instance_;
  delete CountryWarResult_reflection_;
  delete WSToGMCountryBattle::default_instance_;
  delete WSToGMCountryBattle_reflection_;
}

void protobuf_AddDesc_Country_2fCountryWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Country/CountryWar.proto\022\nCountryWar\":"
    "\n\021AckReqElementInfo\022%\n\004item\030\001 \003(\0132\027.Coun"
    "tryWar.ElementInfo\"\240\001\n\023AckClientReqWarDa"
    "ta\022\020\n\010scoresui\030\001 \002(\005\022\021\n\tscoretang\030\002 \001(\005\022"
    "\022\n\ncontribute\030\003 \001(\005\022\014\n\004sort\030\004 \001(\005\022\020\n\010bek"
    "illed\030\005 \001(\005\022\"\n\004item\030\006 \003(\0132\024.CountryWar.t"
    "askinfo\022\014\n\004time\030\007 \001(\005\"&\n\030ClientReqFitchT"
    "askReWard\022\n\n\002id\030\001 \002(\005\"1\n\022AckFitchTaskReW"
    "ard\022\n\n\002id\030\001 \002(\005\022\017\n\007success\030\002 \001(\005\"Y\n\023AckR"
    "eqHistoryRecord\022\016\n\006suiwin\030\001 \002(\005\022\017\n\007suilo"
    "se\030\002 \001(\005\022\017\n\007tangwin\030\003 \001(\005\022\020\n\010tanglose\030\004 "
    "\001(\005\"\036\n\020ReqOccupyElement\022\n\n\002id\030\001 \002(\003\"2\n\023A"
    "ckReqOccupyElement\022\n\n\002id\030\001 \002(\003\022\017\n\007succes"
    "s\030\002 \001(\005\"#\n\025AckReqCountryWarMapID\022\n\n\002id\030\001"
    " \002(\003\"\203\001\n\025CountryWarPrizeResult\022\020\n\010scores"
    "ui\030\001 \002(\005\022\021\n\tscoretang\030\002 \001(\005\022\022\n\ncontribut"
    "e\030\003 \001(\005\022\014\n\004sort\030\004 \001(\005\022#\n\004item\030\005 \003(\0132\025.Co"
    "untryWar.PrizeItem\".\n\021ElementStateAlter\022"
    "\n\n\002id\030\001 \002(\003\022\r\n\005value\030\002 \001(\005\"0\n\023CountryWar"
    "AttrAlter\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"1\n\024"
    "CountryWarTaskUpdate\022\n\n\002id\030\001 \002(\005\022\r\n\005coun"
    "t\030\002 \001(\005\"%\n\027ElementProtectedTimeOut\022\n\n\002id"
    "\030\001 \002(\003\"\"\n\024OccupyElementSuccess\022\n\n\002id\030\001 \002"
    "(\003\"$\n\tPrizeItem\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \001(\005"
    "\"F\n\013ElementInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004ower\030\002 \001("
    "\005\022\014\n\004time\030\003 \001(\005\022\017\n\007monster\030\004 \001(\005\"3\n\010task"
    "info\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \001(\005\022\014\n\004flag\030"
    "\003 \001(\005\"5\n\rHistoryRecord\022$\n\004item\030\001 \003(\0132\026.C"
    "ountryWar.RecordItem\"3\n\nRecordItem\022\n\n\002id"
    "\030\001 \002(\005\022\013\n\003win\030\002 \001(\005\022\014\n\004lose\030\003 \001(\005\"-\n\020Cou"
    "ntryWarResult\022\013\n\003win\030\001 \002(\005\022\014\n\004lose\030\002 \002(\005"
    "\"D\n\023WSToGMCountryBattle\022\017\n\007warType\030\001 \002(\005"
    "\022\014\n\004flag\030\002 \002(\010\022\016\n\006charID\030\003 \003(\003", 1310);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Country/CountryWar.proto", &protobuf_RegisterTypes);
  AckReqElementInfo::default_instance_ = new AckReqElementInfo();
  AckClientReqWarData::default_instance_ = new AckClientReqWarData();
  ClientReqFitchTaskReWard::default_instance_ = new ClientReqFitchTaskReWard();
  AckFitchTaskReWard::default_instance_ = new AckFitchTaskReWard();
  AckReqHistoryRecord::default_instance_ = new AckReqHistoryRecord();
  ReqOccupyElement::default_instance_ = new ReqOccupyElement();
  AckReqOccupyElement::default_instance_ = new AckReqOccupyElement();
  AckReqCountryWarMapID::default_instance_ = new AckReqCountryWarMapID();
  CountryWarPrizeResult::default_instance_ = new CountryWarPrizeResult();
  ElementStateAlter::default_instance_ = new ElementStateAlter();
  CountryWarAttrAlter::default_instance_ = new CountryWarAttrAlter();
  CountryWarTaskUpdate::default_instance_ = new CountryWarTaskUpdate();
  ElementProtectedTimeOut::default_instance_ = new ElementProtectedTimeOut();
  OccupyElementSuccess::default_instance_ = new OccupyElementSuccess();
  PrizeItem::default_instance_ = new PrizeItem();
  ElementInfo::default_instance_ = new ElementInfo();
  taskinfo::default_instance_ = new taskinfo();
  HistoryRecord::default_instance_ = new HistoryRecord();
  RecordItem::default_instance_ = new RecordItem();
  CountryWarResult::default_instance_ = new CountryWarResult();
  WSToGMCountryBattle::default_instance_ = new WSToGMCountryBattle();
  AckReqElementInfo::default_instance_->InitAsDefaultInstance();
  AckClientReqWarData::default_instance_->InitAsDefaultInstance();
  ClientReqFitchTaskReWard::default_instance_->InitAsDefaultInstance();
  AckFitchTaskReWard::default_instance_->InitAsDefaultInstance();
  AckReqHistoryRecord::default_instance_->InitAsDefaultInstance();
  ReqOccupyElement::default_instance_->InitAsDefaultInstance();
  AckReqOccupyElement::default_instance_->InitAsDefaultInstance();
  AckReqCountryWarMapID::default_instance_->InitAsDefaultInstance();
  CountryWarPrizeResult::default_instance_->InitAsDefaultInstance();
  ElementStateAlter::default_instance_->InitAsDefaultInstance();
  CountryWarAttrAlter::default_instance_->InitAsDefaultInstance();
  CountryWarTaskUpdate::default_instance_->InitAsDefaultInstance();
  ElementProtectedTimeOut::default_instance_->InitAsDefaultInstance();
  OccupyElementSuccess::default_instance_->InitAsDefaultInstance();
  PrizeItem::default_instance_->InitAsDefaultInstance();
  ElementInfo::default_instance_->InitAsDefaultInstance();
  taskinfo::default_instance_->InitAsDefaultInstance();
  HistoryRecord::default_instance_->InitAsDefaultInstance();
  RecordItem::default_instance_->InitAsDefaultInstance();
  CountryWarResult::default_instance_->InitAsDefaultInstance();
  WSToGMCountryBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Country_2fCountryWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Country_2fCountryWar_2eproto {
  StaticDescriptorInitializer_Country_2fCountryWar_2eproto() {
    protobuf_AddDesc_Country_2fCountryWar_2eproto();
  }
} static_descriptor_initializer_Country_2fCountryWar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckReqElementInfo::kItemFieldNumber;
#endif  // !_MSC_VER

AckReqElementInfo::AckReqElementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqElementInfo::InitAsDefaultInstance() {
}

AckReqElementInfo::AckReqElementInfo(const AckReqElementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqElementInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqElementInfo::~AckReqElementInfo() {
  SharedDtor();
}

void AckReqElementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqElementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqElementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqElementInfo_descriptor_;
}

const AckReqElementInfo& AckReqElementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

AckReqElementInfo* AckReqElementInfo::default_instance_ = NULL;

AckReqElementInfo* AckReqElementInfo::New() const {
  return new AckReqElementInfo;
}

void AckReqElementInfo::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqElementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryWar.ElementInfo item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqElementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryWar.ElementInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqElementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryWar.ElementInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqElementInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CountryWar.ElementInfo item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqElementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqElementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqElementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqElementInfo::MergeFrom(const AckReqElementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqElementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqElementInfo::CopyFrom(const AckReqElementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqElementInfo::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AckReqElementInfo::Swap(AckReqElementInfo* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqElementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqElementInfo_descriptor_;
  metadata.reflection = AckReqElementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqWarData::kScoresuiFieldNumber;
const int AckClientReqWarData::kScoretangFieldNumber;
const int AckClientReqWarData::kContributeFieldNumber;
const int AckClientReqWarData::kSortFieldNumber;
const int AckClientReqWarData::kBekilledFieldNumber;
const int AckClientReqWarData::kItemFieldNumber;
const int AckClientReqWarData::kTimeFieldNumber;
#endif  // !_MSC_VER

AckClientReqWarData::AckClientReqWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqWarData::InitAsDefaultInstance() {
}

AckClientReqWarData::AckClientReqWarData(const AckClientReqWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqWarData::SharedCtor() {
  _cached_size_ = 0;
  scoresui_ = 0;
  scoretang_ = 0;
  contribute_ = 0;
  sort_ = 0;
  bekilled_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqWarData::~AckClientReqWarData() {
  SharedDtor();
}

void AckClientReqWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqWarData_descriptor_;
}

const AckClientReqWarData& AckClientReqWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

AckClientReqWarData* AckClientReqWarData::default_instance_ = NULL;

AckClientReqWarData* AckClientReqWarData::New() const {
  return new AckClientReqWarData;
}

void AckClientReqWarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scoresui_ = 0;
    scoretang_ = 0;
    contribute_ = 0;
    sort_ = 0;
    bekilled_ = 0;
    time_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scoresui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoresui_)));
          set_has_scoresui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scoretang;
        break;
      }

      // optional int32 scoretang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoretang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretang_)));
          set_has_scoretang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sort;
        break;
      }

      // optional int32 sort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bekilled;
        break;
      }

      // optional int32 bekilled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bekilled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bekilled_)));
          set_has_bekilled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }

      // repeated .CountryWar.taskinfo item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // optional int32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scoresui = 1;
  if (has_scoresui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scoresui(), output);
  }

  // optional int32 scoretang = 2;
  if (has_scoretang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scoretang(), output);
  }

  // optional int32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contribute(), output);
  }

  // optional int32 sort = 4;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sort(), output);
  }

  // optional int32 bekilled = 5;
  if (has_bekilled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bekilled(), output);
  }

  // repeated .CountryWar.taskinfo item = 6;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item(i), output);
  }

  // optional int32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scoresui = 1;
  if (has_scoresui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scoresui(), target);
  }

  // optional int32 scoretang = 2;
  if (has_scoretang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scoretang(), target);
  }

  // optional int32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contribute(), target);
  }

  // optional int32 sort = 4;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sort(), target);
  }

  // optional int32 bekilled = 5;
  if (has_bekilled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bekilled(), target);
  }

  // repeated .CountryWar.taskinfo item = 6;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item(i), target);
  }

  // optional int32 time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqWarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scoresui = 1;
    if (has_scoresui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoresui());
    }

    // optional int32 scoretang = 2;
    if (has_scoretang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretang());
    }

    // optional int32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

    // optional int32 sort = 4;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

    // optional int32 bekilled = 5;
    if (has_bekilled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bekilled());
    }

    // optional int32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated .CountryWar.taskinfo item = 6;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqWarData::MergeFrom(const AckClientReqWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scoresui()) {
      set_scoresui(from.scoresui());
    }
    if (from.has_scoretang()) {
      set_scoretang(from.scoretang());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_bekilled()) {
      set_bekilled(from.bekilled());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqWarData::CopyFrom(const AckClientReqWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqWarData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqWarData::Swap(AckClientReqWarData* other) {
  if (other != this) {
    std::swap(scoresui_, other->scoresui_);
    std::swap(scoretang_, other->scoretang_);
    std::swap(contribute_, other->contribute_);
    std::swap(sort_, other->sort_);
    std::swap(bekilled_, other->bekilled_);
    item_.Swap(&other->item_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqWarData_descriptor_;
  metadata.reflection = AckClientReqWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqFitchTaskReWard::kIdFieldNumber;
#endif  // !_MSC_VER

ClientReqFitchTaskReWard::ClientReqFitchTaskReWard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqFitchTaskReWard::InitAsDefaultInstance() {
}

ClientReqFitchTaskReWard::ClientReqFitchTaskReWard(const ClientReqFitchTaskReWard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqFitchTaskReWard::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqFitchTaskReWard::~ClientReqFitchTaskReWard() {
  SharedDtor();
}

void ClientReqFitchTaskReWard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqFitchTaskReWard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqFitchTaskReWard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqFitchTaskReWard_descriptor_;
}

const ClientReqFitchTaskReWard& ClientReqFitchTaskReWard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

ClientReqFitchTaskReWard* ClientReqFitchTaskReWard::default_instance_ = NULL;

ClientReqFitchTaskReWard* ClientReqFitchTaskReWard::New() const {
  return new ClientReqFitchTaskReWard;
}

void ClientReqFitchTaskReWard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqFitchTaskReWard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqFitchTaskReWard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqFitchTaskReWard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqFitchTaskReWard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqFitchTaskReWard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqFitchTaskReWard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqFitchTaskReWard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqFitchTaskReWard::MergeFrom(const ClientReqFitchTaskReWard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqFitchTaskReWard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqFitchTaskReWard::CopyFrom(const ClientReqFitchTaskReWard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqFitchTaskReWard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqFitchTaskReWard::Swap(ClientReqFitchTaskReWard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqFitchTaskReWard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqFitchTaskReWard_descriptor_;
  metadata.reflection = ClientReqFitchTaskReWard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFitchTaskReWard::kIdFieldNumber;
const int AckFitchTaskReWard::kSuccessFieldNumber;
#endif  // !_MSC_VER

AckFitchTaskReWard::AckFitchTaskReWard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFitchTaskReWard::InitAsDefaultInstance() {
}

AckFitchTaskReWard::AckFitchTaskReWard(const AckFitchTaskReWard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFitchTaskReWard::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  success_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFitchTaskReWard::~AckFitchTaskReWard() {
  SharedDtor();
}

void AckFitchTaskReWard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFitchTaskReWard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFitchTaskReWard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFitchTaskReWard_descriptor_;
}

const AckFitchTaskReWard& AckFitchTaskReWard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

AckFitchTaskReWard* AckFitchTaskReWard::default_instance_ = NULL;

AckFitchTaskReWard* AckFitchTaskReWard::New() const {
  return new AckFitchTaskReWard;
}

void AckFitchTaskReWard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    success_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFitchTaskReWard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional int32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFitchTaskReWard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFitchTaskReWard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFitchTaskReWard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFitchTaskReWard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFitchTaskReWard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFitchTaskReWard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFitchTaskReWard::MergeFrom(const AckFitchTaskReWard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFitchTaskReWard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFitchTaskReWard::CopyFrom(const AckFitchTaskReWard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFitchTaskReWard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFitchTaskReWard::Swap(AckFitchTaskReWard* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFitchTaskReWard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFitchTaskReWard_descriptor_;
  metadata.reflection = AckFitchTaskReWard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqHistoryRecord::kSuiwinFieldNumber;
const int AckReqHistoryRecord::kSuiloseFieldNumber;
const int AckReqHistoryRecord::kTangwinFieldNumber;
const int AckReqHistoryRecord::kTangloseFieldNumber;
#endif  // !_MSC_VER

AckReqHistoryRecord::AckReqHistoryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqHistoryRecord::InitAsDefaultInstance() {
}

AckReqHistoryRecord::AckReqHistoryRecord(const AckReqHistoryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqHistoryRecord::SharedCtor() {
  _cached_size_ = 0;
  suiwin_ = 0;
  suilose_ = 0;
  tangwin_ = 0;
  tanglose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqHistoryRecord::~AckReqHistoryRecord() {
  SharedDtor();
}

void AckReqHistoryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqHistoryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqHistoryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqHistoryRecord_descriptor_;
}

const AckReqHistoryRecord& AckReqHistoryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

AckReqHistoryRecord* AckReqHistoryRecord::default_instance_ = NULL;

AckReqHistoryRecord* AckReqHistoryRecord::New() const {
  return new AckReqHistoryRecord;
}

void AckReqHistoryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suiwin_ = 0;
    suilose_ = 0;
    tangwin_ = 0;
    tanglose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqHistoryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 suiwin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suiwin_)));
          set_has_suiwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_suilose;
        break;
      }

      // optional int32 suilose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suilose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suilose_)));
          set_has_suilose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tangwin;
        break;
      }

      // optional int32 tangwin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tangwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tangwin_)));
          set_has_tangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tanglose;
        break;
      }

      // optional int32 tanglose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tanglose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tanglose_)));
          set_has_tanglose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqHistoryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 suiwin = 1;
  if (has_suiwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->suiwin(), output);
  }

  // optional int32 suilose = 2;
  if (has_suilose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->suilose(), output);
  }

  // optional int32 tangwin = 3;
  if (has_tangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tangwin(), output);
  }

  // optional int32 tanglose = 4;
  if (has_tanglose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tanglose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqHistoryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 suiwin = 1;
  if (has_suiwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->suiwin(), target);
  }

  // optional int32 suilose = 2;
  if (has_suilose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->suilose(), target);
  }

  // optional int32 tangwin = 3;
  if (has_tangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tangwin(), target);
  }

  // optional int32 tanglose = 4;
  if (has_tanglose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tanglose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqHistoryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 suiwin = 1;
    if (has_suiwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suiwin());
    }

    // optional int32 suilose = 2;
    if (has_suilose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suilose());
    }

    // optional int32 tangwin = 3;
    if (has_tangwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tangwin());
    }

    // optional int32 tanglose = 4;
    if (has_tanglose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tanglose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqHistoryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqHistoryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqHistoryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqHistoryRecord::MergeFrom(const AckReqHistoryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suiwin()) {
      set_suiwin(from.suiwin());
    }
    if (from.has_suilose()) {
      set_suilose(from.suilose());
    }
    if (from.has_tangwin()) {
      set_tangwin(from.tangwin());
    }
    if (from.has_tanglose()) {
      set_tanglose(from.tanglose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqHistoryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqHistoryRecord::CopyFrom(const AckReqHistoryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqHistoryRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqHistoryRecord::Swap(AckReqHistoryRecord* other) {
  if (other != this) {
    std::swap(suiwin_, other->suiwin_);
    std::swap(suilose_, other->suilose_);
    std::swap(tangwin_, other->tangwin_);
    std::swap(tanglose_, other->tanglose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqHistoryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqHistoryRecord_descriptor_;
  metadata.reflection = AckReqHistoryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOccupyElement::kIdFieldNumber;
#endif  // !_MSC_VER

ReqOccupyElement::ReqOccupyElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOccupyElement::InitAsDefaultInstance() {
}

ReqOccupyElement::ReqOccupyElement(const ReqOccupyElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOccupyElement::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOccupyElement::~ReqOccupyElement() {
  SharedDtor();
}

void ReqOccupyElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOccupyElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOccupyElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOccupyElement_descriptor_;
}

const ReqOccupyElement& ReqOccupyElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

ReqOccupyElement* ReqOccupyElement::default_instance_ = NULL;

ReqOccupyElement* ReqOccupyElement::New() const {
  return new ReqOccupyElement;
}

void ReqOccupyElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOccupyElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOccupyElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOccupyElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOccupyElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOccupyElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOccupyElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOccupyElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOccupyElement::MergeFrom(const ReqOccupyElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOccupyElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOccupyElement::CopyFrom(const ReqOccupyElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOccupyElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOccupyElement::Swap(ReqOccupyElement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOccupyElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOccupyElement_descriptor_;
  metadata.reflection = ReqOccupyElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqOccupyElement::kIdFieldNumber;
const int AckReqOccupyElement::kSuccessFieldNumber;
#endif  // !_MSC_VER

AckReqOccupyElement::AckReqOccupyElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqOccupyElement::InitAsDefaultInstance() {
}

AckReqOccupyElement::AckReqOccupyElement(const AckReqOccupyElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqOccupyElement::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  success_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqOccupyElement::~AckReqOccupyElement() {
  SharedDtor();
}

void AckReqOccupyElement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqOccupyElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqOccupyElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqOccupyElement_descriptor_;
}

const AckReqOccupyElement& AckReqOccupyElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

AckReqOccupyElement* AckReqOccupyElement::default_instance_ = NULL;

AckReqOccupyElement* AckReqOccupyElement::New() const {
  return new AckReqOccupyElement;
}

void AckReqOccupyElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    success_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqOccupyElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // optional int32 success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqOccupyElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqOccupyElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqOccupyElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqOccupyElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqOccupyElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqOccupyElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqOccupyElement::MergeFrom(const AckReqOccupyElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqOccupyElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqOccupyElement::CopyFrom(const AckReqOccupyElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqOccupyElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqOccupyElement::Swap(AckReqOccupyElement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqOccupyElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqOccupyElement_descriptor_;
  metadata.reflection = AckReqOccupyElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqCountryWarMapID::kIdFieldNumber;
#endif  // !_MSC_VER

AckReqCountryWarMapID::AckReqCountryWarMapID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqCountryWarMapID::InitAsDefaultInstance() {
}

AckReqCountryWarMapID::AckReqCountryWarMapID(const AckReqCountryWarMapID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqCountryWarMapID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqCountryWarMapID::~AckReqCountryWarMapID() {
  SharedDtor();
}

void AckReqCountryWarMapID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqCountryWarMapID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqCountryWarMapID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqCountryWarMapID_descriptor_;
}

const AckReqCountryWarMapID& AckReqCountryWarMapID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

AckReqCountryWarMapID* AckReqCountryWarMapID::default_instance_ = NULL;

AckReqCountryWarMapID* AckReqCountryWarMapID::New() const {
  return new AckReqCountryWarMapID;
}

void AckReqCountryWarMapID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqCountryWarMapID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqCountryWarMapID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqCountryWarMapID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqCountryWarMapID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqCountryWarMapID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqCountryWarMapID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqCountryWarMapID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqCountryWarMapID::MergeFrom(const AckReqCountryWarMapID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqCountryWarMapID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqCountryWarMapID::CopyFrom(const AckReqCountryWarMapID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqCountryWarMapID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqCountryWarMapID::Swap(AckReqCountryWarMapID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqCountryWarMapID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqCountryWarMapID_descriptor_;
  metadata.reflection = AckReqCountryWarMapID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryWarPrizeResult::kScoresuiFieldNumber;
const int CountryWarPrizeResult::kScoretangFieldNumber;
const int CountryWarPrizeResult::kContributeFieldNumber;
const int CountryWarPrizeResult::kSortFieldNumber;
const int CountryWarPrizeResult::kItemFieldNumber;
#endif  // !_MSC_VER

CountryWarPrizeResult::CountryWarPrizeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryWarPrizeResult::InitAsDefaultInstance() {
}

CountryWarPrizeResult::CountryWarPrizeResult(const CountryWarPrizeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryWarPrizeResult::SharedCtor() {
  _cached_size_ = 0;
  scoresui_ = 0;
  scoretang_ = 0;
  contribute_ = 0;
  sort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryWarPrizeResult::~CountryWarPrizeResult() {
  SharedDtor();
}

void CountryWarPrizeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryWarPrizeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryWarPrizeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryWarPrizeResult_descriptor_;
}

const CountryWarPrizeResult& CountryWarPrizeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

CountryWarPrizeResult* CountryWarPrizeResult::default_instance_ = NULL;

CountryWarPrizeResult* CountryWarPrizeResult::New() const {
  return new CountryWarPrizeResult;
}

void CountryWarPrizeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scoresui_ = 0;
    scoretang_ = 0;
    contribute_ = 0;
    sort_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryWarPrizeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 scoresui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoresui_)));
          set_has_scoresui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scoretang;
        break;
      }

      // optional int32 scoretang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoretang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scoretang_)));
          set_has_scoretang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sort;
        break;
      }

      // optional int32 sort = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // repeated .CountryWar.PrizeItem item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryWarPrizeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 scoresui = 1;
  if (has_scoresui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scoresui(), output);
  }

  // optional int32 scoretang = 2;
  if (has_scoretang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scoretang(), output);
  }

  // optional int32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contribute(), output);
  }

  // optional int32 sort = 4;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sort(), output);
  }

  // repeated .CountryWar.PrizeItem item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryWarPrizeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 scoresui = 1;
  if (has_scoresui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scoresui(), target);
  }

  // optional int32 scoretang = 2;
  if (has_scoretang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scoretang(), target);
  }

  // optional int32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contribute(), target);
  }

  // optional int32 sort = 4;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sort(), target);
  }

  // repeated .CountryWar.PrizeItem item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryWarPrizeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 scoresui = 1;
    if (has_scoresui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoresui());
    }

    // optional int32 scoretang = 2;
    if (has_scoretang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scoretang());
    }

    // optional int32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

    // optional int32 sort = 4;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

  }
  // repeated .CountryWar.PrizeItem item = 5;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryWarPrizeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryWarPrizeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryWarPrizeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryWarPrizeResult::MergeFrom(const CountryWarPrizeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scoresui()) {
      set_scoresui(from.scoresui());
    }
    if (from.has_scoretang()) {
      set_scoretang(from.scoretang());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryWarPrizeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryWarPrizeResult::CopyFrom(const CountryWarPrizeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryWarPrizeResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void CountryWarPrizeResult::Swap(CountryWarPrizeResult* other) {
  if (other != this) {
    std::swap(scoresui_, other->scoresui_);
    std::swap(scoretang_, other->scoretang_);
    std::swap(contribute_, other->contribute_);
    std::swap(sort_, other->sort_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryWarPrizeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryWarPrizeResult_descriptor_;
  metadata.reflection = CountryWarPrizeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElementStateAlter::kIdFieldNumber;
const int ElementStateAlter::kValueFieldNumber;
#endif  // !_MSC_VER

ElementStateAlter::ElementStateAlter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElementStateAlter::InitAsDefaultInstance() {
}

ElementStateAlter::ElementStateAlter(const ElementStateAlter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElementStateAlter::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementStateAlter::~ElementStateAlter() {
  SharedDtor();
}

void ElementStateAlter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElementStateAlter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementStateAlter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementStateAlter_descriptor_;
}

const ElementStateAlter& ElementStateAlter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

ElementStateAlter* ElementStateAlter::default_instance_ = NULL;

ElementStateAlter* ElementStateAlter::New() const {
  return new ElementStateAlter;
}

void ElementStateAlter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElementStateAlter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElementStateAlter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElementStateAlter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElementStateAlter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementStateAlter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElementStateAlter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElementStateAlter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElementStateAlter::MergeFrom(const ElementStateAlter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElementStateAlter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementStateAlter::CopyFrom(const ElementStateAlter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementStateAlter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ElementStateAlter::Swap(ElementStateAlter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElementStateAlter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementStateAlter_descriptor_;
  metadata.reflection = ElementStateAlter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryWarAttrAlter::kIdFieldNumber;
const int CountryWarAttrAlter::kValueFieldNumber;
#endif  // !_MSC_VER

CountryWarAttrAlter::CountryWarAttrAlter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryWarAttrAlter::InitAsDefaultInstance() {
}

CountryWarAttrAlter::CountryWarAttrAlter(const CountryWarAttrAlter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryWarAttrAlter::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryWarAttrAlter::~CountryWarAttrAlter() {
  SharedDtor();
}

void CountryWarAttrAlter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryWarAttrAlter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryWarAttrAlter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryWarAttrAlter_descriptor_;
}

const CountryWarAttrAlter& CountryWarAttrAlter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

CountryWarAttrAlter* CountryWarAttrAlter::default_instance_ = NULL;

CountryWarAttrAlter* CountryWarAttrAlter::New() const {
  return new CountryWarAttrAlter;
}

void CountryWarAttrAlter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryWarAttrAlter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryWarAttrAlter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryWarAttrAlter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryWarAttrAlter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryWarAttrAlter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryWarAttrAlter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryWarAttrAlter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryWarAttrAlter::MergeFrom(const CountryWarAttrAlter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryWarAttrAlter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryWarAttrAlter::CopyFrom(const CountryWarAttrAlter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryWarAttrAlter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryWarAttrAlter::Swap(CountryWarAttrAlter* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryWarAttrAlter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryWarAttrAlter_descriptor_;
  metadata.reflection = CountryWarAttrAlter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryWarTaskUpdate::kIdFieldNumber;
const int CountryWarTaskUpdate::kCountFieldNumber;
#endif  // !_MSC_VER

CountryWarTaskUpdate::CountryWarTaskUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryWarTaskUpdate::InitAsDefaultInstance() {
}

CountryWarTaskUpdate::CountryWarTaskUpdate(const CountryWarTaskUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryWarTaskUpdate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryWarTaskUpdate::~CountryWarTaskUpdate() {
  SharedDtor();
}

void CountryWarTaskUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryWarTaskUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryWarTaskUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryWarTaskUpdate_descriptor_;
}

const CountryWarTaskUpdate& CountryWarTaskUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

CountryWarTaskUpdate* CountryWarTaskUpdate::default_instance_ = NULL;

CountryWarTaskUpdate* CountryWarTaskUpdate::New() const {
  return new CountryWarTaskUpdate;
}

void CountryWarTaskUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryWarTaskUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryWarTaskUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryWarTaskUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryWarTaskUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryWarTaskUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryWarTaskUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryWarTaskUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryWarTaskUpdate::MergeFrom(const CountryWarTaskUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryWarTaskUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryWarTaskUpdate::CopyFrom(const CountryWarTaskUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryWarTaskUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryWarTaskUpdate::Swap(CountryWarTaskUpdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryWarTaskUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryWarTaskUpdate_descriptor_;
  metadata.reflection = CountryWarTaskUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElementProtectedTimeOut::kIdFieldNumber;
#endif  // !_MSC_VER

ElementProtectedTimeOut::ElementProtectedTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElementProtectedTimeOut::InitAsDefaultInstance() {
}

ElementProtectedTimeOut::ElementProtectedTimeOut(const ElementProtectedTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElementProtectedTimeOut::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementProtectedTimeOut::~ElementProtectedTimeOut() {
  SharedDtor();
}

void ElementProtectedTimeOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElementProtectedTimeOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementProtectedTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementProtectedTimeOut_descriptor_;
}

const ElementProtectedTimeOut& ElementProtectedTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

ElementProtectedTimeOut* ElementProtectedTimeOut::default_instance_ = NULL;

ElementProtectedTimeOut* ElementProtectedTimeOut::New() const {
  return new ElementProtectedTimeOut;
}

void ElementProtectedTimeOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElementProtectedTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElementProtectedTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElementProtectedTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElementProtectedTimeOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementProtectedTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElementProtectedTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElementProtectedTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElementProtectedTimeOut::MergeFrom(const ElementProtectedTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElementProtectedTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementProtectedTimeOut::CopyFrom(const ElementProtectedTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementProtectedTimeOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ElementProtectedTimeOut::Swap(ElementProtectedTimeOut* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElementProtectedTimeOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementProtectedTimeOut_descriptor_;
  metadata.reflection = ElementProtectedTimeOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupyElementSuccess::kIdFieldNumber;
#endif  // !_MSC_VER

OccupyElementSuccess::OccupyElementSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupyElementSuccess::InitAsDefaultInstance() {
}

OccupyElementSuccess::OccupyElementSuccess(const OccupyElementSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupyElementSuccess::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupyElementSuccess::~OccupyElementSuccess() {
  SharedDtor();
}

void OccupyElementSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupyElementSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupyElementSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupyElementSuccess_descriptor_;
}

const OccupyElementSuccess& OccupyElementSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

OccupyElementSuccess* OccupyElementSuccess::default_instance_ = NULL;

OccupyElementSuccess* OccupyElementSuccess::New() const {
  return new OccupyElementSuccess;
}

void OccupyElementSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupyElementSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupyElementSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupyElementSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupyElementSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupyElementSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupyElementSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupyElementSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupyElementSuccess::MergeFrom(const OccupyElementSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupyElementSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupyElementSuccess::CopyFrom(const OccupyElementSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupyElementSuccess::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OccupyElementSuccess::Swap(OccupyElementSuccess* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupyElementSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupyElementSuccess_descriptor_;
  metadata.reflection = OccupyElementSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeItem::kIdFieldNumber;
const int PrizeItem::kNumFieldNumber;
#endif  // !_MSC_VER

PrizeItem::PrizeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeItem::InitAsDefaultInstance() {
}

PrizeItem::PrizeItem(const PrizeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeItem::~PrizeItem() {
  SharedDtor();
}

void PrizeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrizeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeItem_descriptor_;
}

const PrizeItem& PrizeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

PrizeItem* PrizeItem::default_instance_ = NULL;

PrizeItem* PrizeItem::New() const {
  return new PrizeItem;
}

void PrizeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeItem::MergeFrom(const PrizeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeItem::CopyFrom(const PrizeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrizeItem::Swap(PrizeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeItem_descriptor_;
  metadata.reflection = PrizeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ElementInfo::kIdFieldNumber;
const int ElementInfo::kOwerFieldNumber;
const int ElementInfo::kTimeFieldNumber;
const int ElementInfo::kMonsterFieldNumber;
#endif  // !_MSC_VER

ElementInfo::ElementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ElementInfo::InitAsDefaultInstance() {
}

ElementInfo::ElementInfo(const ElementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ElementInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ower_ = 0;
  time_ = 0;
  monster_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ElementInfo::~ElementInfo() {
  SharedDtor();
}

void ElementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ElementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ElementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ElementInfo_descriptor_;
}

const ElementInfo& ElementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

ElementInfo* ElementInfo::default_instance_ = NULL;

ElementInfo* ElementInfo::New() const {
  return new ElementInfo;
}

void ElementInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    ower_ = 0;
    time_ = 0;
    monster_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ElementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ower;
        break;
      }

      // optional int32 ower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ower_)));
          set_has_ower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monster;
        break;
      }

      // optional int32 monster = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_)));
          set_has_monster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ElementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 ower = 2;
  if (has_ower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ower(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 monster = 4;
  if (has_monster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->monster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ElementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 ower = 2;
  if (has_ower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ower(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 monster = 4;
  if (has_monster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->monster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ElementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 ower = 2;
    if (has_ower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ower());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 monster = 4;
    if (has_monster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ElementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ElementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ElementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ElementInfo::MergeFrom(const ElementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ower()) {
      set_ower(from.ower());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_monster()) {
      set_monster(from.monster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ElementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ElementInfo::CopyFrom(const ElementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ElementInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ElementInfo::Swap(ElementInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ower_, other->ower_);
    std::swap(time_, other->time_);
    std::swap(monster_, other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ElementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ElementInfo_descriptor_;
  metadata.reflection = ElementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int taskinfo::kIdFieldNumber;
const int taskinfo::kCountFieldNumber;
const int taskinfo::kFlagFieldNumber;
#endif  // !_MSC_VER

taskinfo::taskinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void taskinfo::InitAsDefaultInstance() {
}

taskinfo::taskinfo(const taskinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void taskinfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

taskinfo::~taskinfo() {
  SharedDtor();
}

void taskinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void taskinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* taskinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return taskinfo_descriptor_;
}

const taskinfo& taskinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

taskinfo* taskinfo::default_instance_ = NULL;

taskinfo* taskinfo::New() const {
  return new taskinfo;
}

void taskinfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool taskinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void taskinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* taskinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int taskinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void taskinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const taskinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const taskinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void taskinfo::MergeFrom(const taskinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void taskinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void taskinfo::CopyFrom(const taskinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool taskinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void taskinfo::Swap(taskinfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata taskinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = taskinfo_descriptor_;
  metadata.reflection = taskinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HistoryRecord::kItemFieldNumber;
#endif  // !_MSC_VER

HistoryRecord::HistoryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HistoryRecord::InitAsDefaultInstance() {
}

HistoryRecord::HistoryRecord(const HistoryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HistoryRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HistoryRecord::~HistoryRecord() {
  SharedDtor();
}

void HistoryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HistoryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HistoryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HistoryRecord_descriptor_;
}

const HistoryRecord& HistoryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

HistoryRecord* HistoryRecord::default_instance_ = NULL;

HistoryRecord* HistoryRecord::New() const {
  return new HistoryRecord;
}

void HistoryRecord::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HistoryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryWar.RecordItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HistoryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryWar.RecordItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HistoryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryWar.RecordItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HistoryRecord::ByteSize() const {
  int total_size = 0;

  // repeated .CountryWar.RecordItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HistoryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HistoryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HistoryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HistoryRecord::MergeFrom(const HistoryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HistoryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HistoryRecord::CopyFrom(const HistoryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistoryRecord::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void HistoryRecord::Swap(HistoryRecord* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HistoryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HistoryRecord_descriptor_;
  metadata.reflection = HistoryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordItem::kIdFieldNumber;
const int RecordItem::kWinFieldNumber;
const int RecordItem::kLoseFieldNumber;
#endif  // !_MSC_VER

RecordItem::RecordItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordItem::InitAsDefaultInstance() {
}

RecordItem::RecordItem(const RecordItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  win_ = 0;
  lose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordItem::~RecordItem() {
  SharedDtor();
}

void RecordItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordItem_descriptor_;
}

const RecordItem& RecordItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

RecordItem* RecordItem::default_instance_ = NULL;

RecordItem* RecordItem::New() const {
  return new RecordItem;
}

void RecordItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    win_ = 0;
    lose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional int32 win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lose;
        break;
      }

      // optional int32 lose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));
          set_has_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->win(), output);
  }

  // optional int32 lose = 3;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->win(), target);
  }

  // optional int32 lose = 3;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 win = 2;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 lose = 3;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordItem::MergeFrom(const RecordItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordItem::CopyFrom(const RecordItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RecordItem::Swap(RecordItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(win_, other->win_);
    std::swap(lose_, other->lose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordItem_descriptor_;
  metadata.reflection = RecordItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryWarResult::kWinFieldNumber;
const int CountryWarResult::kLoseFieldNumber;
#endif  // !_MSC_VER

CountryWarResult::CountryWarResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryWarResult::InitAsDefaultInstance() {
}

CountryWarResult::CountryWarResult(const CountryWarResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryWarResult::SharedCtor() {
  _cached_size_ = 0;
  win_ = 0;
  lose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryWarResult::~CountryWarResult() {
  SharedDtor();
}

void CountryWarResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryWarResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryWarResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryWarResult_descriptor_;
}

const CountryWarResult& CountryWarResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

CountryWarResult* CountryWarResult::default_instance_ = NULL;

CountryWarResult* CountryWarResult::New() const {
  return new CountryWarResult;
}

void CountryWarResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = 0;
    lose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryWarResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lose;
        break;
      }

      // required int32 lose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));
          set_has_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryWarResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win(), output);
  }

  // required int32 lose = 2;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryWarResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win(), target);
  }

  // required int32 lose = 2;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryWarResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 win = 1;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // required int32 lose = 2;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryWarResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryWarResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryWarResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryWarResult::MergeFrom(const CountryWarResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryWarResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryWarResult::CopyFrom(const CountryWarResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryWarResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CountryWarResult::Swap(CountryWarResult* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(lose_, other->lose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryWarResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryWarResult_descriptor_;
  metadata.reflection = CountryWarResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMCountryBattle::kWarTypeFieldNumber;
const int WSToGMCountryBattle::kFlagFieldNumber;
const int WSToGMCountryBattle::kCharIDFieldNumber;
#endif  // !_MSC_VER

WSToGMCountryBattle::WSToGMCountryBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMCountryBattle::InitAsDefaultInstance() {
}

WSToGMCountryBattle::WSToGMCountryBattle(const WSToGMCountryBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMCountryBattle::SharedCtor() {
  _cached_size_ = 0;
  wartype_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMCountryBattle::~WSToGMCountryBattle() {
  SharedDtor();
}

void WSToGMCountryBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMCountryBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMCountryBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMCountryBattle_descriptor_;
}

const WSToGMCountryBattle& WSToGMCountryBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryWar_2eproto();
  return *default_instance_;
}

WSToGMCountryBattle* WSToGMCountryBattle::default_instance_ = NULL;

WSToGMCountryBattle* WSToGMCountryBattle::New() const {
  return new WSToGMCountryBattle;
}

void WSToGMCountryBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wartype_ = 0;
    flag_ = false;
  }
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMCountryBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 warType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wartype_)));
          set_has_wartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // repeated int64 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMCountryBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 warType = 1;
  if (has_wartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wartype(), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // repeated int64 charID = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->charid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMCountryBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 warType = 1;
  if (has_wartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wartype(), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // repeated int64 charID = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->charid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMCountryBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 warType = 1;
    if (has_wartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wartype());
    }

    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 charID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMCountryBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMCountryBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMCountryBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMCountryBattle::MergeFrom(const WSToGMCountryBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wartype()) {
      set_wartype(from.wartype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMCountryBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMCountryBattle::CopyFrom(const WSToGMCountryBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMCountryBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WSToGMCountryBattle::Swap(WSToGMCountryBattle* other) {
  if (other != this) {
    std::swap(wartype_, other->wartype_);
    std::swap(flag_, other->flag_);
    charid_.Swap(&other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMCountryBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMCountryBattle_descriptor_;
  metadata.reflection = WSToGMCountryBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryWar

// @@protoc_insertion_point(global_scope)
