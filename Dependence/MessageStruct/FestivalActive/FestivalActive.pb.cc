// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FestivalActive/FestivalActive.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FestivalActive/FestivalActive.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FestivalActivePackage {

namespace {

const ::google::protobuf::Descriptor* FestivalActiveStartEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalActiveStartEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFestivalPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFestivalPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFestivalPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFestivalPrize_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FestivalActive_2fFestivalActive_2eproto() {
  protobuf_AddDesc_FestivalActive_2fFestivalActive_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FestivalActive/FestivalActive.proto");
  GOOGLE_CHECK(file != NULL);
  FestivalActiveStartEnd_descriptor_ = file->message_type(0);
  static const int FestivalActiveStartEnd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActiveStartEnd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActiveStartEnd, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActiveStartEnd, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActiveStartEnd, endtime_),
  };
  FestivalActiveStartEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalActiveStartEnd_descriptor_,
      FestivalActiveStartEnd::default_instance_,
      FestivalActiveStartEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActiveStartEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActiveStartEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalActiveStartEnd));
  ReqFestivalPrize_descriptor_ = file->message_type(1);
  static const int ReqFestivalPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFestivalPrize, id_),
  };
  ReqFestivalPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFestivalPrize_descriptor_,
      ReqFestivalPrize::default_instance_,
      ReqFestivalPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFestivalPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFestivalPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFestivalPrize));
  AckFestivalPrize_descriptor_ = file->message_type(2);
  static const int AckFestivalPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFestivalPrize, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFestivalPrize, result_),
  };
  AckFestivalPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFestivalPrize_descriptor_,
      AckFestivalPrize::default_instance_,
      AckFestivalPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFestivalPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFestivalPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFestivalPrize));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FestivalActive_2fFestivalActive_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalActiveStartEnd_descriptor_, &FestivalActiveStartEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFestivalPrize_descriptor_, &ReqFestivalPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFestivalPrize_descriptor_, &AckFestivalPrize::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FestivalActive_2fFestivalActive_2eproto() {
  delete FestivalActiveStartEnd::default_instance_;
  delete FestivalActiveStartEnd_reflection_;
  delete ReqFestivalPrize::default_instance_;
  delete ReqFestivalPrize_reflection_;
  delete AckFestivalPrize::default_instance_;
  delete AckFestivalPrize_reflection_;
}

void protobuf_AddDesc_FestivalActive_2fFestivalActive_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#FestivalActive/FestivalActive.proto\022\025F"
    "estivalActivePackage\"V\n\026FestivalActiveSt"
    "artEnd\022\n\n\002id\030\001 \002(\005\022\014\n\004flag\030\002 \001(\005\022\021\n\tbegi"
    "ntime\030\003 \001(\003\022\017\n\007endtime\030\004 \001(\003\"\036\n\020ReqFesti"
    "valPrize\022\n\n\002id\030\001 \002(\005\".\n\020AckFestivalPrize"
    "\022\n\n\002id\030\001 \002(\005\022\016\n\006result\030\002 \001(\005", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FestivalActive/FestivalActive.proto", &protobuf_RegisterTypes);
  FestivalActiveStartEnd::default_instance_ = new FestivalActiveStartEnd();
  ReqFestivalPrize::default_instance_ = new ReqFestivalPrize();
  AckFestivalPrize::default_instance_ = new AckFestivalPrize();
  FestivalActiveStartEnd::default_instance_->InitAsDefaultInstance();
  ReqFestivalPrize::default_instance_->InitAsDefaultInstance();
  AckFestivalPrize::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FestivalActive_2fFestivalActive_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FestivalActive_2fFestivalActive_2eproto {
  StaticDescriptorInitializer_FestivalActive_2fFestivalActive_2eproto() {
    protobuf_AddDesc_FestivalActive_2fFestivalActive_2eproto();
  }
} static_descriptor_initializer_FestivalActive_2fFestivalActive_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FestivalActiveStartEnd::kIdFieldNumber;
const int FestivalActiveStartEnd::kFlagFieldNumber;
const int FestivalActiveStartEnd::kBegintimeFieldNumber;
const int FestivalActiveStartEnd::kEndtimeFieldNumber;
#endif  // !_MSC_VER

FestivalActiveStartEnd::FestivalActiveStartEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalActiveStartEnd::InitAsDefaultInstance() {
}

FestivalActiveStartEnd::FestivalActiveStartEnd(const FestivalActiveStartEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalActiveStartEnd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  flag_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalActiveStartEnd::~FestivalActiveStartEnd() {
  SharedDtor();
}

void FestivalActiveStartEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalActiveStartEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalActiveStartEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalActiveStartEnd_descriptor_;
}

const FestivalActiveStartEnd& FestivalActiveStartEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FestivalActive_2fFestivalActive_2eproto();
  return *default_instance_;
}

FestivalActiveStartEnd* FestivalActiveStartEnd::default_instance_ = NULL;

FestivalActiveStartEnd* FestivalActiveStartEnd::New() const {
  return new FestivalActiveStartEnd;
}

void FestivalActiveStartEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    flag_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalActiveStartEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begintime;
        break;
      }

      // optional int64 begintime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalActiveStartEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // optional int64 begintime = 3;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->begintime(), output);
  }

  // optional int64 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalActiveStartEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // optional int64 begintime = 3;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->begintime(), target);
  }

  // optional int64 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalActiveStartEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int64 begintime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalActiveStartEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalActiveStartEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalActiveStartEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalActiveStartEnd::MergeFrom(const FestivalActiveStartEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalActiveStartEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalActiveStartEnd::CopyFrom(const FestivalActiveStartEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalActiveStartEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FestivalActiveStartEnd::Swap(FestivalActiveStartEnd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalActiveStartEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalActiveStartEnd_descriptor_;
  metadata.reflection = FestivalActiveStartEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFestivalPrize::kIdFieldNumber;
#endif  // !_MSC_VER

ReqFestivalPrize::ReqFestivalPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFestivalPrize::InitAsDefaultInstance() {
}

ReqFestivalPrize::ReqFestivalPrize(const ReqFestivalPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFestivalPrize::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFestivalPrize::~ReqFestivalPrize() {
  SharedDtor();
}

void ReqFestivalPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFestivalPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFestivalPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFestivalPrize_descriptor_;
}

const ReqFestivalPrize& ReqFestivalPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FestivalActive_2fFestivalActive_2eproto();
  return *default_instance_;
}

ReqFestivalPrize* ReqFestivalPrize::default_instance_ = NULL;

ReqFestivalPrize* ReqFestivalPrize::New() const {
  return new ReqFestivalPrize;
}

void ReqFestivalPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFestivalPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFestivalPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFestivalPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFestivalPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFestivalPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFestivalPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFestivalPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFestivalPrize::MergeFrom(const ReqFestivalPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFestivalPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFestivalPrize::CopyFrom(const ReqFestivalPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFestivalPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqFestivalPrize::Swap(ReqFestivalPrize* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFestivalPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFestivalPrize_descriptor_;
  metadata.reflection = ReqFestivalPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFestivalPrize::kIdFieldNumber;
const int AckFestivalPrize::kResultFieldNumber;
#endif  // !_MSC_VER

AckFestivalPrize::AckFestivalPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFestivalPrize::InitAsDefaultInstance() {
}

AckFestivalPrize::AckFestivalPrize(const AckFestivalPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFestivalPrize::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFestivalPrize::~AckFestivalPrize() {
  SharedDtor();
}

void AckFestivalPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFestivalPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFestivalPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFestivalPrize_descriptor_;
}

const AckFestivalPrize& AckFestivalPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FestivalActive_2fFestivalActive_2eproto();
  return *default_instance_;
}

AckFestivalPrize* AckFestivalPrize::default_instance_ = NULL;

AckFestivalPrize* AckFestivalPrize::New() const {
  return new AckFestivalPrize;
}

void AckFestivalPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFestivalPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFestivalPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFestivalPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFestivalPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFestivalPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFestivalPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFestivalPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFestivalPrize::MergeFrom(const AckFestivalPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFestivalPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFestivalPrize::CopyFrom(const AckFestivalPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFestivalPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFestivalPrize::Swap(AckFestivalPrize* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFestivalPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFestivalPrize_descriptor_;
  metadata.reflection = AckFestivalPrize_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FestivalActivePackage

// @@protoc_insertion_point(global_scope)
