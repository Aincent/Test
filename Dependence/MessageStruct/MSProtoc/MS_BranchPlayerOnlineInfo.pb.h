// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_BranchPlayerOnlineInfo.proto

#ifndef PROTOBUF_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto__INCLUDED
#define PROTOBUF_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace BranchPlayerInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

class BranchOnlineCount;
class OnlineCountInfo;
class Admin_BranchPlayerInfo;
class AckBranchPlayerInfo;
class BranchPlayerInfo;
class WEB_ReqListPlayerInfo;
class WEB_AckListPlayerInfo;
class ReqPlayerLvCount;
class RetPlayerLvCount;

// ===================================================================

class BranchOnlineCount : public ::google::protobuf::Message {
 public:
  BranchOnlineCount();
  virtual ~BranchOnlineCount();

  BranchOnlineCount(const BranchOnlineCount& from);

  inline BranchOnlineCount& operator=(const BranchOnlineCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BranchOnlineCount& default_instance();

  void Swap(BranchOnlineCount* other);

  // implements Message ----------------------------------------------

  BranchOnlineCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BranchOnlineCount& from);
  void MergeFrom(const BranchOnlineCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .BranchPlayerInfo.OnlineCountInfo onlineCount = 2;
  inline int onlinecount_size() const;
  inline void clear_onlinecount();
  static const int kOnlineCountFieldNumber = 2;
  inline const ::BranchPlayerInfo::OnlineCountInfo& onlinecount(int index) const;
  inline ::BranchPlayerInfo::OnlineCountInfo* mutable_onlinecount(int index);
  inline ::BranchPlayerInfo::OnlineCountInfo* add_onlinecount();
  inline const ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::OnlineCountInfo >&
      onlinecount() const;
  inline ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::OnlineCountInfo >*
      mutable_onlinecount();

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.BranchOnlineCount)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::OnlineCountInfo > onlinecount_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static BranchOnlineCount* default_instance_;
};
// -------------------------------------------------------------------

class OnlineCountInfo : public ::google::protobuf::Message {
 public:
  OnlineCountInfo();
  virtual ~OnlineCountInfo();

  OnlineCountInfo(const OnlineCountInfo& from);

  inline OnlineCountInfo& operator=(const OnlineCountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineCountInfo& default_instance();

  void Swap(OnlineCountInfo* other);

  // implements Message ----------------------------------------------

  OnlineCountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineCountInfo& from);
  void MergeFrom(const OnlineCountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 brachID = 1;
  inline bool has_brachid() const;
  inline void clear_brachid();
  static const int kBrachIDFieldNumber = 1;
  inline ::google::protobuf::int32 brachid() const;
  inline void set_brachid(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.OnlineCountInfo)
 private:
  inline void set_has_brachid();
  inline void clear_has_brachid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 brachid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static OnlineCountInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BranchPlayerInfo : public ::google::protobuf::Message {
 public:
  Admin_BranchPlayerInfo();
  virtual ~Admin_BranchPlayerInfo();

  Admin_BranchPlayerInfo(const Admin_BranchPlayerInfo& from);

  inline Admin_BranchPlayerInfo& operator=(const Admin_BranchPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BranchPlayerInfo& default_instance();

  void Swap(Admin_BranchPlayerInfo* other);

  // implements Message ----------------------------------------------

  Admin_BranchPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BranchPlayerInfo& from);
  void MergeFrom(const Admin_BranchPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 brachID = 1;
  inline bool has_brachid() const;
  inline void clear_brachid();
  static const int kBrachIDFieldNumber = 1;
  inline ::google::protobuf::int32 brachid() const;
  inline void set_brachid(::google::protobuf::int32 value);

  // required int32 beginNum = 2;
  inline bool has_beginnum() const;
  inline void clear_beginnum();
  static const int kBeginNumFieldNumber = 2;
  inline ::google::protobuf::int32 beginnum() const;
  inline void set_beginnum(::google::protobuf::int32 value);

  // required int32 endNum = 3;
  inline bool has_endnum() const;
  inline void clear_endnum();
  static const int kEndNumFieldNumber = 3;
  inline ::google::protobuf::int32 endnum() const;
  inline void set_endnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.Admin_BranchPlayerInfo)
 private:
  inline void set_has_brachid();
  inline void clear_has_brachid();
  inline void set_has_beginnum();
  inline void clear_has_beginnum();
  inline void set_has_endnum();
  inline void clear_has_endnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 brachid_;
  ::google::protobuf::int32 beginnum_;
  ::google::protobuf::int32 endnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_BranchPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckBranchPlayerInfo : public ::google::protobuf::Message {
 public:
  AckBranchPlayerInfo();
  virtual ~AckBranchPlayerInfo();

  AckBranchPlayerInfo(const AckBranchPlayerInfo& from);

  inline AckBranchPlayerInfo& operator=(const AckBranchPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBranchPlayerInfo& default_instance();

  void Swap(AckBranchPlayerInfo* other);

  // implements Message ----------------------------------------------

  AckBranchPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBranchPlayerInfo& from);
  void MergeFrom(const AckBranchPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 2;
  inline int branchinfo_size() const;
  inline void clear_branchinfo();
  static const int kBranchinfoFieldNumber = 2;
  inline const ::BranchPlayerInfo::BranchPlayerInfo& branchinfo(int index) const;
  inline ::BranchPlayerInfo::BranchPlayerInfo* mutable_branchinfo(int index);
  inline ::BranchPlayerInfo::BranchPlayerInfo* add_branchinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >&
      branchinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >*
      mutable_branchinfo();

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.AckBranchPlayerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo > branchinfo_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static AckBranchPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class BranchPlayerInfo : public ::google::protobuf::Message {
 public:
  BranchPlayerInfo();
  virtual ~BranchPlayerInfo();

  BranchPlayerInfo(const BranchPlayerInfo& from);

  inline BranchPlayerInfo& operator=(const BranchPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BranchPlayerInfo& default_instance();

  void Swap(BranchPlayerInfo* other);

  // implements Message ----------------------------------------------

  BranchPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BranchPlayerInfo& from);
  void MergeFrom(const BranchPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 onlineTime = 5;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlineTimeFieldNumber = 5;
  inline ::google::protobuf::int32 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::int32 value);

  // optional int32 money = 6;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 6;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 golden = 7;
  inline bool has_golden() const;
  inline void clear_golden();
  static const int kGoldenFieldNumber = 7;
  inline ::google::protobuf::int32 golden() const;
  inline void set_golden(::google::protobuf::int32 value);

  // optional int32 bindgolden = 8;
  inline bool has_bindgolden() const;
  inline void clear_bindgolden();
  static const int kBindgoldenFieldNumber = 8;
  inline ::google::protobuf::int32 bindgolden() const;
  inline void set_bindgolden(::google::protobuf::int32 value);

  // optional int32 vip = 9;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 9;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional int32 profession = 10;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 10;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int64 roleCanTalk = 11;
  inline bool has_rolecantalk() const;
  inline void clear_rolecantalk();
  static const int kRoleCanTalkFieldNumber = 11;
  inline ::google::protobuf::int64 rolecantalk() const;
  inline void set_rolecantalk(::google::protobuf::int64 value);

  // optional int64 roleCanLogin = 12;
  inline bool has_rolecanlogin() const;
  inline void clear_rolecanlogin();
  static const int kRoleCanLoginFieldNumber = 12;
  inline ::google::protobuf::int64 rolecanlogin() const;
  inline void set_rolecanlogin(::google::protobuf::int64 value);

  // optional bytes createRoleTime = 13;
  inline bool has_createroletime() const;
  inline void clear_createroletime();
  static const int kCreateRoleTimeFieldNumber = 13;
  inline const ::std::string& createroletime() const;
  inline void set_createroletime(const ::std::string& value);
  inline void set_createroletime(const char* value);
  inline void set_createroletime(const void* value, size_t size);
  inline ::std::string* mutable_createroletime();
  inline ::std::string* release_createroletime();
  inline void set_allocated_createroletime(::std::string* createroletime);

  // optional int64 lastLoginTime = 14;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 14;
  inline ::google::protobuf::int64 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int64 value);

  // optional string openID = 15;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIDFieldNumber = 15;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional int32 sex = 16;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 16;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 playerAddUpGold = 17;
  inline bool has_playeraddupgold() const;
  inline void clear_playeraddupgold();
  static const int kPlayerAddUpGoldFieldNumber = 17;
  inline ::google::protobuf::int32 playeraddupgold() const;
  inline void set_playeraddupgold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.BranchPlayerInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_golden();
  inline void clear_has_golden();
  inline void set_has_bindgolden();
  inline void clear_has_bindgolden();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_rolecantalk();
  inline void clear_has_rolecantalk();
  inline void set_has_rolecanlogin();
  inline void clear_has_rolecanlogin();
  inline void set_has_createroletime();
  inline void clear_has_createroletime();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_playeraddupgold();
  inline void clear_has_playeraddupgold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* ip_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 onlinetime_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 golden_;
  ::google::protobuf::int32 bindgolden_;
  ::google::protobuf::int32 vip_;
  ::google::protobuf::int64 rolecantalk_;
  ::google::protobuf::int64 rolecanlogin_;
  ::std::string* createroletime_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int64 lastlogintime_;
  ::std::string* openid_;
  ::google::protobuf::int32 playeraddupgold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static BranchPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class WEB_ReqListPlayerInfo : public ::google::protobuf::Message {
 public:
  WEB_ReqListPlayerInfo();
  virtual ~WEB_ReqListPlayerInfo();

  WEB_ReqListPlayerInfo(const WEB_ReqListPlayerInfo& from);

  inline WEB_ReqListPlayerInfo& operator=(const WEB_ReqListPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WEB_ReqListPlayerInfo& default_instance();

  void Swap(WEB_ReqListPlayerInfo* other);

  // implements Message ----------------------------------------------

  WEB_ReqListPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WEB_ReqListPlayerInfo& from);
  void MergeFrom(const WEB_ReqListPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 reqType = 1;
  inline bool has_reqtype() const;
  inline void clear_reqtype();
  static const int kReqTypeFieldNumber = 1;
  inline ::google::protobuf::int32 reqtype() const;
  inline void set_reqtype(::google::protobuf::int32 value);

  // required int32 beginNum = 2;
  inline bool has_beginnum() const;
  inline void clear_beginnum();
  static const int kBeginNumFieldNumber = 2;
  inline ::google::protobuf::int32 beginnum() const;
  inline void set_beginnum(::google::protobuf::int32 value);

  // required int32 endNum = 3;
  inline bool has_endnum() const;
  inline void clear_endnum();
  static const int kEndNumFieldNumber = 3;
  inline ::google::protobuf::int32 endnum() const;
  inline void set_endnum(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.WEB_ReqListPlayerInfo)
 private:
  inline void set_has_reqtype();
  inline void clear_has_reqtype();
  inline void set_has_beginnum();
  inline void clear_has_beginnum();
  inline void set_has_endnum();
  inline void clear_has_endnum();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 reqtype_;
  ::google::protobuf::int32 beginnum_;
  ::std::string* name_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 endnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static WEB_ReqListPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class WEB_AckListPlayerInfo : public ::google::protobuf::Message {
 public:
  WEB_AckListPlayerInfo();
  virtual ~WEB_AckListPlayerInfo();

  WEB_AckListPlayerInfo(const WEB_AckListPlayerInfo& from);

  inline WEB_AckListPlayerInfo& operator=(const WEB_AckListPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WEB_AckListPlayerInfo& default_instance();

  void Swap(WEB_AckListPlayerInfo* other);

  // implements Message ----------------------------------------------

  WEB_AckListPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WEB_AckListPlayerInfo& from);
  void MergeFrom(const WEB_AckListPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 sumCount = 2;
  inline bool has_sumcount() const;
  inline void clear_sumcount();
  static const int kSumCountFieldNumber = 2;
  inline ::google::protobuf::int32 sumcount() const;
  inline void set_sumcount(::google::protobuf::int32 value);

  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 3;
  inline int branchinfo_size() const;
  inline void clear_branchinfo();
  static const int kBranchinfoFieldNumber = 3;
  inline const ::BranchPlayerInfo::BranchPlayerInfo& branchinfo(int index) const;
  inline ::BranchPlayerInfo::BranchPlayerInfo* mutable_branchinfo(int index);
  inline ::BranchPlayerInfo::BranchPlayerInfo* add_branchinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >&
      branchinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >*
      mutable_branchinfo();

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.WEB_AckListPlayerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_sumcount();
  inline void clear_has_sumcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 sumcount_;
  ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo > branchinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static WEB_AckListPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqPlayerLvCount : public ::google::protobuf::Message {
 public:
  ReqPlayerLvCount();
  virtual ~ReqPlayerLvCount();

  ReqPlayerLvCount(const ReqPlayerLvCount& from);

  inline ReqPlayerLvCount& operator=(const ReqPlayerLvCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPlayerLvCount& default_instance();

  void Swap(ReqPlayerLvCount* other);

  // implements Message ----------------------------------------------

  ReqPlayerLvCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPlayerLvCount& from);
  void MergeFrom(const ReqPlayerLvCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lvBegin = 1;
  inline bool has_lvbegin() const;
  inline void clear_lvbegin();
  static const int kLvBeginFieldNumber = 1;
  inline ::google::protobuf::int32 lvbegin() const;
  inline void set_lvbegin(::google::protobuf::int32 value);

  // required int32 lvEnd = 2;
  inline bool has_lvend() const;
  inline void clear_lvend();
  static const int kLvEndFieldNumber = 2;
  inline ::google::protobuf::int32 lvend() const;
  inline void set_lvend(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.ReqPlayerLvCount)
 private:
  inline void set_has_lvbegin();
  inline void clear_has_lvbegin();
  inline void set_has_lvend();
  inline void clear_has_lvend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 lvbegin_;
  ::google::protobuf::int32 lvend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static ReqPlayerLvCount* default_instance_;
};
// -------------------------------------------------------------------

class RetPlayerLvCount : public ::google::protobuf::Message {
 public:
  RetPlayerLvCount();
  virtual ~RetPlayerLvCount();

  RetPlayerLvCount(const RetPlayerLvCount& from);

  inline RetPlayerLvCount& operator=(const RetPlayerLvCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetPlayerLvCount& default_instance();

  void Swap(RetPlayerLvCount* other);

  // implements Message ----------------------------------------------

  RetPlayerLvCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetPlayerLvCount& from);
  void MergeFrom(const RetPlayerLvCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 lvBegin = 2;
  inline bool has_lvbegin() const;
  inline void clear_lvbegin();
  static const int kLvBeginFieldNumber = 2;
  inline ::google::protobuf::int32 lvbegin() const;
  inline void set_lvbegin(::google::protobuf::int32 value);

  // optional int32 lvEnd = 3;
  inline bool has_lvend() const;
  inline void clear_lvend();
  static const int kLvEndFieldNumber = 3;
  inline ::google::protobuf::int32 lvend() const;
  inline void set_lvend(::google::protobuf::int32 value);

  // repeated int32 lvCountList = 4;
  inline int lvcountlist_size() const;
  inline void clear_lvcountlist();
  static const int kLvCountListFieldNumber = 4;
  inline ::google::protobuf::int32 lvcountlist(int index) const;
  inline void set_lvcountlist(int index, ::google::protobuf::int32 value);
  inline void add_lvcountlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lvcountlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lvcountlist();

  // optional int32 totalCount = 5;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 5;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BranchPlayerInfo.RetPlayerLvCount)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_lvbegin();
  inline void clear_has_lvbegin();
  inline void set_has_lvend();
  inline void clear_has_lvend();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 lvbegin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lvcountlist_;
  ::google::protobuf::int32 lvend_;
  ::google::protobuf::int32 totalcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();

  void InitAsDefaultInstance();
  static RetPlayerLvCount* default_instance_;
};
// ===================================================================


// ===================================================================

// BranchOnlineCount

// required int32 ret = 1;
inline bool BranchOnlineCount::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BranchOnlineCount::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BranchOnlineCount::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BranchOnlineCount::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 BranchOnlineCount::ret() const {
  return ret_;
}
inline void BranchOnlineCount::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .BranchPlayerInfo.OnlineCountInfo onlineCount = 2;
inline int BranchOnlineCount::onlinecount_size() const {
  return onlinecount_.size();
}
inline void BranchOnlineCount::clear_onlinecount() {
  onlinecount_.Clear();
}
inline const ::BranchPlayerInfo::OnlineCountInfo& BranchOnlineCount::onlinecount(int index) const {
  return onlinecount_.Get(index);
}
inline ::BranchPlayerInfo::OnlineCountInfo* BranchOnlineCount::mutable_onlinecount(int index) {
  return onlinecount_.Mutable(index);
}
inline ::BranchPlayerInfo::OnlineCountInfo* BranchOnlineCount::add_onlinecount() {
  return onlinecount_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::OnlineCountInfo >&
BranchOnlineCount::onlinecount() const {
  return onlinecount_;
}
inline ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::OnlineCountInfo >*
BranchOnlineCount::mutable_onlinecount() {
  return &onlinecount_;
}

// -------------------------------------------------------------------

// OnlineCountInfo

// required int32 brachID = 1;
inline bool OnlineCountInfo::has_brachid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineCountInfo::set_has_brachid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineCountInfo::clear_has_brachid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineCountInfo::clear_brachid() {
  brachid_ = 0;
  clear_has_brachid();
}
inline ::google::protobuf::int32 OnlineCountInfo::brachid() const {
  return brachid_;
}
inline void OnlineCountInfo::set_brachid(::google::protobuf::int32 value) {
  set_has_brachid();
  brachid_ = value;
}

// required int32 count = 2;
inline bool OnlineCountInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineCountInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineCountInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineCountInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 OnlineCountInfo::count() const {
  return count_;
}
inline void OnlineCountInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Admin_BranchPlayerInfo

// required int32 brachID = 1;
inline bool Admin_BranchPlayerInfo::has_brachid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_BranchPlayerInfo::set_has_brachid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_BranchPlayerInfo::clear_has_brachid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_BranchPlayerInfo::clear_brachid() {
  brachid_ = 0;
  clear_has_brachid();
}
inline ::google::protobuf::int32 Admin_BranchPlayerInfo::brachid() const {
  return brachid_;
}
inline void Admin_BranchPlayerInfo::set_brachid(::google::protobuf::int32 value) {
  set_has_brachid();
  brachid_ = value;
}

// required int32 beginNum = 2;
inline bool Admin_BranchPlayerInfo::has_beginnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_BranchPlayerInfo::set_has_beginnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_BranchPlayerInfo::clear_has_beginnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_BranchPlayerInfo::clear_beginnum() {
  beginnum_ = 0;
  clear_has_beginnum();
}
inline ::google::protobuf::int32 Admin_BranchPlayerInfo::beginnum() const {
  return beginnum_;
}
inline void Admin_BranchPlayerInfo::set_beginnum(::google::protobuf::int32 value) {
  set_has_beginnum();
  beginnum_ = value;
}

// required int32 endNum = 3;
inline bool Admin_BranchPlayerInfo::has_endnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_BranchPlayerInfo::set_has_endnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_BranchPlayerInfo::clear_has_endnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_BranchPlayerInfo::clear_endnum() {
  endnum_ = 0;
  clear_has_endnum();
}
inline ::google::protobuf::int32 Admin_BranchPlayerInfo::endnum() const {
  return endnum_;
}
inline void Admin_BranchPlayerInfo::set_endnum(::google::protobuf::int32 value) {
  set_has_endnum();
  endnum_ = value;
}

// -------------------------------------------------------------------

// AckBranchPlayerInfo

// required int32 ret = 1;
inline bool AckBranchPlayerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBranchPlayerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBranchPlayerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBranchPlayerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckBranchPlayerInfo::ret() const {
  return ret_;
}
inline void AckBranchPlayerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 2;
inline int AckBranchPlayerInfo::branchinfo_size() const {
  return branchinfo_.size();
}
inline void AckBranchPlayerInfo::clear_branchinfo() {
  branchinfo_.Clear();
}
inline const ::BranchPlayerInfo::BranchPlayerInfo& AckBranchPlayerInfo::branchinfo(int index) const {
  return branchinfo_.Get(index);
}
inline ::BranchPlayerInfo::BranchPlayerInfo* AckBranchPlayerInfo::mutable_branchinfo(int index) {
  return branchinfo_.Mutable(index);
}
inline ::BranchPlayerInfo::BranchPlayerInfo* AckBranchPlayerInfo::add_branchinfo() {
  return branchinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >&
AckBranchPlayerInfo::branchinfo() const {
  return branchinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >*
AckBranchPlayerInfo::mutable_branchinfo() {
  return &branchinfo_;
}

// -------------------------------------------------------------------

// BranchPlayerInfo

// required int64 id = 1;
inline bool BranchPlayerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BranchPlayerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BranchPlayerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BranchPlayerInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 BranchPlayerInfo::id() const {
  return id_;
}
inline void BranchPlayerInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool BranchPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BranchPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BranchPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BranchPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BranchPlayerInfo::name() const {
  return *name_;
}
inline void BranchPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BranchPlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BranchPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BranchPlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BranchPlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BranchPlayerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ip = 3;
inline bool BranchPlayerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BranchPlayerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BranchPlayerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BranchPlayerInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BranchPlayerInfo::ip() const {
  return *ip_;
}
inline void BranchPlayerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BranchPlayerInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BranchPlayerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BranchPlayerInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* BranchPlayerInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BranchPlayerInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 lv = 4;
inline bool BranchPlayerInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BranchPlayerInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BranchPlayerInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BranchPlayerInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 BranchPlayerInfo::lv() const {
  return lv_;
}
inline void BranchPlayerInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 onlineTime = 5;
inline bool BranchPlayerInfo::has_onlinetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BranchPlayerInfo::set_has_onlinetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BranchPlayerInfo::clear_has_onlinetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BranchPlayerInfo::clear_onlinetime() {
  onlinetime_ = 0;
  clear_has_onlinetime();
}
inline ::google::protobuf::int32 BranchPlayerInfo::onlinetime() const {
  return onlinetime_;
}
inline void BranchPlayerInfo::set_onlinetime(::google::protobuf::int32 value) {
  set_has_onlinetime();
  onlinetime_ = value;
}

// optional int32 money = 6;
inline bool BranchPlayerInfo::has_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BranchPlayerInfo::set_has_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BranchPlayerInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BranchPlayerInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 BranchPlayerInfo::money() const {
  return money_;
}
inline void BranchPlayerInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 golden = 7;
inline bool BranchPlayerInfo::has_golden() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BranchPlayerInfo::set_has_golden() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BranchPlayerInfo::clear_has_golden() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BranchPlayerInfo::clear_golden() {
  golden_ = 0;
  clear_has_golden();
}
inline ::google::protobuf::int32 BranchPlayerInfo::golden() const {
  return golden_;
}
inline void BranchPlayerInfo::set_golden(::google::protobuf::int32 value) {
  set_has_golden();
  golden_ = value;
}

// optional int32 bindgolden = 8;
inline bool BranchPlayerInfo::has_bindgolden() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BranchPlayerInfo::set_has_bindgolden() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BranchPlayerInfo::clear_has_bindgolden() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BranchPlayerInfo::clear_bindgolden() {
  bindgolden_ = 0;
  clear_has_bindgolden();
}
inline ::google::protobuf::int32 BranchPlayerInfo::bindgolden() const {
  return bindgolden_;
}
inline void BranchPlayerInfo::set_bindgolden(::google::protobuf::int32 value) {
  set_has_bindgolden();
  bindgolden_ = value;
}

// optional int32 vip = 9;
inline bool BranchPlayerInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BranchPlayerInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BranchPlayerInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BranchPlayerInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 BranchPlayerInfo::vip() const {
  return vip_;
}
inline void BranchPlayerInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional int32 profession = 10;
inline bool BranchPlayerInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BranchPlayerInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BranchPlayerInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BranchPlayerInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 BranchPlayerInfo::profession() const {
  return profession_;
}
inline void BranchPlayerInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int64 roleCanTalk = 11;
inline bool BranchPlayerInfo::has_rolecantalk() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BranchPlayerInfo::set_has_rolecantalk() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BranchPlayerInfo::clear_has_rolecantalk() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BranchPlayerInfo::clear_rolecantalk() {
  rolecantalk_ = GOOGLE_LONGLONG(0);
  clear_has_rolecantalk();
}
inline ::google::protobuf::int64 BranchPlayerInfo::rolecantalk() const {
  return rolecantalk_;
}
inline void BranchPlayerInfo::set_rolecantalk(::google::protobuf::int64 value) {
  set_has_rolecantalk();
  rolecantalk_ = value;
}

// optional int64 roleCanLogin = 12;
inline bool BranchPlayerInfo::has_rolecanlogin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BranchPlayerInfo::set_has_rolecanlogin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BranchPlayerInfo::clear_has_rolecanlogin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BranchPlayerInfo::clear_rolecanlogin() {
  rolecanlogin_ = GOOGLE_LONGLONG(0);
  clear_has_rolecanlogin();
}
inline ::google::protobuf::int64 BranchPlayerInfo::rolecanlogin() const {
  return rolecanlogin_;
}
inline void BranchPlayerInfo::set_rolecanlogin(::google::protobuf::int64 value) {
  set_has_rolecanlogin();
  rolecanlogin_ = value;
}

// optional bytes createRoleTime = 13;
inline bool BranchPlayerInfo::has_createroletime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BranchPlayerInfo::set_has_createroletime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BranchPlayerInfo::clear_has_createroletime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BranchPlayerInfo::clear_createroletime() {
  if (createroletime_ != &::google::protobuf::internal::kEmptyString) {
    createroletime_->clear();
  }
  clear_has_createroletime();
}
inline const ::std::string& BranchPlayerInfo::createroletime() const {
  return *createroletime_;
}
inline void BranchPlayerInfo::set_createroletime(const ::std::string& value) {
  set_has_createroletime();
  if (createroletime_ == &::google::protobuf::internal::kEmptyString) {
    createroletime_ = new ::std::string;
  }
  createroletime_->assign(value);
}
inline void BranchPlayerInfo::set_createroletime(const char* value) {
  set_has_createroletime();
  if (createroletime_ == &::google::protobuf::internal::kEmptyString) {
    createroletime_ = new ::std::string;
  }
  createroletime_->assign(value);
}
inline void BranchPlayerInfo::set_createroletime(const void* value, size_t size) {
  set_has_createroletime();
  if (createroletime_ == &::google::protobuf::internal::kEmptyString) {
    createroletime_ = new ::std::string;
  }
  createroletime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BranchPlayerInfo::mutable_createroletime() {
  set_has_createroletime();
  if (createroletime_ == &::google::protobuf::internal::kEmptyString) {
    createroletime_ = new ::std::string;
  }
  return createroletime_;
}
inline ::std::string* BranchPlayerInfo::release_createroletime() {
  clear_has_createroletime();
  if (createroletime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createroletime_;
    createroletime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BranchPlayerInfo::set_allocated_createroletime(::std::string* createroletime) {
  if (createroletime_ != &::google::protobuf::internal::kEmptyString) {
    delete createroletime_;
  }
  if (createroletime) {
    set_has_createroletime();
    createroletime_ = createroletime;
  } else {
    clear_has_createroletime();
    createroletime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 lastLoginTime = 14;
inline bool BranchPlayerInfo::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BranchPlayerInfo::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BranchPlayerInfo::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BranchPlayerInfo::clear_lastlogintime() {
  lastlogintime_ = GOOGLE_LONGLONG(0);
  clear_has_lastlogintime();
}
inline ::google::protobuf::int64 BranchPlayerInfo::lastlogintime() const {
  return lastlogintime_;
}
inline void BranchPlayerInfo::set_lastlogintime(::google::protobuf::int64 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// optional string openID = 15;
inline bool BranchPlayerInfo::has_openid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BranchPlayerInfo::set_has_openid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BranchPlayerInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BranchPlayerInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& BranchPlayerInfo::openid() const {
  return *openid_;
}
inline void BranchPlayerInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void BranchPlayerInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void BranchPlayerInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BranchPlayerInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* BranchPlayerInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BranchPlayerInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 16;
inline bool BranchPlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BranchPlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BranchPlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BranchPlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 BranchPlayerInfo::sex() const {
  return sex_;
}
inline void BranchPlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 playerAddUpGold = 17;
inline bool BranchPlayerInfo::has_playeraddupgold() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BranchPlayerInfo::set_has_playeraddupgold() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BranchPlayerInfo::clear_has_playeraddupgold() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BranchPlayerInfo::clear_playeraddupgold() {
  playeraddupgold_ = 0;
  clear_has_playeraddupgold();
}
inline ::google::protobuf::int32 BranchPlayerInfo::playeraddupgold() const {
  return playeraddupgold_;
}
inline void BranchPlayerInfo::set_playeraddupgold(::google::protobuf::int32 value) {
  set_has_playeraddupgold();
  playeraddupgold_ = value;
}

// -------------------------------------------------------------------

// WEB_ReqListPlayerInfo

// required int32 reqType = 1;
inline bool WEB_ReqListPlayerInfo::has_reqtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WEB_ReqListPlayerInfo::set_has_reqtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WEB_ReqListPlayerInfo::clear_has_reqtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WEB_ReqListPlayerInfo::clear_reqtype() {
  reqtype_ = 0;
  clear_has_reqtype();
}
inline ::google::protobuf::int32 WEB_ReqListPlayerInfo::reqtype() const {
  return reqtype_;
}
inline void WEB_ReqListPlayerInfo::set_reqtype(::google::protobuf::int32 value) {
  set_has_reqtype();
  reqtype_ = value;
}

// required int32 beginNum = 2;
inline bool WEB_ReqListPlayerInfo::has_beginnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WEB_ReqListPlayerInfo::set_has_beginnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WEB_ReqListPlayerInfo::clear_has_beginnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WEB_ReqListPlayerInfo::clear_beginnum() {
  beginnum_ = 0;
  clear_has_beginnum();
}
inline ::google::protobuf::int32 WEB_ReqListPlayerInfo::beginnum() const {
  return beginnum_;
}
inline void WEB_ReqListPlayerInfo::set_beginnum(::google::protobuf::int32 value) {
  set_has_beginnum();
  beginnum_ = value;
}

// required int32 endNum = 3;
inline bool WEB_ReqListPlayerInfo::has_endnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WEB_ReqListPlayerInfo::set_has_endnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WEB_ReqListPlayerInfo::clear_has_endnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WEB_ReqListPlayerInfo::clear_endnum() {
  endnum_ = 0;
  clear_has_endnum();
}
inline ::google::protobuf::int32 WEB_ReqListPlayerInfo::endnum() const {
  return endnum_;
}
inline void WEB_ReqListPlayerInfo::set_endnum(::google::protobuf::int32 value) {
  set_has_endnum();
  endnum_ = value;
}

// optional string name = 4;
inline bool WEB_ReqListPlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WEB_ReqListPlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WEB_ReqListPlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WEB_ReqListPlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WEB_ReqListPlayerInfo::name() const {
  return *name_;
}
inline void WEB_ReqListPlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WEB_ReqListPlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WEB_ReqListPlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WEB_ReqListPlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WEB_ReqListPlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WEB_ReqListPlayerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 id = 5;
inline bool WEB_ReqListPlayerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WEB_ReqListPlayerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WEB_ReqListPlayerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WEB_ReqListPlayerInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 WEB_ReqListPlayerInfo::id() const {
  return id_;
}
inline void WEB_ReqListPlayerInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// WEB_AckListPlayerInfo

// required int32 ret = 1;
inline bool WEB_AckListPlayerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WEB_AckListPlayerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WEB_AckListPlayerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WEB_AckListPlayerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WEB_AckListPlayerInfo::ret() const {
  return ret_;
}
inline void WEB_AckListPlayerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 sumCount = 2;
inline bool WEB_AckListPlayerInfo::has_sumcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WEB_AckListPlayerInfo::set_has_sumcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WEB_AckListPlayerInfo::clear_has_sumcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WEB_AckListPlayerInfo::clear_sumcount() {
  sumcount_ = 0;
  clear_has_sumcount();
}
inline ::google::protobuf::int32 WEB_AckListPlayerInfo::sumcount() const {
  return sumcount_;
}
inline void WEB_AckListPlayerInfo::set_sumcount(::google::protobuf::int32 value) {
  set_has_sumcount();
  sumcount_ = value;
}

// repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 3;
inline int WEB_AckListPlayerInfo::branchinfo_size() const {
  return branchinfo_.size();
}
inline void WEB_AckListPlayerInfo::clear_branchinfo() {
  branchinfo_.Clear();
}
inline const ::BranchPlayerInfo::BranchPlayerInfo& WEB_AckListPlayerInfo::branchinfo(int index) const {
  return branchinfo_.Get(index);
}
inline ::BranchPlayerInfo::BranchPlayerInfo* WEB_AckListPlayerInfo::mutable_branchinfo(int index) {
  return branchinfo_.Mutable(index);
}
inline ::BranchPlayerInfo::BranchPlayerInfo* WEB_AckListPlayerInfo::add_branchinfo() {
  return branchinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >&
WEB_AckListPlayerInfo::branchinfo() const {
  return branchinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::BranchPlayerInfo::BranchPlayerInfo >*
WEB_AckListPlayerInfo::mutable_branchinfo() {
  return &branchinfo_;
}

// -------------------------------------------------------------------

// ReqPlayerLvCount

// required int32 lvBegin = 1;
inline bool ReqPlayerLvCount::has_lvbegin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayerLvCount::set_has_lvbegin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPlayerLvCount::clear_has_lvbegin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPlayerLvCount::clear_lvbegin() {
  lvbegin_ = 0;
  clear_has_lvbegin();
}
inline ::google::protobuf::int32 ReqPlayerLvCount::lvbegin() const {
  return lvbegin_;
}
inline void ReqPlayerLvCount::set_lvbegin(::google::protobuf::int32 value) {
  set_has_lvbegin();
  lvbegin_ = value;
}

// required int32 lvEnd = 2;
inline bool ReqPlayerLvCount::has_lvend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayerLvCount::set_has_lvend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPlayerLvCount::clear_has_lvend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPlayerLvCount::clear_lvend() {
  lvend_ = 0;
  clear_has_lvend();
}
inline ::google::protobuf::int32 ReqPlayerLvCount::lvend() const {
  return lvend_;
}
inline void ReqPlayerLvCount::set_lvend(::google::protobuf::int32 value) {
  set_has_lvend();
  lvend_ = value;
}

// -------------------------------------------------------------------

// RetPlayerLvCount

// required int32 ret = 1;
inline bool RetPlayerLvCount::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetPlayerLvCount::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetPlayerLvCount::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetPlayerLvCount::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetPlayerLvCount::ret() const {
  return ret_;
}
inline void RetPlayerLvCount::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 lvBegin = 2;
inline bool RetPlayerLvCount::has_lvbegin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetPlayerLvCount::set_has_lvbegin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetPlayerLvCount::clear_has_lvbegin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetPlayerLvCount::clear_lvbegin() {
  lvbegin_ = 0;
  clear_has_lvbegin();
}
inline ::google::protobuf::int32 RetPlayerLvCount::lvbegin() const {
  return lvbegin_;
}
inline void RetPlayerLvCount::set_lvbegin(::google::protobuf::int32 value) {
  set_has_lvbegin();
  lvbegin_ = value;
}

// optional int32 lvEnd = 3;
inline bool RetPlayerLvCount::has_lvend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetPlayerLvCount::set_has_lvend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetPlayerLvCount::clear_has_lvend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetPlayerLvCount::clear_lvend() {
  lvend_ = 0;
  clear_has_lvend();
}
inline ::google::protobuf::int32 RetPlayerLvCount::lvend() const {
  return lvend_;
}
inline void RetPlayerLvCount::set_lvend(::google::protobuf::int32 value) {
  set_has_lvend();
  lvend_ = value;
}

// repeated int32 lvCountList = 4;
inline int RetPlayerLvCount::lvcountlist_size() const {
  return lvcountlist_.size();
}
inline void RetPlayerLvCount::clear_lvcountlist() {
  lvcountlist_.Clear();
}
inline ::google::protobuf::int32 RetPlayerLvCount::lvcountlist(int index) const {
  return lvcountlist_.Get(index);
}
inline void RetPlayerLvCount::set_lvcountlist(int index, ::google::protobuf::int32 value) {
  lvcountlist_.Set(index, value);
}
inline void RetPlayerLvCount::add_lvcountlist(::google::protobuf::int32 value) {
  lvcountlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RetPlayerLvCount::lvcountlist() const {
  return lvcountlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RetPlayerLvCount::mutable_lvcountlist() {
  return &lvcountlist_;
}

// optional int32 totalCount = 5;
inline bool RetPlayerLvCount::has_totalcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RetPlayerLvCount::set_has_totalcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RetPlayerLvCount::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RetPlayerLvCount::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 RetPlayerLvCount::totalcount() const {
  return totalcount_;
}
inline void RetPlayerLvCount::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BranchPlayerInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto__INCLUDED
