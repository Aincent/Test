// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/Country.proto

#ifndef PROTOBUF_Country_2fCountry_2eproto__INCLUDED
#define PROTOBUF_Country_2fCountry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CountryPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Country_2fCountry_2eproto();
void protobuf_AssignDesc_Country_2fCountry_2eproto();
void protobuf_ShutdownFile_Country_2fCountry_2eproto();

class CountryBaseNums;
class AckCountryBaseNums;
class ClientReqJionCountry;
class AckClientReqJionCountry;
class CountryInfo;
class AckClientCountryStore;
class ClientReqMemList;
class AckClientReqMemList;
class CountryMemInfo;
class CountryItem;
class CountryItemList;
class AckClientReqLiveUpCountry;
class ClientReqChangeCountry;
class AckClientChangeCountry;
class ClientReqContribute;
class AckClientReqContribute;
class ClientReqModifyNotice;
class AckClientModifyNotice;
class ClientReqLastWeekJobRank;
class AckClientReqLastWeekJobRank;
class JobRankMember;
class AckClientReqJobPrize;
class ClientReqKingRank;
class AckClientReqKingRank;
class KingRankMem;
class AckClientReqShopInfo;
class CountryShopItem;
class ClientReqBuyShopItem;
class AckClientReqBuyShopItem;
class GSReqWSContribute;
class WSNoticeGSCountryLiveUp;
class WStoGsCountryInfo;
class CountryGrade;
class DBShopInfoList;
class DBShopItem;
class WeekUpdate;
class WeekJobs;
class WStoGSAttrChange;
class WSToGMCountryBattle;

// ===================================================================

class CountryBaseNums : public ::google::protobuf::Message {
 public:
  CountryBaseNums();
  virtual ~CountryBaseNums();

  CountryBaseNums(const CountryBaseNums& from);

  inline CountryBaseNums& operator=(const CountryBaseNums& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBaseNums& default_instance();

  void Swap(CountryBaseNums* other);

  // implements Message ----------------------------------------------

  CountryBaseNums* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBaseNums& from);
  void MergeFrom(const CountryBaseNums& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 countryID = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 1;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);

  // optional int32 nums = 2;
  inline bool has_nums() const;
  inline void clear_nums();
  static const int kNumsFieldNumber = 2;
  inline ::google::protobuf::int32 nums() const;
  inline void set_nums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryBaseNums)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_nums();
  inline void clear_has_nums();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 nums_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryBaseNums* default_instance_;
};
// -------------------------------------------------------------------

class AckCountryBaseNums : public ::google::protobuf::Message {
 public:
  AckCountryBaseNums();
  virtual ~AckCountryBaseNums();

  AckCountryBaseNums(const AckCountryBaseNums& from);

  inline AckCountryBaseNums& operator=(const AckCountryBaseNums& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckCountryBaseNums& default_instance();

  void Swap(AckCountryBaseNums* other);

  // implements Message ----------------------------------------------

  AckCountryBaseNums* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckCountryBaseNums& from);
  void MergeFrom(const AckCountryBaseNums& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.CountryBaseNums item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::CountryPackage::CountryBaseNums& item(int index) const;
  inline ::CountryPackage::CountryBaseNums* mutable_item(int index);
  inline ::CountryPackage::CountryBaseNums* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryBaseNums >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryBaseNums >*
      mutable_item();

  // optional int32 recommendCtry = 2;
  inline bool has_recommendctry() const;
  inline void clear_recommendctry();
  static const int kRecommendCtryFieldNumber = 2;
  inline ::google::protobuf::int32 recommendctry() const;
  inline void set_recommendctry(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckCountryBaseNums)
 private:
  inline void set_has_recommendctry();
  inline void clear_has_recommendctry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryBaseNums > item_;
  ::google::protobuf::int32 recommendctry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckCountryBaseNums* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqJionCountry : public ::google::protobuf::Message {
 public:
  ClientReqJionCountry();
  virtual ~ClientReqJionCountry();

  ClientReqJionCountry(const ClientReqJionCountry& from);

  inline ClientReqJionCountry& operator=(const ClientReqJionCountry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqJionCountry& default_instance();

  void Swap(ClientReqJionCountry* other);

  // implements Message ----------------------------------------------

  ClientReqJionCountry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqJionCountry& from);
  void MergeFrom(const ClientReqJionCountry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 countryID = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 1;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqJionCountry)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 countryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqJionCountry* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqJionCountry : public ::google::protobuf::Message {
 public:
  AckClientReqJionCountry();
  virtual ~AckClientReqJionCountry();

  AckClientReqJionCountry(const AckClientReqJionCountry& from);

  inline AckClientReqJionCountry& operator=(const AckClientReqJionCountry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqJionCountry& default_instance();

  void Swap(AckClientReqJionCountry* other);

  // implements Message ----------------------------------------------

  AckClientReqJionCountry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqJionCountry& from);
  void MergeFrom(const AckClientReqJionCountry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // optional int32 countryID = 2;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 2;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);

  // optional int32 getAwardErr = 3;
  inline bool has_getawarderr() const;
  inline void clear_getawarderr();
  static const int kGetAwardErrFieldNumber = 3;
  inline ::google::protobuf::int32 getawarderr() const;
  inline void set_getawarderr(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqJionCountry)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_getawarderr();
  inline void clear_has_getawarderr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 success_;
  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 getawarderr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqJionCountry* default_instance_;
};
// -------------------------------------------------------------------

class CountryInfo : public ::google::protobuf::Message {
 public:
  CountryInfo();
  virtual ~CountryInfo();

  CountryInfo(const CountryInfo& from);

  inline CountryInfo& operator=(const CountryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryInfo& default_instance();

  void Swap(CountryInfo* other);

  // implements Message ----------------------------------------------

  CountryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryInfo& from);
  void MergeFrom(const CountryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 CountryID = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 1;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);

  // optional int32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 Money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional bytes leaderName = 4;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeaderNameFieldNumber = 4;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const void* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional bytes CounsellorName = 5;
  inline bool has_counsellorname() const;
  inline void clear_counsellorname();
  static const int kCounsellorNameFieldNumber = 5;
  inline const ::std::string& counsellorname() const;
  inline void set_counsellorname(const ::std::string& value);
  inline void set_counsellorname(const char* value);
  inline void set_counsellorname(const void* value, size_t size);
  inline ::std::string* mutable_counsellorname();
  inline ::std::string* release_counsellorname();
  inline void set_allocated_counsellorname(::std::string* counsellorname);

  // optional bytes notice = 6;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 6;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional int32 count = 7;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 7;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryInfo)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_counsellorname();
  inline void clear_has_counsellorname();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 countryid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 money_;
  ::std::string* leadername_;
  ::std::string* counsellorname_;
  ::std::string* notice_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckClientCountryStore : public ::google::protobuf::Message {
 public:
  AckClientCountryStore();
  virtual ~AckClientCountryStore();

  AckClientCountryStore(const AckClientCountryStore& from);

  inline AckClientCountryStore& operator=(const AckClientCountryStore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientCountryStore& default_instance();

  void Swap(AckClientCountryStore* other);

  // implements Message ----------------------------------------------

  AckClientCountryStore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientCountryStore& from);
  void MergeFrom(const AckClientCountryStore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.CountryItem prop = 1;
  inline int prop_size() const;
  inline void clear_prop();
  static const int kPropFieldNumber = 1;
  inline const ::CountryPackage::CountryItem& prop(int index) const;
  inline ::CountryPackage::CountryItem* mutable_prop(int index);
  inline ::CountryPackage::CountryItem* add_prop();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
      prop() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
      mutable_prop();

  // optional int64 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional int32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientCountryStore)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem > prop_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientCountryStore* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqMemList : public ::google::protobuf::Message {
 public:
  ClientReqMemList();
  virtual ~ClientReqMemList();

  ClientReqMemList(const ClientReqMemList& from);

  inline ClientReqMemList& operator=(const ClientReqMemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqMemList& default_instance();

  void Swap(ClientReqMemList* other);

  // implements Message ----------------------------------------------

  ClientReqMemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqMemList& from);
  void MergeFrom(const ClientReqMemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 page = 1;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqMemList)
 private:
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 page_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqMemList* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqMemList : public ::google::protobuf::Message {
 public:
  AckClientReqMemList();
  virtual ~AckClientReqMemList();

  AckClientReqMemList(const AckClientReqMemList& from);

  inline AckClientReqMemList& operator=(const AckClientReqMemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqMemList& default_instance();

  void Swap(AckClientReqMemList* other);

  // implements Message ----------------------------------------------

  AckClientReqMemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqMemList& from);
  void MergeFrom(const AckClientReqMemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.CountryMemInfo mems = 1;
  inline int mems_size() const;
  inline void clear_mems();
  static const int kMemsFieldNumber = 1;
  inline const ::CountryPackage::CountryMemInfo& mems(int index) const;
  inline ::CountryPackage::CountryMemInfo* mutable_mems(int index);
  inline ::CountryPackage::CountryMemInfo* add_mems();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryMemInfo >&
      mems() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryMemInfo >*
      mutable_mems();

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqMemList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryMemInfo > mems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqMemList* default_instance_;
};
// -------------------------------------------------------------------

class CountryMemInfo : public ::google::protobuf::Message {
 public:
  CountryMemInfo();
  virtual ~CountryMemInfo();

  CountryMemInfo(const CountryMemInfo& from);

  inline CountryMemInfo& operator=(const CountryMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryMemInfo& default_instance();

  void Swap(CountryMemInfo* other);

  // implements Message ----------------------------------------------

  CountryMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryMemInfo& from);
  void MergeFrom(const CountryMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 contribute = 5;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 5;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // optional int32 power = 6;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 6;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 job = 7;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 7;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional int32 vip = 8;
  inline bool has_vip() const;
  inline void clear_vip();
  static const int kVipFieldNumber = 8;
  inline ::google::protobuf::int32 vip() const;
  inline void set_vip(::google::protobuf::int32 value);

  // optional bool onLine = 9;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnLineFieldNumber = 9;
  inline bool online() const;
  inline void set_online(bool value);

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryMemInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_vip();
  inline void clear_has_vip();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 vip_;
  bool online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class CountryItem : public ::google::protobuf::Message {
 public:
  CountryItem();
  virtual ~CountryItem();

  CountryItem(const CountryItem& from);

  inline CountryItem& operator=(const CountryItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryItem& default_instance();

  void Swap(CountryItem* other);

  // implements Message ----------------------------------------------

  CountryItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryItem& from);
  void MergeFrom(const CountryItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 propID = 2;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIDFieldNumber = 2;
  inline ::google::protobuf::int32 propid() const;
  inline void set_propid(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_propid();
  inline void clear_has_propid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 propid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryItem* default_instance_;
};
// -------------------------------------------------------------------

class CountryItemList : public ::google::protobuf::Message {
 public:
  CountryItemList();
  virtual ~CountryItemList();

  CountryItemList(const CountryItemList& from);

  inline CountryItemList& operator=(const CountryItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryItemList& default_instance();

  void Swap(CountryItemList* other);

  // implements Message ----------------------------------------------

  CountryItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryItemList& from);
  void MergeFrom(const CountryItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.CountryItem propinfo = 1;
  inline int propinfo_size() const;
  inline void clear_propinfo();
  static const int kPropinfoFieldNumber = 1;
  inline const ::CountryPackage::CountryItem& propinfo(int index) const;
  inline ::CountryPackage::CountryItem* mutable_propinfo(int index);
  inline ::CountryPackage::CountryItem* add_propinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
      propinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
      mutable_propinfo();

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryItemList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem > propinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryItemList* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqLiveUpCountry : public ::google::protobuf::Message {
 public:
  AckClientReqLiveUpCountry();
  virtual ~AckClientReqLiveUpCountry();

  AckClientReqLiveUpCountry(const AckClientReqLiveUpCountry& from);

  inline AckClientReqLiveUpCountry& operator=(const AckClientReqLiveUpCountry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqLiveUpCountry& default_instance();

  void Swap(AckClientReqLiveUpCountry* other);

  // implements Message ----------------------------------------------

  AckClientReqLiveUpCountry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqLiveUpCountry& from);
  void MergeFrom(const AckClientReqLiveUpCountry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 money = 3;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 3;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // repeated .CountryPackage.CountryItem item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::CountryPackage::CountryItem& item(int index) const;
  inline ::CountryPackage::CountryItem* mutable_item(int index);
  inline ::CountryPackage::CountryItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqLiveUpCountry)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 success_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqLiveUpCountry* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqChangeCountry : public ::google::protobuf::Message {
 public:
  ClientReqChangeCountry();
  virtual ~ClientReqChangeCountry();

  ClientReqChangeCountry(const ClientReqChangeCountry& from);

  inline ClientReqChangeCountry& operator=(const ClientReqChangeCountry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqChangeCountry& default_instance();

  void Swap(ClientReqChangeCountry* other);

  // implements Message ----------------------------------------------

  ClientReqChangeCountry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqChangeCountry& from);
  void MergeFrom(const ClientReqChangeCountry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 destID = 1;
  inline bool has_destid() const;
  inline void clear_destid();
  static const int kDestIDFieldNumber = 1;
  inline ::google::protobuf::int32 destid() const;
  inline void set_destid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqChangeCountry)
 private:
  inline void set_has_destid();
  inline void clear_has_destid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 destid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqChangeCountry* default_instance_;
};
// -------------------------------------------------------------------

class AckClientChangeCountry : public ::google::protobuf::Message {
 public:
  AckClientChangeCountry();
  virtual ~AckClientChangeCountry();

  AckClientChangeCountry(const AckClientChangeCountry& from);

  inline AckClientChangeCountry& operator=(const AckClientChangeCountry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientChangeCountry& default_instance();

  void Swap(AckClientChangeCountry* other);

  // implements Message ----------------------------------------------

  AckClientChangeCountry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientChangeCountry& from);
  void MergeFrom(const AckClientChangeCountry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // optional .CountryPackage.CountryInfo newCountryInfo = 2;
  inline bool has_newcountryinfo() const;
  inline void clear_newcountryinfo();
  static const int kNewCountryInfoFieldNumber = 2;
  inline const ::CountryPackage::CountryInfo& newcountryinfo() const;
  inline ::CountryPackage::CountryInfo* mutable_newcountryinfo();
  inline ::CountryPackage::CountryInfo* release_newcountryinfo();
  inline void set_allocated_newcountryinfo(::CountryPackage::CountryInfo* newcountryinfo);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientChangeCountry)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_newcountryinfo();
  inline void clear_has_newcountryinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CountryPackage::CountryInfo* newcountryinfo_;
  ::google::protobuf::int32 success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientChangeCountry* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqContribute : public ::google::protobuf::Message {
 public:
  ClientReqContribute();
  virtual ~ClientReqContribute();

  ClientReqContribute(const ClientReqContribute& from);

  inline ClientReqContribute& operator=(const ClientReqContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqContribute& default_instance();

  void Swap(ClientReqContribute* other);

  // implements Message ----------------------------------------------

  ClientReqContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqContribute& from);
  void MergeFrom(const ClientReqContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqContribute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqContribute* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqContribute : public ::google::protobuf::Message {
 public:
  AckClientReqContribute();
  virtual ~AckClientReqContribute();

  AckClientReqContribute(const AckClientReqContribute& from);

  inline AckClientReqContribute& operator=(const AckClientReqContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqContribute& default_instance();

  void Swap(AckClientReqContribute* other);

  // implements Message ----------------------------------------------

  AckClientReqContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqContribute& from);
  void MergeFrom(const AckClientReqContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // optional int64 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // repeated .CountryPackage.CountryItem item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::CountryPackage::CountryItem& item(int index) const;
  inline ::CountryPackage::CountryItem* mutable_item(int index);
  inline ::CountryPackage::CountryItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
      mutable_item();

  // optional int32 contribute = 4;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 4;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqContribute)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 success_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqContribute* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqModifyNotice : public ::google::protobuf::Message {
 public:
  ClientReqModifyNotice();
  virtual ~ClientReqModifyNotice();

  ClientReqModifyNotice(const ClientReqModifyNotice& from);

  inline ClientReqModifyNotice& operator=(const ClientReqModifyNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqModifyNotice& default_instance();

  void Swap(ClientReqModifyNotice* other);

  // implements Message ----------------------------------------------

  ClientReqModifyNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqModifyNotice& from);
  void MergeFrom(const ClientReqModifyNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes noticeMessage = 1;
  inline bool has_noticemessage() const;
  inline void clear_noticemessage();
  static const int kNoticeMessageFieldNumber = 1;
  inline const ::std::string& noticemessage() const;
  inline void set_noticemessage(const ::std::string& value);
  inline void set_noticemessage(const char* value);
  inline void set_noticemessage(const void* value, size_t size);
  inline ::std::string* mutable_noticemessage();
  inline ::std::string* release_noticemessage();
  inline void set_allocated_noticemessage(::std::string* noticemessage);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqModifyNotice)
 private:
  inline void set_has_noticemessage();
  inline void clear_has_noticemessage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* noticemessage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqModifyNotice* default_instance_;
};
// -------------------------------------------------------------------

class AckClientModifyNotice : public ::google::protobuf::Message {
 public:
  AckClientModifyNotice();
  virtual ~AckClientModifyNotice();

  AckClientModifyNotice(const AckClientModifyNotice& from);

  inline AckClientModifyNotice& operator=(const AckClientModifyNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientModifyNotice& default_instance();

  void Swap(AckClientModifyNotice* other);

  // implements Message ----------------------------------------------

  AckClientModifyNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientModifyNotice& from);
  void MergeFrom(const AckClientModifyNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // optional bytes noticeMesage = 2;
  inline bool has_noticemesage() const;
  inline void clear_noticemesage();
  static const int kNoticeMesageFieldNumber = 2;
  inline const ::std::string& noticemesage() const;
  inline void set_noticemesage(const ::std::string& value);
  inline void set_noticemesage(const char* value);
  inline void set_noticemesage(const void* value, size_t size);
  inline ::std::string* mutable_noticemesage();
  inline ::std::string* release_noticemesage();
  inline void set_allocated_noticemesage(::std::string* noticemesage);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientModifyNotice)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_noticemesage();
  inline void clear_has_noticemesage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* noticemesage_;
  ::google::protobuf::int32 success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientModifyNotice* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqLastWeekJobRank : public ::google::protobuf::Message {
 public:
  ClientReqLastWeekJobRank();
  virtual ~ClientReqLastWeekJobRank();

  ClientReqLastWeekJobRank(const ClientReqLastWeekJobRank& from);

  inline ClientReqLastWeekJobRank& operator=(const ClientReqLastWeekJobRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqLastWeekJobRank& default_instance();

  void Swap(ClientReqLastWeekJobRank* other);

  // implements Message ----------------------------------------------

  ClientReqLastWeekJobRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqLastWeekJobRank& from);
  void MergeFrom(const ClientReqLastWeekJobRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 countryID = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 1;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqLastWeekJobRank)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 countryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqLastWeekJobRank* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqLastWeekJobRank : public ::google::protobuf::Message {
 public:
  AckClientReqLastWeekJobRank();
  virtual ~AckClientReqLastWeekJobRank();

  AckClientReqLastWeekJobRank(const AckClientReqLastWeekJobRank& from);

  inline AckClientReqLastWeekJobRank& operator=(const AckClientReqLastWeekJobRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqLastWeekJobRank& default_instance();

  void Swap(AckClientReqLastWeekJobRank* other);

  // implements Message ----------------------------------------------

  AckClientReqLastWeekJobRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqLastWeekJobRank& from);
  void MergeFrom(const AckClientReqLastWeekJobRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 countryID = 1;
  inline bool has_countryid() const;
  inline void clear_countryid();
  static const int kCountryIDFieldNumber = 1;
  inline ::google::protobuf::int32 countryid() const;
  inline void set_countryid(::google::protobuf::int32 value);

  // optional bool limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  inline bool limit() const;
  inline void set_limit(bool value);

  // optional bool fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline bool fetch() const;
  inline void set_fetch(bool value);

  // repeated .CountryPackage.JobRankMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::CountryPackage::JobRankMember& members(int index) const;
  inline ::CountryPackage::JobRankMember* mutable_members(int index);
  inline ::CountryPackage::JobRankMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::JobRankMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::JobRankMember >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqLastWeekJobRank)
 private:
  inline void set_has_countryid();
  inline void clear_has_countryid();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 countryid_;
  bool limit_;
  bool fetch_;
  ::google::protobuf::RepeatedPtrField< ::CountryPackage::JobRankMember > members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqLastWeekJobRank* default_instance_;
};
// -------------------------------------------------------------------

class JobRankMember : public ::google::protobuf::Message {
 public:
  JobRankMember();
  virtual ~JobRankMember();

  JobRankMember(const JobRankMember& from);

  inline JobRankMember& operator=(const JobRankMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobRankMember& default_instance();

  void Swap(JobRankMember* other);

  // implements Message ----------------------------------------------

  JobRankMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JobRankMember& from);
  void MergeFrom(const JobRankMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 job = 2;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 weapon = 4;
  inline bool has_weapon() const;
  inline void clear_weapon();
  static const int kWeaponFieldNumber = 4;
  inline ::google::protobuf::int32 weapon() const;
  inline void set_weapon(::google::protobuf::int32 value);

  // optional int32 cloth = 5;
  inline bool has_cloth() const;
  inline void clear_cloth();
  static const int kClothFieldNumber = 5;
  inline ::google::protobuf::int32 cloth() const;
  inline void set_cloth(::google::protobuf::int32 value);

  // optional int32 shenbing = 6;
  inline bool has_shenbing() const;
  inline void clear_shenbing();
  static const int kShenbingFieldNumber = 6;
  inline ::google::protobuf::int32 shenbing() const;
  inline void set_shenbing(::google::protobuf::int32 value);

  // optional int32 fashion = 7;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 7;
  inline ::google::protobuf::int32 fashion() const;
  inline void set_fashion(::google::protobuf::int32 value);

  // optional int32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 profession = 9;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 9;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.JobRankMember)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_weapon();
  inline void clear_has_weapon();
  inline void set_has_cloth();
  inline void clear_has_cloth();
  inline void set_has_shenbing();
  inline void clear_has_shenbing();
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 weapon_;
  ::google::protobuf::int32 cloth_;
  ::google::protobuf::int32 shenbing_;
  ::google::protobuf::int32 fashion_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 profession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static JobRankMember* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqJobPrize : public ::google::protobuf::Message {
 public:
  AckClientReqJobPrize();
  virtual ~AckClientReqJobPrize();

  AckClientReqJobPrize(const AckClientReqJobPrize& from);

  inline AckClientReqJobPrize& operator=(const AckClientReqJobPrize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqJobPrize& default_instance();

  void Swap(AckClientReqJobPrize* other);

  // implements Message ----------------------------------------------

  AckClientReqJobPrize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqJobPrize& from);
  void MergeFrom(const AckClientReqJobPrize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 seccess = 1;
  inline bool has_seccess() const;
  inline void clear_seccess();
  static const int kSeccessFieldNumber = 1;
  inline ::google::protobuf::int32 seccess() const;
  inline void set_seccess(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqJobPrize)
 private:
  inline void set_has_seccess();
  inline void clear_has_seccess();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seccess_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqJobPrize* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqKingRank : public ::google::protobuf::Message {
 public:
  ClientReqKingRank();
  virtual ~ClientReqKingRank();

  ClientReqKingRank(const ClientReqKingRank& from);

  inline ClientReqKingRank& operator=(const ClientReqKingRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqKingRank& default_instance();

  void Swap(ClientReqKingRank* other);

  // implements Message ----------------------------------------------

  ClientReqKingRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqKingRank& from);
  void MergeFrom(const ClientReqKingRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqKingRank)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqKingRank* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqKingRank : public ::google::protobuf::Message {
 public:
  AckClientReqKingRank();
  virtual ~AckClientReqKingRank();

  AckClientReqKingRank(const AckClientReqKingRank& from);

  inline AckClientReqKingRank& operator=(const AckClientReqKingRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqKingRank& default_instance();

  void Swap(AckClientReqKingRank* other);

  // implements Message ----------------------------------------------

  AckClientReqKingRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqKingRank& from);
  void MergeFrom(const AckClientReqKingRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // repeated .CountryPackage.KingRankMem mems = 2;
  inline int mems_size() const;
  inline void clear_mems();
  static const int kMemsFieldNumber = 2;
  inline const ::CountryPackage::KingRankMem& mems(int index) const;
  inline ::CountryPackage::KingRankMem* mutable_mems(int index);
  inline ::CountryPackage::KingRankMem* add_mems();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::KingRankMem >&
      mems() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::KingRankMem >*
      mutable_mems();

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqKingRank)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::KingRankMem > mems_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqKingRank* default_instance_;
};
// -------------------------------------------------------------------

class KingRankMem : public ::google::protobuf::Message {
 public:
  KingRankMem();
  virtual ~KingRankMem();

  KingRankMem(const KingRankMem& from);

  inline KingRankMem& operator=(const KingRankMem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingRankMem& default_instance();

  void Swap(KingRankMem* other);

  // implements Message ----------------------------------------------

  KingRankMem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingRankMem& from);
  void MergeFrom(const KingRankMem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 job = 2;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 contribute = 5;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 5;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.KingRankMem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static KingRankMem* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqShopInfo : public ::google::protobuf::Message {
 public:
  AckClientReqShopInfo();
  virtual ~AckClientReqShopInfo();

  AckClientReqShopInfo(const AckClientReqShopInfo& from);

  inline AckClientReqShopInfo& operator=(const AckClientReqShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqShopInfo& default_instance();

  void Swap(AckClientReqShopInfo* other);

  // implements Message ----------------------------------------------

  AckClientReqShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqShopInfo& from);
  void MergeFrom(const AckClientReqShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.CountryShopItem itemlist = 1;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemlistFieldNumber = 1;
  inline const ::CountryPackage::CountryShopItem& itemlist(int index) const;
  inline ::CountryPackage::CountryShopItem* mutable_itemlist(int index);
  inline ::CountryPackage::CountryShopItem* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryShopItem >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryShopItem >*
      mutable_itemlist();

  // optional int32 contribute = 2;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 2;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqShopInfo)
 private:
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryShopItem > itemlist_;
  ::google::protobuf::int32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class CountryShopItem : public ::google::protobuf::Message {
 public:
  CountryShopItem();
  virtual ~CountryShopItem();

  CountryShopItem(const CountryShopItem& from);

  inline CountryShopItem& operator=(const CountryShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryShopItem& default_instance();

  void Swap(CountryShopItem* other);

  // implements Message ----------------------------------------------

  CountryShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryShopItem& from);
  void MergeFrom(const CountryShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryShopItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryShopItem* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqBuyShopItem : public ::google::protobuf::Message {
 public:
  ClientReqBuyShopItem();
  virtual ~ClientReqBuyShopItem();

  ClientReqBuyShopItem(const ClientReqBuyShopItem& from);

  inline ClientReqBuyShopItem& operator=(const ClientReqBuyShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqBuyShopItem& default_instance();

  void Swap(ClientReqBuyShopItem* other);

  // implements Message ----------------------------------------------

  ClientReqBuyShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqBuyShopItem& from);
  void MergeFrom(const ClientReqBuyShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.ClientReqBuyShopItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static ClientReqBuyShopItem* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqBuyShopItem : public ::google::protobuf::Message {
 public:
  AckClientReqBuyShopItem();
  virtual ~AckClientReqBuyShopItem();

  AckClientReqBuyShopItem(const AckClientReqBuyShopItem& from);

  inline AckClientReqBuyShopItem& operator=(const AckClientReqBuyShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqBuyShopItem& default_instance();

  void Swap(AckClientReqBuyShopItem* other);

  // implements Message ----------------------------------------------

  AckClientReqBuyShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqBuyShopItem& from);
  void MergeFrom(const AckClientReqBuyShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 contribute = 4;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 4;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.AckClientReqBuyShopItem)
 private:
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 success_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqBuyShopItem* default_instance_;
};
// -------------------------------------------------------------------

class GSReqWSContribute : public ::google::protobuf::Message {
 public:
  GSReqWSContribute();
  virtual ~GSReqWSContribute();

  GSReqWSContribute(const GSReqWSContribute& from);

  inline GSReqWSContribute& operator=(const GSReqWSContribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GSReqWSContribute& default_instance();

  void Swap(GSReqWSContribute* other);

  // implements Message ----------------------------------------------

  GSReqWSContribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GSReqWSContribute& from);
  void MergeFrom(const GSReqWSContribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 char = 1;
  inline bool has_char_() const;
  inline void clear_char_();
  static const int kCharFieldNumber = 1;
  inline ::google::protobuf::int64 char_() const;
  inline void set_char_(::google::protobuf::int64 value);

  // optional int32 contry = 2;
  inline bool has_contry() const;
  inline void clear_contry();
  static const int kContryFieldNumber = 2;
  inline ::google::protobuf::int32 contry() const;
  inline void set_contry(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int64 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // optional int32 contribute = 6;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 6;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.GSReqWSContribute)
 private:
  inline void set_has_char_();
  inline void clear_has_char_();
  inline void set_has_contry();
  inline void clear_has_contry();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_contribute();
  inline void clear_has_contribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 char__;
  ::google::protobuf::int32 contry_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 contribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static GSReqWSContribute* default_instance_;
};
// -------------------------------------------------------------------

class WSNoticeGSCountryLiveUp : public ::google::protobuf::Message {
 public:
  WSNoticeGSCountryLiveUp();
  virtual ~WSNoticeGSCountryLiveUp();

  WSNoticeGSCountryLiveUp(const WSNoticeGSCountryLiveUp& from);

  inline WSNoticeGSCountryLiveUp& operator=(const WSNoticeGSCountryLiveUp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSNoticeGSCountryLiveUp& default_instance();

  void Swap(WSNoticeGSCountryLiveUp* other);

  // implements Message ----------------------------------------------

  WSNoticeGSCountryLiveUp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSNoticeGSCountryLiveUp& from);
  void MergeFrom(const WSNoticeGSCountryLiveUp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.WSNoticeGSCountryLiveUp)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static WSNoticeGSCountryLiveUp* default_instance_;
};
// -------------------------------------------------------------------

class WStoGsCountryInfo : public ::google::protobuf::Message {
 public:
  WStoGsCountryInfo();
  virtual ~WStoGsCountryInfo();

  WStoGsCountryInfo(const WStoGsCountryInfo& from);

  inline WStoGsCountryInfo& operator=(const WStoGsCountryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WStoGsCountryInfo& default_instance();

  void Swap(WStoGsCountryInfo* other);

  // implements Message ----------------------------------------------

  WStoGsCountryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WStoGsCountryInfo& from);
  void MergeFrom(const WStoGsCountryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.CountryGrade country = 1;
  inline int country_size() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline const ::CountryPackage::CountryGrade& country(int index) const;
  inline ::CountryPackage::CountryGrade* mutable_country(int index);
  inline ::CountryPackage::CountryGrade* add_country();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryGrade >&
      country() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryGrade >*
      mutable_country();

  // @@protoc_insertion_point(class_scope:CountryPackage.WStoGsCountryInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryGrade > country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static WStoGsCountryInfo* default_instance_;
};
// -------------------------------------------------------------------

class CountryGrade : public ::google::protobuf::Message {
 public:
  CountryGrade();
  virtual ~CountryGrade();

  CountryGrade(const CountryGrade& from);

  inline CountryGrade& operator=(const CountryGrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryGrade& default_instance();

  void Swap(CountryGrade* other);

  // implements Message ----------------------------------------------

  CountryGrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryGrade& from);
  void MergeFrom(const CountryGrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.CountryGrade)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static CountryGrade* default_instance_;
};
// -------------------------------------------------------------------

class DBShopInfoList : public ::google::protobuf::Message {
 public:
  DBShopInfoList();
  virtual ~DBShopInfoList();

  DBShopInfoList(const DBShopInfoList& from);

  inline DBShopInfoList& operator=(const DBShopInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBShopInfoList& default_instance();

  void Swap(DBShopInfoList* other);

  // implements Message ----------------------------------------------

  DBShopInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBShopInfoList& from);
  void MergeFrom(const DBShopInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // repeated .CountryPackage.DBShopItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::CountryPackage::DBShopItem& item(int index) const;
  inline ::CountryPackage::DBShopItem* mutable_item(int index);
  inline ::CountryPackage::DBShopItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::DBShopItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::DBShopItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:CountryPackage.DBShopInfoList)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::CountryPackage::DBShopItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static DBShopInfoList* default_instance_;
};
// -------------------------------------------------------------------

class DBShopItem : public ::google::protobuf::Message {
 public:
  DBShopItem();
  virtual ~DBShopItem();

  DBShopItem(const DBShopItem& from);

  inline DBShopItem& operator=(const DBShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBShopItem& default_instance();

  void Swap(DBShopItem* other);

  // implements Message ----------------------------------------------

  DBShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBShopItem& from);
  void MergeFrom(const DBShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 nums = 2;
  inline bool has_nums() const;
  inline void clear_nums();
  static const int kNumsFieldNumber = 2;
  inline ::google::protobuf::int32 nums() const;
  inline void set_nums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.DBShopItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_nums();
  inline void clear_has_nums();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 nums_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static DBShopItem* default_instance_;
};
// -------------------------------------------------------------------

class WeekUpdate : public ::google::protobuf::Message {
 public:
  WeekUpdate();
  virtual ~WeekUpdate();

  WeekUpdate(const WeekUpdate& from);

  inline WeekUpdate& operator=(const WeekUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeekUpdate& default_instance();

  void Swap(WeekUpdate* other);

  // implements Message ----------------------------------------------

  WeekUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeekUpdate& from);
  void MergeFrom(const WeekUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryPackage.WeekJobs list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::CountryPackage::WeekJobs& list(int index) const;
  inline ::CountryPackage::WeekJobs* mutable_list(int index);
  inline ::CountryPackage::WeekJobs* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::WeekJobs >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::WeekJobs >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:CountryPackage.WeekUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryPackage::WeekJobs > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static WeekUpdate* default_instance_;
};
// -------------------------------------------------------------------

class WeekJobs : public ::google::protobuf::Message {
 public:
  WeekJobs();
  virtual ~WeekJobs();

  WeekJobs(const WeekJobs& from);

  inline WeekJobs& operator=(const WeekJobs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeekJobs& default_instance();

  void Swap(WeekJobs* other);

  // implements Message ----------------------------------------------

  WeekJobs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeekJobs& from);
  void MergeFrom(const WeekJobs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 job = 2;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.WeekJobs)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_job();
  inline void clear_has_job();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 job_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static WeekJobs* default_instance_;
};
// -------------------------------------------------------------------

class WStoGSAttrChange : public ::google::protobuf::Message {
 public:
  WStoGSAttrChange();
  virtual ~WStoGSAttrChange();

  WStoGSAttrChange(const WStoGSAttrChange& from);

  inline WStoGSAttrChange& operator=(const WStoGSAttrChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WStoGSAttrChange& default_instance();

  void Swap(WStoGSAttrChange* other);

  // implements Message ----------------------------------------------

  WStoGSAttrChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WStoGSAttrChange& from);
  void MergeFrom(const WStoGSAttrChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 attrid = 2;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttridFieldNumber = 2;
  inline ::google::protobuf::int32 attrid() const;
  inline void set_attrid(::google::protobuf::int32 value);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryPackage.WStoGSAttrChange)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 attrid_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static WStoGSAttrChange* default_instance_;
};
// -------------------------------------------------------------------

class WSToGMCountryBattle : public ::google::protobuf::Message {
 public:
  WSToGMCountryBattle();
  virtual ~WSToGMCountryBattle();

  WSToGMCountryBattle(const WSToGMCountryBattle& from);

  inline WSToGMCountryBattle& operator=(const WSToGMCountryBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToGMCountryBattle& default_instance();

  void Swap(WSToGMCountryBattle* other);

  // implements Message ----------------------------------------------

  WSToGMCountryBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToGMCountryBattle& from);
  void MergeFrom(const WSToGMCountryBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 warType = 1;
  inline bool has_wartype() const;
  inline void clear_wartype();
  static const int kWarTypeFieldNumber = 1;
  inline ::google::protobuf::int32 wartype() const;
  inline void set_wartype(::google::protobuf::int32 value);

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // repeated int64 charID = 3;
  inline int charid_size() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::int64 charid(int index) const;
  inline void set_charid(int index, ::google::protobuf::int64 value);
  inline void add_charid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      charid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_charid();

  // @@protoc_insertion_point(class_scope:CountryPackage.WSToGMCountryBattle)
 private:
  inline void set_has_wartype();
  inline void clear_has_wartype();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wartype_;
  bool flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountry_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountry_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountry_2eproto();

  void InitAsDefaultInstance();
  static WSToGMCountryBattle* default_instance_;
};
// ===================================================================


// ===================================================================

// CountryBaseNums

// required int32 countryID = 1;
inline bool CountryBaseNums::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBaseNums::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBaseNums::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBaseNums::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 CountryBaseNums::countryid() const {
  return countryid_;
}
inline void CountryBaseNums::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional int32 nums = 2;
inline bool CountryBaseNums::has_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryBaseNums::set_has_nums() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryBaseNums::clear_has_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryBaseNums::clear_nums() {
  nums_ = 0;
  clear_has_nums();
}
inline ::google::protobuf::int32 CountryBaseNums::nums() const {
  return nums_;
}
inline void CountryBaseNums::set_nums(::google::protobuf::int32 value) {
  set_has_nums();
  nums_ = value;
}

// -------------------------------------------------------------------

// AckCountryBaseNums

// repeated .CountryPackage.CountryBaseNums item = 1;
inline int AckCountryBaseNums::item_size() const {
  return item_.size();
}
inline void AckCountryBaseNums::clear_item() {
  item_.Clear();
}
inline const ::CountryPackage::CountryBaseNums& AckCountryBaseNums::item(int index) const {
  return item_.Get(index);
}
inline ::CountryPackage::CountryBaseNums* AckCountryBaseNums::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryPackage::CountryBaseNums* AckCountryBaseNums::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryBaseNums >&
AckCountryBaseNums::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryBaseNums >*
AckCountryBaseNums::mutable_item() {
  return &item_;
}

// optional int32 recommendCtry = 2;
inline bool AckCountryBaseNums::has_recommendctry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckCountryBaseNums::set_has_recommendctry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckCountryBaseNums::clear_has_recommendctry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckCountryBaseNums::clear_recommendctry() {
  recommendctry_ = 0;
  clear_has_recommendctry();
}
inline ::google::protobuf::int32 AckCountryBaseNums::recommendctry() const {
  return recommendctry_;
}
inline void AckCountryBaseNums::set_recommendctry(::google::protobuf::int32 value) {
  set_has_recommendctry();
  recommendctry_ = value;
}

// -------------------------------------------------------------------

// ClientReqJionCountry

// required int32 countryID = 1;
inline bool ClientReqJionCountry::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqJionCountry::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqJionCountry::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqJionCountry::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 ClientReqJionCountry::countryid() const {
  return countryid_;
}
inline void ClientReqJionCountry::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
}

// -------------------------------------------------------------------

// AckClientReqJionCountry

// required int32 success = 1;
inline bool AckClientReqJionCountry::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqJionCountry::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqJionCountry::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqJionCountry::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckClientReqJionCountry::success() const {
  return success_;
}
inline void AckClientReqJionCountry::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional int32 countryID = 2;
inline bool AckClientReqJionCountry::has_countryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqJionCountry::set_has_countryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqJionCountry::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqJionCountry::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 AckClientReqJionCountry::countryid() const {
  return countryid_;
}
inline void AckClientReqJionCountry::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional int32 getAwardErr = 3;
inline bool AckClientReqJionCountry::has_getawarderr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckClientReqJionCountry::set_has_getawarderr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckClientReqJionCountry::clear_has_getawarderr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckClientReqJionCountry::clear_getawarderr() {
  getawarderr_ = 0;
  clear_has_getawarderr();
}
inline ::google::protobuf::int32 AckClientReqJionCountry::getawarderr() const {
  return getawarderr_;
}
inline void AckClientReqJionCountry::set_getawarderr(::google::protobuf::int32 value) {
  set_has_getawarderr();
  getawarderr_ = value;
}

// -------------------------------------------------------------------

// CountryInfo

// required int32 CountryID = 1;
inline bool CountryInfo::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryInfo::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryInfo::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryInfo::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 CountryInfo::countryid() const {
  return countryid_;
}
inline void CountryInfo::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional int32 Level = 2;
inline bool CountryInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CountryInfo::level() const {
  return level_;
}
inline void CountryInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 Money = 3;
inline bool CountryInfo::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryInfo::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryInfo::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 CountryInfo::money() const {
  return money_;
}
inline void CountryInfo::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional bytes leaderName = 4;
inline bool CountryInfo::has_leadername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryInfo::set_has_leadername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryInfo::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryInfo::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& CountryInfo::leadername() const {
  return *leadername_;
}
inline void CountryInfo::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void CountryInfo::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
}
inline void CountryInfo::set_leadername(const void* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CountryInfo::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    leadername_ = new ::std::string;
  }
  return leadername_;
}
inline ::std::string* CountryInfo::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CountryInfo::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes CounsellorName = 5;
inline bool CountryInfo::has_counsellorname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountryInfo::set_has_counsellorname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountryInfo::clear_has_counsellorname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountryInfo::clear_counsellorname() {
  if (counsellorname_ != &::google::protobuf::internal::kEmptyString) {
    counsellorname_->clear();
  }
  clear_has_counsellorname();
}
inline const ::std::string& CountryInfo::counsellorname() const {
  return *counsellorname_;
}
inline void CountryInfo::set_counsellorname(const ::std::string& value) {
  set_has_counsellorname();
  if (counsellorname_ == &::google::protobuf::internal::kEmptyString) {
    counsellorname_ = new ::std::string;
  }
  counsellorname_->assign(value);
}
inline void CountryInfo::set_counsellorname(const char* value) {
  set_has_counsellorname();
  if (counsellorname_ == &::google::protobuf::internal::kEmptyString) {
    counsellorname_ = new ::std::string;
  }
  counsellorname_->assign(value);
}
inline void CountryInfo::set_counsellorname(const void* value, size_t size) {
  set_has_counsellorname();
  if (counsellorname_ == &::google::protobuf::internal::kEmptyString) {
    counsellorname_ = new ::std::string;
  }
  counsellorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CountryInfo::mutable_counsellorname() {
  set_has_counsellorname();
  if (counsellorname_ == &::google::protobuf::internal::kEmptyString) {
    counsellorname_ = new ::std::string;
  }
  return counsellorname_;
}
inline ::std::string* CountryInfo::release_counsellorname() {
  clear_has_counsellorname();
  if (counsellorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = counsellorname_;
    counsellorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CountryInfo::set_allocated_counsellorname(::std::string* counsellorname) {
  if (counsellorname_ != &::google::protobuf::internal::kEmptyString) {
    delete counsellorname_;
  }
  if (counsellorname) {
    set_has_counsellorname();
    counsellorname_ = counsellorname;
  } else {
    clear_has_counsellorname();
    counsellorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes notice = 6;
inline bool CountryInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountryInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CountryInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CountryInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& CountryInfo::notice() const {
  return *notice_;
}
inline void CountryInfo::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CountryInfo::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void CountryInfo::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CountryInfo::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* CountryInfo::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CountryInfo::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 7;
inline bool CountryInfo::has_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CountryInfo::set_has_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CountryInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CountryInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CountryInfo::count() const {
  return count_;
}
inline void CountryInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// AckClientCountryStore

// repeated .CountryPackage.CountryItem prop = 1;
inline int AckClientCountryStore::prop_size() const {
  return prop_.size();
}
inline void AckClientCountryStore::clear_prop() {
  prop_.Clear();
}
inline const ::CountryPackage::CountryItem& AckClientCountryStore::prop(int index) const {
  return prop_.Get(index);
}
inline ::CountryPackage::CountryItem* AckClientCountryStore::mutable_prop(int index) {
  return prop_.Mutable(index);
}
inline ::CountryPackage::CountryItem* AckClientCountryStore::add_prop() {
  return prop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
AckClientCountryStore::prop() const {
  return prop_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
AckClientCountryStore::mutable_prop() {
  return &prop_;
}

// optional int64 money = 2;
inline bool AckClientCountryStore::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientCountryStore::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientCountryStore::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientCountryStore::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 AckClientCountryStore::money() const {
  return money_;
}
inline void AckClientCountryStore::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional int32 contribute = 3;
inline bool AckClientCountryStore::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckClientCountryStore::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckClientCountryStore::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckClientCountryStore::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 AckClientCountryStore::contribute() const {
  return contribute_;
}
inline void AckClientCountryStore::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// ClientReqMemList

// required int32 page = 1;
inline bool ClientReqMemList::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqMemList::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqMemList::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqMemList::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 ClientReqMemList::page() const {
  return page_;
}
inline void ClientReqMemList::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// -------------------------------------------------------------------

// AckClientReqMemList

// repeated .CountryPackage.CountryMemInfo mems = 1;
inline int AckClientReqMemList::mems_size() const {
  return mems_.size();
}
inline void AckClientReqMemList::clear_mems() {
  mems_.Clear();
}
inline const ::CountryPackage::CountryMemInfo& AckClientReqMemList::mems(int index) const {
  return mems_.Get(index);
}
inline ::CountryPackage::CountryMemInfo* AckClientReqMemList::mutable_mems(int index) {
  return mems_.Mutable(index);
}
inline ::CountryPackage::CountryMemInfo* AckClientReqMemList::add_mems() {
  return mems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryMemInfo >&
AckClientReqMemList::mems() const {
  return mems_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryMemInfo >*
AckClientReqMemList::mutable_mems() {
  return &mems_;
}

// -------------------------------------------------------------------

// CountryMemInfo

// required int64 id = 1;
inline bool CountryMemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryMemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryMemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryMemInfo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 CountryMemInfo::id() const {
  return id_;
}
inline void CountryMemInfo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool CountryMemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryMemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryMemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryMemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CountryMemInfo::name() const {
  return *name_;
}
inline void CountryMemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CountryMemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CountryMemInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CountryMemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CountryMemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CountryMemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool CountryMemInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryMemInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryMemInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryMemInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CountryMemInfo::level() const {
  return level_;
}
inline void CountryMemInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 profession = 4;
inline bool CountryMemInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryMemInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryMemInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryMemInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 CountryMemInfo::profession() const {
  return profession_;
}
inline void CountryMemInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 contribute = 5;
inline bool CountryMemInfo::has_contribute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountryMemInfo::set_has_contribute() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountryMemInfo::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountryMemInfo::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 CountryMemInfo::contribute() const {
  return contribute_;
}
inline void CountryMemInfo::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional int32 power = 6;
inline bool CountryMemInfo::has_power() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountryMemInfo::set_has_power() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CountryMemInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CountryMemInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 CountryMemInfo::power() const {
  return power_;
}
inline void CountryMemInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 job = 7;
inline bool CountryMemInfo::has_job() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CountryMemInfo::set_has_job() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CountryMemInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CountryMemInfo::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 CountryMemInfo::job() const {
  return job_;
}
inline void CountryMemInfo::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional int32 vip = 8;
inline bool CountryMemInfo::has_vip() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CountryMemInfo::set_has_vip() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CountryMemInfo::clear_has_vip() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CountryMemInfo::clear_vip() {
  vip_ = 0;
  clear_has_vip();
}
inline ::google::protobuf::int32 CountryMemInfo::vip() const {
  return vip_;
}
inline void CountryMemInfo::set_vip(::google::protobuf::int32 value) {
  set_has_vip();
  vip_ = value;
}

// optional bool onLine = 9;
inline bool CountryMemInfo::has_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CountryMemInfo::set_has_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CountryMemInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CountryMemInfo::clear_online() {
  online_ = false;
  clear_has_online();
}
inline bool CountryMemInfo::online() const {
  return online_;
}
inline void CountryMemInfo::set_online(bool value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// CountryItem

// required int32 index = 1;
inline bool CountryItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryItem::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CountryItem::index() const {
  return index_;
}
inline void CountryItem::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 propID = 2;
inline bool CountryItem::has_propid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryItem::set_has_propid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryItem::clear_has_propid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryItem::clear_propid() {
  propid_ = 0;
  clear_has_propid();
}
inline ::google::protobuf::int32 CountryItem::propid() const {
  return propid_;
}
inline void CountryItem::set_propid(::google::protobuf::int32 value) {
  set_has_propid();
  propid_ = value;
}

// optional int32 count = 3;
inline bool CountryItem::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryItem::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CountryItem::count() const {
  return count_;
}
inline void CountryItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// CountryItemList

// repeated .CountryPackage.CountryItem propinfo = 1;
inline int CountryItemList::propinfo_size() const {
  return propinfo_.size();
}
inline void CountryItemList::clear_propinfo() {
  propinfo_.Clear();
}
inline const ::CountryPackage::CountryItem& CountryItemList::propinfo(int index) const {
  return propinfo_.Get(index);
}
inline ::CountryPackage::CountryItem* CountryItemList::mutable_propinfo(int index) {
  return propinfo_.Mutable(index);
}
inline ::CountryPackage::CountryItem* CountryItemList::add_propinfo() {
  return propinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
CountryItemList::propinfo() const {
  return propinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
CountryItemList::mutable_propinfo() {
  return &propinfo_;
}

// -------------------------------------------------------------------

// AckClientReqLiveUpCountry

// required int32 success = 1;
inline bool AckClientReqLiveUpCountry::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqLiveUpCountry::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqLiveUpCountry::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqLiveUpCountry::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckClientReqLiveUpCountry::success() const {
  return success_;
}
inline void AckClientReqLiveUpCountry::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional int32 level = 2;
inline bool AckClientReqLiveUpCountry::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqLiveUpCountry::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqLiveUpCountry::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqLiveUpCountry::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 AckClientReqLiveUpCountry::level() const {
  return level_;
}
inline void AckClientReqLiveUpCountry::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 money = 3;
inline bool AckClientReqLiveUpCountry::has_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckClientReqLiveUpCountry::set_has_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckClientReqLiveUpCountry::clear_has_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckClientReqLiveUpCountry::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 AckClientReqLiveUpCountry::money() const {
  return money_;
}
inline void AckClientReqLiveUpCountry::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// repeated .CountryPackage.CountryItem item = 4;
inline int AckClientReqLiveUpCountry::item_size() const {
  return item_.size();
}
inline void AckClientReqLiveUpCountry::clear_item() {
  item_.Clear();
}
inline const ::CountryPackage::CountryItem& AckClientReqLiveUpCountry::item(int index) const {
  return item_.Get(index);
}
inline ::CountryPackage::CountryItem* AckClientReqLiveUpCountry::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryPackage::CountryItem* AckClientReqLiveUpCountry::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
AckClientReqLiveUpCountry::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
AckClientReqLiveUpCountry::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// ClientReqChangeCountry

// required int32 destID = 1;
inline bool ClientReqChangeCountry::has_destid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqChangeCountry::set_has_destid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqChangeCountry::clear_has_destid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqChangeCountry::clear_destid() {
  destid_ = 0;
  clear_has_destid();
}
inline ::google::protobuf::int32 ClientReqChangeCountry::destid() const {
  return destid_;
}
inline void ClientReqChangeCountry::set_destid(::google::protobuf::int32 value) {
  set_has_destid();
  destid_ = value;
}

// -------------------------------------------------------------------

// AckClientChangeCountry

// required int32 success = 1;
inline bool AckClientChangeCountry::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientChangeCountry::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientChangeCountry::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientChangeCountry::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckClientChangeCountry::success() const {
  return success_;
}
inline void AckClientChangeCountry::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional .CountryPackage.CountryInfo newCountryInfo = 2;
inline bool AckClientChangeCountry::has_newcountryinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientChangeCountry::set_has_newcountryinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientChangeCountry::clear_has_newcountryinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientChangeCountry::clear_newcountryinfo() {
  if (newcountryinfo_ != NULL) newcountryinfo_->::CountryPackage::CountryInfo::Clear();
  clear_has_newcountryinfo();
}
inline const ::CountryPackage::CountryInfo& AckClientChangeCountry::newcountryinfo() const {
  return newcountryinfo_ != NULL ? *newcountryinfo_ : *default_instance_->newcountryinfo_;
}
inline ::CountryPackage::CountryInfo* AckClientChangeCountry::mutable_newcountryinfo() {
  set_has_newcountryinfo();
  if (newcountryinfo_ == NULL) newcountryinfo_ = new ::CountryPackage::CountryInfo;
  return newcountryinfo_;
}
inline ::CountryPackage::CountryInfo* AckClientChangeCountry::release_newcountryinfo() {
  clear_has_newcountryinfo();
  ::CountryPackage::CountryInfo* temp = newcountryinfo_;
  newcountryinfo_ = NULL;
  return temp;
}
inline void AckClientChangeCountry::set_allocated_newcountryinfo(::CountryPackage::CountryInfo* newcountryinfo) {
  delete newcountryinfo_;
  newcountryinfo_ = newcountryinfo;
  if (newcountryinfo) {
    set_has_newcountryinfo();
  } else {
    clear_has_newcountryinfo();
  }
}

// -------------------------------------------------------------------

// ClientReqContribute

// required int32 id = 1;
inline bool ClientReqContribute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqContribute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqContribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqContribute::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClientReqContribute::id() const {
  return id_;
}
inline void ClientReqContribute::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool ClientReqContribute::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientReqContribute::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientReqContribute::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientReqContribute::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ClientReqContribute::num() const {
  return num_;
}
inline void ClientReqContribute::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// AckClientReqContribute

// required int32 success = 1;
inline bool AckClientReqContribute::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqContribute::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqContribute::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqContribute::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckClientReqContribute::success() const {
  return success_;
}
inline void AckClientReqContribute::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional int64 money = 2;
inline bool AckClientReqContribute::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqContribute::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqContribute::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqContribute::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 AckClientReqContribute::money() const {
  return money_;
}
inline void AckClientReqContribute::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// repeated .CountryPackage.CountryItem item = 3;
inline int AckClientReqContribute::item_size() const {
  return item_.size();
}
inline void AckClientReqContribute::clear_item() {
  item_.Clear();
}
inline const ::CountryPackage::CountryItem& AckClientReqContribute::item(int index) const {
  return item_.Get(index);
}
inline ::CountryPackage::CountryItem* AckClientReqContribute::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryPackage::CountryItem* AckClientReqContribute::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >&
AckClientReqContribute::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryItem >*
AckClientReqContribute::mutable_item() {
  return &item_;
}

// optional int32 contribute = 4;
inline bool AckClientReqContribute::has_contribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckClientReqContribute::set_has_contribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckClientReqContribute::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckClientReqContribute::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 AckClientReqContribute::contribute() const {
  return contribute_;
}
inline void AckClientReqContribute::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// ClientReqModifyNotice

// required bytes noticeMessage = 1;
inline bool ClientReqModifyNotice::has_noticemessage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqModifyNotice::set_has_noticemessage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqModifyNotice::clear_has_noticemessage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqModifyNotice::clear_noticemessage() {
  if (noticemessage_ != &::google::protobuf::internal::kEmptyString) {
    noticemessage_->clear();
  }
  clear_has_noticemessage();
}
inline const ::std::string& ClientReqModifyNotice::noticemessage() const {
  return *noticemessage_;
}
inline void ClientReqModifyNotice::set_noticemessage(const ::std::string& value) {
  set_has_noticemessage();
  if (noticemessage_ == &::google::protobuf::internal::kEmptyString) {
    noticemessage_ = new ::std::string;
  }
  noticemessage_->assign(value);
}
inline void ClientReqModifyNotice::set_noticemessage(const char* value) {
  set_has_noticemessage();
  if (noticemessage_ == &::google::protobuf::internal::kEmptyString) {
    noticemessage_ = new ::std::string;
  }
  noticemessage_->assign(value);
}
inline void ClientReqModifyNotice::set_noticemessage(const void* value, size_t size) {
  set_has_noticemessage();
  if (noticemessage_ == &::google::protobuf::internal::kEmptyString) {
    noticemessage_ = new ::std::string;
  }
  noticemessage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientReqModifyNotice::mutable_noticemessage() {
  set_has_noticemessage();
  if (noticemessage_ == &::google::protobuf::internal::kEmptyString) {
    noticemessage_ = new ::std::string;
  }
  return noticemessage_;
}
inline ::std::string* ClientReqModifyNotice::release_noticemessage() {
  clear_has_noticemessage();
  if (noticemessage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = noticemessage_;
    noticemessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientReqModifyNotice::set_allocated_noticemessage(::std::string* noticemessage) {
  if (noticemessage_ != &::google::protobuf::internal::kEmptyString) {
    delete noticemessage_;
  }
  if (noticemessage) {
    set_has_noticemessage();
    noticemessage_ = noticemessage;
  } else {
    clear_has_noticemessage();
    noticemessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AckClientModifyNotice

// required int32 success = 1;
inline bool AckClientModifyNotice::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientModifyNotice::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientModifyNotice::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientModifyNotice::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckClientModifyNotice::success() const {
  return success_;
}
inline void AckClientModifyNotice::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional bytes noticeMesage = 2;
inline bool AckClientModifyNotice::has_noticemesage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientModifyNotice::set_has_noticemesage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientModifyNotice::clear_has_noticemesage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientModifyNotice::clear_noticemesage() {
  if (noticemesage_ != &::google::protobuf::internal::kEmptyString) {
    noticemesage_->clear();
  }
  clear_has_noticemesage();
}
inline const ::std::string& AckClientModifyNotice::noticemesage() const {
  return *noticemesage_;
}
inline void AckClientModifyNotice::set_noticemesage(const ::std::string& value) {
  set_has_noticemesage();
  if (noticemesage_ == &::google::protobuf::internal::kEmptyString) {
    noticemesage_ = new ::std::string;
  }
  noticemesage_->assign(value);
}
inline void AckClientModifyNotice::set_noticemesage(const char* value) {
  set_has_noticemesage();
  if (noticemesage_ == &::google::protobuf::internal::kEmptyString) {
    noticemesage_ = new ::std::string;
  }
  noticemesage_->assign(value);
}
inline void AckClientModifyNotice::set_noticemesage(const void* value, size_t size) {
  set_has_noticemesage();
  if (noticemesage_ == &::google::protobuf::internal::kEmptyString) {
    noticemesage_ = new ::std::string;
  }
  noticemesage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckClientModifyNotice::mutable_noticemesage() {
  set_has_noticemesage();
  if (noticemesage_ == &::google::protobuf::internal::kEmptyString) {
    noticemesage_ = new ::std::string;
  }
  return noticemesage_;
}
inline ::std::string* AckClientModifyNotice::release_noticemesage() {
  clear_has_noticemesage();
  if (noticemesage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = noticemesage_;
    noticemesage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckClientModifyNotice::set_allocated_noticemesage(::std::string* noticemesage) {
  if (noticemesage_ != &::google::protobuf::internal::kEmptyString) {
    delete noticemesage_;
  }
  if (noticemesage) {
    set_has_noticemesage();
    noticemesage_ = noticemesage;
  } else {
    clear_has_noticemesage();
    noticemesage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientReqLastWeekJobRank

// required int32 countryID = 1;
inline bool ClientReqLastWeekJobRank::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqLastWeekJobRank::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqLastWeekJobRank::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqLastWeekJobRank::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 ClientReqLastWeekJobRank::countryid() const {
  return countryid_;
}
inline void ClientReqLastWeekJobRank::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
}

// -------------------------------------------------------------------

// AckClientReqLastWeekJobRank

// required int32 countryID = 1;
inline bool AckClientReqLastWeekJobRank::has_countryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqLastWeekJobRank::set_has_countryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqLastWeekJobRank::clear_has_countryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqLastWeekJobRank::clear_countryid() {
  countryid_ = 0;
  clear_has_countryid();
}
inline ::google::protobuf::int32 AckClientReqLastWeekJobRank::countryid() const {
  return countryid_;
}
inline void AckClientReqLastWeekJobRank::set_countryid(::google::protobuf::int32 value) {
  set_has_countryid();
  countryid_ = value;
}

// optional bool limit = 2;
inline bool AckClientReqLastWeekJobRank::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqLastWeekJobRank::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqLastWeekJobRank::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqLastWeekJobRank::clear_limit() {
  limit_ = false;
  clear_has_limit();
}
inline bool AckClientReqLastWeekJobRank::limit() const {
  return limit_;
}
inline void AckClientReqLastWeekJobRank::set_limit(bool value) {
  set_has_limit();
  limit_ = value;
}

// optional bool fetch = 3;
inline bool AckClientReqLastWeekJobRank::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckClientReqLastWeekJobRank::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckClientReqLastWeekJobRank::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckClientReqLastWeekJobRank::clear_fetch() {
  fetch_ = false;
  clear_has_fetch();
}
inline bool AckClientReqLastWeekJobRank::fetch() const {
  return fetch_;
}
inline void AckClientReqLastWeekJobRank::set_fetch(bool value) {
  set_has_fetch();
  fetch_ = value;
}

// repeated .CountryPackage.JobRankMember members = 4;
inline int AckClientReqLastWeekJobRank::members_size() const {
  return members_.size();
}
inline void AckClientReqLastWeekJobRank::clear_members() {
  members_.Clear();
}
inline const ::CountryPackage::JobRankMember& AckClientReqLastWeekJobRank::members(int index) const {
  return members_.Get(index);
}
inline ::CountryPackage::JobRankMember* AckClientReqLastWeekJobRank::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::CountryPackage::JobRankMember* AckClientReqLastWeekJobRank::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::JobRankMember >&
AckClientReqLastWeekJobRank::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::JobRankMember >*
AckClientReqLastWeekJobRank::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// JobRankMember

// required int64 id = 1;
inline bool JobRankMember::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobRankMember::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobRankMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobRankMember::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 JobRankMember::id() const {
  return id_;
}
inline void JobRankMember::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 job = 2;
inline bool JobRankMember::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobRankMember::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobRankMember::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobRankMember::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 JobRankMember::job() const {
  return job_;
}
inline void JobRankMember::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional bytes name = 3;
inline bool JobRankMember::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobRankMember::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobRankMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobRankMember::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& JobRankMember::name() const {
  return *name_;
}
inline void JobRankMember::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void JobRankMember::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void JobRankMember::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobRankMember::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* JobRankMember::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JobRankMember::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 weapon = 4;
inline bool JobRankMember::has_weapon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobRankMember::set_has_weapon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobRankMember::clear_has_weapon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobRankMember::clear_weapon() {
  weapon_ = 0;
  clear_has_weapon();
}
inline ::google::protobuf::int32 JobRankMember::weapon() const {
  return weapon_;
}
inline void JobRankMember::set_weapon(::google::protobuf::int32 value) {
  set_has_weapon();
  weapon_ = value;
}

// optional int32 cloth = 5;
inline bool JobRankMember::has_cloth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JobRankMember::set_has_cloth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JobRankMember::clear_has_cloth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JobRankMember::clear_cloth() {
  cloth_ = 0;
  clear_has_cloth();
}
inline ::google::protobuf::int32 JobRankMember::cloth() const {
  return cloth_;
}
inline void JobRankMember::set_cloth(::google::protobuf::int32 value) {
  set_has_cloth();
  cloth_ = value;
}

// optional int32 shenbing = 6;
inline bool JobRankMember::has_shenbing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JobRankMember::set_has_shenbing() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JobRankMember::clear_has_shenbing() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JobRankMember::clear_shenbing() {
  shenbing_ = 0;
  clear_has_shenbing();
}
inline ::google::protobuf::int32 JobRankMember::shenbing() const {
  return shenbing_;
}
inline void JobRankMember::set_shenbing(::google::protobuf::int32 value) {
  set_has_shenbing();
  shenbing_ = value;
}

// optional int32 fashion = 7;
inline bool JobRankMember::has_fashion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JobRankMember::set_has_fashion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JobRankMember::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JobRankMember::clear_fashion() {
  fashion_ = 0;
  clear_has_fashion();
}
inline ::google::protobuf::int32 JobRankMember::fashion() const {
  return fashion_;
}
inline void JobRankMember::set_fashion(::google::protobuf::int32 value) {
  set_has_fashion();
  fashion_ = value;
}

// optional int32 sex = 8;
inline bool JobRankMember::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JobRankMember::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JobRankMember::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JobRankMember::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 JobRankMember::sex() const {
  return sex_;
}
inline void JobRankMember::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 profession = 9;
inline bool JobRankMember::has_profession() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JobRankMember::set_has_profession() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JobRankMember::clear_has_profession() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JobRankMember::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 JobRankMember::profession() const {
  return profession_;
}
inline void JobRankMember::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// -------------------------------------------------------------------

// AckClientReqJobPrize

// required int32 seccess = 1;
inline bool AckClientReqJobPrize::has_seccess() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqJobPrize::set_has_seccess() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqJobPrize::clear_has_seccess() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqJobPrize::clear_seccess() {
  seccess_ = 0;
  clear_has_seccess();
}
inline ::google::protobuf::int32 AckClientReqJobPrize::seccess() const {
  return seccess_;
}
inline void AckClientReqJobPrize::set_seccess(::google::protobuf::int32 value) {
  set_has_seccess();
  seccess_ = value;
}

// -------------------------------------------------------------------

// ClientReqKingRank

// required int32 flag = 1;
inline bool ClientReqKingRank::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqKingRank::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqKingRank::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqKingRank::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ClientReqKingRank::flag() const {
  return flag_;
}
inline void ClientReqKingRank::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// AckClientReqKingRank

// required int32 flag = 1;
inline bool AckClientReqKingRank::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqKingRank::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqKingRank::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqKingRank::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AckClientReqKingRank::flag() const {
  return flag_;
}
inline void AckClientReqKingRank::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// repeated .CountryPackage.KingRankMem mems = 2;
inline int AckClientReqKingRank::mems_size() const {
  return mems_.size();
}
inline void AckClientReqKingRank::clear_mems() {
  mems_.Clear();
}
inline const ::CountryPackage::KingRankMem& AckClientReqKingRank::mems(int index) const {
  return mems_.Get(index);
}
inline ::CountryPackage::KingRankMem* AckClientReqKingRank::mutable_mems(int index) {
  return mems_.Mutable(index);
}
inline ::CountryPackage::KingRankMem* AckClientReqKingRank::add_mems() {
  return mems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::KingRankMem >&
AckClientReqKingRank::mems() const {
  return mems_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::KingRankMem >*
AckClientReqKingRank::mutable_mems() {
  return &mems_;
}

// -------------------------------------------------------------------

// KingRankMem

// required int64 id = 1;
inline bool KingRankMem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KingRankMem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KingRankMem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KingRankMem::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 KingRankMem::id() const {
  return id_;
}
inline void KingRankMem::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 job = 2;
inline bool KingRankMem::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingRankMem::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingRankMem::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingRankMem::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 KingRankMem::job() const {
  return job_;
}
inline void KingRankMem::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional bytes name = 3;
inline bool KingRankMem::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KingRankMem::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KingRankMem::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KingRankMem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& KingRankMem::name() const {
  return *name_;
}
inline void KingRankMem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KingRankMem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KingRankMem::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KingRankMem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* KingRankMem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KingRankMem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 4;
inline bool KingRankMem::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KingRankMem::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KingRankMem::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KingRankMem::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 KingRankMem::level() const {
  return level_;
}
inline void KingRankMem::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 contribute = 5;
inline bool KingRankMem::has_contribute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KingRankMem::set_has_contribute() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KingRankMem::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KingRankMem::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 KingRankMem::contribute() const {
  return contribute_;
}
inline void KingRankMem::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// AckClientReqShopInfo

// repeated .CountryPackage.CountryShopItem itemlist = 1;
inline int AckClientReqShopInfo::itemlist_size() const {
  return itemlist_.size();
}
inline void AckClientReqShopInfo::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::CountryPackage::CountryShopItem& AckClientReqShopInfo::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::CountryPackage::CountryShopItem* AckClientReqShopInfo::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::CountryPackage::CountryShopItem* AckClientReqShopInfo::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryShopItem >&
AckClientReqShopInfo::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryShopItem >*
AckClientReqShopInfo::mutable_itemlist() {
  return &itemlist_;
}

// optional int32 contribute = 2;
inline bool AckClientReqShopInfo::has_contribute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqShopInfo::set_has_contribute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqShopInfo::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqShopInfo::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 AckClientReqShopInfo::contribute() const {
  return contribute_;
}
inline void AckClientReqShopInfo::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// CountryShopItem

// required int32 id = 1;
inline bool CountryShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryShopItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CountryShopItem::id() const {
  return id_;
}
inline void CountryShopItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool CountryShopItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryShopItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryShopItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryShopItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CountryShopItem::count() const {
  return count_;
}
inline void CountryShopItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ClientReqBuyShopItem

// required int32 id = 1;
inline bool ClientReqBuyShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqBuyShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqBuyShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqBuyShopItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClientReqBuyShopItem::id() const {
  return id_;
}
inline void ClientReqBuyShopItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool ClientReqBuyShopItem::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientReqBuyShopItem::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientReqBuyShopItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientReqBuyShopItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 ClientReqBuyShopItem::count() const {
  return count_;
}
inline void ClientReqBuyShopItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// AckClientReqBuyShopItem

// required int32 success = 1;
inline bool AckClientReqBuyShopItem::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqBuyShopItem::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqBuyShopItem::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqBuyShopItem::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckClientReqBuyShopItem::success() const {
  return success_;
}
inline void AckClientReqBuyShopItem::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// optional int32 id = 2;
inline bool AckClientReqBuyShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqBuyShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqBuyShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqBuyShopItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AckClientReqBuyShopItem::id() const {
  return id_;
}
inline void AckClientReqBuyShopItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 3;
inline bool AckClientReqBuyShopItem::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckClientReqBuyShopItem::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckClientReqBuyShopItem::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckClientReqBuyShopItem::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AckClientReqBuyShopItem::count() const {
  return count_;
}
inline void AckClientReqBuyShopItem::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 contribute = 4;
inline bool AckClientReqBuyShopItem::has_contribute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckClientReqBuyShopItem::set_has_contribute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckClientReqBuyShopItem::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckClientReqBuyShopItem::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 AckClientReqBuyShopItem::contribute() const {
  return contribute_;
}
inline void AckClientReqBuyShopItem::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// GSReqWSContribute

// required int64 char = 1;
inline bool GSReqWSContribute::has_char_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GSReqWSContribute::set_has_char_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GSReqWSContribute::clear_has_char_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GSReqWSContribute::clear_char_() {
  char__ = GOOGLE_LONGLONG(0);
  clear_has_char_();
}
inline ::google::protobuf::int64 GSReqWSContribute::char_() const {
  return char__;
}
inline void GSReqWSContribute::set_char_(::google::protobuf::int64 value) {
  set_has_char_();
  char__ = value;
}

// optional int32 contry = 2;
inline bool GSReqWSContribute::has_contry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GSReqWSContribute::set_has_contry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GSReqWSContribute::clear_has_contry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GSReqWSContribute::clear_contry() {
  contry_ = 0;
  clear_has_contry();
}
inline ::google::protobuf::int32 GSReqWSContribute::contry() const {
  return contry_;
}
inline void GSReqWSContribute::set_contry(::google::protobuf::int32 value) {
  set_has_contry();
  contry_ = value;
}

// optional int32 id = 3;
inline bool GSReqWSContribute::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GSReqWSContribute::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GSReqWSContribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GSReqWSContribute::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GSReqWSContribute::id() const {
  return id_;
}
inline void GSReqWSContribute::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 4;
inline bool GSReqWSContribute::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GSReqWSContribute::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GSReqWSContribute::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GSReqWSContribute::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 GSReqWSContribute::num() const {
  return num_;
}
inline void GSReqWSContribute::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 money = 5;
inline bool GSReqWSContribute::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GSReqWSContribute::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GSReqWSContribute::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GSReqWSContribute::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 GSReqWSContribute::money() const {
  return money_;
}
inline void GSReqWSContribute::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// optional int32 contribute = 6;
inline bool GSReqWSContribute::has_contribute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GSReqWSContribute::set_has_contribute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GSReqWSContribute::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GSReqWSContribute::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 GSReqWSContribute::contribute() const {
  return contribute_;
}
inline void GSReqWSContribute::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// -------------------------------------------------------------------

// WSNoticeGSCountryLiveUp

// required int32 country = 1;
inline bool WSNoticeGSCountryLiveUp::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSNoticeGSCountryLiveUp::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSNoticeGSCountryLiveUp::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSNoticeGSCountryLiveUp::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 WSNoticeGSCountryLiveUp::country() const {
  return country_;
}
inline void WSNoticeGSCountryLiveUp::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int32 level = 2;
inline bool WSNoticeGSCountryLiveUp::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSNoticeGSCountryLiveUp::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSNoticeGSCountryLiveUp::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSNoticeGSCountryLiveUp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 WSNoticeGSCountryLiveUp::level() const {
  return level_;
}
inline void WSNoticeGSCountryLiveUp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// WStoGsCountryInfo

// repeated .CountryPackage.CountryGrade country = 1;
inline int WStoGsCountryInfo::country_size() const {
  return country_.size();
}
inline void WStoGsCountryInfo::clear_country() {
  country_.Clear();
}
inline const ::CountryPackage::CountryGrade& WStoGsCountryInfo::country(int index) const {
  return country_.Get(index);
}
inline ::CountryPackage::CountryGrade* WStoGsCountryInfo::mutable_country(int index) {
  return country_.Mutable(index);
}
inline ::CountryPackage::CountryGrade* WStoGsCountryInfo::add_country() {
  return country_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryGrade >&
WStoGsCountryInfo::country() const {
  return country_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::CountryGrade >*
WStoGsCountryInfo::mutable_country() {
  return &country_;
}

// -------------------------------------------------------------------

// CountryGrade

// required int32 country = 1;
inline bool CountryGrade::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryGrade::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryGrade::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryGrade::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 CountryGrade::country() const {
  return country_;
}
inline void CountryGrade::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int32 level = 2;
inline bool CountryGrade::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryGrade::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryGrade::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryGrade::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CountryGrade::level() const {
  return level_;
}
inline void CountryGrade::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// DBShopInfoList

// required int64 time = 1;
inline bool DBShopInfoList::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBShopInfoList::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBShopInfoList::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBShopInfoList::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DBShopInfoList::time() const {
  return time_;
}
inline void DBShopInfoList::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .CountryPackage.DBShopItem item = 2;
inline int DBShopInfoList::item_size() const {
  return item_.size();
}
inline void DBShopInfoList::clear_item() {
  item_.Clear();
}
inline const ::CountryPackage::DBShopItem& DBShopInfoList::item(int index) const {
  return item_.Get(index);
}
inline ::CountryPackage::DBShopItem* DBShopInfoList::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryPackage::DBShopItem* DBShopInfoList::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::DBShopItem >&
DBShopInfoList::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::DBShopItem >*
DBShopInfoList::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// DBShopItem

// required int32 id = 1;
inline bool DBShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBShopItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DBShopItem::id() const {
  return id_;
}
inline void DBShopItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 nums = 2;
inline bool DBShopItem::has_nums() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBShopItem::set_has_nums() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBShopItem::clear_has_nums() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBShopItem::clear_nums() {
  nums_ = 0;
  clear_has_nums();
}
inline ::google::protobuf::int32 DBShopItem::nums() const {
  return nums_;
}
inline void DBShopItem::set_nums(::google::protobuf::int32 value) {
  set_has_nums();
  nums_ = value;
}

// -------------------------------------------------------------------

// WeekUpdate

// repeated .CountryPackage.WeekJobs list = 1;
inline int WeekUpdate::list_size() const {
  return list_.size();
}
inline void WeekUpdate::clear_list() {
  list_.Clear();
}
inline const ::CountryPackage::WeekJobs& WeekUpdate::list(int index) const {
  return list_.Get(index);
}
inline ::CountryPackage::WeekJobs* WeekUpdate::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::CountryPackage::WeekJobs* WeekUpdate::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryPackage::WeekJobs >&
WeekUpdate::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryPackage::WeekJobs >*
WeekUpdate::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// WeekJobs

// required int64 id = 1;
inline bool WeekJobs::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeekJobs::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeekJobs::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeekJobs::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 WeekJobs::id() const {
  return id_;
}
inline void WeekJobs::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 job = 2;
inline bool WeekJobs::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeekJobs::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeekJobs::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeekJobs::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 WeekJobs::job() const {
  return job_;
}
inline void WeekJobs::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// -------------------------------------------------------------------

// WStoGSAttrChange

// required int64 charid = 1;
inline bool WStoGSAttrChange::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WStoGSAttrChange::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WStoGSAttrChange::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WStoGSAttrChange::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 WStoGSAttrChange::charid() const {
  return charid_;
}
inline void WStoGSAttrChange::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 attrid = 2;
inline bool WStoGSAttrChange::has_attrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WStoGSAttrChange::set_has_attrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WStoGSAttrChange::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WStoGSAttrChange::clear_attrid() {
  attrid_ = 0;
  clear_has_attrid();
}
inline ::google::protobuf::int32 WStoGSAttrChange::attrid() const {
  return attrid_;
}
inline void WStoGSAttrChange::set_attrid(::google::protobuf::int32 value) {
  set_has_attrid();
  attrid_ = value;
}

// optional int32 value = 3;
inline bool WStoGSAttrChange::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WStoGSAttrChange::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WStoGSAttrChange::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WStoGSAttrChange::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 WStoGSAttrChange::value() const {
  return value_;
}
inline void WStoGSAttrChange::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// WSToGMCountryBattle

// required int32 warType = 1;
inline bool WSToGMCountryBattle::has_wartype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToGMCountryBattle::set_has_wartype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToGMCountryBattle::clear_has_wartype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToGMCountryBattle::clear_wartype() {
  wartype_ = 0;
  clear_has_wartype();
}
inline ::google::protobuf::int32 WSToGMCountryBattle::wartype() const {
  return wartype_;
}
inline void WSToGMCountryBattle::set_wartype(::google::protobuf::int32 value) {
  set_has_wartype();
  wartype_ = value;
}

// required bool flag = 2;
inline bool WSToGMCountryBattle::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToGMCountryBattle::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToGMCountryBattle::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToGMCountryBattle::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool WSToGMCountryBattle::flag() const {
  return flag_;
}
inline void WSToGMCountryBattle::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// repeated int64 charID = 3;
inline int WSToGMCountryBattle::charid_size() const {
  return charid_.size();
}
inline void WSToGMCountryBattle::clear_charid() {
  charid_.Clear();
}
inline ::google::protobuf::int64 WSToGMCountryBattle::charid(int index) const {
  return charid_.Get(index);
}
inline void WSToGMCountryBattle::set_charid(int index, ::google::protobuf::int64 value) {
  charid_.Set(index, value);
}
inline void WSToGMCountryBattle::add_charid(::google::protobuf::int64 value) {
  charid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
WSToGMCountryBattle::charid() const {
  return charid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
WSToGMCountryBattle::mutable_charid() {
  return &charid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Country_2fCountry_2eproto__INCLUDED
