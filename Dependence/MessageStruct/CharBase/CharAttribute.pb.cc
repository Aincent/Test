// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharBase/CharAttribute.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharBase/CharAttribute.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CharBase {

namespace {

const ::google::protobuf::Descriptor* CharAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharAttriToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharAttriToGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttChangeToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttChangeToGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttChangeToWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttChangeToWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharAttChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharAttChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchObjectAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchObjectAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchObjectAttrToGT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchObjectAttrToGT_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttChangeToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttChangeToGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharAttChangeToGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharAttChangeToGame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharBase_2fCharAttribute_2eproto() {
  protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharBase/CharAttribute.proto");
  GOOGLE_CHECK(file != NULL);
  CharAttr_descriptor_ = file->message_type(0);
  static const int CharAttr_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, cleverpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, cleverair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, physicalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, patience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, lphyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, hphyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, lmagattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, hmagattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, magdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, avoidattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, crackdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, avoidcrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, powermax_),
  };
  CharAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharAttr_descriptor_,
      CharAttr::default_instance_,
      CharAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharAttr));
  CharAttriToGate_descriptor_ = file->message_type(1);
  static const int CharAttriToGate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttriToGate, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttriToGate, attr_),
  };
  CharAttriToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharAttriToGate_descriptor_,
      CharAttriToGate::default_instance_,
      CharAttriToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttriToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttriToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharAttriToGate));
  AttChangeToGate_descriptor_ = file->message_type(2);
  static const int AttChangeToGate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGate, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGate, attr_),
  };
  AttChangeToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttChangeToGate_descriptor_,
      AttChangeToGate::default_instance_,
      AttChangeToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttChangeToGate));
  AttChangeToWorld_descriptor_ = file->message_type(3);
  static const int AttChangeToWorld_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToWorld, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToWorld, attr_),
  };
  AttChangeToWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttChangeToWorld_descriptor_,
      AttChangeToWorld::default_instance_,
      AttChangeToWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttChangeToWorld));
  CharAttChange_descriptor_ = file->message_type(4);
  static const int CharAttChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChange, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChange, state_),
  };
  CharAttChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharAttChange_descriptor_,
      CharAttChange::default_instance_,
      CharAttChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharAttChange));
  SynchObjectAttr_descriptor_ = file->message_type(5);
  static const int SynchObjectAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttr, attkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttr, attr_),
  };
  SynchObjectAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchObjectAttr_descriptor_,
      SynchObjectAttr::default_instance_,
      SynchObjectAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchObjectAttr));
  SynchObjectAttrToGT_descriptor_ = file->message_type(6);
  static const int SynchObjectAttrToGT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttrToGT, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttrToGT, attr_),
  };
  SynchObjectAttrToGT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchObjectAttrToGT_descriptor_,
      SynchObjectAttrToGT::default_instance_,
      SynchObjectAttrToGT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttrToGT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchObjectAttrToGT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchObjectAttrToGT));
  AttChangeToGame_descriptor_ = file->message_type(7);
  static const int AttChangeToGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGame, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGame, attr_),
  };
  AttChangeToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttChangeToGame_descriptor_,
      AttChangeToGame::default_instance_,
      AttChangeToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttChangeToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttChangeToGame));
  CharAttChangeToGame_descriptor_ = file->message_type(8);
  static const int CharAttChangeToGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChangeToGame, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChangeToGame, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChangeToGame, state_),
  };
  CharAttChangeToGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharAttChangeToGame_descriptor_,
      CharAttChangeToGame::default_instance_,
      CharAttChangeToGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChangeToGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharAttChangeToGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharAttChangeToGame));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharBase_2fCharAttribute_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharAttr_descriptor_, &CharAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharAttriToGate_descriptor_, &CharAttriToGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttChangeToGate_descriptor_, &AttChangeToGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttChangeToWorld_descriptor_, &AttChangeToWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharAttChange_descriptor_, &CharAttChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchObjectAttr_descriptor_, &SynchObjectAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchObjectAttrToGT_descriptor_, &SynchObjectAttrToGT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttChangeToGame_descriptor_, &AttChangeToGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharAttChangeToGame_descriptor_, &CharAttChangeToGame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharBase_2fCharAttribute_2eproto() {
  delete CharAttr::default_instance_;
  delete CharAttr_reflection_;
  delete CharAttriToGate::default_instance_;
  delete CharAttriToGate_reflection_;
  delete AttChangeToGate::default_instance_;
  delete AttChangeToGate_reflection_;
  delete AttChangeToWorld::default_instance_;
  delete AttChangeToWorld_reflection_;
  delete CharAttChange::default_instance_;
  delete CharAttChange_reflection_;
  delete SynchObjectAttr::default_instance_;
  delete SynchObjectAttr_reflection_;
  delete SynchObjectAttrToGT::default_instance_;
  delete SynchObjectAttrToGT_reflection_;
  delete AttChangeToGame::default_instance_;
  delete AttChangeToGame_reflection_;
  delete CharAttChangeToGame::default_instance_;
  delete CharAttChangeToGame_reflection_;
}

void protobuf_AddDesc_CharBase_2fCharAttribute_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034CharBase/CharAttribute.proto\022\010CharBase"
    "\"\202\003\n\010CharAttr\022\020\n\010strength\030\001 \002(\005\022\023\n\013cleve"
    "rpower\030\002 \002(\005\022\021\n\tcleverair\030\003 \002(\005\022\025\n\rphysi"
    "calpower\030\004 \002(\005\022\020\n\010patience\030\005 \002(\005\022\017\n\007agil"
    "ity\030\006 \002(\005\022\022\n\nlphyattack\030\007 \001(\005\022\022\n\nhphyatt"
    "ack\030\010 \002(\005\022\022\n\nlmagattack\030\t \001(\005\022\022\n\nhmagatt"
    "ack\030\n \001(\005\022\022\n\nphydefence\030\013 \002(\005\022\022\n\nmagdefe"
    "nce\030\014 \001(\005\022\017\n\007hitrate\030\r \002(\005\022\023\n\013avoidattac"
    "k\030\016 \002(\005\022\021\n\tcrackdown\030\017 \002(\005\022\022\n\navoidcrack"
    "\030\020 \001(\005\022\r\n\005lucky\030\021 \001(\005\022\r\n\005fight\030\022 \001(\005\022\r\n\005"
    "power\030\023 \001(\005\022\020\n\010powermax\030\024 \001(\005\"C\n\017CharAtt"
    "riToGate\022\016\n\006charid\030\001 \002(\003\022 \n\004attr\030\002 \002(\0132\022"
    ".CharBase.CharAttr\"H\n\017AttChangeToGate\022\016\n"
    "\006charid\030\001 \002(\003\022%\n\004attr\030\002 \002(\0132\027.CharBase.C"
    "harAttChange\"I\n\020AttChangeToWorld\022\016\n\006char"
    "id\030\001 \002(\003\022%\n\004attr\030\002 \002(\0132\027.CharBase.CharAt"
    "tChange\";\n\rCharAttChange\022\014\n\004type\030\001 \003(\005\022\r"
    "\n\005value\030\002 \003(\003\022\r\n\005state\030\003 \003(\003\"U\n\017SynchObj"
    "ectAttr\022\013\n\003key\030\001 \002(\005\022\016\n\006attkey\030\002 \001(\005\022%\n\004"
    "attr\030\003 \001(\0132\027.CharBase.CharAttChange\"N\n\023S"
    "ynchObjectAttrToGT\022\016\n\006charid\030\001 \002(\003\022\'\n\004at"
    "tr\030\002 \002(\0132\031.CharBase.SynchObjectAttr\"N\n\017A"
    "ttChangeToGame\022\016\n\006charid\030\001 \002(\003\022+\n\004attr\030\002"
    " \002(\0132\035.CharBase.CharAttChangeToGame\"B\n\023C"
    "harAttChangeToGame\022\014\n\004type\030\001 \003(\005\022\016\n\006sval"
    "ue\030\002 \003(\t\022\r\n\005state\030\003 \003(\003", 1023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharBase/CharAttribute.proto", &protobuf_RegisterTypes);
  CharAttr::default_instance_ = new CharAttr();
  CharAttriToGate::default_instance_ = new CharAttriToGate();
  AttChangeToGate::default_instance_ = new AttChangeToGate();
  AttChangeToWorld::default_instance_ = new AttChangeToWorld();
  CharAttChange::default_instance_ = new CharAttChange();
  SynchObjectAttr::default_instance_ = new SynchObjectAttr();
  SynchObjectAttrToGT::default_instance_ = new SynchObjectAttrToGT();
  AttChangeToGame::default_instance_ = new AttChangeToGame();
  CharAttChangeToGame::default_instance_ = new CharAttChangeToGame();
  CharAttr::default_instance_->InitAsDefaultInstance();
  CharAttriToGate::default_instance_->InitAsDefaultInstance();
  AttChangeToGate::default_instance_->InitAsDefaultInstance();
  AttChangeToWorld::default_instance_->InitAsDefaultInstance();
  CharAttChange::default_instance_->InitAsDefaultInstance();
  SynchObjectAttr::default_instance_->InitAsDefaultInstance();
  SynchObjectAttrToGT::default_instance_->InitAsDefaultInstance();
  AttChangeToGame::default_instance_->InitAsDefaultInstance();
  CharAttChangeToGame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharBase_2fCharAttribute_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharBase_2fCharAttribute_2eproto {
  StaticDescriptorInitializer_CharBase_2fCharAttribute_2eproto() {
    protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  }
} static_descriptor_initializer_CharBase_2fCharAttribute_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CharAttr::kStrengthFieldNumber;
const int CharAttr::kCleverpowerFieldNumber;
const int CharAttr::kCleverairFieldNumber;
const int CharAttr::kPhysicalpowerFieldNumber;
const int CharAttr::kPatienceFieldNumber;
const int CharAttr::kAgilityFieldNumber;
const int CharAttr::kLphyattackFieldNumber;
const int CharAttr::kHphyattackFieldNumber;
const int CharAttr::kLmagattackFieldNumber;
const int CharAttr::kHmagattackFieldNumber;
const int CharAttr::kPhydefenceFieldNumber;
const int CharAttr::kMagdefenceFieldNumber;
const int CharAttr::kHitrateFieldNumber;
const int CharAttr::kAvoidattackFieldNumber;
const int CharAttr::kCrackdownFieldNumber;
const int CharAttr::kAvoidcrackFieldNumber;
const int CharAttr::kLuckyFieldNumber;
const int CharAttr::kFightFieldNumber;
const int CharAttr::kPowerFieldNumber;
const int CharAttr::kPowermaxFieldNumber;
#endif  // !_MSC_VER

CharAttr::CharAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharAttr::InitAsDefaultInstance() {
}

CharAttr::CharAttr(const CharAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharAttr::SharedCtor() {
  _cached_size_ = 0;
  strength_ = 0;
  cleverpower_ = 0;
  cleverair_ = 0;
  physicalpower_ = 0;
  patience_ = 0;
  agility_ = 0;
  lphyattack_ = 0;
  hphyattack_ = 0;
  lmagattack_ = 0;
  hmagattack_ = 0;
  phydefence_ = 0;
  magdefence_ = 0;
  hitrate_ = 0;
  avoidattack_ = 0;
  crackdown_ = 0;
  avoidcrack_ = 0;
  lucky_ = 0;
  fight_ = 0;
  power_ = 0;
  powermax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharAttr::~CharAttr() {
  SharedDtor();
}

void CharAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharAttr_descriptor_;
}

const CharAttr& CharAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

CharAttr* CharAttr::default_instance_ = NULL;

CharAttr* CharAttr::New() const {
  return new CharAttr;
}

void CharAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    strength_ = 0;
    cleverpower_ = 0;
    cleverair_ = 0;
    physicalpower_ = 0;
    patience_ = 0;
    agility_ = 0;
    lphyattack_ = 0;
    hphyattack_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lmagattack_ = 0;
    hmagattack_ = 0;
    phydefence_ = 0;
    magdefence_ = 0;
    hitrate_ = 0;
    avoidattack_ = 0;
    crackdown_ = 0;
    avoidcrack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lucky_ = 0;
    fight_ = 0;
    power_ = 0;
    powermax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 strength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cleverpower;
        break;
      }

      // required int32 cleverpower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverpower_)));
          set_has_cleverpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cleverair;
        break;
      }

      // required int32 cleverair = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverair_)));
          set_has_cleverair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_physicalpower;
        break;
      }

      // required int32 physicalpower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalpower_)));
          set_has_physicalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_patience;
        break;
      }

      // required int32 patience = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patience_)));
          set_has_patience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_agility;
        break;
      }

      // required int32 agility = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lphyattack;
        break;
      }

      // optional int32 lphyattack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lphyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lphyattack_)));
          set_has_lphyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hphyattack;
        break;
      }

      // required int32 hphyattack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hphyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hphyattack_)));
          set_has_hphyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lmagattack;
        break;
      }

      // optional int32 lmagattack = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lmagattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lmagattack_)));
          set_has_lmagattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hmagattack;
        break;
      }

      // optional int32 hmagattack = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hmagattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hmagattack_)));
          set_has_hmagattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phydefence;
        break;
      }

      // required int32 phydefence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_magdefence;
        break;
      }

      // optional int32 magdefence = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magdefence_)));
          set_has_magdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hitrate;
        break;
      }

      // required int32 hitrate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_avoidattack;
        break;
      }

      // required int32 avoidattack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidattack_)));
          set_has_avoidattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_crackdown;
        break;
      }

      // required int32 crackdown = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdown_)));
          set_has_crackdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_avoidcrack;
        break;
      }

      // optional int32 avoidcrack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidcrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidcrack_)));
          set_has_avoidcrack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fight;
        break;
      }

      // optional int32 fight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_power;
        break;
      }

      // optional int32 power = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_powermax;
        break;
      }

      // optional int32 powermax = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powermax_)));
          set_has_powermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 strength = 1;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->strength(), output);
  }

  // required int32 cleverpower = 2;
  if (has_cleverpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cleverpower(), output);
  }

  // required int32 cleverair = 3;
  if (has_cleverair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cleverair(), output);
  }

  // required int32 physicalpower = 4;
  if (has_physicalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->physicalpower(), output);
  }

  // required int32 patience = 5;
  if (has_patience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->patience(), output);
  }

  // required int32 agility = 6;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->agility(), output);
  }

  // optional int32 lphyattack = 7;
  if (has_lphyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lphyattack(), output);
  }

  // required int32 hphyattack = 8;
  if (has_hphyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hphyattack(), output);
  }

  // optional int32 lmagattack = 9;
  if (has_lmagattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lmagattack(), output);
  }

  // optional int32 hmagattack = 10;
  if (has_hmagattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->hmagattack(), output);
  }

  // required int32 phydefence = 11;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->phydefence(), output);
  }

  // optional int32 magdefence = 12;
  if (has_magdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->magdefence(), output);
  }

  // required int32 hitrate = 13;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hitrate(), output);
  }

  // required int32 avoidattack = 14;
  if (has_avoidattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->avoidattack(), output);
  }

  // required int32 crackdown = 15;
  if (has_crackdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->crackdown(), output);
  }

  // optional int32 avoidcrack = 16;
  if (has_avoidcrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->avoidcrack(), output);
  }

  // optional int32 lucky = 17;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lucky(), output);
  }

  // optional int32 fight = 18;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->fight(), output);
  }

  // optional int32 power = 19;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->power(), output);
  }

  // optional int32 powermax = 20;
  if (has_powermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->powermax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 strength = 1;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->strength(), target);
  }

  // required int32 cleverpower = 2;
  if (has_cleverpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cleverpower(), target);
  }

  // required int32 cleverair = 3;
  if (has_cleverair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cleverair(), target);
  }

  // required int32 physicalpower = 4;
  if (has_physicalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->physicalpower(), target);
  }

  // required int32 patience = 5;
  if (has_patience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->patience(), target);
  }

  // required int32 agility = 6;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->agility(), target);
  }

  // optional int32 lphyattack = 7;
  if (has_lphyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lphyattack(), target);
  }

  // required int32 hphyattack = 8;
  if (has_hphyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hphyattack(), target);
  }

  // optional int32 lmagattack = 9;
  if (has_lmagattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lmagattack(), target);
  }

  // optional int32 hmagattack = 10;
  if (has_hmagattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->hmagattack(), target);
  }

  // required int32 phydefence = 11;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->phydefence(), target);
  }

  // optional int32 magdefence = 12;
  if (has_magdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->magdefence(), target);
  }

  // required int32 hitrate = 13;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hitrate(), target);
  }

  // required int32 avoidattack = 14;
  if (has_avoidattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->avoidattack(), target);
  }

  // required int32 crackdown = 15;
  if (has_crackdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->crackdown(), target);
  }

  // optional int32 avoidcrack = 16;
  if (has_avoidcrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->avoidcrack(), target);
  }

  // optional int32 lucky = 17;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lucky(), target);
  }

  // optional int32 fight = 18;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->fight(), target);
  }

  // optional int32 power = 19;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->power(), target);
  }

  // optional int32 powermax = 20;
  if (has_powermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->powermax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 strength = 1;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // required int32 cleverpower = 2;
    if (has_cleverpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverpower());
    }

    // required int32 cleverair = 3;
    if (has_cleverair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverair());
    }

    // required int32 physicalpower = 4;
    if (has_physicalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalpower());
    }

    // required int32 patience = 5;
    if (has_patience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patience());
    }

    // required int32 agility = 6;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 lphyattack = 7;
    if (has_lphyattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lphyattack());
    }

    // required int32 hphyattack = 8;
    if (has_hphyattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hphyattack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lmagattack = 9;
    if (has_lmagattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lmagattack());
    }

    // optional int32 hmagattack = 10;
    if (has_hmagattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hmagattack());
    }

    // required int32 phydefence = 11;
    if (has_phydefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // optional int32 magdefence = 12;
    if (has_magdefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magdefence());
    }

    // required int32 hitrate = 13;
    if (has_hitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // required int32 avoidattack = 14;
    if (has_avoidattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidattack());
    }

    // required int32 crackdown = 15;
    if (has_crackdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdown());
    }

    // optional int32 avoidcrack = 16;
    if (has_avoidcrack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidcrack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 lucky = 17;
    if (has_lucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional int32 fight = 18;
    if (has_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 power = 19;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 powermax = 20;
    if (has_powermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powermax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharAttr::MergeFrom(const CharAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_cleverpower()) {
      set_cleverpower(from.cleverpower());
    }
    if (from.has_cleverair()) {
      set_cleverair(from.cleverair());
    }
    if (from.has_physicalpower()) {
      set_physicalpower(from.physicalpower());
    }
    if (from.has_patience()) {
      set_patience(from.patience());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_lphyattack()) {
      set_lphyattack(from.lphyattack());
    }
    if (from.has_hphyattack()) {
      set_hphyattack(from.hphyattack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lmagattack()) {
      set_lmagattack(from.lmagattack());
    }
    if (from.has_hmagattack()) {
      set_hmagattack(from.hmagattack());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_magdefence()) {
      set_magdefence(from.magdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidattack()) {
      set_avoidattack(from.avoidattack());
    }
    if (from.has_crackdown()) {
      set_crackdown(from.crackdown());
    }
    if (from.has_avoidcrack()) {
      set_avoidcrack(from.avoidcrack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_powermax()) {
      set_powermax(from.powermax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharAttr::CopyFrom(const CharAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x000074bf) != 0x000074bf) return false;

  return true;
}

void CharAttr::Swap(CharAttr* other) {
  if (other != this) {
    std::swap(strength_, other->strength_);
    std::swap(cleverpower_, other->cleverpower_);
    std::swap(cleverair_, other->cleverair_);
    std::swap(physicalpower_, other->physicalpower_);
    std::swap(patience_, other->patience_);
    std::swap(agility_, other->agility_);
    std::swap(lphyattack_, other->lphyattack_);
    std::swap(hphyattack_, other->hphyattack_);
    std::swap(lmagattack_, other->lmagattack_);
    std::swap(hmagattack_, other->hmagattack_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magdefence_, other->magdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidattack_, other->avoidattack_);
    std::swap(crackdown_, other->crackdown_);
    std::swap(avoidcrack_, other->avoidcrack_);
    std::swap(lucky_, other->lucky_);
    std::swap(fight_, other->fight_);
    std::swap(power_, other->power_);
    std::swap(powermax_, other->powermax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharAttr_descriptor_;
  metadata.reflection = CharAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharAttriToGate::kCharidFieldNumber;
const int CharAttriToGate::kAttrFieldNumber;
#endif  // !_MSC_VER

CharAttriToGate::CharAttriToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharAttriToGate::InitAsDefaultInstance() {
  attr_ = const_cast< ::CharBase::CharAttr*>(&::CharBase::CharAttr::default_instance());
}

CharAttriToGate::CharAttriToGate(const CharAttriToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharAttriToGate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharAttriToGate::~CharAttriToGate() {
  SharedDtor();
}

void CharAttriToGate::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void CharAttriToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharAttriToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharAttriToGate_descriptor_;
}

const CharAttriToGate& CharAttriToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

CharAttriToGate* CharAttriToGate::default_instance_ = NULL;

CharAttriToGate* CharAttriToGate::New() const {
  return new CharAttriToGate;
}

void CharAttriToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_attr()) {
      if (attr_ != NULL) attr_->::CharBase::CharAttr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharAttriToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .CharBase.CharAttr attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharAttriToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .CharBase.CharAttr attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharAttriToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .CharBase.CharAttr attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharAttriToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .CharBase.CharAttr attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharAttriToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharAttriToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharAttriToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharAttriToGate::MergeFrom(const CharAttriToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attr()) {
      mutable_attr()->::CharBase::CharAttr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharAttriToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharAttriToGate::CopyFrom(const CharAttriToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharAttriToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void CharAttriToGate::Swap(CharAttriToGate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharAttriToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharAttriToGate_descriptor_;
  metadata.reflection = CharAttriToGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttChangeToGate::kCharidFieldNumber;
const int AttChangeToGate::kAttrFieldNumber;
#endif  // !_MSC_VER

AttChangeToGate::AttChangeToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttChangeToGate::InitAsDefaultInstance() {
  attr_ = const_cast< ::CharBase::CharAttChange*>(&::CharBase::CharAttChange::default_instance());
}

AttChangeToGate::AttChangeToGate(const AttChangeToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttChangeToGate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttChangeToGate::~AttChangeToGate() {
  SharedDtor();
}

void AttChangeToGate::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void AttChangeToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttChangeToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttChangeToGate_descriptor_;
}

const AttChangeToGate& AttChangeToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

AttChangeToGate* AttChangeToGate::default_instance_ = NULL;

AttChangeToGate* AttChangeToGate::New() const {
  return new AttChangeToGate;
}

void AttChangeToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_attr()) {
      if (attr_ != NULL) attr_->::CharBase::CharAttChange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttChangeToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .CharBase.CharAttChange attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttChangeToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .CharBase.CharAttChange attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttChangeToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .CharBase.CharAttChange attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttChangeToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .CharBase.CharAttChange attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttChangeToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttChangeToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttChangeToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttChangeToGate::MergeFrom(const AttChangeToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attr()) {
      mutable_attr()->::CharBase::CharAttChange::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttChangeToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttChangeToGate::CopyFrom(const AttChangeToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttChangeToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AttChangeToGate::Swap(AttChangeToGate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttChangeToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttChangeToGate_descriptor_;
  metadata.reflection = AttChangeToGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttChangeToWorld::kCharidFieldNumber;
const int AttChangeToWorld::kAttrFieldNumber;
#endif  // !_MSC_VER

AttChangeToWorld::AttChangeToWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttChangeToWorld::InitAsDefaultInstance() {
  attr_ = const_cast< ::CharBase::CharAttChange*>(&::CharBase::CharAttChange::default_instance());
}

AttChangeToWorld::AttChangeToWorld(const AttChangeToWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttChangeToWorld::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttChangeToWorld::~AttChangeToWorld() {
  SharedDtor();
}

void AttChangeToWorld::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void AttChangeToWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttChangeToWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttChangeToWorld_descriptor_;
}

const AttChangeToWorld& AttChangeToWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

AttChangeToWorld* AttChangeToWorld::default_instance_ = NULL;

AttChangeToWorld* AttChangeToWorld::New() const {
  return new AttChangeToWorld;
}

void AttChangeToWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_attr()) {
      if (attr_ != NULL) attr_->::CharBase::CharAttChange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttChangeToWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .CharBase.CharAttChange attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttChangeToWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .CharBase.CharAttChange attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttChangeToWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .CharBase.CharAttChange attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttChangeToWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .CharBase.CharAttChange attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttChangeToWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttChangeToWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttChangeToWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttChangeToWorld::MergeFrom(const AttChangeToWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attr()) {
      mutable_attr()->::CharBase::CharAttChange::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttChangeToWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttChangeToWorld::CopyFrom(const AttChangeToWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttChangeToWorld::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AttChangeToWorld::Swap(AttChangeToWorld* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttChangeToWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttChangeToWorld_descriptor_;
  metadata.reflection = AttChangeToWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharAttChange::kTypeFieldNumber;
const int CharAttChange::kValueFieldNumber;
const int CharAttChange::kStateFieldNumber;
#endif  // !_MSC_VER

CharAttChange::CharAttChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharAttChange::InitAsDefaultInstance() {
}

CharAttChange::CharAttChange(const CharAttChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharAttChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharAttChange::~CharAttChange() {
  SharedDtor();
}

void CharAttChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharAttChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharAttChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharAttChange_descriptor_;
}

const CharAttChange& CharAttChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

CharAttChange* CharAttChange::default_instance_ = NULL;

CharAttChange* CharAttChange::New() const {
  return new CharAttChange;
}

void CharAttChange::Clear() {
  type_.Clear();
  value_.Clear();
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharAttChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // repeated int64 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharAttChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type(i), output);
  }

  // repeated int64 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->value(i), output);
  }

  // repeated int64 state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharAttChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type(i), target);
  }

  // repeated int64 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->value(i), target);
  }

  // repeated int64 state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharAttChange::ByteSize() const {
  int total_size = 0;

  // repeated int32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  // repeated int64 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  // repeated int64 state = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharAttChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharAttChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharAttChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharAttChange::MergeFrom(const CharAttChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  value_.MergeFrom(from.value_);
  state_.MergeFrom(from.state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharAttChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharAttChange::CopyFrom(const CharAttChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharAttChange::IsInitialized() const {

  return true;
}

void CharAttChange::Swap(CharAttChange* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    value_.Swap(&other->value_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharAttChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharAttChange_descriptor_;
  metadata.reflection = CharAttChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchObjectAttr::kKeyFieldNumber;
const int SynchObjectAttr::kAttkeyFieldNumber;
const int SynchObjectAttr::kAttrFieldNumber;
#endif  // !_MSC_VER

SynchObjectAttr::SynchObjectAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchObjectAttr::InitAsDefaultInstance() {
  attr_ = const_cast< ::CharBase::CharAttChange*>(&::CharBase::CharAttChange::default_instance());
}

SynchObjectAttr::SynchObjectAttr(const SynchObjectAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchObjectAttr::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  attkey_ = 0;
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchObjectAttr::~SynchObjectAttr() {
  SharedDtor();
}

void SynchObjectAttr::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void SynchObjectAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchObjectAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchObjectAttr_descriptor_;
}

const SynchObjectAttr& SynchObjectAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

SynchObjectAttr* SynchObjectAttr::default_instance_ = NULL;

SynchObjectAttr* SynchObjectAttr::New() const {
  return new SynchObjectAttr;
}

void SynchObjectAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    attkey_ = 0;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::CharBase::CharAttChange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchObjectAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attkey;
        break;
      }

      // optional int32 attkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attkey_)));
          set_has_attkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // optional .CharBase.CharAttChange attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchObjectAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 attkey = 2;
  if (has_attkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attkey(), output);
  }

  // optional .CharBase.CharAttChange attr = 3;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchObjectAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 attkey = 2;
  if (has_attkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attkey(), target);
  }

  // optional .CharBase.CharAttChange attr = 3;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchObjectAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 attkey = 2;
    if (has_attkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attkey());
    }

    // optional .CharBase.CharAttChange attr = 3;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchObjectAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchObjectAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchObjectAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchObjectAttr::MergeFrom(const SynchObjectAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_attkey()) {
      set_attkey(from.attkey());
    }
    if (from.has_attr()) {
      mutable_attr()->::CharBase::CharAttChange::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchObjectAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchObjectAttr::CopyFrom(const SynchObjectAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchObjectAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SynchObjectAttr::Swap(SynchObjectAttr* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(attkey_, other->attkey_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchObjectAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchObjectAttr_descriptor_;
  metadata.reflection = SynchObjectAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchObjectAttrToGT::kCharidFieldNumber;
const int SynchObjectAttrToGT::kAttrFieldNumber;
#endif  // !_MSC_VER

SynchObjectAttrToGT::SynchObjectAttrToGT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchObjectAttrToGT::InitAsDefaultInstance() {
  attr_ = const_cast< ::CharBase::SynchObjectAttr*>(&::CharBase::SynchObjectAttr::default_instance());
}

SynchObjectAttrToGT::SynchObjectAttrToGT(const SynchObjectAttrToGT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchObjectAttrToGT::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchObjectAttrToGT::~SynchObjectAttrToGT() {
  SharedDtor();
}

void SynchObjectAttrToGT::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void SynchObjectAttrToGT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchObjectAttrToGT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchObjectAttrToGT_descriptor_;
}

const SynchObjectAttrToGT& SynchObjectAttrToGT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

SynchObjectAttrToGT* SynchObjectAttrToGT::default_instance_ = NULL;

SynchObjectAttrToGT* SynchObjectAttrToGT::New() const {
  return new SynchObjectAttrToGT;
}

void SynchObjectAttrToGT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_attr()) {
      if (attr_ != NULL) attr_->::CharBase::SynchObjectAttr::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchObjectAttrToGT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .CharBase.SynchObjectAttr attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchObjectAttrToGT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .CharBase.SynchObjectAttr attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchObjectAttrToGT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .CharBase.SynchObjectAttr attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchObjectAttrToGT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .CharBase.SynchObjectAttr attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchObjectAttrToGT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchObjectAttrToGT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchObjectAttrToGT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchObjectAttrToGT::MergeFrom(const SynchObjectAttrToGT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attr()) {
      mutable_attr()->::CharBase::SynchObjectAttr::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchObjectAttrToGT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchObjectAttrToGT::CopyFrom(const SynchObjectAttrToGT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchObjectAttrToGT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void SynchObjectAttrToGT::Swap(SynchObjectAttrToGT* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchObjectAttrToGT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchObjectAttrToGT_descriptor_;
  metadata.reflection = SynchObjectAttrToGT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttChangeToGame::kCharidFieldNumber;
const int AttChangeToGame::kAttrFieldNumber;
#endif  // !_MSC_VER

AttChangeToGame::AttChangeToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttChangeToGame::InitAsDefaultInstance() {
  attr_ = const_cast< ::CharBase::CharAttChangeToGame*>(&::CharBase::CharAttChangeToGame::default_instance());
}

AttChangeToGame::AttChangeToGame(const AttChangeToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttChangeToGame::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttChangeToGame::~AttChangeToGame() {
  SharedDtor();
}

void AttChangeToGame::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
  }
}

void AttChangeToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttChangeToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttChangeToGame_descriptor_;
}

const AttChangeToGame& AttChangeToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

AttChangeToGame* AttChangeToGame::default_instance_ = NULL;

AttChangeToGame* AttChangeToGame::New() const {
  return new AttChangeToGame;
}

void AttChangeToGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_attr()) {
      if (attr_ != NULL) attr_->::CharBase::CharAttChangeToGame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttChangeToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attr;
        break;
      }

      // required .CharBase.CharAttChangeToGame attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttChangeToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .CharBase.CharAttChangeToGame attr = 2;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttChangeToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .CharBase.CharAttChangeToGame attr = 2;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttChangeToGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .CharBase.CharAttChangeToGame attr = 2;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttChangeToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttChangeToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttChangeToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttChangeToGame::MergeFrom(const AttChangeToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attr()) {
      mutable_attr()->::CharBase::CharAttChangeToGame::MergeFrom(from.attr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttChangeToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttChangeToGame::CopyFrom(const AttChangeToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttChangeToGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AttChangeToGame::Swap(AttChangeToGame* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attr_, other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttChangeToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttChangeToGame_descriptor_;
  metadata.reflection = AttChangeToGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharAttChangeToGame::kTypeFieldNumber;
const int CharAttChangeToGame::kSvalueFieldNumber;
const int CharAttChangeToGame::kStateFieldNumber;
#endif  // !_MSC_VER

CharAttChangeToGame::CharAttChangeToGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharAttChangeToGame::InitAsDefaultInstance() {
}

CharAttChangeToGame::CharAttChangeToGame(const CharAttChangeToGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharAttChangeToGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharAttChangeToGame::~CharAttChangeToGame() {
  SharedDtor();
}

void CharAttChangeToGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharAttChangeToGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharAttChangeToGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharAttChangeToGame_descriptor_;
}

const CharAttChangeToGame& CharAttChangeToGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  return *default_instance_;
}

CharAttChangeToGame* CharAttChangeToGame::default_instance_ = NULL;

CharAttChangeToGame* CharAttChangeToGame::New() const {
  return new CharAttChangeToGame;
}

void CharAttChangeToGame::Clear() {
  type_.Clear();
  svalue_.Clear();
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharAttChangeToGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_svalue;
        break;
      }

      // repeated string svalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_svalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_svalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->svalue(this->svalue_size() - 1).data(),
            this->svalue(this->svalue_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_svalue;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // repeated int64 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharAttChangeToGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type(i), output);
  }

  // repeated string svalue = 2;
  for (int i = 0; i < this->svalue_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->svalue(i).data(), this->svalue(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->svalue(i), output);
  }

  // repeated int64 state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharAttChangeToGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type(i), target);
  }

  // repeated string svalue = 2;
  for (int i = 0; i < this->svalue_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->svalue(i).data(), this->svalue(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->svalue(i), target);
  }

  // repeated int64 state = 3;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharAttChangeToGame::ByteSize() const {
  int total_size = 0;

  // repeated int32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  // repeated string svalue = 2;
  total_size += 1 * this->svalue_size();
  for (int i = 0; i < this->svalue_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->svalue(i));
  }

  // repeated int64 state = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharAttChangeToGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharAttChangeToGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharAttChangeToGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharAttChangeToGame::MergeFrom(const CharAttChangeToGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  svalue_.MergeFrom(from.svalue_);
  state_.MergeFrom(from.state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharAttChangeToGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharAttChangeToGame::CopyFrom(const CharAttChangeToGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharAttChangeToGame::IsInitialized() const {

  return true;
}

void CharAttChangeToGame::Swap(CharAttChangeToGame* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    svalue_.Swap(&other->svalue_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharAttChangeToGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharAttChangeToGame_descriptor_;
  metadata.reflection = CharAttChangeToGame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CharBase

// @@protoc_insertion_point(global_scope)
