// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Seabeach/Seabeach.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Seabeach/Seabeach.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SeabeachProto {

namespace {

const ::google::protobuf::Descriptor* AckSeabeachInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSeabeachInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqJump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqJump_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckJump_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckJump_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGather_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGather_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatherResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatherResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatherFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatherFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLeaveObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLeaveObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeaveObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeaveObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncomeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncomeChange_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto() {
  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Seabeach/Seabeach.proto");
  GOOGLE_CHECK(file != NULL);
  AckSeabeachInfo_descriptor_ = file->message_type(0);
  static const int AckSeabeachInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSeabeachInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSeabeachInfo, mapid_),
  };
  AckSeabeachInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSeabeachInfo_descriptor_,
      AckSeabeachInfo::default_instance_,
      AckSeabeachInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSeabeachInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSeabeachInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSeabeachInfo));
  ReqJump_descriptor_ = file->message_type(1);
  static const int ReqJump_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJump, id_),
  };
  ReqJump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqJump_descriptor_,
      ReqJump::default_instance_,
      ReqJump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqJump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqJump));
  AckJump_descriptor_ = file->message_type(2);
  static const int AckJump_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJump, code_),
  };
  AckJump_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckJump_descriptor_,
      AckJump::default_instance_,
      AckJump_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJump, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckJump, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckJump));
  JumpInfo_descriptor_ = file->message_type(3);
  static const int JumpInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpInfo, ypos_),
  };
  JumpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpInfo_descriptor_,
      JumpInfo::default_instance_,
      JumpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpInfo));
  ReqGather_descriptor_ = file->message_type(4);
  static const int ReqGather_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGather, objkey_),
  };
  ReqGather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGather_descriptor_,
      ReqGather::default_instance_,
      ReqGather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGather));
  AckGather_descriptor_ = file->message_type(5);
  static const int AckGather_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, objkey_),
  };
  AckGather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGather_descriptor_,
      AckGather::default_instance_,
      AckGather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGather));
  GatherResult_descriptor_ = file->message_type(6);
  static const int GatherResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherResult, playerkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherResult, objkey_),
  };
  GatherResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatherResult_descriptor_,
      GatherResult::default_instance_,
      GatherResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatherResult));
  GatherFail_descriptor_ = file->message_type(7);
  static const int GatherFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherFail, objkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherFail, code_),
  };
  GatherFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatherFail_descriptor_,
      GatherFail::default_instance_,
      GatherFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatherFail));
  AckLeaveObject_descriptor_ = file->message_type(8);
  static const int AckLeaveObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveObject, code_),
  };
  AckLeaveObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLeaveObject_descriptor_,
      AckLeaveObject::default_instance_,
      AckLeaveObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLeaveObject));
  PlayerLeaveObject_descriptor_ = file->message_type(9);
  static const int PlayerLeaveObject_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveObject, key_),
  };
  PlayerLeaveObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeaveObject_descriptor_,
      PlayerLeaveObject::default_instance_,
      PlayerLeaveObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeaveObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeaveObject));
  IncomeChange_descriptor_ = file->message_type(10);
  static const int IncomeChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeChange, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeChange, force_),
  };
  IncomeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncomeChange_descriptor_,
      IncomeChange::default_instance_,
      IncomeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncomeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncomeChange));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSeabeachInfo_descriptor_, &AckSeabeachInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqJump_descriptor_, &ReqJump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckJump_descriptor_, &AckJump::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpInfo_descriptor_, &JumpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGather_descriptor_, &ReqGather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGather_descriptor_, &AckGather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatherResult_descriptor_, &GatherResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatherFail_descriptor_, &GatherFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLeaveObject_descriptor_, &AckLeaveObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeaveObject_descriptor_, &PlayerLeaveObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncomeChange_descriptor_, &IncomeChange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto() {
  delete AckSeabeachInfo::default_instance_;
  delete AckSeabeachInfo_reflection_;
  delete ReqJump::default_instance_;
  delete ReqJump_reflection_;
  delete AckJump::default_instance_;
  delete AckJump_reflection_;
  delete JumpInfo::default_instance_;
  delete JumpInfo_reflection_;
  delete ReqGather::default_instance_;
  delete ReqGather_reflection_;
  delete AckGather::default_instance_;
  delete AckGather_reflection_;
  delete GatherResult::default_instance_;
  delete GatherResult_reflection_;
  delete GatherFail::default_instance_;
  delete GatherFail_reflection_;
  delete AckLeaveObject::default_instance_;
  delete AckLeaveObject_reflection_;
  delete PlayerLeaveObject::default_instance_;
  delete PlayerLeaveObject_reflection_;
  delete IncomeChange::default_instance_;
  delete IncomeChange_reflection_;
}

void protobuf_AddDesc_Seabeach_2fSeabeach_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027Seabeach/Seabeach.proto\022\rSeabeachProto"
    "\".\n\017AckSeabeachInfo\022\014\n\004code\030\001 \002(\005\022\r\n\005map"
    "id\030\002 \001(\003\"\025\n\007ReqJump\022\n\n\002id\030\001 \002(\005\"\027\n\007AckJu"
    "mp\022\014\n\004code\030\001 \002(\005\"3\n\010JumpInfo\022\013\n\003key\030\001 \002("
    "\005\022\014\n\004xpos\030\002 \001(\005\022\014\n\004ypos\030\003 \001(\005\"\033\n\tReqGath"
    "er\022\016\n\006objkey\030\001 \002(\005\")\n\tAckGather\022\014\n\004code\030"
    "\001 \002(\005\022\016\n\006objkey\030\002 \001(\005\"1\n\014GatherResult\022\021\n"
    "\tplayerkey\030\001 \002(\005\022\016\n\006objkey\030\002 \001(\005\"*\n\nGath"
    "erFail\022\016\n\006objkey\030\001 \002(\005\022\014\n\004code\030\002 \001(\005\"\036\n\016"
    "AckLeaveObject\022\014\n\004code\030\001 \002(\005\" \n\021PlayerLe"
    "aveObject\022\013\n\003key\030\001 \002(\005\"*\n\014IncomeChange\022\013"
    "\n\003exp\030\001 \002(\005\022\r\n\005force\030\002 \001(\005", 466);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Seabeach/Seabeach.proto", &protobuf_RegisterTypes);
  AckSeabeachInfo::default_instance_ = new AckSeabeachInfo();
  ReqJump::default_instance_ = new ReqJump();
  AckJump::default_instance_ = new AckJump();
  JumpInfo::default_instance_ = new JumpInfo();
  ReqGather::default_instance_ = new ReqGather();
  AckGather::default_instance_ = new AckGather();
  GatherResult::default_instance_ = new GatherResult();
  GatherFail::default_instance_ = new GatherFail();
  AckLeaveObject::default_instance_ = new AckLeaveObject();
  PlayerLeaveObject::default_instance_ = new PlayerLeaveObject();
  IncomeChange::default_instance_ = new IncomeChange();
  AckSeabeachInfo::default_instance_->InitAsDefaultInstance();
  ReqJump::default_instance_->InitAsDefaultInstance();
  AckJump::default_instance_->InitAsDefaultInstance();
  JumpInfo::default_instance_->InitAsDefaultInstance();
  ReqGather::default_instance_->InitAsDefaultInstance();
  AckGather::default_instance_->InitAsDefaultInstance();
  GatherResult::default_instance_->InitAsDefaultInstance();
  GatherFail::default_instance_->InitAsDefaultInstance();
  AckLeaveObject::default_instance_->InitAsDefaultInstance();
  PlayerLeaveObject::default_instance_->InitAsDefaultInstance();
  IncomeChange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Seabeach_2fSeabeach_2eproto {
  StaticDescriptorInitializer_Seabeach_2fSeabeach_2eproto() {
    protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  }
} static_descriptor_initializer_Seabeach_2fSeabeach_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckSeabeachInfo::kCodeFieldNumber;
const int AckSeabeachInfo::kMapidFieldNumber;
#endif  // !_MSC_VER

AckSeabeachInfo::AckSeabeachInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSeabeachInfo::InitAsDefaultInstance() {
}

AckSeabeachInfo::AckSeabeachInfo(const AckSeabeachInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSeabeachInfo::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSeabeachInfo::~AckSeabeachInfo() {
  SharedDtor();
}

void AckSeabeachInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSeabeachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSeabeachInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSeabeachInfo_descriptor_;
}

const AckSeabeachInfo& AckSeabeachInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

AckSeabeachInfo* AckSeabeachInfo::default_instance_ = NULL;

AckSeabeachInfo* AckSeabeachInfo::New() const {
  return new AckSeabeachInfo;
}

void AckSeabeachInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSeabeachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSeabeachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSeabeachInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSeabeachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSeabeachInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSeabeachInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSeabeachInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSeabeachInfo::MergeFrom(const AckSeabeachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSeabeachInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSeabeachInfo::CopyFrom(const AckSeabeachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSeabeachInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckSeabeachInfo::Swap(AckSeabeachInfo* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSeabeachInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSeabeachInfo_descriptor_;
  metadata.reflection = AckSeabeachInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqJump::kIdFieldNumber;
#endif  // !_MSC_VER

ReqJump::ReqJump()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqJump::InitAsDefaultInstance() {
}

ReqJump::ReqJump(const ReqJump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqJump::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqJump::~ReqJump() {
  SharedDtor();
}

void ReqJump::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqJump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqJump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqJump_descriptor_;
}

const ReqJump& ReqJump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

ReqJump* ReqJump::default_instance_ = NULL;

ReqJump* ReqJump::New() const {
  return new ReqJump;
}

void ReqJump::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqJump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqJump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqJump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqJump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqJump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqJump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqJump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqJump::MergeFrom(const ReqJump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqJump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqJump::CopyFrom(const ReqJump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqJump::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqJump::Swap(ReqJump* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqJump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqJump_descriptor_;
  metadata.reflection = ReqJump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckJump::kCodeFieldNumber;
#endif  // !_MSC_VER

AckJump::AckJump()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckJump::InitAsDefaultInstance() {
}

AckJump::AckJump(const AckJump& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckJump::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckJump::~AckJump() {
  SharedDtor();
}

void AckJump::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckJump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckJump::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckJump_descriptor_;
}

const AckJump& AckJump::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

AckJump* AckJump::default_instance_ = NULL;

AckJump* AckJump::New() const {
  return new AckJump;
}

void AckJump::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckJump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckJump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckJump::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckJump::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckJump::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckJump* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckJump*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckJump::MergeFrom(const AckJump& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckJump::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckJump::CopyFrom(const AckJump& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckJump::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckJump::Swap(AckJump* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckJump::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckJump_descriptor_;
  metadata.reflection = AckJump_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JumpInfo::kKeyFieldNumber;
const int JumpInfo::kXposFieldNumber;
const int JumpInfo::kYposFieldNumber;
#endif  // !_MSC_VER

JumpInfo::JumpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JumpInfo::InitAsDefaultInstance() {
}

JumpInfo::JumpInfo(const JumpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JumpInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpInfo::~JumpInfo() {
  SharedDtor();
}

void JumpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JumpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpInfo_descriptor_;
}

const JumpInfo& JumpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

JumpInfo* JumpInfo::default_instance_ = NULL;

JumpInfo* JumpInfo::New() const {
  return new JumpInfo;
}

void JumpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JumpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 xpos = 2;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xpos(), output);
  }

  // optional int32 ypos = 3;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JumpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 xpos = 2;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xpos(), target);
  }

  // optional int32 ypos = 3;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JumpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 xpos = 2;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 3;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpInfo::MergeFrom(const JumpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpInfo::CopyFrom(const JumpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JumpInfo::Swap(JumpInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpInfo_descriptor_;
  metadata.reflection = JumpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGather::kObjkeyFieldNumber;
#endif  // !_MSC_VER

ReqGather::ReqGather()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGather::InitAsDefaultInstance() {
}

ReqGather::ReqGather(const ReqGather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGather::SharedCtor() {
  _cached_size_ = 0;
  objkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGather::~ReqGather() {
  SharedDtor();
}

void ReqGather::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGather_descriptor_;
}

const ReqGather& ReqGather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

ReqGather* ReqGather::default_instance_ = NULL;

ReqGather* ReqGather::New() const {
  return new ReqGather;
}

void ReqGather::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objkey_)));
          set_has_objkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objkey = 1;
  if (has_objkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objkey = 1;
  if (has_objkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGather::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objkey = 1;
    if (has_objkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGather::MergeFrom(const ReqGather& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objkey()) {
      set_objkey(from.objkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGather::CopyFrom(const ReqGather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGather::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGather::Swap(ReqGather* other) {
  if (other != this) {
    std::swap(objkey_, other->objkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGather_descriptor_;
  metadata.reflection = ReqGather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGather::kCodeFieldNumber;
const int AckGather::kObjkeyFieldNumber;
#endif  // !_MSC_VER

AckGather::AckGather()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGather::InitAsDefaultInstance() {
}

AckGather::AckGather(const AckGather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGather::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  objkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGather::~AckGather() {
  SharedDtor();
}

void AckGather::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGather_descriptor_;
}

const AckGather& AckGather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

AckGather* AckGather::default_instance_ = NULL;

AckGather* AckGather::New() const {
  return new AckGather;
}

void AckGather::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    objkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objkey;
        break;
      }

      // optional int32 objkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objkey_)));
          set_has_objkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 objkey = 2;
  if (has_objkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 objkey = 2;
  if (has_objkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGather::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 objkey = 2;
    if (has_objkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGather::MergeFrom(const AckGather& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_objkey()) {
      set_objkey(from.objkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGather::CopyFrom(const AckGather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGather::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGather::Swap(AckGather* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(objkey_, other->objkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGather_descriptor_;
  metadata.reflection = AckGather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatherResult::kPlayerkeyFieldNumber;
const int GatherResult::kObjkeyFieldNumber;
#endif  // !_MSC_VER

GatherResult::GatherResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatherResult::InitAsDefaultInstance() {
}

GatherResult::GatherResult(const GatherResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatherResult::SharedCtor() {
  _cached_size_ = 0;
  playerkey_ = 0;
  objkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatherResult::~GatherResult() {
  SharedDtor();
}

void GatherResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatherResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatherResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatherResult_descriptor_;
}

const GatherResult& GatherResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

GatherResult* GatherResult::default_instance_ = NULL;

GatherResult* GatherResult::New() const {
  return new GatherResult;
}

void GatherResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerkey_ = 0;
    objkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatherResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerkey_)));
          set_has_playerkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objkey;
        break;
      }

      // optional int32 objkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objkey_)));
          set_has_objkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatherResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerkey = 1;
  if (has_playerkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerkey(), output);
  }

  // optional int32 objkey = 2;
  if (has_objkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatherResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerkey = 1;
  if (has_playerkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerkey(), target);
  }

  // optional int32 objkey = 2;
  if (has_objkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatherResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerkey = 1;
    if (has_playerkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerkey());
    }

    // optional int32 objkey = 2;
    if (has_objkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatherResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatherResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatherResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatherResult::MergeFrom(const GatherResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerkey()) {
      set_playerkey(from.playerkey());
    }
    if (from.has_objkey()) {
      set_objkey(from.objkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatherResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherResult::CopyFrom(const GatherResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GatherResult::Swap(GatherResult* other) {
  if (other != this) {
    std::swap(playerkey_, other->playerkey_);
    std::swap(objkey_, other->objkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatherResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatherResult_descriptor_;
  metadata.reflection = GatherResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatherFail::kObjkeyFieldNumber;
const int GatherFail::kCodeFieldNumber;
#endif  // !_MSC_VER

GatherFail::GatherFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatherFail::InitAsDefaultInstance() {
}

GatherFail::GatherFail(const GatherFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatherFail::SharedCtor() {
  _cached_size_ = 0;
  objkey_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatherFail::~GatherFail() {
  SharedDtor();
}

void GatherFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatherFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatherFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatherFail_descriptor_;
}

const GatherFail& GatherFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

GatherFail* GatherFail::default_instance_ = NULL;

GatherFail* GatherFail::New() const {
  return new GatherFail;
}

void GatherFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    objkey_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatherFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 objkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objkey_)));
          set_has_objkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatherFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 objkey = 1;
  if (has_objkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->objkey(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatherFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 objkey = 1;
  if (has_objkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->objkey(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatherFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 objkey = 1;
    if (has_objkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objkey());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatherFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatherFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatherFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatherFail::MergeFrom(const GatherFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objkey()) {
      set_objkey(from.objkey());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatherFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherFail::CopyFrom(const GatherFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GatherFail::Swap(GatherFail* other) {
  if (other != this) {
    std::swap(objkey_, other->objkey_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatherFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatherFail_descriptor_;
  metadata.reflection = GatherFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLeaveObject::kCodeFieldNumber;
#endif  // !_MSC_VER

AckLeaveObject::AckLeaveObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLeaveObject::InitAsDefaultInstance() {
}

AckLeaveObject::AckLeaveObject(const AckLeaveObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLeaveObject::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLeaveObject::~AckLeaveObject() {
  SharedDtor();
}

void AckLeaveObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLeaveObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLeaveObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLeaveObject_descriptor_;
}

const AckLeaveObject& AckLeaveObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

AckLeaveObject* AckLeaveObject::default_instance_ = NULL;

AckLeaveObject* AckLeaveObject::New() const {
  return new AckLeaveObject;
}

void AckLeaveObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLeaveObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLeaveObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLeaveObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLeaveObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLeaveObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLeaveObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLeaveObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLeaveObject::MergeFrom(const AckLeaveObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLeaveObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveObject::CopyFrom(const AckLeaveObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLeaveObject::Swap(AckLeaveObject* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLeaveObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLeaveObject_descriptor_;
  metadata.reflection = AckLeaveObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeaveObject::kKeyFieldNumber;
#endif  // !_MSC_VER

PlayerLeaveObject::PlayerLeaveObject()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeaveObject::InitAsDefaultInstance() {
}

PlayerLeaveObject::PlayerLeaveObject(const PlayerLeaveObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeaveObject::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeaveObject::~PlayerLeaveObject() {
  SharedDtor();
}

void PlayerLeaveObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeaveObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeaveObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeaveObject_descriptor_;
}

const PlayerLeaveObject& PlayerLeaveObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

PlayerLeaveObject* PlayerLeaveObject::default_instance_ = NULL;

PlayerLeaveObject* PlayerLeaveObject::New() const {
  return new PlayerLeaveObject;
}

void PlayerLeaveObject::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLeaveObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLeaveObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeaveObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeaveObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeaveObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeaveObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeaveObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLeaveObject::MergeFrom(const PlayerLeaveObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLeaveObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeaveObject::CopyFrom(const PlayerLeaveObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeaveObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerLeaveObject::Swap(PlayerLeaveObject* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLeaveObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeaveObject_descriptor_;
  metadata.reflection = PlayerLeaveObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncomeChange::kExpFieldNumber;
const int IncomeChange::kForceFieldNumber;
#endif  // !_MSC_VER

IncomeChange::IncomeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IncomeChange::InitAsDefaultInstance() {
}

IncomeChange::IncomeChange(const IncomeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IncomeChange::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  force_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncomeChange::~IncomeChange() {
  SharedDtor();
}

void IncomeChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncomeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncomeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncomeChange_descriptor_;
}

const IncomeChange& IncomeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  return *default_instance_;
}

IncomeChange* IncomeChange::default_instance_ = NULL;

IncomeChange* IncomeChange::New() const {
  return new IncomeChange;
}

void IncomeChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    force_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncomeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_force;
        break;
      }

      // optional int32 force = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IncomeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 force = 2;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->force(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IncomeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 force = 2;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->force(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IncomeChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 force = 2;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncomeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncomeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncomeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncomeChange::MergeFrom(const IncomeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncomeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncomeChange::CopyFrom(const IncomeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomeChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncomeChange::Swap(IncomeChange* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(force_, other->force_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncomeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncomeChange_descriptor_;
  metadata.reflection = IncomeChange_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SeabeachProto

// @@protoc_insertion_point(global_scope)
