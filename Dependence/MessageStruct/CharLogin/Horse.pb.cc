// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Horse.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/Horse.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HorseInfo {

namespace {

const ::google::protobuf::Descriptor* ControlHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMControlHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMControlHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseAdvance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseAdvance_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseAddExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseAddExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseCritStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseCritStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddExpReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddExpReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMAddHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMAddHorse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGTGetHorse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTGetHorse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fHorse_2eproto() {
  protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/Horse.proto");
  GOOGLE_CHECK(file != NULL);
  ControlHorse_descriptor_ = file->message_type(0);
  static const int ControlHorse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlHorse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlHorse, type_),
  };
  ControlHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlHorse_descriptor_,
      ControlHorse::default_instance_,
      ControlHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlHorse));
  ToGMControlHorse_descriptor_ = file->message_type(1);
  static const int ToGMControlHorse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMControlHorse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMControlHorse, horse_),
  };
  ToGMControlHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMControlHorse_descriptor_,
      ToGMControlHorse::default_instance_,
      ToGMControlHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMControlHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMControlHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMControlHorse));
  HorseAdvance_descriptor_ = file->message_type(2);
  static const int HorseAdvance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAdvance, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAdvance, isautobuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAdvance, id_),
  };
  HorseAdvance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseAdvance_descriptor_,
      HorseAdvance::default_instance_,
      HorseAdvance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAdvance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAdvance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseAdvance));
  HorseAddExp_descriptor_ = file->message_type(3);
  static const int HorseAddExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAddExp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAddExp, addnum_),
  };
  HorseAddExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseAddExp_descriptor_,
      HorseAddExp::default_instance_,
      HorseAddExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAddExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseAddExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseAddExp));
  HorseCritStatistics_descriptor_ = file->message_type(4);
  static const int HorseCritStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseCritStatistics, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseCritStatistics, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseCritStatistics, exp_),
  };
  HorseCritStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseCritStatistics_descriptor_,
      HorseCritStatistics::default_instance_,
      HorseCritStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseCritStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseCritStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseCritStatistics));
  HorseItemList_descriptor_ = file->message_type(5);
  static const int HorseItemList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseItemList, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseItemList, counts_),
  };
  HorseItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseItemList_descriptor_,
      HorseItemList::default_instance_,
      HorseItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseItemList));
  AddExpReturn_descriptor_ = file->message_type(6);
  static const int AddExpReturn_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, iscrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, statisticslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, allexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, stoperror_),
  };
  AddExpReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddExpReturn_descriptor_,
      AddExpReturn::default_instance_,
      AddExpReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddExpReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddExpReturn));
  ToGMAddHorse_descriptor_ = file->message_type(7);
  static const int ToGMAddHorse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMAddHorse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMAddHorse, horse_),
  };
  ToGMAddHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMAddHorse_descriptor_,
      ToGMAddHorse::default_instance_,
      ToGMAddHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMAddHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMAddHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMAddHorse));
  ToGTGetHorse_descriptor_ = file->message_type(8);
  static const int ToGTGetHorse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTGetHorse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTGetHorse, horse_),
  };
  ToGTGetHorse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTGetHorse_descriptor_,
      ToGTGetHorse::default_instance_,
      ToGTGetHorse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTGetHorse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTGetHorse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTGetHorse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fHorse_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlHorse_descriptor_, &ControlHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMControlHorse_descriptor_, &ToGMControlHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseAdvance_descriptor_, &HorseAdvance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseAddExp_descriptor_, &HorseAddExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseCritStatistics_descriptor_, &HorseCritStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseItemList_descriptor_, &HorseItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddExpReturn_descriptor_, &AddExpReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMAddHorse_descriptor_, &ToGMAddHorse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTGetHorse_descriptor_, &ToGTGetHorse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fHorse_2eproto() {
  delete ControlHorse::default_instance_;
  delete ControlHorse_reflection_;
  delete ToGMControlHorse::default_instance_;
  delete ToGMControlHorse_reflection_;
  delete HorseAdvance::default_instance_;
  delete HorseAdvance_reflection_;
  delete HorseAddExp::default_instance_;
  delete HorseAddExp_reflection_;
  delete HorseCritStatistics::default_instance_;
  delete HorseCritStatistics_reflection_;
  delete HorseItemList::default_instance_;
  delete HorseItemList_reflection_;
  delete AddExpReturn::default_instance_;
  delete AddExpReturn_reflection_;
  delete ToGMAddHorse::default_instance_;
  delete ToGMAddHorse_reflection_;
  delete ToGTGetHorse::default_instance_;
  delete ToGTGetHorse_reflection_;
}

void protobuf_AddDesc_CharLogin_2fHorse_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PlayerInfo::protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CharLogin/Horse.proto\022\tHorseInfo\032\032Char"
    "Login/PlayerInfo.proto\"(\n\014ControlHorse\022\n"
    "\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\"J\n\020ToGMControlH"
    "orse\022\016\n\006charid\030\001 \002(\003\022&\n\005horse\030\002 \001(\0132\027.Ho"
    "rseInfo.ControlHorse\";\n\014HorseAdvance\022\014\n\004"
    "type\030\001 \001(\005\022\021\n\tisAutoBuy\030\002 \001(\010\022\n\n\002id\030\003 \001("
    "\005\"+\n\013HorseAddExp\022\014\n\004type\030\001 \002(\005\022\016\n\006addNum"
    "\030\002 \001(\005\"@\n\023HorseCritStatistics\022\014\n\004type\030\001 "
    "\001(\005\022\016\n\006counts\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\"/\n\rHors"
    "eItemList\022\016\n\006itemID\030\001 \001(\005\022\016\n\006counts\030\002 \001("
    "\005\"\371\001\n\014AddExpReturn\022\013\n\003ret\030\001 \002(\005\022\017\n\007iscra"
    "ck\030\002 \001(\010\022\013\n\003exp\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\022\014\n\004typ"
    "e\030\005 \001(\005\0226\n\016statisticsList\030\006 \003(\0132\036.HorseI"
    "nfo.HorseCritStatistics\022\016\n\006allExp\030\007 \001(\005\022"
    "*\n\010itemList\030\010 \003(\0132\030.HorseInfo.HorseItemL"
    "ist\022\016\n\006golden\030\t \001(\005\022\r\n\005money\030\n \001(\005\022\021\n\tst"
    "opError\030\014 \001(\005\"E\n\014ToGMAddHorse\022\016\n\006charid\030"
    "\001 \002(\003\022%\n\005horse\030\002 \001(\0132\026.HorseInfo.HorseAd"
    "dExp\"D\n\014ToGTGetHorse\022\016\n\006charid\030\001 \002(\003\022$\n\005"
    "horse\030\002 \001(\0132\025.PlayerInfo.HorseInfo", 794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/Horse.proto", &protobuf_RegisterTypes);
  ControlHorse::default_instance_ = new ControlHorse();
  ToGMControlHorse::default_instance_ = new ToGMControlHorse();
  HorseAdvance::default_instance_ = new HorseAdvance();
  HorseAddExp::default_instance_ = new HorseAddExp();
  HorseCritStatistics::default_instance_ = new HorseCritStatistics();
  HorseItemList::default_instance_ = new HorseItemList();
  AddExpReturn::default_instance_ = new AddExpReturn();
  ToGMAddHorse::default_instance_ = new ToGMAddHorse();
  ToGTGetHorse::default_instance_ = new ToGTGetHorse();
  ControlHorse::default_instance_->InitAsDefaultInstance();
  ToGMControlHorse::default_instance_->InitAsDefaultInstance();
  HorseAdvance::default_instance_->InitAsDefaultInstance();
  HorseAddExp::default_instance_->InitAsDefaultInstance();
  HorseCritStatistics::default_instance_->InitAsDefaultInstance();
  HorseItemList::default_instance_->InitAsDefaultInstance();
  AddExpReturn::default_instance_->InitAsDefaultInstance();
  ToGMAddHorse::default_instance_->InitAsDefaultInstance();
  ToGTGetHorse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fHorse_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fHorse_2eproto {
  StaticDescriptorInitializer_CharLogin_2fHorse_2eproto() {
    protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fHorse_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ControlHorse::kIdFieldNumber;
const int ControlHorse::kTypeFieldNumber;
#endif  // !_MSC_VER

ControlHorse::ControlHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlHorse::InitAsDefaultInstance() {
}

ControlHorse::ControlHorse(const ControlHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlHorse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlHorse::~ControlHorse() {
  SharedDtor();
}

void ControlHorse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlHorse_descriptor_;
}

const ControlHorse& ControlHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

ControlHorse* ControlHorse::default_instance_ = NULL;

ControlHorse* ControlHorse::New() const {
  return new ControlHorse;
}

void ControlHorse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlHorse::MergeFrom(const ControlHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlHorse::CopyFrom(const ControlHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlHorse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ControlHorse::Swap(ControlHorse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlHorse_descriptor_;
  metadata.reflection = ControlHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMControlHorse::kCharidFieldNumber;
const int ToGMControlHorse::kHorseFieldNumber;
#endif  // !_MSC_VER

ToGMControlHorse::ToGMControlHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMControlHorse::InitAsDefaultInstance() {
  horse_ = const_cast< ::HorseInfo::ControlHorse*>(&::HorseInfo::ControlHorse::default_instance());
}

ToGMControlHorse::ToGMControlHorse(const ToGMControlHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMControlHorse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  horse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMControlHorse::~ToGMControlHorse() {
  SharedDtor();
}

void ToGMControlHorse::SharedDtor() {
  if (this != default_instance_) {
    delete horse_;
  }
}

void ToGMControlHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMControlHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMControlHorse_descriptor_;
}

const ToGMControlHorse& ToGMControlHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

ToGMControlHorse* ToGMControlHorse::default_instance_ = NULL;

ToGMControlHorse* ToGMControlHorse::New() const {
  return new ToGMControlHorse;
}

void ToGMControlHorse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_horse()) {
      if (horse_ != NULL) horse_->::HorseInfo::ControlHorse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMControlHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_horse;
        break;
      }

      // optional .HorseInfo.ControlHorse horse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMControlHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .HorseInfo.ControlHorse horse = 2;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->horse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMControlHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .HorseInfo.ControlHorse horse = 2;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMControlHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .HorseInfo.ControlHorse horse = 2;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMControlHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMControlHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMControlHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMControlHorse::MergeFrom(const ToGMControlHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_horse()) {
      mutable_horse()->::HorseInfo::ControlHorse::MergeFrom(from.horse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMControlHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMControlHorse::CopyFrom(const ToGMControlHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMControlHorse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_horse()) {
    if (!this->horse().IsInitialized()) return false;
  }
  return true;
}

void ToGMControlHorse::Swap(ToGMControlHorse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(horse_, other->horse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMControlHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMControlHorse_descriptor_;
  metadata.reflection = ToGMControlHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseAdvance::kTypeFieldNumber;
const int HorseAdvance::kIsAutoBuyFieldNumber;
const int HorseAdvance::kIdFieldNumber;
#endif  // !_MSC_VER

HorseAdvance::HorseAdvance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HorseAdvance::InitAsDefaultInstance() {
}

HorseAdvance::HorseAdvance(const HorseAdvance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HorseAdvance::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isautobuy_ = false;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseAdvance::~HorseAdvance() {
  SharedDtor();
}

void HorseAdvance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseAdvance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseAdvance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseAdvance_descriptor_;
}

const HorseAdvance& HorseAdvance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

HorseAdvance* HorseAdvance::default_instance_ = NULL;

HorseAdvance* HorseAdvance::New() const {
  return new HorseAdvance;
}

void HorseAdvance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isautobuy_ = false;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseAdvance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAutoBuy;
        break;
      }

      // optional bool isAutoBuy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautobuy_)));
          set_has_isautobuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HorseAdvance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool isAutoBuy = 2;
  if (has_isautobuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isautobuy(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HorseAdvance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool isAutoBuy = 2;
  if (has_isautobuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isautobuy(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HorseAdvance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool isAutoBuy = 2;
    if (has_isautobuy()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseAdvance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseAdvance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseAdvance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseAdvance::MergeFrom(const HorseAdvance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isautobuy()) {
      set_isautobuy(from.isautobuy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseAdvance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseAdvance::CopyFrom(const HorseAdvance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseAdvance::IsInitialized() const {

  return true;
}

void HorseAdvance::Swap(HorseAdvance* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isautobuy_, other->isautobuy_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseAdvance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseAdvance_descriptor_;
  metadata.reflection = HorseAdvance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseAddExp::kTypeFieldNumber;
const int HorseAddExp::kAddNumFieldNumber;
#endif  // !_MSC_VER

HorseAddExp::HorseAddExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HorseAddExp::InitAsDefaultInstance() {
}

HorseAddExp::HorseAddExp(const HorseAddExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HorseAddExp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  addnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseAddExp::~HorseAddExp() {
  SharedDtor();
}

void HorseAddExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseAddExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseAddExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseAddExp_descriptor_;
}

const HorseAddExp& HorseAddExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

HorseAddExp* HorseAddExp::default_instance_ = NULL;

HorseAddExp* HorseAddExp::New() const {
  return new HorseAddExp;
}

void HorseAddExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    addnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseAddExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addNum;
        break;
      }

      // optional int32 addNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HorseAddExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 addNum = 2;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HorseAddExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 addNum = 2;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HorseAddExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 addNum = 2;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseAddExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseAddExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseAddExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseAddExp::MergeFrom(const HorseAddExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseAddExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseAddExp::CopyFrom(const HorseAddExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseAddExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HorseAddExp::Swap(HorseAddExp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(addnum_, other->addnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseAddExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseAddExp_descriptor_;
  metadata.reflection = HorseAddExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseCritStatistics::kTypeFieldNumber;
const int HorseCritStatistics::kCountsFieldNumber;
const int HorseCritStatistics::kExpFieldNumber;
#endif  // !_MSC_VER

HorseCritStatistics::HorseCritStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HorseCritStatistics::InitAsDefaultInstance() {
}

HorseCritStatistics::HorseCritStatistics(const HorseCritStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HorseCritStatistics::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  counts_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseCritStatistics::~HorseCritStatistics() {
  SharedDtor();
}

void HorseCritStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseCritStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseCritStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseCritStatistics_descriptor_;
}

const HorseCritStatistics& HorseCritStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

HorseCritStatistics* HorseCritStatistics::default_instance_ = NULL;

HorseCritStatistics* HorseCritStatistics::New() const {
  return new HorseCritStatistics;
}

void HorseCritStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    counts_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseCritStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HorseCritStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HorseCritStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HorseCritStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseCritStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseCritStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseCritStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseCritStatistics::MergeFrom(const HorseCritStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseCritStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseCritStatistics::CopyFrom(const HorseCritStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseCritStatistics::IsInitialized() const {

  return true;
}

void HorseCritStatistics::Swap(HorseCritStatistics* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(counts_, other->counts_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseCritStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseCritStatistics_descriptor_;
  metadata.reflection = HorseCritStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseItemList::kItemIDFieldNumber;
const int HorseItemList::kCountsFieldNumber;
#endif  // !_MSC_VER

HorseItemList::HorseItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HorseItemList::InitAsDefaultInstance() {
}

HorseItemList::HorseItemList(const HorseItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HorseItemList::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  counts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseItemList::~HorseItemList() {
  SharedDtor();
}

void HorseItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseItemList_descriptor_;
}

const HorseItemList& HorseItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

HorseItemList* HorseItemList::default_instance_ = NULL;

HorseItemList* HorseItemList::New() const {
  return new HorseItemList;
}

void HorseItemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    counts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HorseItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HorseItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HorseItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseItemList::MergeFrom(const HorseItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseItemList::CopyFrom(const HorseItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseItemList::IsInitialized() const {

  return true;
}

void HorseItemList::Swap(HorseItemList* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseItemList_descriptor_;
  metadata.reflection = HorseItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddExpReturn::kRetFieldNumber;
const int AddExpReturn::kIscrackFieldNumber;
const int AddExpReturn::kExpFieldNumber;
const int AddExpReturn::kIdFieldNumber;
const int AddExpReturn::kTypeFieldNumber;
const int AddExpReturn::kStatisticsListFieldNumber;
const int AddExpReturn::kAllExpFieldNumber;
const int AddExpReturn::kItemListFieldNumber;
const int AddExpReturn::kGoldenFieldNumber;
const int AddExpReturn::kMoneyFieldNumber;
const int AddExpReturn::kStopErrorFieldNumber;
#endif  // !_MSC_VER

AddExpReturn::AddExpReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddExpReturn::InitAsDefaultInstance() {
}

AddExpReturn::AddExpReturn(const AddExpReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddExpReturn::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  iscrack_ = false;
  exp_ = 0;
  id_ = 0;
  type_ = 0;
  allexp_ = 0;
  golden_ = 0;
  money_ = 0;
  stoperror_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddExpReturn::~AddExpReturn() {
  SharedDtor();
}

void AddExpReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddExpReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddExpReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddExpReturn_descriptor_;
}

const AddExpReturn& AddExpReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

AddExpReturn* AddExpReturn::default_instance_ = NULL;

AddExpReturn* AddExpReturn::New() const {
  return new AddExpReturn;
}

void AddExpReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    iscrack_ = false;
    exp_ = 0;
    id_ = 0;
    type_ = 0;
    allexp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    golden_ = 0;
    money_ = 0;
    stoperror_ = 0;
  }
  statisticslist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddExpReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iscrack;
        break;
      }

      // optional bool iscrack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscrack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrack_)));
          set_has_iscrack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_statisticsList;
        break;
      }

      // repeated .HorseInfo.HorseCritStatistics statisticsList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statisticsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statisticslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_statisticsList;
        if (input->ExpectTag(56)) goto parse_allExp;
        break;
      }

      // optional int32 allExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allexp_)));
          set_has_allexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        break;
      }

      // repeated .HorseInfo.HorseItemList itemList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        if (input->ExpectTag(72)) goto parse_golden;
        break;
      }

      // optional int32 golden = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_money;
        break;
      }

      // optional int32 money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stopError;
        break;
      }

      // optional int32 stopError = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoperror_)));
          set_has_stoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddExpReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bool iscrack = 2;
  if (has_iscrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iscrack(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // repeated .HorseInfo.HorseCritStatistics statisticsList = 6;
  for (int i = 0; i < this->statisticslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->statisticslist(i), output);
  }

  // optional int32 allExp = 7;
  if (has_allexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->allexp(), output);
  }

  // repeated .HorseInfo.HorseItemList itemList = 8;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemlist(i), output);
  }

  // optional int32 golden = 9;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->golden(), output);
  }

  // optional int32 money = 10;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->money(), output);
  }

  // optional int32 stopError = 12;
  if (has_stoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stoperror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddExpReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bool iscrack = 2;
  if (has_iscrack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iscrack(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // repeated .HorseInfo.HorseCritStatistics statisticsList = 6;
  for (int i = 0; i < this->statisticslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->statisticslist(i), target);
  }

  // optional int32 allExp = 7;
  if (has_allexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->allexp(), target);
  }

  // repeated .HorseInfo.HorseItemList itemList = 8;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemlist(i), target);
  }

  // optional int32 golden = 9;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->golden(), target);
  }

  // optional int32 money = 10;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->money(), target);
  }

  // optional int32 stopError = 12;
  if (has_stoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stoperror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddExpReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bool iscrack = 2;
    if (has_iscrack()) {
      total_size += 1 + 1;
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 allExp = 7;
    if (has_allexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 golden = 9;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 money = 10;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 stopError = 12;
    if (has_stoperror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoperror());
    }

  }
  // repeated .HorseInfo.HorseCritStatistics statisticsList = 6;
  total_size += 1 * this->statisticslist_size();
  for (int i = 0; i < this->statisticslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statisticslist(i));
  }

  // repeated .HorseInfo.HorseItemList itemList = 8;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddExpReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddExpReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddExpReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddExpReturn::MergeFrom(const AddExpReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  statisticslist_.MergeFrom(from.statisticslist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_iscrack()) {
      set_iscrack(from.iscrack());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_allexp()) {
      set_allexp(from.allexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_stoperror()) {
      set_stoperror(from.stoperror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddExpReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddExpReturn::CopyFrom(const AddExpReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddExpReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddExpReturn::Swap(AddExpReturn* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(iscrack_, other->iscrack_);
    std::swap(exp_, other->exp_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    statisticslist_.Swap(&other->statisticslist_);
    std::swap(allexp_, other->allexp_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(golden_, other->golden_);
    std::swap(money_, other->money_);
    std::swap(stoperror_, other->stoperror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddExpReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddExpReturn_descriptor_;
  metadata.reflection = AddExpReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMAddHorse::kCharidFieldNumber;
const int ToGMAddHorse::kHorseFieldNumber;
#endif  // !_MSC_VER

ToGMAddHorse::ToGMAddHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMAddHorse::InitAsDefaultInstance() {
  horse_ = const_cast< ::HorseInfo::HorseAddExp*>(&::HorseInfo::HorseAddExp::default_instance());
}

ToGMAddHorse::ToGMAddHorse(const ToGMAddHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMAddHorse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  horse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMAddHorse::~ToGMAddHorse() {
  SharedDtor();
}

void ToGMAddHorse::SharedDtor() {
  if (this != default_instance_) {
    delete horse_;
  }
}

void ToGMAddHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMAddHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMAddHorse_descriptor_;
}

const ToGMAddHorse& ToGMAddHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

ToGMAddHorse* ToGMAddHorse::default_instance_ = NULL;

ToGMAddHorse* ToGMAddHorse::New() const {
  return new ToGMAddHorse;
}

void ToGMAddHorse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_horse()) {
      if (horse_ != NULL) horse_->::HorseInfo::HorseAddExp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMAddHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_horse;
        break;
      }

      // optional .HorseInfo.HorseAddExp horse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMAddHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .HorseInfo.HorseAddExp horse = 2;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->horse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMAddHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .HorseInfo.HorseAddExp horse = 2;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMAddHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .HorseInfo.HorseAddExp horse = 2;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMAddHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMAddHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMAddHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMAddHorse::MergeFrom(const ToGMAddHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_horse()) {
      mutable_horse()->::HorseInfo::HorseAddExp::MergeFrom(from.horse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMAddHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMAddHorse::CopyFrom(const ToGMAddHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMAddHorse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_horse()) {
    if (!this->horse().IsInitialized()) return false;
  }
  return true;
}

void ToGMAddHorse::Swap(ToGMAddHorse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(horse_, other->horse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMAddHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMAddHorse_descriptor_;
  metadata.reflection = ToGMAddHorse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGTGetHorse::kCharidFieldNumber;
const int ToGTGetHorse::kHorseFieldNumber;
#endif  // !_MSC_VER

ToGTGetHorse::ToGTGetHorse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTGetHorse::InitAsDefaultInstance() {
  horse_ = const_cast< ::PlayerInfo::HorseInfo*>(&::PlayerInfo::HorseInfo::default_instance());
}

ToGTGetHorse::ToGTGetHorse(const ToGTGetHorse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTGetHorse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  horse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTGetHorse::~ToGTGetHorse() {
  SharedDtor();
}

void ToGTGetHorse::SharedDtor() {
  if (this != default_instance_) {
    delete horse_;
  }
}

void ToGTGetHorse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTGetHorse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTGetHorse_descriptor_;
}

const ToGTGetHorse& ToGTGetHorse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fHorse_2eproto();
  return *default_instance_;
}

ToGTGetHorse* ToGTGetHorse::default_instance_ = NULL;

ToGTGetHorse* ToGTGetHorse::New() const {
  return new ToGTGetHorse;
}

void ToGTGetHorse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_horse()) {
      if (horse_ != NULL) horse_->::PlayerInfo::HorseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTGetHorse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_horse;
        break;
      }

      // optional .PlayerInfo.HorseInfo horse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGTGetHorse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .PlayerInfo.HorseInfo horse = 2;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->horse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTGetHorse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .PlayerInfo.HorseInfo horse = 2;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTGetHorse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .PlayerInfo.HorseInfo horse = 2;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTGetHorse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTGetHorse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTGetHorse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTGetHorse::MergeFrom(const ToGTGetHorse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_horse()) {
      mutable_horse()->::PlayerInfo::HorseInfo::MergeFrom(from.horse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTGetHorse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTGetHorse::CopyFrom(const ToGTGetHorse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTGetHorse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_horse()) {
    if (!this->horse().IsInitialized()) return false;
  }
  return true;
}

void ToGTGetHorse::Swap(ToGTGetHorse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(horse_, other->horse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTGetHorse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTGetHorse_descriptor_;
  metadata.reflection = ToGTGetHorse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HorseInfo

// @@protoc_insertion_point(global_scope)
