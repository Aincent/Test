// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AchievementProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AchievementProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AchievementProto {

namespace {

const ::google::protobuf::Descriptor* ReqAchievementAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAchievementAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAchievementAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAchievementAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLookForTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLookForTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetLookForTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLookForTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLookForPrestigeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLookForPrestigeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetLookForPrestigeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLookForPrestigeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTitleActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTitleActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetTitleActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetTitleActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimPrestigeComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimPrestigeComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAchShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAchShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAchShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAchShopItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AchievementProto_2eproto() {
  protobuf_AddDesc_AchievementProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AchievementProto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqAchievementAll_descriptor_ = file->message_type(0);
  static const int ReqAchievementAll_offsets_[1] = {
  };
  ReqAchievementAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqAchievementAll_descriptor_,
      ReqAchievementAll::default_instance_,
      ReqAchievementAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAchievementAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAchievementAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqAchievementAll));
  RetAchievementAll_descriptor_ = file->message_type(1);
  static const int RetAchievementAll_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchievementAll, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchievementAll, prestigeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchievementAll, prestigeprogress_),
  };
  RetAchievementAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAchievementAll_descriptor_,
      RetAchievementAll::default_instance_,
      RetAchievementAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchievementAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchievementAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAchievementAll));
  ReqLookForTitle_descriptor_ = file->message_type(2);
  static const int ReqLookForTitle_offsets_[1] = {
  };
  ReqLookForTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLookForTitle_descriptor_,
      ReqLookForTitle::default_instance_,
      ReqLookForTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLookForTitle));
  RetLookForTitle_descriptor_ = file->message_type(3);
  static const int RetLookForTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForTitle, titleinfo_),
  };
  RetLookForTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLookForTitle_descriptor_,
      RetLookForTitle::default_instance_,
      RetLookForTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLookForTitle));
  ReqLookForPrestigeType_descriptor_ = file->message_type(4);
  static const int ReqLookForPrestigeType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForPrestigeType, type_),
  };
  ReqLookForPrestigeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLookForPrestigeType_descriptor_,
      ReqLookForPrestigeType::default_instance_,
      ReqLookForPrestigeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForPrestigeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForPrestigeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLookForPrestigeType));
  RetLookForPrestigeType_descriptor_ = file->message_type(5);
  static const int RetLookForPrestigeType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForPrestigeType, prestigeinfo_),
  };
  RetLookForPrestigeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLookForPrestigeType_descriptor_,
      RetLookForPrestigeType::default_instance_,
      RetLookForPrestigeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForPrestigeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForPrestigeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLookForPrestigeType));
  ReqTitleActive_descriptor_ = file->message_type(6);
  static const int ReqTitleActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTitleActive, titleid_),
  };
  ReqTitleActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqTitleActive_descriptor_,
      ReqTitleActive::default_instance_,
      ReqTitleActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTitleActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTitleActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqTitleActive));
  RetTitleActive_descriptor_ = file->message_type(7);
  static const int RetTitleActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetTitleActive, dwerror_),
  };
  RetTitleActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetTitleActive_descriptor_,
      RetTitleActive::default_instance_,
      RetTitleActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetTitleActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetTitleActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetTitleActive));
  SimPrestigeComplete_descriptor_ = file->message_type(8);
  static const int SimPrestigeComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPrestigeComplete, completeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPrestigeComplete, completetype_),
  };
  SimPrestigeComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimPrestigeComplete_descriptor_,
      SimPrestigeComplete::default_instance_,
      SimPrestigeComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPrestigeComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPrestigeComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimPrestigeComplete));
  RetAchShopInfo_descriptor_ = file->message_type(9);
  static const int RetAchShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopInfo, item_),
  };
  RetAchShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAchShopInfo_descriptor_,
      RetAchShopInfo::default_instance_,
      RetAchShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAchShopInfo));
  RetAchShopItem_descriptor_ = file->message_type(10);
  static const int RetAchShopItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopItem, goodsid_),
  };
  RetAchShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAchShopItem_descriptor_,
      RetAchShopItem::default_instance_,
      RetAchShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAchShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAchShopItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AchievementProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqAchievementAll_descriptor_, &ReqAchievementAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAchievementAll_descriptor_, &RetAchievementAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLookForTitle_descriptor_, &ReqLookForTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLookForTitle_descriptor_, &RetLookForTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLookForPrestigeType_descriptor_, &ReqLookForPrestigeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLookForPrestigeType_descriptor_, &RetLookForPrestigeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqTitleActive_descriptor_, &ReqTitleActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetTitleActive_descriptor_, &RetTitleActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimPrestigeComplete_descriptor_, &SimPrestigeComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAchShopInfo_descriptor_, &RetAchShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAchShopItem_descriptor_, &RetAchShopItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AchievementProto_2eproto() {
  delete ReqAchievementAll::default_instance_;
  delete ReqAchievementAll_reflection_;
  delete RetAchievementAll::default_instance_;
  delete RetAchievementAll_reflection_;
  delete ReqLookForTitle::default_instance_;
  delete ReqLookForTitle_reflection_;
  delete RetLookForTitle::default_instance_;
  delete RetLookForTitle_reflection_;
  delete ReqLookForPrestigeType::default_instance_;
  delete ReqLookForPrestigeType_reflection_;
  delete RetLookForPrestigeType::default_instance_;
  delete RetLookForPrestigeType_reflection_;
  delete ReqTitleActive::default_instance_;
  delete ReqTitleActive_reflection_;
  delete RetTitleActive::default_instance_;
  delete RetTitleActive_reflection_;
  delete SimPrestigeComplete::default_instance_;
  delete SimPrestigeComplete_reflection_;
  delete RetAchShopInfo::default_instance_;
  delete RetAchShopInfo_reflection_;
  delete RetAchShopItem::default_instance_;
  delete RetAchShopItem_reflection_;
}

void protobuf_AddDesc_AchievementProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ServerReturn::protobuf_AddDesc_ServerReturn3Int_2eproto();
  ::ServerReturn::protobuf_AddDesc_ServerReturnInt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026AchievementProto.proto\022\020AchievementPro"
    "to\032\026ServerReturn3Int.proto\032\025ServerReturn"
    "Int.proto\"\023\n\021ReqAchievementAll\"\217\001\n\021RetAc"
    "hievementAll\022\020\n\010prestige\030\001 \002(\005\0222\n\014presti"
    "geInfo\030\002 \003(\0132\034.ServerReturn.ServerThreeI"
    "nt\0224\n\020prestigeProgress\030\003 \003(\0132\032.ServerRet"
    "urn.ServerRetInt\"\021\n\017ReqLookForTitle\"B\n\017R"
    "etLookForTitle\022/\n\ttitleInfo\030\001 \003(\0132\034.Serv"
    "erReturn.ServerThreeInt\"&\n\026ReqLookForPre"
    "stigeType\022\014\n\004type\030\001 \002(\005\"L\n\026RetLookForPre"
    "stigeType\0222\n\014prestigeInfo\030\001 \003(\0132\034.Server"
    "Return.ServerThreeInt\"!\n\016ReqTitleActive\022"
    "\017\n\007titleID\030\001 \002(\005\"!\n\016RetTitleActive\022\017\n\007dw"
    "Error\030\001 \002(\005\"\?\n\023SimPrestigeComplete\022\022\n\nco"
    "mpleteID\030\001 \002(\005\022\024\n\014completeType\030\002 \002(\005\"N\n\016"
    "RetAchShopInfo\022\014\n\004time\030\001 \002(\003\022.\n\004item\030\002 \003"
    "(\0132 .AchievementProto.RetAchShopItem\"<\n\016"
    "RetAchShopItem\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \002("
    "\005\022\017\n\007goodsid\030\003 \003(\005", 738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AchievementProto.proto", &protobuf_RegisterTypes);
  ReqAchievementAll::default_instance_ = new ReqAchievementAll();
  RetAchievementAll::default_instance_ = new RetAchievementAll();
  ReqLookForTitle::default_instance_ = new ReqLookForTitle();
  RetLookForTitle::default_instance_ = new RetLookForTitle();
  ReqLookForPrestigeType::default_instance_ = new ReqLookForPrestigeType();
  RetLookForPrestigeType::default_instance_ = new RetLookForPrestigeType();
  ReqTitleActive::default_instance_ = new ReqTitleActive();
  RetTitleActive::default_instance_ = new RetTitleActive();
  SimPrestigeComplete::default_instance_ = new SimPrestigeComplete();
  RetAchShopInfo::default_instance_ = new RetAchShopInfo();
  RetAchShopItem::default_instance_ = new RetAchShopItem();
  ReqAchievementAll::default_instance_->InitAsDefaultInstance();
  RetAchievementAll::default_instance_->InitAsDefaultInstance();
  ReqLookForTitle::default_instance_->InitAsDefaultInstance();
  RetLookForTitle::default_instance_->InitAsDefaultInstance();
  ReqLookForPrestigeType::default_instance_->InitAsDefaultInstance();
  RetLookForPrestigeType::default_instance_->InitAsDefaultInstance();
  ReqTitleActive::default_instance_->InitAsDefaultInstance();
  RetTitleActive::default_instance_->InitAsDefaultInstance();
  SimPrestigeComplete::default_instance_->InitAsDefaultInstance();
  RetAchShopInfo::default_instance_->InitAsDefaultInstance();
  RetAchShopItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AchievementProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AchievementProto_2eproto {
  StaticDescriptorInitializer_AchievementProto_2eproto() {
    protobuf_AddDesc_AchievementProto_2eproto();
  }
} static_descriptor_initializer_AchievementProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqAchievementAll::ReqAchievementAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqAchievementAll::InitAsDefaultInstance() {
}

ReqAchievementAll::ReqAchievementAll(const ReqAchievementAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqAchievementAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAchievementAll::~ReqAchievementAll() {
  SharedDtor();
}

void ReqAchievementAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAchievementAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAchievementAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAchievementAll_descriptor_;
}

const ReqAchievementAll& ReqAchievementAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

ReqAchievementAll* ReqAchievementAll::default_instance_ = NULL;

ReqAchievementAll* ReqAchievementAll::New() const {
  return new ReqAchievementAll;
}

void ReqAchievementAll::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqAchievementAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqAchievementAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqAchievementAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqAchievementAll::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAchievementAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqAchievementAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqAchievementAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqAchievementAll::MergeFrom(const ReqAchievementAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqAchievementAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAchievementAll::CopyFrom(const ReqAchievementAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAchievementAll::IsInitialized() const {

  return true;
}

void ReqAchievementAll::Swap(ReqAchievementAll* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqAchievementAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAchievementAll_descriptor_;
  metadata.reflection = ReqAchievementAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAchievementAll::kPrestigeFieldNumber;
const int RetAchievementAll::kPrestigeInfoFieldNumber;
const int RetAchievementAll::kPrestigeProgressFieldNumber;
#endif  // !_MSC_VER

RetAchievementAll::RetAchievementAll()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAchievementAll::InitAsDefaultInstance() {
}

RetAchievementAll::RetAchievementAll(const RetAchievementAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAchievementAll::SharedCtor() {
  _cached_size_ = 0;
  prestige_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAchievementAll::~RetAchievementAll() {
  SharedDtor();
}

void RetAchievementAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAchievementAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAchievementAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAchievementAll_descriptor_;
}

const RetAchievementAll& RetAchievementAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

RetAchievementAll* RetAchievementAll::default_instance_ = NULL;

RetAchievementAll* RetAchievementAll::New() const {
  return new RetAchievementAll;
}

void RetAchievementAll::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prestige_ = 0;
  }
  prestigeinfo_.Clear();
  prestigeprogress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAchievementAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 prestige = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prestigeInfo;
        break;
      }

      // repeated .ServerReturn.ServerThreeInt prestigeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestigeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prestigeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prestigeInfo;
        if (input->ExpectTag(26)) goto parse_prestigeProgress;
        break;
      }

      // repeated .ServerReturn.ServerRetInt prestigeProgress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestigeProgress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prestigeprogress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_prestigeProgress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAchievementAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 prestige = 1;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prestige(), output);
  }

  // repeated .ServerReturn.ServerThreeInt prestigeInfo = 2;
  for (int i = 0; i < this->prestigeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prestigeinfo(i), output);
  }

  // repeated .ServerReturn.ServerRetInt prestigeProgress = 3;
  for (int i = 0; i < this->prestigeprogress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prestigeprogress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAchievementAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 prestige = 1;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prestige(), target);
  }

  // repeated .ServerReturn.ServerThreeInt prestigeInfo = 2;
  for (int i = 0; i < this->prestigeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prestigeinfo(i), target);
  }

  // repeated .ServerReturn.ServerRetInt prestigeProgress = 3;
  for (int i = 0; i < this->prestigeprogress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prestigeprogress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAchievementAll::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 prestige = 1;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

  }
  // repeated .ServerReturn.ServerThreeInt prestigeInfo = 2;
  total_size += 1 * this->prestigeinfo_size();
  for (int i = 0; i < this->prestigeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prestigeinfo(i));
  }

  // repeated .ServerReturn.ServerRetInt prestigeProgress = 3;
  total_size += 1 * this->prestigeprogress_size();
  for (int i = 0; i < this->prestigeprogress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prestigeprogress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAchievementAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAchievementAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAchievementAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAchievementAll::MergeFrom(const RetAchievementAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  prestigeinfo_.MergeFrom(from.prestigeinfo_);
  prestigeprogress_.MergeFrom(from.prestigeprogress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAchievementAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAchievementAll::CopyFrom(const RetAchievementAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAchievementAll::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < prestigeinfo_size(); i++) {
    if (!this->prestigeinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < prestigeprogress_size(); i++) {
    if (!this->prestigeprogress(i).IsInitialized()) return false;
  }
  return true;
}

void RetAchievementAll::Swap(RetAchievementAll* other) {
  if (other != this) {
    std::swap(prestige_, other->prestige_);
    prestigeinfo_.Swap(&other->prestigeinfo_);
    prestigeprogress_.Swap(&other->prestigeprogress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAchievementAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAchievementAll_descriptor_;
  metadata.reflection = RetAchievementAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqLookForTitle::ReqLookForTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLookForTitle::InitAsDefaultInstance() {
}

ReqLookForTitle::ReqLookForTitle(const ReqLookForTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLookForTitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLookForTitle::~ReqLookForTitle() {
  SharedDtor();
}

void ReqLookForTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLookForTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLookForTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLookForTitle_descriptor_;
}

const ReqLookForTitle& ReqLookForTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

ReqLookForTitle* ReqLookForTitle::default_instance_ = NULL;

ReqLookForTitle* ReqLookForTitle::New() const {
  return new ReqLookForTitle;
}

void ReqLookForTitle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLookForTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqLookForTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLookForTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLookForTitle::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLookForTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLookForTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLookForTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLookForTitle::MergeFrom(const ReqLookForTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLookForTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLookForTitle::CopyFrom(const ReqLookForTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLookForTitle::IsInitialized() const {

  return true;
}

void ReqLookForTitle::Swap(ReqLookForTitle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLookForTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLookForTitle_descriptor_;
  metadata.reflection = ReqLookForTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetLookForTitle::kTitleInfoFieldNumber;
#endif  // !_MSC_VER

RetLookForTitle::RetLookForTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLookForTitle::InitAsDefaultInstance() {
}

RetLookForTitle::RetLookForTitle(const RetLookForTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLookForTitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLookForTitle::~RetLookForTitle() {
  SharedDtor();
}

void RetLookForTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetLookForTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLookForTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLookForTitle_descriptor_;
}

const RetLookForTitle& RetLookForTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

RetLookForTitle* RetLookForTitle::default_instance_ = NULL;

RetLookForTitle* RetLookForTitle::New() const {
  return new RetLookForTitle;
}

void RetLookForTitle::Clear() {
  titleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLookForTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerReturn.ServerThreeInt titleInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_titleInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLookForTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerReturn.ServerThreeInt titleInfo = 1;
  for (int i = 0; i < this->titleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLookForTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerReturn.ServerThreeInt titleInfo = 1;
  for (int i = 0; i < this->titleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLookForTitle::ByteSize() const {
  int total_size = 0;

  // repeated .ServerReturn.ServerThreeInt titleInfo = 1;
  total_size += 1 * this->titleinfo_size();
  for (int i = 0; i < this->titleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLookForTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLookForTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLookForTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLookForTitle::MergeFrom(const RetLookForTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleinfo_.MergeFrom(from.titleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLookForTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLookForTitle::CopyFrom(const RetLookForTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLookForTitle::IsInitialized() const {

  for (int i = 0; i < titleinfo_size(); i++) {
    if (!this->titleinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetLookForTitle::Swap(RetLookForTitle* other) {
  if (other != this) {
    titleinfo_.Swap(&other->titleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLookForTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLookForTitle_descriptor_;
  metadata.reflection = RetLookForTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLookForPrestigeType::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqLookForPrestigeType::ReqLookForPrestigeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLookForPrestigeType::InitAsDefaultInstance() {
}

ReqLookForPrestigeType::ReqLookForPrestigeType(const ReqLookForPrestigeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLookForPrestigeType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLookForPrestigeType::~ReqLookForPrestigeType() {
  SharedDtor();
}

void ReqLookForPrestigeType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLookForPrestigeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLookForPrestigeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLookForPrestigeType_descriptor_;
}

const ReqLookForPrestigeType& ReqLookForPrestigeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

ReqLookForPrestigeType* ReqLookForPrestigeType::default_instance_ = NULL;

ReqLookForPrestigeType* ReqLookForPrestigeType::New() const {
  return new ReqLookForPrestigeType;
}

void ReqLookForPrestigeType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLookForPrestigeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLookForPrestigeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLookForPrestigeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLookForPrestigeType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLookForPrestigeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLookForPrestigeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLookForPrestigeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLookForPrestigeType::MergeFrom(const ReqLookForPrestigeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLookForPrestigeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLookForPrestigeType::CopyFrom(const ReqLookForPrestigeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLookForPrestigeType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLookForPrestigeType::Swap(ReqLookForPrestigeType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLookForPrestigeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLookForPrestigeType_descriptor_;
  metadata.reflection = ReqLookForPrestigeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetLookForPrestigeType::kPrestigeInfoFieldNumber;
#endif  // !_MSC_VER

RetLookForPrestigeType::RetLookForPrestigeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLookForPrestigeType::InitAsDefaultInstance() {
}

RetLookForPrestigeType::RetLookForPrestigeType(const RetLookForPrestigeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLookForPrestigeType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLookForPrestigeType::~RetLookForPrestigeType() {
  SharedDtor();
}

void RetLookForPrestigeType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetLookForPrestigeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLookForPrestigeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLookForPrestigeType_descriptor_;
}

const RetLookForPrestigeType& RetLookForPrestigeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

RetLookForPrestigeType* RetLookForPrestigeType::default_instance_ = NULL;

RetLookForPrestigeType* RetLookForPrestigeType::New() const {
  return new RetLookForPrestigeType;
}

void RetLookForPrestigeType::Clear() {
  prestigeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLookForPrestigeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerReturn.ServerThreeInt prestigeInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestigeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prestigeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prestigeInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLookForPrestigeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerReturn.ServerThreeInt prestigeInfo = 1;
  for (int i = 0; i < this->prestigeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prestigeinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLookForPrestigeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerReturn.ServerThreeInt prestigeInfo = 1;
  for (int i = 0; i < this->prestigeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prestigeinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLookForPrestigeType::ByteSize() const {
  int total_size = 0;

  // repeated .ServerReturn.ServerThreeInt prestigeInfo = 1;
  total_size += 1 * this->prestigeinfo_size();
  for (int i = 0; i < this->prestigeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prestigeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLookForPrestigeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLookForPrestigeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLookForPrestigeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLookForPrestigeType::MergeFrom(const RetLookForPrestigeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  prestigeinfo_.MergeFrom(from.prestigeinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLookForPrestigeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLookForPrestigeType::CopyFrom(const RetLookForPrestigeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLookForPrestigeType::IsInitialized() const {

  for (int i = 0; i < prestigeinfo_size(); i++) {
    if (!this->prestigeinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetLookForPrestigeType::Swap(RetLookForPrestigeType* other) {
  if (other != this) {
    prestigeinfo_.Swap(&other->prestigeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLookForPrestigeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLookForPrestigeType_descriptor_;
  metadata.reflection = RetLookForPrestigeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqTitleActive::kTitleIDFieldNumber;
#endif  // !_MSC_VER

ReqTitleActive::ReqTitleActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqTitleActive::InitAsDefaultInstance() {
}

ReqTitleActive::ReqTitleActive(const ReqTitleActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqTitleActive::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTitleActive::~ReqTitleActive() {
  SharedDtor();
}

void ReqTitleActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqTitleActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTitleActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTitleActive_descriptor_;
}

const ReqTitleActive& ReqTitleActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

ReqTitleActive* ReqTitleActive::default_instance_ = NULL;

ReqTitleActive* ReqTitleActive::New() const {
  return new ReqTitleActive;
}

void ReqTitleActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqTitleActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqTitleActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqTitleActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqTitleActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTitleActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqTitleActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqTitleActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqTitleActive::MergeFrom(const ReqTitleActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqTitleActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTitleActive::CopyFrom(const ReqTitleActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTitleActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqTitleActive::Swap(ReqTitleActive* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqTitleActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTitleActive_descriptor_;
  metadata.reflection = ReqTitleActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetTitleActive::kDwErrorFieldNumber;
#endif  // !_MSC_VER

RetTitleActive::RetTitleActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetTitleActive::InitAsDefaultInstance() {
}

RetTitleActive::RetTitleActive(const RetTitleActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetTitleActive::SharedCtor() {
  _cached_size_ = 0;
  dwerror_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetTitleActive::~RetTitleActive() {
  SharedDtor();
}

void RetTitleActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetTitleActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetTitleActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetTitleActive_descriptor_;
}

const RetTitleActive& RetTitleActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

RetTitleActive* RetTitleActive::default_instance_ = NULL;

RetTitleActive* RetTitleActive::New() const {
  return new RetTitleActive;
}

void RetTitleActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerror_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetTitleActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwError = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerror_)));
          set_has_dwerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetTitleActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwError = 1;
  if (has_dwerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetTitleActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwError = 1;
  if (has_dwerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetTitleActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwError = 1;
    if (has_dwerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerror());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetTitleActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetTitleActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetTitleActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetTitleActive::MergeFrom(const RetTitleActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerror()) {
      set_dwerror(from.dwerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetTitleActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetTitleActive::CopyFrom(const RetTitleActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetTitleActive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetTitleActive::Swap(RetTitleActive* other) {
  if (other != this) {
    std::swap(dwerror_, other->dwerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetTitleActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetTitleActive_descriptor_;
  metadata.reflection = RetTitleActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimPrestigeComplete::kCompleteIDFieldNumber;
const int SimPrestigeComplete::kCompleteTypeFieldNumber;
#endif  // !_MSC_VER

SimPrestigeComplete::SimPrestigeComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimPrestigeComplete::InitAsDefaultInstance() {
}

SimPrestigeComplete::SimPrestigeComplete(const SimPrestigeComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimPrestigeComplete::SharedCtor() {
  _cached_size_ = 0;
  completeid_ = 0;
  completetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimPrestigeComplete::~SimPrestigeComplete() {
  SharedDtor();
}

void SimPrestigeComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimPrestigeComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimPrestigeComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimPrestigeComplete_descriptor_;
}

const SimPrestigeComplete& SimPrestigeComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

SimPrestigeComplete* SimPrestigeComplete::default_instance_ = NULL;

SimPrestigeComplete* SimPrestigeComplete::New() const {
  return new SimPrestigeComplete;
}

void SimPrestigeComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    completeid_ = 0;
    completetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimPrestigeComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 completeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completeid_)));
          set_has_completeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_completeType;
        break;
      }

      // required int32 completeType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completetype_)));
          set_has_completetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimPrestigeComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 completeID = 1;
  if (has_completeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->completeid(), output);
  }

  // required int32 completeType = 2;
  if (has_completetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->completetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimPrestigeComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 completeID = 1;
  if (has_completeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->completeid(), target);
  }

  // required int32 completeType = 2;
  if (has_completetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->completetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimPrestigeComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 completeID = 1;
    if (has_completeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completeid());
    }

    // required int32 completeType = 2;
    if (has_completetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimPrestigeComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimPrestigeComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimPrestigeComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimPrestigeComplete::MergeFrom(const SimPrestigeComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_completeid()) {
      set_completeid(from.completeid());
    }
    if (from.has_completetype()) {
      set_completetype(from.completetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimPrestigeComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimPrestigeComplete::CopyFrom(const SimPrestigeComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimPrestigeComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SimPrestigeComplete::Swap(SimPrestigeComplete* other) {
  if (other != this) {
    std::swap(completeid_, other->completeid_);
    std::swap(completetype_, other->completetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimPrestigeComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimPrestigeComplete_descriptor_;
  metadata.reflection = SimPrestigeComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAchShopInfo::kTimeFieldNumber;
const int RetAchShopInfo::kItemFieldNumber;
#endif  // !_MSC_VER

RetAchShopInfo::RetAchShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAchShopInfo::InitAsDefaultInstance() {
}

RetAchShopInfo::RetAchShopInfo(const RetAchShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAchShopInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAchShopInfo::~RetAchShopInfo() {
  SharedDtor();
}

void RetAchShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAchShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAchShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAchShopInfo_descriptor_;
}

const RetAchShopInfo& RetAchShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

RetAchShopInfo* RetAchShopInfo::default_instance_ = NULL;

RetAchShopInfo* RetAchShopInfo::New() const {
  return new RetAchShopInfo;
}

void RetAchShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAchShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .AchievementProto.RetAchShopItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAchShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // repeated .AchievementProto.RetAchShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAchShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // repeated .AchievementProto.RetAchShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAchShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .AchievementProto.RetAchShopItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAchShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAchShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAchShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAchShopInfo::MergeFrom(const RetAchShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAchShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAchShopInfo::CopyFrom(const RetAchShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAchShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void RetAchShopInfo::Swap(RetAchShopInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAchShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAchShopInfo_descriptor_;
  metadata.reflection = RetAchShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAchShopItem::kIdFieldNumber;
const int RetAchShopItem::kCountFieldNumber;
const int RetAchShopItem::kGoodsidFieldNumber;
#endif  // !_MSC_VER

RetAchShopItem::RetAchShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAchShopItem::InitAsDefaultInstance() {
}

RetAchShopItem::RetAchShopItem(const RetAchShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAchShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAchShopItem::~RetAchShopItem() {
  SharedDtor();
}

void RetAchShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAchShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAchShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAchShopItem_descriptor_;
}

const RetAchShopItem& RetAchShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AchievementProto_2eproto();
  return *default_instance_;
}

RetAchShopItem* RetAchShopItem::default_instance_ = NULL;

RetAchShopItem* RetAchShopItem::New() const {
  return new RetAchShopItem;
}

void RetAchShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  goodsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAchShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsid;
        break;
      }

      // repeated int32 goodsid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_goodsid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_goodsid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAchShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated int32 goodsid = 3;
  for (int i = 0; i < this->goodsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->goodsid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAchShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated int32 goodsid = 3;
  for (int i = 0; i < this->goodsid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->goodsid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAchShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated int32 goodsid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->goodsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->goodsid(i));
    }
    total_size += 1 * this->goodsid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAchShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAchShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAchShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAchShopItem::MergeFrom(const RetAchShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsid_.MergeFrom(from.goodsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAchShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAchShopItem::CopyFrom(const RetAchShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAchShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetAchShopItem::Swap(RetAchShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    goodsid_.Swap(&other->goodsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAchShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAchShopItem_descriptor_;
  metadata.reflection = RetAchShopItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AchievementProto

// @@protoc_insertion_point(global_scope)
