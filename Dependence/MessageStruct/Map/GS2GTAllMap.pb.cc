// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/GS2GTAllMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Map/GS2GTAllMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GameSvrToGate {

namespace {

const ::google::protobuf::Descriptor* GSAllMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSAllMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateMapAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateMapAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto() {
  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Map/GS2GTAllMap.proto");
  GOOGLE_CHECK(file != NULL);
  GSAllMap_descriptor_ = file->message_type(0);
  static const int GSAllMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSAllMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSAllMap, scene_),
  };
  GSAllMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSAllMap_descriptor_,
      GSAllMap::default_instance_,
      GSAllMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSAllMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSAllMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSAllMap));
  SceneInfo_descriptor_ = file->message_type(1);
  static const int SceneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInfo, sceneid_),
  };
  SceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneInfo_descriptor_,
      SceneInfo::default_instance_,
      SceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneInfo));
  CopyInfo_descriptor_ = file->message_type(2);
  static const int CopyInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, mapid_),
  };
  CopyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyInfo_descriptor_,
      CopyInfo::default_instance_,
      CopyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyInfo));
  GSMapInfo_descriptor_ = file->message_type(3);
  static const int GSMapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSMapInfo, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSMapInfo, staticid_),
  };
  GSMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSMapInfo_descriptor_,
      GSMapInfo::default_instance_,
      GSMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSMapInfo));
  CreateMapInfo_descriptor_ = file->message_type(4);
  static const int CreateMapInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, onlyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, maptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, staticid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, content_),
  };
  CreateMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMapInfo_descriptor_,
      CreateMapInfo::default_instance_,
      CreateMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMapInfo));
  CreateMapAck_descriptor_ = file->message_type(5);
  static const int CreateMapAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapAck, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapAck, gsid_),
  };
  CreateMapAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateMapAck_descriptor_,
      CreateMapAck::default_instance_,
      CreateMapAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateMapAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateMapAck));
  DeleteMap_descriptor_ = file->message_type(6);
  static const int DeleteMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMap, sceneid_),
  };
  DeleteMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteMap_descriptor_,
      DeleteMap::default_instance_,
      DeleteMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSAllMap_descriptor_, &GSAllMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneInfo_descriptor_, &SceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyInfo_descriptor_, &CopyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSMapInfo_descriptor_, &GSMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMapInfo_descriptor_, &CreateMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateMapAck_descriptor_, &CreateMapAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteMap_descriptor_, &DeleteMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto() {
  delete GSAllMap::default_instance_;
  delete GSAllMap_reflection_;
  delete SceneInfo::default_instance_;
  delete SceneInfo_reflection_;
  delete CopyInfo::default_instance_;
  delete CopyInfo_reflection_;
  delete GSMapInfo::default_instance_;
  delete GSMapInfo_reflection_;
  delete CreateMapInfo::default_instance_;
  delete CreateMapInfo_reflection_;
  delete CreateMapAck::default_instance_;
  delete CreateMapAck_reflection_;
  delete DeleteMap::default_instance_;
  delete DeleteMap_reflection_;
}

void protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Map/GS2GTAllMap.proto\022\rGameSvrToGate\"\?"
    "\n\010GSAllMap\022\n\n\002id\030\001 \002(\005\022\'\n\005scene\030\002 \003(\0132\030."
    "GameSvrToGate.GSMapInfo\"\034\n\tSceneInfo\022\017\n\007"
    "sceneID\030\001 \002(\003\"\031\n\010CopyInfo\022\r\n\005mapid\030\001 \002(\005"
    "\".\n\tGSMapInfo\022\017\n\007maptype\030\001 \002(\005\022\020\n\010static"
    "id\030\002 \002(\005\"c\n\rCreateMapInfo\022\016\n\006onlyid\030\001 \002("
    "\003\022\016\n\006charid\030\002 \001(\003\022\017\n\007maptype\030\003 \001(\005\022\020\n\010st"
    "aticid\030\004 \001(\005\022\017\n\007content\030\005 \001(\014\")\n\014CreateM"
    "apAck\022\013\n\003ret\030\001 \002(\003\022\014\n\004gsid\030\002 \001(\005\"(\n\tDele"
    "teMap\022\n\n\002id\030\001 \002(\005\022\017\n\007sceneid\030\002 \003(\003", 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Map/GS2GTAllMap.proto", &protobuf_RegisterTypes);
  GSAllMap::default_instance_ = new GSAllMap();
  SceneInfo::default_instance_ = new SceneInfo();
  CopyInfo::default_instance_ = new CopyInfo();
  GSMapInfo::default_instance_ = new GSMapInfo();
  CreateMapInfo::default_instance_ = new CreateMapInfo();
  CreateMapAck::default_instance_ = new CreateMapAck();
  DeleteMap::default_instance_ = new DeleteMap();
  GSAllMap::default_instance_->InitAsDefaultInstance();
  SceneInfo::default_instance_->InitAsDefaultInstance();
  CopyInfo::default_instance_->InitAsDefaultInstance();
  GSMapInfo::default_instance_->InitAsDefaultInstance();
  CreateMapInfo::default_instance_->InitAsDefaultInstance();
  CreateMapAck::default_instance_->InitAsDefaultInstance();
  DeleteMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Map_2fGS2GTAllMap_2eproto {
  StaticDescriptorInitializer_Map_2fGS2GTAllMap_2eproto() {
    protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  }
} static_descriptor_initializer_Map_2fGS2GTAllMap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GSAllMap::kIdFieldNumber;
const int GSAllMap::kSceneFieldNumber;
#endif  // !_MSC_VER

GSAllMap::GSAllMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSAllMap::InitAsDefaultInstance() {
}

GSAllMap::GSAllMap(const GSAllMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSAllMap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSAllMap::~GSAllMap() {
  SharedDtor();
}

void GSAllMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GSAllMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSAllMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSAllMap_descriptor_;
}

const GSAllMap& GSAllMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

GSAllMap* GSAllMap::default_instance_ = NULL;

GSAllMap* GSAllMap::New() const {
  return new GSAllMap;
}

void GSAllMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  scene_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSAllMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene;
        break;
      }

      // repeated .GameSvrToGate.GSMapInfo scene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scene;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSAllMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .GameSvrToGate.GSMapInfo scene = 2;
  for (int i = 0; i < this->scene_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scene(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSAllMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .GameSvrToGate.GSMapInfo scene = 2;
  for (int i = 0; i < this->scene_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scene(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSAllMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .GameSvrToGate.GSMapInfo scene = 2;
  total_size += 1 * this->scene_size();
  for (int i = 0; i < this->scene_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scene(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSAllMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSAllMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSAllMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSAllMap::MergeFrom(const GSAllMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  scene_.MergeFrom(from.scene_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSAllMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSAllMap::CopyFrom(const GSAllMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSAllMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < scene_size(); i++) {
    if (!this->scene(i).IsInitialized()) return false;
  }
  return true;
}

void GSAllMap::Swap(GSAllMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    scene_.Swap(&other->scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSAllMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSAllMap_descriptor_;
  metadata.reflection = GSAllMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneInfo::kSceneIDFieldNumber;
#endif  // !_MSC_VER

SceneInfo::SceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SceneInfo::InitAsDefaultInstance() {
}

SceneInfo::SceneInfo(const SceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SceneInfo::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneInfo::~SceneInfo() {
  SharedDtor();
}

void SceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneInfo_descriptor_;
}

const SceneInfo& SceneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

SceneInfo* SceneInfo::default_instance_ = NULL;

SceneInfo* SceneInfo::New() const {
  return new SceneInfo;
}

void SceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sceneID = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneInfo::MergeFrom(const SceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneInfo::CopyFrom(const SceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SceneInfo::Swap(SceneInfo* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneInfo_descriptor_;
  metadata.reflection = SceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CopyInfo::kMapidFieldNumber;
#endif  // !_MSC_VER

CopyInfo::CopyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CopyInfo::InitAsDefaultInstance() {
}

CopyInfo::CopyInfo(const CopyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CopyInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyInfo::~CopyInfo() {
  SharedDtor();
}

void CopyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyInfo_descriptor_;
}

const CopyInfo& CopyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

CopyInfo* CopyInfo::default_instance_ = NULL;

CopyInfo* CopyInfo::New() const {
  return new CopyInfo;
}

void CopyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CopyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CopyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CopyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyInfo::MergeFrom(const CopyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyInfo::CopyFrom(const CopyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CopyInfo::Swap(CopyInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyInfo_descriptor_;
  metadata.reflection = CopyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSMapInfo::kMaptypeFieldNumber;
const int GSMapInfo::kStaticidFieldNumber;
#endif  // !_MSC_VER

GSMapInfo::GSMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSMapInfo::InitAsDefaultInstance() {
}

GSMapInfo::GSMapInfo(const GSMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSMapInfo::SharedCtor() {
  _cached_size_ = 0;
  maptype_ = 0;
  staticid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSMapInfo::~GSMapInfo() {
  SharedDtor();
}

void GSMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GSMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSMapInfo_descriptor_;
}

const GSMapInfo& GSMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

GSMapInfo* GSMapInfo::default_instance_ = NULL;

GSMapInfo* GSMapInfo::New() const {
  return new GSMapInfo;
}

void GSMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maptype_ = 0;
    staticid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_staticid;
        break;
      }

      // required int32 staticid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staticid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &staticid_)));
          set_has_staticid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 maptype = 1;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maptype(), output);
  }

  // required int32 staticid = 2;
  if (has_staticid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->staticid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 maptype = 1;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maptype(), target);
  }

  // required int32 staticid = 2;
  if (has_staticid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->staticid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 maptype = 1;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptype());
    }

    // required int32 staticid = 2;
    if (has_staticid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->staticid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSMapInfo::MergeFrom(const GSMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
    if (from.has_staticid()) {
      set_staticid(from.staticid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSMapInfo::CopyFrom(const GSMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GSMapInfo::Swap(GSMapInfo* other) {
  if (other != this) {
    std::swap(maptype_, other->maptype_);
    std::swap(staticid_, other->staticid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSMapInfo_descriptor_;
  metadata.reflection = GSMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMapInfo::kOnlyidFieldNumber;
const int CreateMapInfo::kCharidFieldNumber;
const int CreateMapInfo::kMaptypeFieldNumber;
const int CreateMapInfo::kStaticidFieldNumber;
const int CreateMapInfo::kContentFieldNumber;
#endif  // !_MSC_VER

CreateMapInfo::CreateMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateMapInfo::InitAsDefaultInstance() {
}

CreateMapInfo::CreateMapInfo(const CreateMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateMapInfo::SharedCtor() {
  _cached_size_ = 0;
  onlyid_ = GOOGLE_LONGLONG(0);
  charid_ = GOOGLE_LONGLONG(0);
  maptype_ = 0;
  staticid_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMapInfo::~CreateMapInfo() {
  SharedDtor();
}

void CreateMapInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CreateMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMapInfo_descriptor_;
}

const CreateMapInfo& CreateMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

CreateMapInfo* CreateMapInfo::default_instance_ = NULL;

CreateMapInfo* CreateMapInfo::New() const {
  return new CreateMapInfo;
}

void CreateMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onlyid_ = GOOGLE_LONGLONG(0);
    charid_ = GOOGLE_LONGLONG(0);
    maptype_ = 0;
    staticid_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 onlyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlyid_)));
          set_has_onlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maptype;
        break;
      }

      // optional int32 maptype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maptype_)));
          set_has_maptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_staticid;
        break;
      }

      // optional int32 staticid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staticid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &staticid_)));
          set_has_staticid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional bytes content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 onlyid = 1;
  if (has_onlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->onlyid(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional int32 maptype = 3;
  if (has_maptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maptype(), output);
  }

  // optional int32 staticid = 4;
  if (has_staticid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->staticid(), output);
  }

  // optional bytes content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 onlyid = 1;
  if (has_onlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->onlyid(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional int32 maptype = 3;
  if (has_maptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maptype(), target);
  }

  // optional int32 staticid = 4;
  if (has_staticid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->staticid(), target);
  }

  // optional bytes content = 5;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 onlyid = 1;
    if (has_onlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlyid());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 maptype = 3;
    if (has_maptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maptype());
    }

    // optional int32 staticid = 4;
    if (has_staticid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->staticid());
    }

    // optional bytes content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMapInfo::MergeFrom(const CreateMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlyid()) {
      set_onlyid(from.onlyid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_maptype()) {
      set_maptype(from.maptype());
    }
    if (from.has_staticid()) {
      set_staticid(from.staticid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMapInfo::CopyFrom(const CreateMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateMapInfo::Swap(CreateMapInfo* other) {
  if (other != this) {
    std::swap(onlyid_, other->onlyid_);
    std::swap(charid_, other->charid_);
    std::swap(maptype_, other->maptype_);
    std::swap(staticid_, other->staticid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMapInfo_descriptor_;
  metadata.reflection = CreateMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateMapAck::kRetFieldNumber;
const int CreateMapAck::kGsidFieldNumber;
#endif  // !_MSC_VER

CreateMapAck::CreateMapAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateMapAck::InitAsDefaultInstance() {
}

CreateMapAck::CreateMapAck(const CreateMapAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateMapAck::SharedCtor() {
  _cached_size_ = 0;
  ret_ = GOOGLE_LONGLONG(0);
  gsid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateMapAck::~CreateMapAck() {
  SharedDtor();
}

void CreateMapAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateMapAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateMapAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateMapAck_descriptor_;
}

const CreateMapAck& CreateMapAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

CreateMapAck* CreateMapAck::default_instance_ = NULL;

CreateMapAck* CreateMapAck::New() const {
  return new CreateMapAck;
}

void CreateMapAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = GOOGLE_LONGLONG(0);
    gsid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateMapAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gsid;
        break;
      }

      // optional int32 gsid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateMapAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ret(), output);
  }

  // optional int32 gsid = 2;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateMapAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ret(), target);
  }

  // optional int32 gsid = 2;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateMapAck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret());
    }

    // optional int32 gsid = 2;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateMapAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateMapAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateMapAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateMapAck::MergeFrom(const CreateMapAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateMapAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateMapAck::CopyFrom(const CreateMapAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateMapAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateMapAck::Swap(CreateMapAck* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateMapAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateMapAck_descriptor_;
  metadata.reflection = CreateMapAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteMap::kIdFieldNumber;
const int DeleteMap::kSceneidFieldNumber;
#endif  // !_MSC_VER

DeleteMap::DeleteMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteMap::InitAsDefaultInstance() {
}

DeleteMap::DeleteMap(const DeleteMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteMap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteMap::~DeleteMap() {
  SharedDtor();
}

void DeleteMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteMap_descriptor_;
}

const DeleteMap& DeleteMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  return *default_instance_;
}

DeleteMap* DeleteMap::default_instance_ = NULL;

DeleteMap* DeleteMap::New() const {
  return new DeleteMap;
}

void DeleteMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  sceneid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // repeated int64 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_sceneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_sceneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated int64 sceneid = 2;
  for (int i = 0; i < this->sceneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->sceneid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated int64 sceneid = 2;
  for (int i = 0; i < this->sceneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->sceneid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated int64 sceneid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->sceneid(i));
    }
    total_size += 1 * this->sceneid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteMap::MergeFrom(const DeleteMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneid_.MergeFrom(from.sceneid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMap::CopyFrom(const DeleteMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteMap::Swap(DeleteMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    sceneid_.Swap(&other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteMap_descriptor_;
  metadata.reflection = DeleteMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameSvrToGate

// @@protoc_insertion_point(global_scope)
