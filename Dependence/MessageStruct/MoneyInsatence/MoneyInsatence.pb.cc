// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MoneyInsatence/MoneyInsatence.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MoneyInsatence/MoneyInsatence.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MoneyInstancePackage {

namespace {

const ::google::protobuf::Descriptor* ReqBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBuyAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBuyAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFitchMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFitchMoney_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMoneyInstanceRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMoneyInstanceRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlushMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlushMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerAttrAlter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerAttrAlter_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateAttrAlter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateAttrAlter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuplicateAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuplicateAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyInstanceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyInstanceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRank_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto() {
  protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MoneyInsatence/MoneyInsatence.proto");
  GOOGLE_CHECK(file != NULL);
  ReqBuyItem_descriptor_ = file->message_type(0);
  static const int ReqBuyItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItem, id_),
  };
  ReqBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuyItem_descriptor_,
      ReqBuyItem::default_instance_,
      ReqBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuyItem));
  AckBuyItem_descriptor_ = file->message_type(1);
  static const int AckBuyItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuyItem, ret_),
  };
  AckBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBuyItem_descriptor_,
      AckBuyItem::default_instance_,
      AckBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBuyItem));
  AckUseSkill_descriptor_ = file->message_type(2);
  static const int AckUseSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUseSkill, ret_),
  };
  AckUseSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckUseSkill_descriptor_,
      AckUseSkill::default_instance_,
      AckUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUseSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckUseSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckUseSkill));
  AckBuyAttr_descriptor_ = file->message_type(3);
  static const int AckBuyAttr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuyAttr, ret_),
  };
  AckBuyAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBuyAttr_descriptor_,
      AckBuyAttr::default_instance_,
      AckBuyAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuyAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBuyAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBuyAttr));
  AckFitchMoney_descriptor_ = file->message_type(4);
  static const int AckFitchMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchMoney, ret_),
  };
  AckFitchMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFitchMoney_descriptor_,
      AckFitchMoney::default_instance_,
      AckFitchMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFitchMoney));
  AckMoneyInstanceRank_descriptor_ = file->message_type(5);
  static const int AckMoneyInstanceRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, maxcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, leftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, maxbuycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, buycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, ranklist_),
  };
  AckMoneyInstanceRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckMoneyInstanceRank_descriptor_,
      AckMoneyInstanceRank::default_instance_,
      AckMoneyInstanceRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMoneyInstanceRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckMoneyInstanceRank));
  RankData_descriptor_ = file->message_type(6);
  static const int RankData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, money_),
  };
  RankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankData_descriptor_,
      RankData::default_instance_,
      RankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankData));
  FlushNotice_descriptor_ = file->message_type(7);
  static const int FlushNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushNotice, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushNotice, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushNotice, queue_),
  };
  FlushNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushNotice_descriptor_,
      FlushNotice::default_instance_,
      FlushNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushNotice));
  FlushMonster_descriptor_ = file->message_type(8);
  static const int FlushMonster_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushMonster, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushMonster, mons_),
  };
  FlushMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlushMonster_descriptor_,
      FlushMonster::default_instance_,
      FlushMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlushMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlushMonster));
  MonsterAttr_descriptor_ = file->message_type(9);
  static const int MonsterAttr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttr, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttr, hp_),
  };
  MonsterAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterAttr_descriptor_,
      MonsterAttr::default_instance_,
      MonsterAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterAttr));
  TowerAttrAlter_descriptor_ = file->message_type(10);
  static const int TowerAttrAlter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttrAlter, attr_),
  };
  TowerAttrAlter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerAttrAlter_descriptor_,
      TowerAttrAlter::default_instance_,
      TowerAttrAlter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttrAlter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttrAlter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerAttrAlter));
  TowerAttr_descriptor_ = file->message_type(11);
  static const int TowerAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttr, value_),
  };
  TowerAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerAttr_descriptor_,
      TowerAttr::default_instance_,
      TowerAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerAttr));
  DuplicateAttrAlter_descriptor_ = file->message_type(12);
  static const int DuplicateAttrAlter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttrAlter, attrlist_),
  };
  DuplicateAttrAlter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateAttrAlter_descriptor_,
      DuplicateAttrAlter::default_instance_,
      DuplicateAttrAlter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttrAlter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttrAlter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateAttrAlter));
  DuplicateAttr_descriptor_ = file->message_type(13);
  static const int DuplicateAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttr, value_),
  };
  DuplicateAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuplicateAttr_descriptor_,
      DuplicateAttr::default_instance_,
      DuplicateAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuplicateAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuplicateAttr));
  MoneyInstanceResult_descriptor_ = file->message_type(14);
  static const int MoneyInstanceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceResult, money_),
  };
  MoneyInstanceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyInstanceResult_descriptor_,
      MoneyInstanceResult::default_instance_,
      MoneyInstanceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyInstanceResult));
  ReqRank_descriptor_ = file->message_type(15);
  static const int ReqRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRank, charid_),
  };
  ReqRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqRank_descriptor_,
      ReqRank::default_instance_,
      ReqRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqRank));
  AckRank_descriptor_ = file->message_type(16);
  static const int AckRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRank, ranklist_),
  };
  AckRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckRank_descriptor_,
      AckRank::default_instance_,
      AckRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckRank));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MoneyInsatence_2fMoneyInsatence_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuyItem_descriptor_, &ReqBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBuyItem_descriptor_, &AckBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckUseSkill_descriptor_, &AckUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBuyAttr_descriptor_, &AckBuyAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFitchMoney_descriptor_, &AckFitchMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckMoneyInstanceRank_descriptor_, &AckMoneyInstanceRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankData_descriptor_, &RankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushNotice_descriptor_, &FlushNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlushMonster_descriptor_, &FlushMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterAttr_descriptor_, &MonsterAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerAttrAlter_descriptor_, &TowerAttrAlter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerAttr_descriptor_, &TowerAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateAttrAlter_descriptor_, &DuplicateAttrAlter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuplicateAttr_descriptor_, &DuplicateAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyInstanceResult_descriptor_, &MoneyInstanceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqRank_descriptor_, &ReqRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckRank_descriptor_, &AckRank::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto() {
  delete ReqBuyItem::default_instance_;
  delete ReqBuyItem_reflection_;
  delete AckBuyItem::default_instance_;
  delete AckBuyItem_reflection_;
  delete AckUseSkill::default_instance_;
  delete AckUseSkill_reflection_;
  delete AckBuyAttr::default_instance_;
  delete AckBuyAttr_reflection_;
  delete AckFitchMoney::default_instance_;
  delete AckFitchMoney_reflection_;
  delete AckMoneyInstanceRank::default_instance_;
  delete AckMoneyInstanceRank_reflection_;
  delete RankData::default_instance_;
  delete RankData_reflection_;
  delete FlushNotice::default_instance_;
  delete FlushNotice_reflection_;
  delete FlushMonster::default_instance_;
  delete FlushMonster_reflection_;
  delete MonsterAttr::default_instance_;
  delete MonsterAttr_reflection_;
  delete TowerAttrAlter::default_instance_;
  delete TowerAttrAlter_reflection_;
  delete TowerAttr::default_instance_;
  delete TowerAttr_reflection_;
  delete DuplicateAttrAlter::default_instance_;
  delete DuplicateAttrAlter_reflection_;
  delete DuplicateAttr::default_instance_;
  delete DuplicateAttr_reflection_;
  delete MoneyInstanceResult::default_instance_;
  delete MoneyInstanceResult_reflection_;
  delete ReqRank::default_instance_;
  delete ReqRank_reflection_;
  delete AckRank::default_instance_;
  delete AckRank_reflection_;
}

void protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#MoneyInsatence/MoneyInsatence.proto\022\024M"
    "oneyInstancePackage\"\030\n\nReqBuyItem\022\n\n\002id\030"
    "\001 \002(\005\"\031\n\nAckBuyItem\022\013\n\003ret\030\001 \002(\005\"\032\n\013AckU"
    "seSkill\022\013\n\003ret\030\001 \002(\005\"\031\n\nAckBuyAttr\022\013\n\003re"
    "t\030\001 \002(\005\"\034\n\rAckFitchMoney\022\013\n\003ret\030\001 \002(\005\"\224\001"
    "\n\024AckMoneyInstanceRank\022\020\n\010maxCount\030\001 \002(\005"
    "\022\021\n\tleftCount\030\002 \001(\005\022\023\n\013maxbuyCount\030\003 \001(\005"
    "\022\020\n\010buyCount\030\004 \001(\005\0220\n\010ranklist\030\005 \003(\0132\036.M"
    "oneyInstancePackage.RankData\"3\n\010RankData"
    "\022\n\n\002id\030\001 \002(\003\022\014\n\004name\030\002 \001(\014\022\r\n\005money\030\003 \001("
    "\003\"8\n\013FlushNotice\022\014\n\004type\030\001 \002(\005\022\014\n\004time\030\002"
    " \001(\005\022\r\n\005queue\030\003 \001(\005\"N\n\014FlushMonster\022\r\n\005q"
    "ueue\030\001 \002(\005\022/\n\004mons\030\002 \003(\0132!.MoneyInstance"
    "Package.MonsterAttr\"A\n\013MonsterAttr\022\n\n\002id"
    "\030\001 \002(\005\022\013\n\003key\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\022\n\n\002hp"
    "\030\004 \001(\005\"\?\n\016TowerAttrAlter\022-\n\004attr\030\001 \003(\0132\037"
    ".MoneyInstancePackage.TowerAttr\"&\n\tTower"
    "Attr\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"K\n\022Dupli"
    "cateAttrAlter\0225\n\010attrlist\030\001 \003(\0132#.MoneyI"
    "nstancePackage.DuplicateAttr\"*\n\rDuplicat"
    "eAttr\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \001(\003\">\n\023Mone"
    "yInstanceResult\022\n\n\002id\030\001 \002(\003\022\014\n\004name\030\002 \001("
    "\014\022\r\n\005money\030\003 \001(\003\"\031\n\007ReqRank\022\016\n\006charid\030\001 "
    "\002(\003\";\n\007AckRank\0220\n\010ranklist\030\001 \003(\0132\036.Money"
    "InstancePackage.RankData", 984);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MoneyInsatence/MoneyInsatence.proto", &protobuf_RegisterTypes);
  ReqBuyItem::default_instance_ = new ReqBuyItem();
  AckBuyItem::default_instance_ = new AckBuyItem();
  AckUseSkill::default_instance_ = new AckUseSkill();
  AckBuyAttr::default_instance_ = new AckBuyAttr();
  AckFitchMoney::default_instance_ = new AckFitchMoney();
  AckMoneyInstanceRank::default_instance_ = new AckMoneyInstanceRank();
  RankData::default_instance_ = new RankData();
  FlushNotice::default_instance_ = new FlushNotice();
  FlushMonster::default_instance_ = new FlushMonster();
  MonsterAttr::default_instance_ = new MonsterAttr();
  TowerAttrAlter::default_instance_ = new TowerAttrAlter();
  TowerAttr::default_instance_ = new TowerAttr();
  DuplicateAttrAlter::default_instance_ = new DuplicateAttrAlter();
  DuplicateAttr::default_instance_ = new DuplicateAttr();
  MoneyInstanceResult::default_instance_ = new MoneyInstanceResult();
  ReqRank::default_instance_ = new ReqRank();
  AckRank::default_instance_ = new AckRank();
  ReqBuyItem::default_instance_->InitAsDefaultInstance();
  AckBuyItem::default_instance_->InitAsDefaultInstance();
  AckUseSkill::default_instance_->InitAsDefaultInstance();
  AckBuyAttr::default_instance_->InitAsDefaultInstance();
  AckFitchMoney::default_instance_->InitAsDefaultInstance();
  AckMoneyInstanceRank::default_instance_->InitAsDefaultInstance();
  RankData::default_instance_->InitAsDefaultInstance();
  FlushNotice::default_instance_->InitAsDefaultInstance();
  FlushMonster::default_instance_->InitAsDefaultInstance();
  MonsterAttr::default_instance_->InitAsDefaultInstance();
  TowerAttrAlter::default_instance_->InitAsDefaultInstance();
  TowerAttr::default_instance_->InitAsDefaultInstance();
  DuplicateAttrAlter::default_instance_->InitAsDefaultInstance();
  DuplicateAttr::default_instance_->InitAsDefaultInstance();
  MoneyInstanceResult::default_instance_->InitAsDefaultInstance();
  ReqRank::default_instance_->InitAsDefaultInstance();
  AckRank::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MoneyInsatence_2fMoneyInsatence_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MoneyInsatence_2fMoneyInsatence_2eproto {
  StaticDescriptorInitializer_MoneyInsatence_2fMoneyInsatence_2eproto() {
    protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  }
} static_descriptor_initializer_MoneyInsatence_2fMoneyInsatence_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqBuyItem::kIdFieldNumber;
#endif  // !_MSC_VER

ReqBuyItem::ReqBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuyItem::InitAsDefaultInstance() {
}

ReqBuyItem::ReqBuyItem(const ReqBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuyItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuyItem::~ReqBuyItem() {
  SharedDtor();
}

void ReqBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuyItem_descriptor_;
}

const ReqBuyItem& ReqBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

ReqBuyItem* ReqBuyItem::default_instance_ = NULL;

ReqBuyItem* ReqBuyItem::New() const {
  return new ReqBuyItem;
}

void ReqBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuyItem::MergeFrom(const ReqBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyItem::CopyFrom(const ReqBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqBuyItem::Swap(ReqBuyItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuyItem_descriptor_;
  metadata.reflection = ReqBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBuyItem::kRetFieldNumber;
#endif  // !_MSC_VER

AckBuyItem::AckBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBuyItem::InitAsDefaultInstance() {
}

AckBuyItem::AckBuyItem(const AckBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBuyItem::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBuyItem::~AckBuyItem() {
  SharedDtor();
}

void AckBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBuyItem_descriptor_;
}

const AckBuyItem& AckBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

AckBuyItem* AckBuyItem::default_instance_ = NULL;

AckBuyItem* AckBuyItem::New() const {
  return new AckBuyItem;
}

void AckBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBuyItem::MergeFrom(const AckBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuyItem::CopyFrom(const AckBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckBuyItem::Swap(AckBuyItem* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBuyItem_descriptor_;
  metadata.reflection = AckBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckUseSkill::kRetFieldNumber;
#endif  // !_MSC_VER

AckUseSkill::AckUseSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckUseSkill::InitAsDefaultInstance() {
}

AckUseSkill::AckUseSkill(const AckUseSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckUseSkill::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckUseSkill::~AckUseSkill() {
  SharedDtor();
}

void AckUseSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckUseSkill_descriptor_;
}

const AckUseSkill& AckUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

AckUseSkill* AckUseSkill::default_instance_ = NULL;

AckUseSkill* AckUseSkill::New() const {
  return new AckUseSkill;
}

void AckUseSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckUseSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckUseSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckUseSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckUseSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckUseSkill::MergeFrom(const AckUseSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckUseSkill::CopyFrom(const AckUseSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckUseSkill::Swap(AckUseSkill* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckUseSkill_descriptor_;
  metadata.reflection = AckUseSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBuyAttr::kRetFieldNumber;
#endif  // !_MSC_VER

AckBuyAttr::AckBuyAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBuyAttr::InitAsDefaultInstance() {
}

AckBuyAttr::AckBuyAttr(const AckBuyAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBuyAttr::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBuyAttr::~AckBuyAttr() {
  SharedDtor();
}

void AckBuyAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBuyAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBuyAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBuyAttr_descriptor_;
}

const AckBuyAttr& AckBuyAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

AckBuyAttr* AckBuyAttr::default_instance_ = NULL;

AckBuyAttr* AckBuyAttr::New() const {
  return new AckBuyAttr;
}

void AckBuyAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBuyAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBuyAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBuyAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBuyAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBuyAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBuyAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBuyAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBuyAttr::MergeFrom(const AckBuyAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBuyAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBuyAttr::CopyFrom(const AckBuyAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBuyAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckBuyAttr::Swap(AckBuyAttr* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBuyAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBuyAttr_descriptor_;
  metadata.reflection = AckBuyAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFitchMoney::kRetFieldNumber;
#endif  // !_MSC_VER

AckFitchMoney::AckFitchMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFitchMoney::InitAsDefaultInstance() {
}

AckFitchMoney::AckFitchMoney(const AckFitchMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFitchMoney::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFitchMoney::~AckFitchMoney() {
  SharedDtor();
}

void AckFitchMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFitchMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFitchMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFitchMoney_descriptor_;
}

const AckFitchMoney& AckFitchMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

AckFitchMoney* AckFitchMoney::default_instance_ = NULL;

AckFitchMoney* AckFitchMoney::New() const {
  return new AckFitchMoney;
}

void AckFitchMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFitchMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFitchMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFitchMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFitchMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFitchMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFitchMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFitchMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFitchMoney::MergeFrom(const AckFitchMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFitchMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFitchMoney::CopyFrom(const AckFitchMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFitchMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFitchMoney::Swap(AckFitchMoney* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFitchMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFitchMoney_descriptor_;
  metadata.reflection = AckFitchMoney_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckMoneyInstanceRank::kMaxCountFieldNumber;
const int AckMoneyInstanceRank::kLeftCountFieldNumber;
const int AckMoneyInstanceRank::kMaxbuyCountFieldNumber;
const int AckMoneyInstanceRank::kBuyCountFieldNumber;
const int AckMoneyInstanceRank::kRanklistFieldNumber;
#endif  // !_MSC_VER

AckMoneyInstanceRank::AckMoneyInstanceRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckMoneyInstanceRank::InitAsDefaultInstance() {
}

AckMoneyInstanceRank::AckMoneyInstanceRank(const AckMoneyInstanceRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckMoneyInstanceRank::SharedCtor() {
  _cached_size_ = 0;
  maxcount_ = 0;
  leftcount_ = 0;
  maxbuycount_ = 0;
  buycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMoneyInstanceRank::~AckMoneyInstanceRank() {
  SharedDtor();
}

void AckMoneyInstanceRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckMoneyInstanceRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMoneyInstanceRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMoneyInstanceRank_descriptor_;
}

const AckMoneyInstanceRank& AckMoneyInstanceRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

AckMoneyInstanceRank* AckMoneyInstanceRank::default_instance_ = NULL;

AckMoneyInstanceRank* AckMoneyInstanceRank::New() const {
  return new AckMoneyInstanceRank;
}

void AckMoneyInstanceRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxcount_ = 0;
    leftcount_ = 0;
    maxbuycount_ = 0;
    buycount_ = 0;
  }
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckMoneyInstanceRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 maxCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcount_)));
          set_has_maxcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leftCount;
        break;
      }

      // optional int32 leftCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftcount_)));
          set_has_leftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxbuyCount;
        break;
      }

      // optional int32 maxbuyCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxbuyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxbuycount_)));
          set_has_maxbuycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyCount;
        break;
      }

      // optional int32 buyCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ranklist;
        break;
      }

      // repeated .MoneyInstancePackage.RankData ranklist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ranklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckMoneyInstanceRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 maxCount = 1;
  if (has_maxcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->maxcount(), output);
  }

  // optional int32 leftCount = 2;
  if (has_leftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftcount(), output);
  }

  // optional int32 maxbuyCount = 3;
  if (has_maxbuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxbuycount(), output);
  }

  // optional int32 buyCount = 4;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buycount(), output);
  }

  // repeated .MoneyInstancePackage.RankData ranklist = 5;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckMoneyInstanceRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 maxCount = 1;
  if (has_maxcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->maxcount(), target);
  }

  // optional int32 leftCount = 2;
  if (has_leftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftcount(), target);
  }

  // optional int32 maxbuyCount = 3;
  if (has_maxbuycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxbuycount(), target);
  }

  // optional int32 buyCount = 4;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buycount(), target);
  }

  // repeated .MoneyInstancePackage.RankData ranklist = 5;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckMoneyInstanceRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 maxCount = 1;
    if (has_maxcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcount());
    }

    // optional int32 leftCount = 2;
    if (has_leftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftcount());
    }

    // optional int32 maxbuyCount = 3;
    if (has_maxbuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxbuycount());
    }

    // optional int32 buyCount = 4;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }

  }
  // repeated .MoneyInstancePackage.RankData ranklist = 5;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMoneyInstanceRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckMoneyInstanceRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckMoneyInstanceRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckMoneyInstanceRank::MergeFrom(const AckMoneyInstanceRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxcount()) {
      set_maxcount(from.maxcount());
    }
    if (from.has_leftcount()) {
      set_leftcount(from.leftcount());
    }
    if (from.has_maxbuycount()) {
      set_maxbuycount(from.maxbuycount());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckMoneyInstanceRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMoneyInstanceRank::CopyFrom(const AckMoneyInstanceRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMoneyInstanceRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  return true;
}

void AckMoneyInstanceRank::Swap(AckMoneyInstanceRank* other) {
  if (other != this) {
    std::swap(maxcount_, other->maxcount_);
    std::swap(leftcount_, other->leftcount_);
    std::swap(maxbuycount_, other->maxbuycount_);
    std::swap(buycount_, other->buycount_);
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckMoneyInstanceRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMoneyInstanceRank_descriptor_;
  metadata.reflection = AckMoneyInstanceRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankData::kIdFieldNumber;
const int RankData::kNameFieldNumber;
const int RankData::kMoneyFieldNumber;
#endif  // !_MSC_VER

RankData::RankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankData::InitAsDefaultInstance() {
}

RankData::RankData(const RankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankData::~RankData() {
  SharedDtor();
}

void RankData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankData_descriptor_;
}

const RankData& RankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

RankData* RankData::default_instance_ = NULL;

RankData* RankData::New() const {
  return new RankData;
}

void RankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankData::MergeFrom(const RankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankData::CopyFrom(const RankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RankData::Swap(RankData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankData_descriptor_;
  metadata.reflection = RankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushNotice::kTypeFieldNumber;
const int FlushNotice::kTimeFieldNumber;
const int FlushNotice::kQueueFieldNumber;
#endif  // !_MSC_VER

FlushNotice::FlushNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushNotice::InitAsDefaultInstance() {
}

FlushNotice::FlushNotice(const FlushNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushNotice::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = 0;
  queue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushNotice::~FlushNotice() {
  SharedDtor();
}

void FlushNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlushNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushNotice_descriptor_;
}

const FlushNotice& FlushNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

FlushNotice* FlushNotice::default_instance_ = NULL;

FlushNotice* FlushNotice::New() const {
  return new FlushNotice;
}

void FlushNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    time_ = 0;
    queue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queue;
        break;
      }

      // optional int32 queue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_)));
          set_has_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // optional int32 queue = 3;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->queue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // optional int32 queue = 3;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->queue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 queue = 3;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushNotice::MergeFrom(const FlushNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_queue()) {
      set_queue(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushNotice::CopyFrom(const FlushNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlushNotice::Swap(FlushNotice* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(queue_, other->queue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushNotice_descriptor_;
  metadata.reflection = FlushNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlushMonster::kQueueFieldNumber;
const int FlushMonster::kMonsFieldNumber;
#endif  // !_MSC_VER

FlushMonster::FlushMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlushMonster::InitAsDefaultInstance() {
}

FlushMonster::FlushMonster(const FlushMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlushMonster::SharedCtor() {
  _cached_size_ = 0;
  queue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlushMonster::~FlushMonster() {
  SharedDtor();
}

void FlushMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlushMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlushMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlushMonster_descriptor_;
}

const FlushMonster& FlushMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

FlushMonster* FlushMonster::default_instance_ = NULL;

FlushMonster* FlushMonster::New() const {
  return new FlushMonster;
}

void FlushMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    queue_ = 0;
  }
  mons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlushMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queue_)));
          set_has_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mons;
        break;
      }

      // repeated .MoneyInstancePackage.MonsterAttr mons = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mons;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlushMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 queue = 1;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queue(), output);
  }

  // repeated .MoneyInstancePackage.MonsterAttr mons = 2;
  for (int i = 0; i < this->mons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mons(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlushMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 queue = 1;
  if (has_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queue(), target);
  }

  // repeated .MoneyInstancePackage.MonsterAttr mons = 2;
  for (int i = 0; i < this->mons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mons(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlushMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queue());
    }

  }
  // repeated .MoneyInstancePackage.MonsterAttr mons = 2;
  total_size += 1 * this->mons_size();
  for (int i = 0; i < this->mons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mons(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlushMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlushMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlushMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlushMonster::MergeFrom(const FlushMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  mons_.MergeFrom(from.mons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue()) {
      set_queue(from.queue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlushMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlushMonster::CopyFrom(const FlushMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlushMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mons_size(); i++) {
    if (!this->mons(i).IsInitialized()) return false;
  }
  return true;
}

void FlushMonster::Swap(FlushMonster* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    mons_.Swap(&other->mons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlushMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlushMonster_descriptor_;
  metadata.reflection = FlushMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterAttr::kIdFieldNumber;
const int MonsterAttr::kKeyFieldNumber;
const int MonsterAttr::kLevelFieldNumber;
const int MonsterAttr::kHpFieldNumber;
#endif  // !_MSC_VER

MonsterAttr::MonsterAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterAttr::InitAsDefaultInstance() {
}

MonsterAttr::MonsterAttr(const MonsterAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterAttr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  key_ = 0;
  level_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterAttr::~MonsterAttr() {
  SharedDtor();
}

void MonsterAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterAttr_descriptor_;
}

const MonsterAttr& MonsterAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

MonsterAttr* MonsterAttr::default_instance_ = NULL;

MonsterAttr* MonsterAttr::New() const {
  return new MonsterAttr;
}

void MonsterAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    key_ = 0;
    level_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // optional int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterAttr::MergeFrom(const MonsterAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterAttr::CopyFrom(const MonsterAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MonsterAttr::Swap(MonsterAttr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterAttr_descriptor_;
  metadata.reflection = MonsterAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerAttrAlter::kAttrFieldNumber;
#endif  // !_MSC_VER

TowerAttrAlter::TowerAttrAlter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerAttrAlter::InitAsDefaultInstance() {
}

TowerAttrAlter::TowerAttrAlter(const TowerAttrAlter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerAttrAlter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerAttrAlter::~TowerAttrAlter() {
  SharedDtor();
}

void TowerAttrAlter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerAttrAlter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerAttrAlter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerAttrAlter_descriptor_;
}

const TowerAttrAlter& TowerAttrAlter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

TowerAttrAlter* TowerAttrAlter::default_instance_ = NULL;

TowerAttrAlter* TowerAttrAlter::New() const {
  return new TowerAttrAlter;
}

void TowerAttrAlter::Clear() {
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerAttrAlter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MoneyInstancePackage.TowerAttr attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerAttrAlter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MoneyInstancePackage.TowerAttr attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerAttrAlter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MoneyInstancePackage.TowerAttr attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerAttrAlter::ByteSize() const {
  int total_size = 0;

  // repeated .MoneyInstancePackage.TowerAttr attr = 1;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerAttrAlter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerAttrAlter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerAttrAlter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerAttrAlter::MergeFrom(const TowerAttrAlter& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerAttrAlter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerAttrAlter::CopyFrom(const TowerAttrAlter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerAttrAlter::IsInitialized() const {

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  return true;
}

void TowerAttrAlter::Swap(TowerAttrAlter* other) {
  if (other != this) {
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerAttrAlter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerAttrAlter_descriptor_;
  metadata.reflection = TowerAttrAlter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerAttr::kIdFieldNumber;
const int TowerAttr::kValueFieldNumber;
#endif  // !_MSC_VER

TowerAttr::TowerAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerAttr::InitAsDefaultInstance() {
}

TowerAttr::TowerAttr(const TowerAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerAttr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerAttr::~TowerAttr() {
  SharedDtor();
}

void TowerAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerAttr_descriptor_;
}

const TowerAttr& TowerAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

TowerAttr* TowerAttr::default_instance_ = NULL;

TowerAttr* TowerAttr::New() const {
  return new TowerAttr;
}

void TowerAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerAttr::MergeFrom(const TowerAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerAttr::CopyFrom(const TowerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TowerAttr::Swap(TowerAttr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerAttr_descriptor_;
  metadata.reflection = TowerAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateAttrAlter::kAttrlistFieldNumber;
#endif  // !_MSC_VER

DuplicateAttrAlter::DuplicateAttrAlter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateAttrAlter::InitAsDefaultInstance() {
}

DuplicateAttrAlter::DuplicateAttrAlter(const DuplicateAttrAlter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateAttrAlter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateAttrAlter::~DuplicateAttrAlter() {
  SharedDtor();
}

void DuplicateAttrAlter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateAttrAlter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateAttrAlter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateAttrAlter_descriptor_;
}

const DuplicateAttrAlter& DuplicateAttrAlter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

DuplicateAttrAlter* DuplicateAttrAlter::default_instance_ = NULL;

DuplicateAttrAlter* DuplicateAttrAlter::New() const {
  return new DuplicateAttrAlter;
}

void DuplicateAttrAlter::Clear() {
  attrlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateAttrAlter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MoneyInstancePackage.DuplicateAttr attrlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attrlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attrlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateAttrAlter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MoneyInstancePackage.DuplicateAttr attrlist = 1;
  for (int i = 0; i < this->attrlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateAttrAlter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MoneyInstancePackage.DuplicateAttr attrlist = 1;
  for (int i = 0; i < this->attrlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateAttrAlter::ByteSize() const {
  int total_size = 0;

  // repeated .MoneyInstancePackage.DuplicateAttr attrlist = 1;
  total_size += 1 * this->attrlist_size();
  for (int i = 0; i < this->attrlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateAttrAlter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateAttrAlter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateAttrAlter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateAttrAlter::MergeFrom(const DuplicateAttrAlter& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrlist_.MergeFrom(from.attrlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateAttrAlter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateAttrAlter::CopyFrom(const DuplicateAttrAlter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateAttrAlter::IsInitialized() const {

  for (int i = 0; i < attrlist_size(); i++) {
    if (!this->attrlist(i).IsInitialized()) return false;
  }
  return true;
}

void DuplicateAttrAlter::Swap(DuplicateAttrAlter* other) {
  if (other != this) {
    attrlist_.Swap(&other->attrlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateAttrAlter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateAttrAlter_descriptor_;
  metadata.reflection = DuplicateAttrAlter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuplicateAttr::kIdFieldNumber;
const int DuplicateAttr::kValueFieldNumber;
#endif  // !_MSC_VER

DuplicateAttr::DuplicateAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DuplicateAttr::InitAsDefaultInstance() {
}

DuplicateAttr::DuplicateAttr(const DuplicateAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DuplicateAttr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuplicateAttr::~DuplicateAttr() {
  SharedDtor();
}

void DuplicateAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuplicateAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuplicateAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuplicateAttr_descriptor_;
}

const DuplicateAttr& DuplicateAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

DuplicateAttr* DuplicateAttr::default_instance_ = NULL;

DuplicateAttr* DuplicateAttr::New() const {
  return new DuplicateAttr;
}

void DuplicateAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuplicateAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DuplicateAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DuplicateAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DuplicateAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuplicateAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuplicateAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuplicateAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuplicateAttr::MergeFrom(const DuplicateAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuplicateAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuplicateAttr::CopyFrom(const DuplicateAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DuplicateAttr::Swap(DuplicateAttr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuplicateAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuplicateAttr_descriptor_;
  metadata.reflection = DuplicateAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyInstanceResult::kIdFieldNumber;
const int MoneyInstanceResult::kNameFieldNumber;
const int MoneyInstanceResult::kMoneyFieldNumber;
#endif  // !_MSC_VER

MoneyInstanceResult::MoneyInstanceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyInstanceResult::InitAsDefaultInstance() {
}

MoneyInstanceResult::MoneyInstanceResult(const MoneyInstanceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyInstanceResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyInstanceResult::~MoneyInstanceResult() {
  SharedDtor();
}

void MoneyInstanceResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MoneyInstanceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyInstanceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyInstanceResult_descriptor_;
}

const MoneyInstanceResult& MoneyInstanceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

MoneyInstanceResult* MoneyInstanceResult::default_instance_ = NULL;

MoneyInstanceResult* MoneyInstanceResult::New() const {
  return new MoneyInstanceResult;
}

void MoneyInstanceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    money_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyInstanceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyInstanceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyInstanceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyInstanceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyInstanceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyInstanceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyInstanceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyInstanceResult::MergeFrom(const MoneyInstanceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyInstanceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyInstanceResult::CopyFrom(const MoneyInstanceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyInstanceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MoneyInstanceResult::Swap(MoneyInstanceResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyInstanceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyInstanceResult_descriptor_;
  metadata.reflection = MoneyInstanceResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqRank::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqRank::ReqRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqRank::InitAsDefaultInstance() {
}

ReqRank::ReqRank(const ReqRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRank::~ReqRank() {
  SharedDtor();
}

void ReqRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRank_descriptor_;
}

const ReqRank& ReqRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

ReqRank* ReqRank::default_instance_ = NULL;

ReqRank* ReqRank::New() const {
  return new ReqRank;
}

void ReqRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqRank::MergeFrom(const ReqRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRank::CopyFrom(const ReqRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqRank::Swap(ReqRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRank_descriptor_;
  metadata.reflection = ReqRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckRank::kRanklistFieldNumber;
#endif  // !_MSC_VER

AckRank::AckRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckRank::InitAsDefaultInstance() {
}

AckRank::AckRank(const AckRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRank::~AckRank() {
  SharedDtor();
}

void AckRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRank_descriptor_;
}

const AckRank& AckRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MoneyInsatence_2fMoneyInsatence_2eproto();
  return *default_instance_;
}

AckRank* AckRank::default_instance_ = NULL;

AckRank* AckRank::New() const {
  return new AckRank;
}

void AckRank::Clear() {
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MoneyInstancePackage.RankData ranklist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranklist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranklist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MoneyInstancePackage.RankData ranklist = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MoneyInstancePackage.RankData ranklist = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckRank::ByteSize() const {
  int total_size = 0;

  // repeated .MoneyInstancePackage.RankData ranklist = 1;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckRank::MergeFrom(const AckRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRank::CopyFrom(const AckRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRank::IsInitialized() const {

  for (int i = 0; i < ranklist_size(); i++) {
    if (!this->ranklist(i).IsInitialized()) return false;
  }
  return true;
}

void AckRank::Swap(AckRank* other) {
  if (other != this) {
    ranklist_.Swap(&other->ranklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRank_descriptor_;
  metadata.reflection = AckRank_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MoneyInstancePackage

// @@protoc_insertion_point(global_scope)
