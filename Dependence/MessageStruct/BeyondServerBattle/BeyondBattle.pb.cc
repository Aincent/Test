// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeyondServerBattle/BeyondBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BeyondServerBattle/BeyondBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerBattle {

namespace {

const ::google::protobuf::Descriptor* AckBeyondBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBeyondBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqBeyondRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBeyondRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBeyondRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBeyondRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqBeyondPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBeyondPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchPlayerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchPlayerType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchPlayerReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchPlayerReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeyondBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeyondBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattlePlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattlePlayerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetBeyondReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetBeyondReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadPlayerMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadPlayerMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToWSMatchedPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToWSMatchedPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadPlayerIsMatched_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadPlayerIsMatched_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadPlayerCancelMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadPlayerCancelMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadCastPKResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadCastPKResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeyondPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeyondPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMatchPlayerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMatchPlayerType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientMatchPlayerType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientMatchPlayerType_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto() {
  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BeyondServerBattle/BeyondBattle.proto");
  GOOGLE_CHECK(file != NULL);
  AckBeyondBattle_descriptor_ = file->message_type(0);
  static const int AckBeyondBattle_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, single_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, cdtime_),
  };
  AckBeyondBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBeyondBattle_descriptor_,
      AckBeyondBattle::default_instance_,
      AckBeyondBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBeyondBattle));
  ClientReqBeyondRank_descriptor_ = file->message_type(1);
  static const int ClientReqBeyondRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBeyondRank, page_),
  };
  ClientReqBeyondRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBeyondRank_descriptor_,
      ClientReqBeyondRank::default_instance_,
      ClientReqBeyondRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBeyondRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBeyondRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBeyondRank));
  AckBeyondRank_descriptor_ = file->message_type(2);
  static const int AckBeyondRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondRank, binfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondRank, pinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondRank, myselfrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondRank, page_),
  };
  AckBeyondRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBeyondRank_descriptor_,
      AckBeyondRank::default_instance_,
      AckBeyondRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBeyondRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBeyondRank));
  BattleRankInfo_descriptor_ = file->message_type(3);
  static const int BattleRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, viplv_),
  };
  BattleRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleRankInfo_descriptor_,
      BattleRankInfo::default_instance_,
      BattleRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleRankInfo));
  RankPlayerInfo_descriptor_ = file->message_type(4);
  static const int RankPlayerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, suitrnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, mainequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, magicid_),
  };
  RankPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankPlayerInfo_descriptor_,
      RankPlayerInfo::default_instance_,
      RankPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankPlayerInfo));
  ClientReqBeyondPlayerInfo_descriptor_ = file->message_type(5);
  static const int ClientReqBeyondPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBeyondPlayerInfo, charid_),
  };
  ClientReqBeyondPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBeyondPlayerInfo_descriptor_,
      ClientReqBeyondPlayerInfo::default_instance_,
      ClientReqBeyondPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBeyondPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBeyondPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBeyondPlayerInfo));
  MatchPlayerType_descriptor_ = file->message_type(6);
  static const int MatchPlayerType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerType, charid_),
  };
  MatchPlayerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchPlayerType_descriptor_,
      MatchPlayerType::default_instance_,
      MatchPlayerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchPlayerType));
  MatchPlayerReturn_descriptor_ = file->message_type(7);
  static const int MatchPlayerReturn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerReturn, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerReturn, mapid_),
  };
  MatchPlayerReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchPlayerReturn_descriptor_,
      MatchPlayerReturn::default_instance_,
      MatchPlayerReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchPlayerReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchPlayerReturn));
  BeyondBattleResult_descriptor_ = file->message_type(8);
  static const int BeyondBattleResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondBattleResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondBattleResult, res_),
  };
  BeyondBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeyondBattleResult_descriptor_,
      BeyondBattleResult::default_instance_,
      BeyondBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeyondBattleResult));
  BattlePlayerResult_descriptor_ = file->message_type(9);
  static const int BattlePlayerResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, nowscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, score_),
  };
  BattlePlayerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattlePlayerResult_descriptor_,
      BattlePlayerResult::default_instance_,
      BattlePlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePlayerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattlePlayerResult));
  AckGetBeyondReward_descriptor_ = file->message_type(10);
  static const int AckGetBeyondReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetBeyondReward, ret_),
  };
  AckGetBeyondReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGetBeyondReward_descriptor_,
      AckGetBeyondReward::default_instance_,
      AckGetBeyondReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetBeyondReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetBeyondReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGetBeyondReward));
  BroadPlayerMatch_descriptor_ = file->message_type(11);
  static const int BroadPlayerMatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, type_),
  };
  BroadPlayerMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadPlayerMatch_descriptor_,
      BroadPlayerMatch::default_instance_,
      BroadPlayerMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadPlayerMatch));
  ToWSMatchedPlayer_descriptor_ = file->message_type(12);
  static const int ToWSMatchedPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToWSMatchedPlayer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToWSMatchedPlayer, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToWSMatchedPlayer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToWSMatchedPlayer, myself_),
  };
  ToWSMatchedPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToWSMatchedPlayer_descriptor_,
      ToWSMatchedPlayer::default_instance_,
      ToWSMatchedPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToWSMatchedPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToWSMatchedPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToWSMatchedPlayer));
  BroadPlayerIsMatched_descriptor_ = file->message_type(13);
  static const int BroadPlayerIsMatched_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerIsMatched, charid_),
  };
  BroadPlayerIsMatched_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadPlayerIsMatched_descriptor_,
      BroadPlayerIsMatched::default_instance_,
      BroadPlayerIsMatched_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerIsMatched, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerIsMatched, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadPlayerIsMatched));
  BroadPlayerCancelMatch_descriptor_ = file->message_type(14);
  static const int BroadPlayerCancelMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerCancelMatch, charid_),
  };
  BroadPlayerCancelMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadPlayerCancelMatch_descriptor_,
      BroadPlayerCancelMatch::default_instance_,
      BroadPlayerCancelMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerCancelMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadPlayerCancelMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadPlayerCancelMatch));
  BroadCastPKResult_descriptor_ = file->message_type(15);
  static const int BroadCastPKResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, info_),
  };
  BroadCastPKResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadCastPKResult_descriptor_,
      BroadCastPKResult::default_instance_,
      BroadCastPKResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCastPKResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadCastPKResult));
  BeyondPlayerInfo_descriptor_ = file->message_type(16);
  static const int BeyondPlayerInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, cleverpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, cleverair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, physicalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, patience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, baselucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, crackdownrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, baserte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, powermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, guildjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, pkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, country_),
  };
  BeyondPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeyondPlayerInfo_descriptor_,
      BeyondPlayerInfo::default_instance_,
      BeyondPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeyondPlayerInfo));
  ItemInfo_descriptor_ = file->message_type(17);
  static const int ItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, newattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, inlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, refineattrlv_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  ClientMatchPlayerType_descriptor_ = file->message_type(18);
  static const int ClientMatchPlayerType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMatchPlayerType, type_),
  };
  ClientMatchPlayerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMatchPlayerType_descriptor_,
      ClientMatchPlayerType::default_instance_,
      ClientMatchPlayerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMatchPlayerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMatchPlayerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMatchPlayerType));
  ToClientMatchPlayerType_descriptor_ = file->message_type(19);
  static const int ToClientMatchPlayerType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientMatchPlayerType, ret_),
  };
  ToClientMatchPlayerType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientMatchPlayerType_descriptor_,
      ToClientMatchPlayerType::default_instance_,
      ToClientMatchPlayerType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientMatchPlayerType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientMatchPlayerType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientMatchPlayerType));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBeyondBattle_descriptor_, &AckBeyondBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBeyondRank_descriptor_, &ClientReqBeyondRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBeyondRank_descriptor_, &AckBeyondRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleRankInfo_descriptor_, &BattleRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankPlayerInfo_descriptor_, &RankPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBeyondPlayerInfo_descriptor_, &ClientReqBeyondPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchPlayerType_descriptor_, &MatchPlayerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchPlayerReturn_descriptor_, &MatchPlayerReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeyondBattleResult_descriptor_, &BeyondBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattlePlayerResult_descriptor_, &BattlePlayerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGetBeyondReward_descriptor_, &AckGetBeyondReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadPlayerMatch_descriptor_, &BroadPlayerMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToWSMatchedPlayer_descriptor_, &ToWSMatchedPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadPlayerIsMatched_descriptor_, &BroadPlayerIsMatched::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadPlayerCancelMatch_descriptor_, &BroadPlayerCancelMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadCastPKResult_descriptor_, &BroadCastPKResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeyondPlayerInfo_descriptor_, &BeyondPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMatchPlayerType_descriptor_, &ClientMatchPlayerType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientMatchPlayerType_descriptor_, &ToClientMatchPlayerType::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto() {
  delete AckBeyondBattle::default_instance_;
  delete AckBeyondBattle_reflection_;
  delete ClientReqBeyondRank::default_instance_;
  delete ClientReqBeyondRank_reflection_;
  delete AckBeyondRank::default_instance_;
  delete AckBeyondRank_reflection_;
  delete BattleRankInfo::default_instance_;
  delete BattleRankInfo_reflection_;
  delete RankPlayerInfo::default_instance_;
  delete RankPlayerInfo_reflection_;
  delete ClientReqBeyondPlayerInfo::default_instance_;
  delete ClientReqBeyondPlayerInfo_reflection_;
  delete MatchPlayerType::default_instance_;
  delete MatchPlayerType_reflection_;
  delete MatchPlayerReturn::default_instance_;
  delete MatchPlayerReturn_reflection_;
  delete BeyondBattleResult::default_instance_;
  delete BeyondBattleResult_reflection_;
  delete BattlePlayerResult::default_instance_;
  delete BattlePlayerResult_reflection_;
  delete AckGetBeyondReward::default_instance_;
  delete AckGetBeyondReward_reflection_;
  delete BroadPlayerMatch::default_instance_;
  delete BroadPlayerMatch_reflection_;
  delete ToWSMatchedPlayer::default_instance_;
  delete ToWSMatchedPlayer_reflection_;
  delete BroadPlayerIsMatched::default_instance_;
  delete BroadPlayerIsMatched_reflection_;
  delete BroadPlayerCancelMatch::default_instance_;
  delete BroadPlayerCancelMatch_reflection_;
  delete BroadCastPKResult::default_instance_;
  delete BroadCastPKResult_reflection_;
  delete BeyondPlayerInfo::default_instance_;
  delete BeyondPlayerInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete ClientMatchPlayerType::default_instance_;
  delete ClientMatchPlayerType_reflection_;
  delete ToClientMatchPlayerType::default_instance_;
  delete ToClientMatchPlayerType_reflection_;
}

void protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%BeyondServerBattle/BeyondBattle.proto\022"
    "\014ServerBattle\"n\n\017AckBeyondBattle\022\r\n\005scor"
    "e\030\001 \002(\005\022\r\n\005count\030\002 \001(\005\022\016\n\006reward\030\003 \001(\005\022\016"
    "\n\006single\030\004 \001(\005\022\r\n\005group\030\005 \001(\005\022\016\n\006cdtime\030"
    "\006 \001(\003\"#\n\023ClientReqBeyondRank\022\014\n\004page\030\001 \002"
    "(\005\"\213\001\n\rAckBeyondRank\022+\n\005binfo\030\001 \003(\0132\034.Se"
    "rverBattle.BattleRankInfo\022+\n\005pinfo\030\002 \001(\013"
    "2\034.ServerBattle.RankPlayerInfo\022\022\n\nmyself"
    "rank\030\003 \001(\005\022\014\n\004page\030\004 \001(\005\"n\n\016BattleRankIn"
    "fo\022\014\n\004rank\030\001 \002(\005\022\016\n\006charid\030\002 \001(\003\022\014\n\004name"
    "\030\003 \001(\t\022\022\n\nprofession\030\004 \001(\005\022\r\n\005score\030\005 \001("
    "\005\022\r\n\005viplv\030\006 \001(\005\"r\n\016RankPlayerInfo\022\017\n\007su"
    "itrnt\030\001 \001(\005\022\021\n\tmainEquip\030\002 \001(\005\022\017\n\007costum"
    "e\030\003 \001(\005\022\r\n\005fight\030\004 \001(\005\022\013\n\003sex\030\005 \001(\010\022\017\n\007m"
    "agicid\030\006 \001(\005\"+\n\031ClientReqBeyondPlayerInf"
    "o\022\016\n\006charid\030\001 \002(\003\"/\n\017MatchPlayerType\022\014\n\004"
    "type\030\001 \002(\005\022\016\n\006charid\030\002 \001(\003\"/\n\021MatchPlaye"
    "rReturn\022\013\n\003ret\030\001 \002(\005\022\r\n\005mapid\030\002 \001(\003\"P\n\022B"
    "eyondBattleResult\022\013\n\003ret\030\001 \002(\005\022-\n\003res\030\002 "
    "\003(\0132 .ServerBattle.BattlePlayerResult\"c\n"
    "\022BattlePlayerResult\022\016\n\006charid\030\001 \002(\003\022\014\n\004n"
    "ame\030\002 \001(\t\022\016\n\006attack\030\003 \001(\003\022\020\n\010nowscore\030\004 "
    "\001(\005\022\r\n\005score\030\005 \001(\005\"!\n\022AckGetBeyondReward"
    "\022\013\n\003ret\030\001 \002(\005\"Z\n\020BroadPlayerMatch\022\016\n\006cha"
    "rid\030\001 \002(\003\022\n\n\002lv\030\002 \001(\005\022\r\n\005fight\030\003 \001(\005\022\r\n\005"
    "score\030\004 \001(\005\022\014\n\004type\030\005 \001(\005\"O\n\021ToWSMatched"
    "Player\022\016\n\006charid\030\001 \002(\003\022\016\n\006target\030\002 \001(\005\022\n"
    "\n\002id\030\003 \001(\005\022\016\n\006myself\030\004 \001(\005\"&\n\024BroadPlaye"
    "rIsMatched\022\016\n\006charid\030\001 \002(\003\"(\n\026BroadPlaye"
    "rCancelMatch\022\016\n\006charid\030\001 \002(\003\"\206\001\n\021BroadCa"
    "stPKResult\022\016\n\006charid\030\001 \002(\003\022\r\n\005score\030\002 \001("
    "\005\022\020\n\010charname\030\003 \001(\t\022\022\n\nprofession\030\004 \001(\005\022"
    ",\n\004info\030\005 \001(\0132\036.ServerBattle.BeyondPlaye"
    "rInfo\"\225\005\n\020BeyondPlayerInfo\022\013\n\003sex\030\001 \001(\005\022"
    "\n\n\002hp\030\002 \001(\005\022\r\n\005hpmax\030\003 \001(\005\022\n\n\002mp\030\004 \001(\005\022\r"
    "\n\005mpmax\030\005 \001(\005\022\020\n\010strength\030\006 \001(\005\022\023\n\013cleve"
    "rpower\030\007 \001(\005\022\021\n\tcleverair\030\010 \001(\005\022\025\n\rphysi"
    "calpower\030\t \001(\005\022\020\n\010patience\030\n \001(\005\022\017\n\007agil"
    "ity\030\013 \001(\005\022\r\n\005power\030\014 \001(\005\022\021\n\tphyattack\030\r "
    "\001(\005\022\024\n\014phyattackmax\030\016 \001(\005\022\022\n\nphydefence\030"
    "\017 \001(\005\022\023\n\013magicattack\030\020 \001(\005\022\026\n\016magicattac"
    "kmax\030\021 \001(\005\022\024\n\014magicdefence\030\022 \001(\005\022\017\n\007hitr"
    "ate\030\023 \001(\005\022\021\n\tavoidrate\030\024 \001(\005\022\021\n\tbaseluck"
    "y\030\025 \001(\005\022\025\n\rcrackdownrate\030\026 \001(\005\022\017\n\007basert"
    "e\030\027 \001(\005\022%\n\005equip\030\030 \003(\0132\026.ServerBattle.It"
    "emInfo\022\r\n\005fight\030\031 \001(\005\022\020\n\010powermax\030\032 \001(\005\022"
    "\013\n\003exp\030\033 \001(\003\022\n\n\002lv\030\034 \001(\005\022\024\n\014magicequipid"
    "\030\035 \001(\005\022\021\n\tguildname\030\036 \001(\t\022\020\n\010guildjob\030\037 "
    "\001(\005\022\017\n\007titleid\030  \001(\005\022\017\n\007pkcount\030! \001(\005\022\r\n"
    "\005viplv\030\" \001(\005\022\017\n\007country\030# \001(\005\"\214\001\n\010ItemIn"
    "fo\022\n\n\002id\030\001 \002(\005\022\014\n\004flag\030\002 \001(\r\022\017\n\007newattr\030"
    "\003 \003(\r\022\017\n\007stoneid\030\004 \003(\005\022\017\n\007endtime\030\005 \001(\003\022"
    "\013\n\003num\030\006 \001(\005\022\020\n\010inlayPos\030\007 \003(\005\022\024\n\014refine"
    "AttrLv\030\010 \003(\r\"%\n\025ClientMatchPlayerType\022\014\n"
    "\004type\030\001 \002(\005\"&\n\027ToClientMatchPlayerType\022\013"
    "\n\003ret\030\001 \002(\005", 2211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BeyondServerBattle/BeyondBattle.proto", &protobuf_RegisterTypes);
  AckBeyondBattle::default_instance_ = new AckBeyondBattle();
  ClientReqBeyondRank::default_instance_ = new ClientReqBeyondRank();
  AckBeyondRank::default_instance_ = new AckBeyondRank();
  BattleRankInfo::default_instance_ = new BattleRankInfo();
  RankPlayerInfo::default_instance_ = new RankPlayerInfo();
  ClientReqBeyondPlayerInfo::default_instance_ = new ClientReqBeyondPlayerInfo();
  MatchPlayerType::default_instance_ = new MatchPlayerType();
  MatchPlayerReturn::default_instance_ = new MatchPlayerReturn();
  BeyondBattleResult::default_instance_ = new BeyondBattleResult();
  BattlePlayerResult::default_instance_ = new BattlePlayerResult();
  AckGetBeyondReward::default_instance_ = new AckGetBeyondReward();
  BroadPlayerMatch::default_instance_ = new BroadPlayerMatch();
  ToWSMatchedPlayer::default_instance_ = new ToWSMatchedPlayer();
  BroadPlayerIsMatched::default_instance_ = new BroadPlayerIsMatched();
  BroadPlayerCancelMatch::default_instance_ = new BroadPlayerCancelMatch();
  BroadCastPKResult::default_instance_ = new BroadCastPKResult();
  BeyondPlayerInfo::default_instance_ = new BeyondPlayerInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  ClientMatchPlayerType::default_instance_ = new ClientMatchPlayerType();
  ToClientMatchPlayerType::default_instance_ = new ToClientMatchPlayerType();
  AckBeyondBattle::default_instance_->InitAsDefaultInstance();
  ClientReqBeyondRank::default_instance_->InitAsDefaultInstance();
  AckBeyondRank::default_instance_->InitAsDefaultInstance();
  BattleRankInfo::default_instance_->InitAsDefaultInstance();
  RankPlayerInfo::default_instance_->InitAsDefaultInstance();
  ClientReqBeyondPlayerInfo::default_instance_->InitAsDefaultInstance();
  MatchPlayerType::default_instance_->InitAsDefaultInstance();
  MatchPlayerReturn::default_instance_->InitAsDefaultInstance();
  BeyondBattleResult::default_instance_->InitAsDefaultInstance();
  BattlePlayerResult::default_instance_->InitAsDefaultInstance();
  AckGetBeyondReward::default_instance_->InitAsDefaultInstance();
  BroadPlayerMatch::default_instance_->InitAsDefaultInstance();
  ToWSMatchedPlayer::default_instance_->InitAsDefaultInstance();
  BroadPlayerIsMatched::default_instance_->InitAsDefaultInstance();
  BroadPlayerCancelMatch::default_instance_->InitAsDefaultInstance();
  BroadCastPKResult::default_instance_->InitAsDefaultInstance();
  BeyondPlayerInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ClientMatchPlayerType::default_instance_->InitAsDefaultInstance();
  ToClientMatchPlayerType::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BeyondServerBattle_2fBeyondBattle_2eproto {
  StaticDescriptorInitializer_BeyondServerBattle_2fBeyondBattle_2eproto() {
    protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  }
} static_descriptor_initializer_BeyondServerBattle_2fBeyondBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckBeyondBattle::kScoreFieldNumber;
const int AckBeyondBattle::kCountFieldNumber;
const int AckBeyondBattle::kRewardFieldNumber;
const int AckBeyondBattle::kSingleFieldNumber;
const int AckBeyondBattle::kGroupFieldNumber;
const int AckBeyondBattle::kCdtimeFieldNumber;
#endif  // !_MSC_VER

AckBeyondBattle::AckBeyondBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBeyondBattle::InitAsDefaultInstance() {
}

AckBeyondBattle::AckBeyondBattle(const AckBeyondBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBeyondBattle::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  count_ = 0;
  reward_ = 0;
  single_ = 0;
  group_ = 0;
  cdtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBeyondBattle::~AckBeyondBattle() {
  SharedDtor();
}

void AckBeyondBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBeyondBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBeyondBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBeyondBattle_descriptor_;
}

const AckBeyondBattle& AckBeyondBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

AckBeyondBattle* AckBeyondBattle::default_instance_ = NULL;

AckBeyondBattle* AckBeyondBattle::New() const {
  return new AckBeyondBattle;
}

void AckBeyondBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    count_ = 0;
    reward_ = 0;
    single_ = 0;
    group_ = 0;
    cdtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBeyondBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int32 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_single;
        break;
      }

      // optional int32 single = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_)));
          set_has_single();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional int32 group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cdtime;
        break;
      }

      // optional int64 cdtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cdtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBeyondBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward(), output);
  }

  // optional int32 single = 4;
  if (has_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->single(), output);
  }

  // optional int32 group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group(), output);
  }

  // optional int64 cdtime = 6;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBeyondBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward(), target);
  }

  // optional int32 single = 4;
  if (has_single()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->single(), target);
  }

  // optional int32 group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group(), target);
  }

  // optional int64 cdtime = 6;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBeyondBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 single = 4;
    if (has_single()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single());
    }

    // optional int32 group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int64 cdtime = 6;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBeyondBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBeyondBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBeyondBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBeyondBattle::MergeFrom(const AckBeyondBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_single()) {
      set_single(from.single());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBeyondBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBeyondBattle::CopyFrom(const AckBeyondBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBeyondBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckBeyondBattle::Swap(AckBeyondBattle* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(count_, other->count_);
    std::swap(reward_, other->reward_);
    std::swap(single_, other->single_);
    std::swap(group_, other->group_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBeyondBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBeyondBattle_descriptor_;
  metadata.reflection = AckBeyondBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqBeyondRank::kPageFieldNumber;
#endif  // !_MSC_VER

ClientReqBeyondRank::ClientReqBeyondRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBeyondRank::InitAsDefaultInstance() {
}

ClientReqBeyondRank::ClientReqBeyondRank(const ClientReqBeyondRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBeyondRank::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBeyondRank::~ClientReqBeyondRank() {
  SharedDtor();
}

void ClientReqBeyondRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBeyondRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBeyondRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBeyondRank_descriptor_;
}

const ClientReqBeyondRank& ClientReqBeyondRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

ClientReqBeyondRank* ClientReqBeyondRank::default_instance_ = NULL;

ClientReqBeyondRank* ClientReqBeyondRank::New() const {
  return new ClientReqBeyondRank;
}

void ClientReqBeyondRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBeyondRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBeyondRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBeyondRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBeyondRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBeyondRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBeyondRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBeyondRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBeyondRank::MergeFrom(const ClientReqBeyondRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBeyondRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBeyondRank::CopyFrom(const ClientReqBeyondRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBeyondRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqBeyondRank::Swap(ClientReqBeyondRank* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBeyondRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBeyondRank_descriptor_;
  metadata.reflection = ClientReqBeyondRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBeyondRank::kBinfoFieldNumber;
const int AckBeyondRank::kPinfoFieldNumber;
const int AckBeyondRank::kMyselfrankFieldNumber;
const int AckBeyondRank::kPageFieldNumber;
#endif  // !_MSC_VER

AckBeyondRank::AckBeyondRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBeyondRank::InitAsDefaultInstance() {
  pinfo_ = const_cast< ::ServerBattle::RankPlayerInfo*>(&::ServerBattle::RankPlayerInfo::default_instance());
}

AckBeyondRank::AckBeyondRank(const AckBeyondRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBeyondRank::SharedCtor() {
  _cached_size_ = 0;
  pinfo_ = NULL;
  myselfrank_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBeyondRank::~AckBeyondRank() {
  SharedDtor();
}

void AckBeyondRank::SharedDtor() {
  if (this != default_instance_) {
    delete pinfo_;
  }
}

void AckBeyondRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBeyondRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBeyondRank_descriptor_;
}

const AckBeyondRank& AckBeyondRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

AckBeyondRank* AckBeyondRank::default_instance_ = NULL;

AckBeyondRank* AckBeyondRank::New() const {
  return new AckBeyondRank;
}

void AckBeyondRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_pinfo()) {
      if (pinfo_ != NULL) pinfo_->::ServerBattle::RankPlayerInfo::Clear();
    }
    myselfrank_ = 0;
    page_ = 0;
  }
  binfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBeyondRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerBattle.BattleRankInfo binfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_binfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_binfo;
        if (input->ExpectTag(18)) goto parse_pinfo;
        break;
      }

      // optional .ServerBattle.RankPlayerInfo pinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myselfrank;
        break;
      }

      // optional int32 myselfrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myselfrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myselfrank_)));
          set_has_myselfrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page;
        break;
      }

      // optional int32 page = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBeyondRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerBattle.BattleRankInfo binfo = 1;
  for (int i = 0; i < this->binfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->binfo(i), output);
  }

  // optional .ServerBattle.RankPlayerInfo pinfo = 2;
  if (has_pinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pinfo(), output);
  }

  // optional int32 myselfrank = 3;
  if (has_myselfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->myselfrank(), output);
  }

  // optional int32 page = 4;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBeyondRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerBattle.BattleRankInfo binfo = 1;
  for (int i = 0; i < this->binfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->binfo(i), target);
  }

  // optional .ServerBattle.RankPlayerInfo pinfo = 2;
  if (has_pinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pinfo(), target);
  }

  // optional int32 myselfrank = 3;
  if (has_myselfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->myselfrank(), target);
  }

  // optional int32 page = 4;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBeyondRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .ServerBattle.RankPlayerInfo pinfo = 2;
    if (has_pinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pinfo());
    }

    // optional int32 myselfrank = 3;
    if (has_myselfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myselfrank());
    }

    // optional int32 page = 4;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  // repeated .ServerBattle.BattleRankInfo binfo = 1;
  total_size += 1 * this->binfo_size();
  for (int i = 0; i < this->binfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->binfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBeyondRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBeyondRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBeyondRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBeyondRank::MergeFrom(const AckBeyondRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  binfo_.MergeFrom(from.binfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pinfo()) {
      mutable_pinfo()->::ServerBattle::RankPlayerInfo::MergeFrom(from.pinfo());
    }
    if (from.has_myselfrank()) {
      set_myselfrank(from.myselfrank());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBeyondRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBeyondRank::CopyFrom(const AckBeyondRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBeyondRank::IsInitialized() const {

  for (int i = 0; i < binfo_size(); i++) {
    if (!this->binfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckBeyondRank::Swap(AckBeyondRank* other) {
  if (other != this) {
    binfo_.Swap(&other->binfo_);
    std::swap(pinfo_, other->pinfo_);
    std::swap(myselfrank_, other->myselfrank_);
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBeyondRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBeyondRank_descriptor_;
  metadata.reflection = AckBeyondRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleRankInfo::kRankFieldNumber;
const int BattleRankInfo::kCharidFieldNumber;
const int BattleRankInfo::kNameFieldNumber;
const int BattleRankInfo::kProfessionFieldNumber;
const int BattleRankInfo::kScoreFieldNumber;
const int BattleRankInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

BattleRankInfo::BattleRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleRankInfo::InitAsDefaultInstance() {
}

BattleRankInfo::BattleRankInfo(const BattleRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  score_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleRankInfo::~BattleRankInfo() {
  SharedDtor();
}

void BattleRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BattleRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleRankInfo_descriptor_;
}

const BattleRankInfo& BattleRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BattleRankInfo* BattleRankInfo::default_instance_ = NULL;

BattleRankInfo* BattleRankInfo::New() const {
  return new BattleRankInfo;
}

void BattleRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profession_ = 0;
    score_ = 0;
    viplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional int32 viplv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional int32 viplv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 viplv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleRankInfo::MergeFrom(const BattleRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleRankInfo::CopyFrom(const BattleRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BattleRankInfo::Swap(BattleRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(score_, other->score_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleRankInfo_descriptor_;
  metadata.reflection = BattleRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankPlayerInfo::kSuitrntFieldNumber;
const int RankPlayerInfo::kMainEquipFieldNumber;
const int RankPlayerInfo::kCostumeFieldNumber;
const int RankPlayerInfo::kFightFieldNumber;
const int RankPlayerInfo::kSexFieldNumber;
const int RankPlayerInfo::kMagicidFieldNumber;
#endif  // !_MSC_VER

RankPlayerInfo::RankPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankPlayerInfo::InitAsDefaultInstance() {
}

RankPlayerInfo::RankPlayerInfo(const RankPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  suitrnt_ = 0;
  mainequip_ = 0;
  costume_ = 0;
  fight_ = 0;
  sex_ = false;
  magicid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankPlayerInfo::~RankPlayerInfo() {
  SharedDtor();
}

void RankPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankPlayerInfo_descriptor_;
}

const RankPlayerInfo& RankPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

RankPlayerInfo* RankPlayerInfo::default_instance_ = NULL;

RankPlayerInfo* RankPlayerInfo::New() const {
  return new RankPlayerInfo;
}

void RankPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suitrnt_ = 0;
    mainequip_ = 0;
    costume_ = 0;
    fight_ = 0;
    sex_ = false;
    magicid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 suitrnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitrnt_)));
          set_has_suitrnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mainEquip;
        break;
      }

      // optional int32 mainEquip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainequip_)));
          set_has_mainequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costume;
        break;
      }

      // optional int32 costume = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costume_)));
          set_has_costume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional int32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional bool sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magicid;
        break;
      }

      // optional int32 magicid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicid_)));
          set_has_magicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 suitrnt = 1;
  if (has_suitrnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->suitrnt(), output);
  }

  // optional int32 mainEquip = 2;
  if (has_mainequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mainequip(), output);
  }

  // optional int32 costume = 3;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->costume(), output);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight(), output);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sex(), output);
  }

  // optional int32 magicid = 6;
  if (has_magicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->magicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 suitrnt = 1;
  if (has_suitrnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->suitrnt(), target);
  }

  // optional int32 mainEquip = 2;
  if (has_mainequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mainequip(), target);
  }

  // optional int32 costume = 3;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->costume(), target);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight(), target);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sex(), target);
  }

  // optional int32 magicid = 6;
  if (has_magicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->magicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 suitrnt = 1;
    if (has_suitrnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitrnt());
    }

    // optional int32 mainEquip = 2;
    if (has_mainequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainequip());
    }

    // optional int32 costume = 3;
    if (has_costume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costume());
    }

    // optional int32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional bool sex = 5;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 magicid = 6;
    if (has_magicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankPlayerInfo::MergeFrom(const RankPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suitrnt()) {
      set_suitrnt(from.suitrnt());
    }
    if (from.has_mainequip()) {
      set_mainequip(from.mainequip());
    }
    if (from.has_costume()) {
      set_costume(from.costume());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_magicid()) {
      set_magicid(from.magicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankPlayerInfo::CopyFrom(const RankPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankPlayerInfo::IsInitialized() const {

  return true;
}

void RankPlayerInfo::Swap(RankPlayerInfo* other) {
  if (other != this) {
    std::swap(suitrnt_, other->suitrnt_);
    std::swap(mainequip_, other->mainequip_);
    std::swap(costume_, other->costume_);
    std::swap(fight_, other->fight_);
    std::swap(sex_, other->sex_);
    std::swap(magicid_, other->magicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankPlayerInfo_descriptor_;
  metadata.reflection = RankPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqBeyondPlayerInfo::kCharidFieldNumber;
#endif  // !_MSC_VER

ClientReqBeyondPlayerInfo::ClientReqBeyondPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBeyondPlayerInfo::InitAsDefaultInstance() {
}

ClientReqBeyondPlayerInfo::ClientReqBeyondPlayerInfo(const ClientReqBeyondPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBeyondPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBeyondPlayerInfo::~ClientReqBeyondPlayerInfo() {
  SharedDtor();
}

void ClientReqBeyondPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBeyondPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBeyondPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBeyondPlayerInfo_descriptor_;
}

const ClientReqBeyondPlayerInfo& ClientReqBeyondPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

ClientReqBeyondPlayerInfo* ClientReqBeyondPlayerInfo::default_instance_ = NULL;

ClientReqBeyondPlayerInfo* ClientReqBeyondPlayerInfo::New() const {
  return new ClientReqBeyondPlayerInfo;
}

void ClientReqBeyondPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBeyondPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBeyondPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBeyondPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBeyondPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBeyondPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBeyondPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBeyondPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBeyondPlayerInfo::MergeFrom(const ClientReqBeyondPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBeyondPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBeyondPlayerInfo::CopyFrom(const ClientReqBeyondPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBeyondPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqBeyondPlayerInfo::Swap(ClientReqBeyondPlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBeyondPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBeyondPlayerInfo_descriptor_;
  metadata.reflection = ClientReqBeyondPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchPlayerType::kTypeFieldNumber;
const int MatchPlayerType::kCharidFieldNumber;
#endif  // !_MSC_VER

MatchPlayerType::MatchPlayerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchPlayerType::InitAsDefaultInstance() {
}

MatchPlayerType::MatchPlayerType(const MatchPlayerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchPlayerType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchPlayerType::~MatchPlayerType() {
  SharedDtor();
}

void MatchPlayerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchPlayerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchPlayerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchPlayerType_descriptor_;
}

const MatchPlayerType& MatchPlayerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

MatchPlayerType* MatchPlayerType::default_instance_ = NULL;

MatchPlayerType* MatchPlayerType::New() const {
  return new MatchPlayerType;
}

void MatchPlayerType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchPlayerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchPlayerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchPlayerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchPlayerType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchPlayerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchPlayerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchPlayerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchPlayerType::MergeFrom(const MatchPlayerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchPlayerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPlayerType::CopyFrom(const MatchPlayerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPlayerType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MatchPlayerType::Swap(MatchPlayerType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchPlayerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchPlayerType_descriptor_;
  metadata.reflection = MatchPlayerType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchPlayerReturn::kRetFieldNumber;
const int MatchPlayerReturn::kMapidFieldNumber;
#endif  // !_MSC_VER

MatchPlayerReturn::MatchPlayerReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchPlayerReturn::InitAsDefaultInstance() {
}

MatchPlayerReturn::MatchPlayerReturn(const MatchPlayerReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchPlayerReturn::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchPlayerReturn::~MatchPlayerReturn() {
  SharedDtor();
}

void MatchPlayerReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchPlayerReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchPlayerReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchPlayerReturn_descriptor_;
}

const MatchPlayerReturn& MatchPlayerReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

MatchPlayerReturn* MatchPlayerReturn::default_instance_ = NULL;

MatchPlayerReturn* MatchPlayerReturn::New() const {
  return new MatchPlayerReturn;
}

void MatchPlayerReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchPlayerReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchPlayerReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchPlayerReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchPlayerReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchPlayerReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchPlayerReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchPlayerReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchPlayerReturn::MergeFrom(const MatchPlayerReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchPlayerReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchPlayerReturn::CopyFrom(const MatchPlayerReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchPlayerReturn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MatchPlayerReturn::Swap(MatchPlayerReturn* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchPlayerReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchPlayerReturn_descriptor_;
  metadata.reflection = MatchPlayerReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeyondBattleResult::kRetFieldNumber;
const int BeyondBattleResult::kResFieldNumber;
#endif  // !_MSC_VER

BeyondBattleResult::BeyondBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeyondBattleResult::InitAsDefaultInstance() {
}

BeyondBattleResult::BeyondBattleResult(const BeyondBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeyondBattleResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeyondBattleResult::~BeyondBattleResult() {
  SharedDtor();
}

void BeyondBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeyondBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeyondBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeyondBattleResult_descriptor_;
}

const BeyondBattleResult& BeyondBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BeyondBattleResult* BeyondBattleResult::default_instance_ = NULL;

BeyondBattleResult* BeyondBattleResult::New() const {
  return new BeyondBattleResult;
}

void BeyondBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  res_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeyondBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // repeated .ServerBattle.BattlePlayerResult res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeyondBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .ServerBattle.BattlePlayerResult res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->res(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeyondBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .ServerBattle.BattlePlayerResult res = 2;
  for (int i = 0; i < this->res_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->res(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeyondBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .ServerBattle.BattlePlayerResult res = 2;
  total_size += 1 * this->res_size();
  for (int i = 0; i < this->res_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->res(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeyondBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeyondBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeyondBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeyondBattleResult::MergeFrom(const BeyondBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  res_.MergeFrom(from.res_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeyondBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeyondBattleResult::CopyFrom(const BeyondBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeyondBattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < res_size(); i++) {
    if (!this->res(i).IsInitialized()) return false;
  }
  return true;
}

void BeyondBattleResult::Swap(BeyondBattleResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    res_.Swap(&other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeyondBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeyondBattleResult_descriptor_;
  metadata.reflection = BeyondBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattlePlayerResult::kCharidFieldNumber;
const int BattlePlayerResult::kNameFieldNumber;
const int BattlePlayerResult::kAttackFieldNumber;
const int BattlePlayerResult::kNowscoreFieldNumber;
const int BattlePlayerResult::kScoreFieldNumber;
#endif  // !_MSC_VER

BattlePlayerResult::BattlePlayerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattlePlayerResult::InitAsDefaultInstance() {
}

BattlePlayerResult::BattlePlayerResult(const BattlePlayerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattlePlayerResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attack_ = GOOGLE_LONGLONG(0);
  nowscore_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattlePlayerResult::~BattlePlayerResult() {
  SharedDtor();
}

void BattlePlayerResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BattlePlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattlePlayerResult_descriptor_;
}

const BattlePlayerResult& BattlePlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BattlePlayerResult* BattlePlayerResult::default_instance_ = NULL;

BattlePlayerResult* BattlePlayerResult::New() const {
  return new BattlePlayerResult;
}

void BattlePlayerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    attack_ = GOOGLE_LONGLONG(0);
    nowscore_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattlePlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attack;
        break;
      }

      // optional int64 attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nowscore;
        break;
      }

      // optional int32 nowscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nowscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nowscore_)));
          set_has_nowscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattlePlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int64 attack = 3;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->attack(), output);
  }

  // optional int32 nowscore = 4;
  if (has_nowscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nowscore(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattlePlayerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int64 attack = 3;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->attack(), target);
  }

  // optional int32 nowscore = 4;
  if (has_nowscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nowscore(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattlePlayerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 attack = 3;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->attack());
    }

    // optional int32 nowscore = 4;
    if (has_nowscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nowscore());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattlePlayerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattlePlayerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattlePlayerResult::MergeFrom(const BattlePlayerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_nowscore()) {
      set_nowscore(from.nowscore());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattlePlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePlayerResult::CopyFrom(const BattlePlayerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePlayerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BattlePlayerResult::Swap(BattlePlayerResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(attack_, other->attack_);
    std::swap(nowscore_, other->nowscore_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattlePlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattlePlayerResult_descriptor_;
  metadata.reflection = BattlePlayerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGetBeyondReward::kRetFieldNumber;
#endif  // !_MSC_VER

AckGetBeyondReward::AckGetBeyondReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGetBeyondReward::InitAsDefaultInstance() {
}

AckGetBeyondReward::AckGetBeyondReward(const AckGetBeyondReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGetBeyondReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetBeyondReward::~AckGetBeyondReward() {
  SharedDtor();
}

void AckGetBeyondReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetBeyondReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetBeyondReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetBeyondReward_descriptor_;
}

const AckGetBeyondReward& AckGetBeyondReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

AckGetBeyondReward* AckGetBeyondReward::default_instance_ = NULL;

AckGetBeyondReward* AckGetBeyondReward::New() const {
  return new AckGetBeyondReward;
}

void AckGetBeyondReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGetBeyondReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGetBeyondReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGetBeyondReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGetBeyondReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetBeyondReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGetBeyondReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGetBeyondReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGetBeyondReward::MergeFrom(const AckGetBeyondReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGetBeyondReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetBeyondReward::CopyFrom(const AckGetBeyondReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetBeyondReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGetBeyondReward::Swap(AckGetBeyondReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGetBeyondReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetBeyondReward_descriptor_;
  metadata.reflection = AckGetBeyondReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadPlayerMatch::kCharidFieldNumber;
const int BroadPlayerMatch::kLvFieldNumber;
const int BroadPlayerMatch::kFightFieldNumber;
const int BroadPlayerMatch::kScoreFieldNumber;
const int BroadPlayerMatch::kTypeFieldNumber;
#endif  // !_MSC_VER

BroadPlayerMatch::BroadPlayerMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadPlayerMatch::InitAsDefaultInstance() {
}

BroadPlayerMatch::BroadPlayerMatch(const BroadPlayerMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadPlayerMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  fight_ = 0;
  score_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadPlayerMatch::~BroadPlayerMatch() {
  SharedDtor();
}

void BroadPlayerMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadPlayerMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadPlayerMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadPlayerMatch_descriptor_;
}

const BroadPlayerMatch& BroadPlayerMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BroadPlayerMatch* BroadPlayerMatch::default_instance_ = NULL;

BroadPlayerMatch* BroadPlayerMatch::New() const {
  return new BroadPlayerMatch;
}

void BroadPlayerMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    fight_ = 0;
    score_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadPlayerMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional int32 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadPlayerMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadPlayerMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadPlayerMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadPlayerMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadPlayerMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadPlayerMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadPlayerMatch::MergeFrom(const BroadPlayerMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadPlayerMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadPlayerMatch::CopyFrom(const BroadPlayerMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadPlayerMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadPlayerMatch::Swap(BroadPlayerMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lv_, other->lv_);
    std::swap(fight_, other->fight_);
    std::swap(score_, other->score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadPlayerMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadPlayerMatch_descriptor_;
  metadata.reflection = BroadPlayerMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToWSMatchedPlayer::kCharidFieldNumber;
const int ToWSMatchedPlayer::kTargetFieldNumber;
const int ToWSMatchedPlayer::kIdFieldNumber;
const int ToWSMatchedPlayer::kMyselfFieldNumber;
#endif  // !_MSC_VER

ToWSMatchedPlayer::ToWSMatchedPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToWSMatchedPlayer::InitAsDefaultInstance() {
}

ToWSMatchedPlayer::ToWSMatchedPlayer(const ToWSMatchedPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToWSMatchedPlayer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  target_ = 0;
  id_ = 0;
  myself_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToWSMatchedPlayer::~ToWSMatchedPlayer() {
  SharedDtor();
}

void ToWSMatchedPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToWSMatchedPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToWSMatchedPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToWSMatchedPlayer_descriptor_;
}

const ToWSMatchedPlayer& ToWSMatchedPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

ToWSMatchedPlayer* ToWSMatchedPlayer::default_instance_ = NULL;

ToWSMatchedPlayer* ToWSMatchedPlayer::New() const {
  return new ToWSMatchedPlayer;
}

void ToWSMatchedPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    target_ = 0;
    id_ = 0;
    myself_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToWSMatchedPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target;
        break;
      }

      // optional int32 target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_myself;
        break;
      }

      // optional int32 myself = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myself:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myself_)));
          set_has_myself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToWSMatchedPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 target = 2;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 myself = 4;
  if (has_myself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->myself(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToWSMatchedPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 target = 2;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 myself = 4;
  if (has_myself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->myself(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToWSMatchedPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 myself = 4;
    if (has_myself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myself());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToWSMatchedPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToWSMatchedPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToWSMatchedPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToWSMatchedPlayer::MergeFrom(const ToWSMatchedPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_myself()) {
      set_myself(from.myself());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToWSMatchedPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToWSMatchedPlayer::CopyFrom(const ToWSMatchedPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToWSMatchedPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToWSMatchedPlayer::Swap(ToWSMatchedPlayer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(target_, other->target_);
    std::swap(id_, other->id_);
    std::swap(myself_, other->myself_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToWSMatchedPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToWSMatchedPlayer_descriptor_;
  metadata.reflection = ToWSMatchedPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadPlayerIsMatched::kCharidFieldNumber;
#endif  // !_MSC_VER

BroadPlayerIsMatched::BroadPlayerIsMatched()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadPlayerIsMatched::InitAsDefaultInstance() {
}

BroadPlayerIsMatched::BroadPlayerIsMatched(const BroadPlayerIsMatched& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadPlayerIsMatched::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadPlayerIsMatched::~BroadPlayerIsMatched() {
  SharedDtor();
}

void BroadPlayerIsMatched::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadPlayerIsMatched::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadPlayerIsMatched::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadPlayerIsMatched_descriptor_;
}

const BroadPlayerIsMatched& BroadPlayerIsMatched::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BroadPlayerIsMatched* BroadPlayerIsMatched::default_instance_ = NULL;

BroadPlayerIsMatched* BroadPlayerIsMatched::New() const {
  return new BroadPlayerIsMatched;
}

void BroadPlayerIsMatched::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadPlayerIsMatched::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadPlayerIsMatched::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadPlayerIsMatched::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadPlayerIsMatched::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadPlayerIsMatched::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadPlayerIsMatched* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadPlayerIsMatched*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadPlayerIsMatched::MergeFrom(const BroadPlayerIsMatched& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadPlayerIsMatched::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadPlayerIsMatched::CopyFrom(const BroadPlayerIsMatched& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadPlayerIsMatched::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadPlayerIsMatched::Swap(BroadPlayerIsMatched* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadPlayerIsMatched::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadPlayerIsMatched_descriptor_;
  metadata.reflection = BroadPlayerIsMatched_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadPlayerCancelMatch::kCharidFieldNumber;
#endif  // !_MSC_VER

BroadPlayerCancelMatch::BroadPlayerCancelMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadPlayerCancelMatch::InitAsDefaultInstance() {
}

BroadPlayerCancelMatch::BroadPlayerCancelMatch(const BroadPlayerCancelMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadPlayerCancelMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadPlayerCancelMatch::~BroadPlayerCancelMatch() {
  SharedDtor();
}

void BroadPlayerCancelMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadPlayerCancelMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadPlayerCancelMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadPlayerCancelMatch_descriptor_;
}

const BroadPlayerCancelMatch& BroadPlayerCancelMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BroadPlayerCancelMatch* BroadPlayerCancelMatch::default_instance_ = NULL;

BroadPlayerCancelMatch* BroadPlayerCancelMatch::New() const {
  return new BroadPlayerCancelMatch;
}

void BroadPlayerCancelMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadPlayerCancelMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadPlayerCancelMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadPlayerCancelMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadPlayerCancelMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadPlayerCancelMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadPlayerCancelMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadPlayerCancelMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadPlayerCancelMatch::MergeFrom(const BroadPlayerCancelMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadPlayerCancelMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadPlayerCancelMatch::CopyFrom(const BroadPlayerCancelMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadPlayerCancelMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadPlayerCancelMatch::Swap(BroadPlayerCancelMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadPlayerCancelMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadPlayerCancelMatch_descriptor_;
  metadata.reflection = BroadPlayerCancelMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadCastPKResult::kCharidFieldNumber;
const int BroadCastPKResult::kScoreFieldNumber;
const int BroadCastPKResult::kCharnameFieldNumber;
const int BroadCastPKResult::kProfessionFieldNumber;
const int BroadCastPKResult::kInfoFieldNumber;
#endif  // !_MSC_VER

BroadCastPKResult::BroadCastPKResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadCastPKResult::InitAsDefaultInstance() {
  info_ = const_cast< ::ServerBattle::BeyondPlayerInfo*>(&::ServerBattle::BeyondPlayerInfo::default_instance());
}

BroadCastPKResult::BroadCastPKResult(const BroadCastPKResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadCastPKResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadCastPKResult::~BroadCastPKResult() {
  SharedDtor();
}

void BroadCastPKResult::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void BroadCastPKResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadCastPKResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadCastPKResult_descriptor_;
}

const BroadCastPKResult& BroadCastPKResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BroadCastPKResult* BroadCastPKResult::default_instance_ = NULL;

BroadCastPKResult* BroadCastPKResult::New() const {
  return new BroadCastPKResult;
}

void BroadCastPKResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    profession_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ServerBattle::BeyondPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadCastPKResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .ServerBattle.BeyondPlayerInfo info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadCastPKResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional .ServerBattle.BeyondPlayerInfo info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadCastPKResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional .ServerBattle.BeyondPlayerInfo info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadCastPKResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional .ServerBattle.BeyondPlayerInfo info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadCastPKResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadCastPKResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadCastPKResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadCastPKResult::MergeFrom(const BroadCastPKResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_info()) {
      mutable_info()->::ServerBattle::BeyondPlayerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadCastPKResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCastPKResult::CopyFrom(const BroadCastPKResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCastPKResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void BroadCastPKResult::Swap(BroadCastPKResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(score_, other->score_);
    std::swap(charname_, other->charname_);
    std::swap(profession_, other->profession_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadCastPKResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadCastPKResult_descriptor_;
  metadata.reflection = BroadCastPKResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeyondPlayerInfo::kSexFieldNumber;
const int BeyondPlayerInfo::kHpFieldNumber;
const int BeyondPlayerInfo::kHpmaxFieldNumber;
const int BeyondPlayerInfo::kMpFieldNumber;
const int BeyondPlayerInfo::kMpmaxFieldNumber;
const int BeyondPlayerInfo::kStrengthFieldNumber;
const int BeyondPlayerInfo::kCleverpowerFieldNumber;
const int BeyondPlayerInfo::kCleverairFieldNumber;
const int BeyondPlayerInfo::kPhysicalpowerFieldNumber;
const int BeyondPlayerInfo::kPatienceFieldNumber;
const int BeyondPlayerInfo::kAgilityFieldNumber;
const int BeyondPlayerInfo::kPowerFieldNumber;
const int BeyondPlayerInfo::kPhyattackFieldNumber;
const int BeyondPlayerInfo::kPhyattackmaxFieldNumber;
const int BeyondPlayerInfo::kPhydefenceFieldNumber;
const int BeyondPlayerInfo::kMagicattackFieldNumber;
const int BeyondPlayerInfo::kMagicattackmaxFieldNumber;
const int BeyondPlayerInfo::kMagicdefenceFieldNumber;
const int BeyondPlayerInfo::kHitrateFieldNumber;
const int BeyondPlayerInfo::kAvoidrateFieldNumber;
const int BeyondPlayerInfo::kBaseluckyFieldNumber;
const int BeyondPlayerInfo::kCrackdownrateFieldNumber;
const int BeyondPlayerInfo::kBaserteFieldNumber;
const int BeyondPlayerInfo::kEquipFieldNumber;
const int BeyondPlayerInfo::kFightFieldNumber;
const int BeyondPlayerInfo::kPowermaxFieldNumber;
const int BeyondPlayerInfo::kExpFieldNumber;
const int BeyondPlayerInfo::kLvFieldNumber;
const int BeyondPlayerInfo::kMagicequipidFieldNumber;
const int BeyondPlayerInfo::kGuildnameFieldNumber;
const int BeyondPlayerInfo::kGuildjobFieldNumber;
const int BeyondPlayerInfo::kTitleidFieldNumber;
const int BeyondPlayerInfo::kPkcountFieldNumber;
const int BeyondPlayerInfo::kViplvFieldNumber;
const int BeyondPlayerInfo::kCountryFieldNumber;
#endif  // !_MSC_VER

BeyondPlayerInfo::BeyondPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeyondPlayerInfo::InitAsDefaultInstance() {
}

BeyondPlayerInfo::BeyondPlayerInfo(const BeyondPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeyondPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  sex_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  strength_ = 0;
  cleverpower_ = 0;
  cleverair_ = 0;
  physicalpower_ = 0;
  patience_ = 0;
  agility_ = 0;
  power_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  phydefence_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  magicdefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  baselucky_ = 0;
  crackdownrate_ = 0;
  baserte_ = 0;
  fight_ = 0;
  powermax_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  magicequipid_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildjob_ = 0;
  titleid_ = 0;
  pkcount_ = 0;
  viplv_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeyondPlayerInfo::~BeyondPlayerInfo() {
  SharedDtor();
}

void BeyondPlayerInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void BeyondPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeyondPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeyondPlayerInfo_descriptor_;
}

const BeyondPlayerInfo& BeyondPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

BeyondPlayerInfo* BeyondPlayerInfo::default_instance_ = NULL;

BeyondPlayerInfo* BeyondPlayerInfo::New() const {
  return new BeyondPlayerInfo;
}

void BeyondPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sex_ = 0;
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
    strength_ = 0;
    cleverpower_ = 0;
    cleverair_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    physicalpower_ = 0;
    patience_ = 0;
    agility_ = 0;
    power_ = 0;
    phyattack_ = 0;
    phyattackmax_ = 0;
    phydefence_ = 0;
    magicattack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    magicattackmax_ = 0;
    magicdefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    baselucky_ = 0;
    crackdownrate_ = 0;
    baserte_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    fight_ = 0;
    powermax_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    magicequipid_ = 0;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildjob_ = 0;
    titleid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    pkcount_ = 0;
    viplv_ = 0;
    country_ = 0;
  }
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeyondPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // optional int32 mp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mpmax;
        break;
      }

      // optional int32 mpmax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_strength;
        break;
      }

      // optional int32 strength = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cleverpower;
        break;
      }

      // optional int32 cleverpower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverpower_)));
          set_has_cleverpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cleverair;
        break;
      }

      // optional int32 cleverair = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverair_)));
          set_has_cleverair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_physicalpower;
        break;
      }

      // optional int32 physicalpower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalpower_)));
          set_has_physicalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_patience;
        break;
      }

      // optional int32 patience = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patience_)));
          set_has_patience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_agility;
        break;
      }

      // optional int32 agility = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_power;
        break;
      }

      // optional int32 power = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_phyattack;
        break;
      }

      // optional int32 phyattack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_phyattackmax;
        break;
      }

      // optional int32 phyattackmax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_phydefence;
        break;
      }

      // optional int32 phydefence = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_magicattack;
        break;
      }

      // optional int32 magicattack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_magicattackmax;
        break;
      }

      // optional int32 magicattackmax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_magicdefence;
        break;
      }

      // optional int32 magicdefence = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hitrate;
        break;
      }

      // optional int32 hitrate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_avoidrate;
        break;
      }

      // optional int32 avoidrate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_baselucky;
        break;
      }

      // optional int32 baselucky = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baselucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baselucky_)));
          set_has_baselucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_crackdownrate;
        break;
      }

      // optional int32 crackdownrate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdownrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdownrate_)));
          set_has_crackdownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_baserte;
        break;
      }

      // optional int32 baserte = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baserte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserte_)));
          set_has_baserte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_equip;
        break;
      }

      // repeated .ServerBattle.ItemInfo equip = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_equip;
        if (input->ExpectTag(200)) goto parse_fight;
        break;
      }

      // optional int32 fight = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_powermax;
        break;
      }

      // optional int32 powermax = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powermax_)));
          set_has_powermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_exp;
        break;
      }

      // optional int64 exp = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_lv;
        break;
      }

      // optional int32 lv = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_magicequipid;
        break;
      }

      // optional int32 magicequipid = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicequipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicequipid_)));
          set_has_magicequipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_guildname;
        break;
      }

      // optional string guildname = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_guildjob;
        break;
      }

      // optional int32 guildjob = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildjob_)));
          set_has_guildjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_titleid;
        break;
      }

      // optional int32 titleid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_pkcount;
        break;
      }

      // optional int32 pkcount = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkcount_)));
          set_has_pkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_country;
        break;
      }

      // optional int32 country = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeyondPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sex = 1;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sex(), output);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  // optional int32 hpmax = 3;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hpmax(), output);
  }

  // optional int32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp(), output);
  }

  // optional int32 mpmax = 5;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mpmax(), output);
  }

  // optional int32 strength = 6;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->strength(), output);
  }

  // optional int32 cleverpower = 7;
  if (has_cleverpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cleverpower(), output);
  }

  // optional int32 cleverair = 8;
  if (has_cleverair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cleverair(), output);
  }

  // optional int32 physicalpower = 9;
  if (has_physicalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->physicalpower(), output);
  }

  // optional int32 patience = 10;
  if (has_patience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->patience(), output);
  }

  // optional int32 agility = 11;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->agility(), output);
  }

  // optional int32 power = 12;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->power(), output);
  }

  // optional int32 phyattack = 13;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->phyattack(), output);
  }

  // optional int32 phyattackmax = 14;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->phyattackmax(), output);
  }

  // optional int32 phydefence = 15;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->phydefence(), output);
  }

  // optional int32 magicattack = 16;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->magicattack(), output);
  }

  // optional int32 magicattackmax = 17;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->magicattackmax(), output);
  }

  // optional int32 magicdefence = 18;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->magicdefence(), output);
  }

  // optional int32 hitrate = 19;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->hitrate(), output);
  }

  // optional int32 avoidrate = 20;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->avoidrate(), output);
  }

  // optional int32 baselucky = 21;
  if (has_baselucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->baselucky(), output);
  }

  // optional int32 crackdownrate = 22;
  if (has_crackdownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->crackdownrate(), output);
  }

  // optional int32 baserte = 23;
  if (has_baserte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->baserte(), output);
  }

  // repeated .ServerBattle.ItemInfo equip = 24;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->equip(i), output);
  }

  // optional int32 fight = 25;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->fight(), output);
  }

  // optional int32 powermax = 26;
  if (has_powermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->powermax(), output);
  }

  // optional int64 exp = 27;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->exp(), output);
  }

  // optional int32 lv = 28;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->lv(), output);
  }

  // optional int32 magicequipid = 29;
  if (has_magicequipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->magicequipid(), output);
  }

  // optional string guildname = 30;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->guildname(), output);
  }

  // optional int32 guildjob = 31;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->guildjob(), output);
  }

  // optional int32 titleid = 32;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->titleid(), output);
  }

  // optional int32 pkcount = 33;
  if (has_pkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->pkcount(), output);
  }

  // optional int32 viplv = 34;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->viplv(), output);
  }

  // optional int32 country = 35;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeyondPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sex = 1;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sex(), target);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  // optional int32 hpmax = 3;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hpmax(), target);
  }

  // optional int32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp(), target);
  }

  // optional int32 mpmax = 5;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mpmax(), target);
  }

  // optional int32 strength = 6;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->strength(), target);
  }

  // optional int32 cleverpower = 7;
  if (has_cleverpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cleverpower(), target);
  }

  // optional int32 cleverair = 8;
  if (has_cleverair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cleverair(), target);
  }

  // optional int32 physicalpower = 9;
  if (has_physicalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->physicalpower(), target);
  }

  // optional int32 patience = 10;
  if (has_patience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->patience(), target);
  }

  // optional int32 agility = 11;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->agility(), target);
  }

  // optional int32 power = 12;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->power(), target);
  }

  // optional int32 phyattack = 13;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->phyattack(), target);
  }

  // optional int32 phyattackmax = 14;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->phyattackmax(), target);
  }

  // optional int32 phydefence = 15;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->phydefence(), target);
  }

  // optional int32 magicattack = 16;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->magicattack(), target);
  }

  // optional int32 magicattackmax = 17;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->magicattackmax(), target);
  }

  // optional int32 magicdefence = 18;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->magicdefence(), target);
  }

  // optional int32 hitrate = 19;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->hitrate(), target);
  }

  // optional int32 avoidrate = 20;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->avoidrate(), target);
  }

  // optional int32 baselucky = 21;
  if (has_baselucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->baselucky(), target);
  }

  // optional int32 crackdownrate = 22;
  if (has_crackdownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->crackdownrate(), target);
  }

  // optional int32 baserte = 23;
  if (has_baserte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->baserte(), target);
  }

  // repeated .ServerBattle.ItemInfo equip = 24;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->equip(i), target);
  }

  // optional int32 fight = 25;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->fight(), target);
  }

  // optional int32 powermax = 26;
  if (has_powermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->powermax(), target);
  }

  // optional int64 exp = 27;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->exp(), target);
  }

  // optional int32 lv = 28;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->lv(), target);
  }

  // optional int32 magicequipid = 29;
  if (has_magicequipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->magicequipid(), target);
  }

  // optional string guildname = 30;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->guildname(), target);
  }

  // optional int32 guildjob = 31;
  if (has_guildjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->guildjob(), target);
  }

  // optional int32 titleid = 32;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->titleid(), target);
  }

  // optional int32 pkcount = 33;
  if (has_pkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->pkcount(), target);
  }

  // optional int32 viplv = 34;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->viplv(), target);
  }

  // optional int32 country = 35;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeyondPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sex = 1;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 hpmax = 3;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 mpmax = 5;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // optional int32 strength = 6;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 cleverpower = 7;
    if (has_cleverpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverpower());
    }

    // optional int32 cleverair = 8;
    if (has_cleverair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverair());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 physicalpower = 9;
    if (has_physicalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalpower());
    }

    // optional int32 patience = 10;
    if (has_patience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patience());
    }

    // optional int32 agility = 11;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 power = 12;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 phyattack = 13;
    if (has_phyattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

    // optional int32 phyattackmax = 14;
    if (has_phyattackmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

    // optional int32 phydefence = 15;
    if (has_phydefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // optional int32 magicattack = 16;
    if (has_magicattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 magicattackmax = 17;
    if (has_magicattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // optional int32 magicdefence = 18;
    if (has_magicdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefence());
    }

    // optional int32 hitrate = 19;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // optional int32 avoidrate = 20;
    if (has_avoidrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // optional int32 baselucky = 21;
    if (has_baselucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baselucky());
    }

    // optional int32 crackdownrate = 22;
    if (has_crackdownrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdownrate());
    }

    // optional int32 baserte = 23;
    if (has_baserte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserte());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 fight = 25;
    if (has_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 powermax = 26;
    if (has_powermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powermax());
    }

    // optional int64 exp = 27;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 lv = 28;
    if (has_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 magicequipid = 29;
    if (has_magicequipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicequipid());
    }

    // optional string guildname = 30;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int32 guildjob = 31;
    if (has_guildjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildjob());
    }

    // optional int32 titleid = 32;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 pkcount = 33;
    if (has_pkcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkcount());
    }

    // optional int32 viplv = 34;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int32 country = 35;
    if (has_country()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  // repeated .ServerBattle.ItemInfo equip = 24;
  total_size += 2 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeyondPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeyondPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeyondPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeyondPlayerInfo::MergeFrom(const BeyondPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_cleverpower()) {
      set_cleverpower(from.cleverpower());
    }
    if (from.has_cleverair()) {
      set_cleverair(from.cleverair());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_physicalpower()) {
      set_physicalpower(from.physicalpower());
    }
    if (from.has_patience()) {
      set_patience(from.patience());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_baselucky()) {
      set_baselucky(from.baselucky());
    }
    if (from.has_crackdownrate()) {
      set_crackdownrate(from.crackdownrate());
    }
    if (from.has_baserte()) {
      set_baserte(from.baserte());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_powermax()) {
      set_powermax(from.powermax());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_magicequipid()) {
      set_magicequipid(from.magicequipid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildjob()) {
      set_guildjob(from.guildjob());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_pkcount()) {
      set_pkcount(from.pkcount());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeyondPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeyondPlayerInfo::CopyFrom(const BeyondPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeyondPlayerInfo::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void BeyondPlayerInfo::Swap(BeyondPlayerInfo* other) {
  if (other != this) {
    std::swap(sex_, other->sex_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(strength_, other->strength_);
    std::swap(cleverpower_, other->cleverpower_);
    std::swap(cleverair_, other->cleverair_);
    std::swap(physicalpower_, other->physicalpower_);
    std::swap(patience_, other->patience_);
    std::swap(agility_, other->agility_);
    std::swap(power_, other->power_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(baselucky_, other->baselucky_);
    std::swap(crackdownrate_, other->crackdownrate_);
    std::swap(baserte_, other->baserte_);
    equip_.Swap(&other->equip_);
    std::swap(fight_, other->fight_);
    std::swap(powermax_, other->powermax_);
    std::swap(exp_, other->exp_);
    std::swap(lv_, other->lv_);
    std::swap(magicequipid_, other->magicequipid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildjob_, other->guildjob_);
    std::swap(titleid_, other->titleid_);
    std::swap(pkcount_, other->pkcount_);
    std::swap(viplv_, other->viplv_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeyondPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeyondPlayerInfo_descriptor_;
  metadata.reflection = BeyondPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kIdFieldNumber;
const int ItemInfo::kFlagFieldNumber;
const int ItemInfo::kNewattrFieldNumber;
const int ItemInfo::kStoneidFieldNumber;
const int ItemInfo::kEndtimeFieldNumber;
const int ItemInfo::kNumFieldNumber;
const int ItemInfo::kInlayPosFieldNumber;
const int ItemInfo::kRefineAttrLvFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  flag_ = 0u;
  endtime_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    flag_ = 0u;
    endtime_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  newattr_.Clear();
  stoneid_.Clear();
  inlaypos_.Clear();
  refineattrlv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        break;
      }

      // repeated uint32 newattr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_newattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_newattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        if (input->ExpectTag(32)) goto parse_stoneid;
        break;
      }

      // repeated int32 stoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stoneid;
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        break;
      }

      // repeated int32 inlayPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_inlaypos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inlaypos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        break;
      }

      // repeated uint32 refineAttrLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttrLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_refineattrlv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refineattrlv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // repeated uint32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->newattr(i), output);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stoneid(i), output);
  }

  // optional int64 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->endtime(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->inlaypos(i), output);
  }

  // repeated uint32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->refineattrlv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // repeated uint32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->newattr(i), target);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stoneid(i), target);
  }

  // optional int64 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->endtime(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->inlaypos(i), target);
  }

  // repeated uint32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->refineattrlv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional int64 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated uint32 newattr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->newattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->newattr(i));
    }
    total_size += 1 * this->newattr_size() + data_size;
  }

  // repeated int32 stoneid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stoneid(i));
    }
    total_size += 1 * this->stoneid_size() + data_size;
  }

  // repeated int32 inlayPos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlaypos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inlaypos(i));
    }
    total_size += 1 * this->inlaypos_size() + data_size;
  }

  // repeated uint32 refineAttrLv = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->refineattrlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refineattrlv(i));
    }
    total_size += 1 * this->refineattrlv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newattr_.MergeFrom(from.newattr_);
  stoneid_.MergeFrom(from.stoneid_);
  inlaypos_.MergeFrom(from.inlaypos_);
  refineattrlv_.MergeFrom(from.refineattrlv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    newattr_.Swap(&other->newattr_);
    stoneid_.Swap(&other->stoneid_);
    std::swap(endtime_, other->endtime_);
    std::swap(num_, other->num_);
    inlaypos_.Swap(&other->inlaypos_);
    refineattrlv_.Swap(&other->refineattrlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMatchPlayerType::kTypeFieldNumber;
#endif  // !_MSC_VER

ClientMatchPlayerType::ClientMatchPlayerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMatchPlayerType::InitAsDefaultInstance() {
}

ClientMatchPlayerType::ClientMatchPlayerType(const ClientMatchPlayerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMatchPlayerType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMatchPlayerType::~ClientMatchPlayerType() {
  SharedDtor();
}

void ClientMatchPlayerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientMatchPlayerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMatchPlayerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMatchPlayerType_descriptor_;
}

const ClientMatchPlayerType& ClientMatchPlayerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

ClientMatchPlayerType* ClientMatchPlayerType::default_instance_ = NULL;

ClientMatchPlayerType* ClientMatchPlayerType::New() const {
  return new ClientMatchPlayerType;
}

void ClientMatchPlayerType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMatchPlayerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMatchPlayerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMatchPlayerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMatchPlayerType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMatchPlayerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMatchPlayerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMatchPlayerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMatchPlayerType::MergeFrom(const ClientMatchPlayerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMatchPlayerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMatchPlayerType::CopyFrom(const ClientMatchPlayerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMatchPlayerType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientMatchPlayerType::Swap(ClientMatchPlayerType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMatchPlayerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMatchPlayerType_descriptor_;
  metadata.reflection = ClientMatchPlayerType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientMatchPlayerType::kRetFieldNumber;
#endif  // !_MSC_VER

ToClientMatchPlayerType::ToClientMatchPlayerType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientMatchPlayerType::InitAsDefaultInstance() {
}

ToClientMatchPlayerType::ToClientMatchPlayerType(const ToClientMatchPlayerType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientMatchPlayerType::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientMatchPlayerType::~ToClientMatchPlayerType() {
  SharedDtor();
}

void ToClientMatchPlayerType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientMatchPlayerType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientMatchPlayerType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientMatchPlayerType_descriptor_;
}

const ToClientMatchPlayerType& ToClientMatchPlayerType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  return *default_instance_;
}

ToClientMatchPlayerType* ToClientMatchPlayerType::default_instance_ = NULL;

ToClientMatchPlayerType* ToClientMatchPlayerType::New() const {
  return new ToClientMatchPlayerType;
}

void ToClientMatchPlayerType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientMatchPlayerType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientMatchPlayerType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientMatchPlayerType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientMatchPlayerType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientMatchPlayerType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientMatchPlayerType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientMatchPlayerType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientMatchPlayerType::MergeFrom(const ToClientMatchPlayerType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientMatchPlayerType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientMatchPlayerType::CopyFrom(const ToClientMatchPlayerType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientMatchPlayerType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientMatchPlayerType::Swap(ToClientMatchPlayerType* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientMatchPlayerType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientMatchPlayerType_descriptor_;
  metadata.reflection = ToClientMatchPlayerType_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerBattle

// @@protoc_insertion_point(global_scope)
