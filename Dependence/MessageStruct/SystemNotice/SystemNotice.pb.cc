// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemNotice/SystemNotice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SystemNotice/SystemNotice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SystemNoticeProto {

namespace {

const ::google::protobuf::Descriptor* SystemNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemNoticeOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemNoticeOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNoticeUIHL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNoticeUIHL_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIHighLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIHighLight_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientUIHL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientUIHL_reflection_ = NULL;
const ::google::protobuf::Descriptor* UIHL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIHL_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientNoticeArena_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientNoticeArena_reflection_ = NULL;
const ::google::protobuf::Descriptor* HintClientTaskPanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HintClientTaskPanel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto() {
  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SystemNotice/SystemNotice.proto");
  GOOGLE_CHECK(file != NULL);
  SystemNotice_descriptor_ = file->message_type(0);
  static const int SystemNotice_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, showtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, intervaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, title_),
  };
  SystemNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemNotice_descriptor_,
      SystemNotice::default_instance_,
      SystemNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemNotice));
  SystemNoticeOp_descriptor_ = file->message_type(1);
  static const int SystemNoticeOp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, noticelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, startnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, endnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, totalnumber_),
  };
  SystemNoticeOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemNoticeOp_descriptor_,
      SystemNoticeOp::default_instance_,
      SystemNoticeOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNoticeOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemNoticeOp));
  ClientNoticeUIHL_descriptor_ = file->message_type(2);
  static const int ClientNoticeUIHL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeUIHL, list_),
  };
  ClientNoticeUIHL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNoticeUIHL_descriptor_,
      ClientNoticeUIHL::default_instance_,
      ClientNoticeUIHL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeUIHL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNoticeUIHL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNoticeUIHL));
  UIHighLight_descriptor_ = file->message_type(3);
  static const int UIHighLight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHighLight, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHighLight, value_),
  };
  UIHighLight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIHighLight_descriptor_,
      UIHighLight::default_instance_,
      UIHighLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHighLight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHighLight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIHighLight));
  ToClientUIHL_descriptor_ = file->message_type(4);
  static const int ToClientUIHL_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientUIHL, list_),
  };
  ToClientUIHL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientUIHL_descriptor_,
      ToClientUIHL::default_instance_,
      ToClientUIHL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientUIHL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientUIHL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientUIHL));
  UIHL_descriptor_ = file->message_type(5);
  static const int UIHL_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHL, bigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHL, smalltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHL, value_),
  };
  UIHL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UIHL_descriptor_,
      UIHL::default_instance_,
      UIHL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIHL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UIHL));
  ClientNotice_descriptor_ = file->message_type(6);
  static const int ClientNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotice, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotice, content_),
  };
  ClientNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientNotice_descriptor_,
      ClientNotice::default_instance_,
      ClientNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientNotice));
  ToClientNotice_descriptor_ = file->message_type(7);
  static const int ToClientNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNotice, noticelist_),
  };
  ToClientNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientNotice_descriptor_,
      ToClientNotice::default_instance_,
      ToClientNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientNotice));
  ToClientNoticeArena_descriptor_ = file->message_type(8);
  static const int ToClientNoticeArena_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNoticeArena, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNoticeArena, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNoticeArena, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNoticeArena, ranking_),
  };
  ToClientNoticeArena_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientNoticeArena_descriptor_,
      ToClientNoticeArena::default_instance_,
      ToClientNoticeArena_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNoticeArena, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientNoticeArena, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientNoticeArena));
  HintClientTaskPanel_descriptor_ = file->message_type(9);
  static const int HintClientTaskPanel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintClientTaskPanel, bigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintClientTaskPanel, smalltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintClientTaskPanel, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintClientTaskPanel, svalue_),
  };
  HintClientTaskPanel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HintClientTaskPanel_descriptor_,
      HintClientTaskPanel::default_instance_,
      HintClientTaskPanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintClientTaskPanel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HintClientTaskPanel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HintClientTaskPanel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemNotice_descriptor_, &SystemNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemNoticeOp_descriptor_, &SystemNoticeOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNoticeUIHL_descriptor_, &ClientNoticeUIHL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIHighLight_descriptor_, &UIHighLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientUIHL_descriptor_, &ToClientUIHL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UIHL_descriptor_, &UIHL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientNotice_descriptor_, &ClientNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientNotice_descriptor_, &ToClientNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientNoticeArena_descriptor_, &ToClientNoticeArena::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HintClientTaskPanel_descriptor_, &HintClientTaskPanel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto() {
  delete SystemNotice::default_instance_;
  delete SystemNotice_reflection_;
  delete SystemNoticeOp::default_instance_;
  delete SystemNoticeOp_reflection_;
  delete ClientNoticeUIHL::default_instance_;
  delete ClientNoticeUIHL_reflection_;
  delete UIHighLight::default_instance_;
  delete UIHighLight_reflection_;
  delete ToClientUIHL::default_instance_;
  delete ToClientUIHL_reflection_;
  delete UIHL::default_instance_;
  delete UIHL_reflection_;
  delete ClientNotice::default_instance_;
  delete ClientNotice_reflection_;
  delete ToClientNotice::default_instance_;
  delete ToClientNotice_reflection_;
  delete ToClientNoticeArena::default_instance_;
  delete ToClientNoticeArena_reflection_;
  delete HintClientTaskPanel::default_instance_;
  delete HintClientTaskPanel_reflection_;
}

void protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037SystemNotice/SystemNotice.proto\022\021Syste"
    "mNoticeProto\"\242\001\n\014SystemNotice\022\n\n\002id\030\001 \001("
    "\005\022\020\n\010showType\030\002 \001(\005\022\021\n\tbeginTime\030\003 \001(\003\022\017"
    "\n\007endTime\030\004 \001(\003\022\024\n\014intervalTime\030\005 \001(\005\022\017\n"
    "\007content\030\006 \001(\t\022\013\n\003url\030\007 \001(\t\022\r\n\005state\030\010 \001"
    "(\005\022\r\n\005title\030\t \001(\t\"\216\001\n\016SystemNoticeOp\022\n\n\002"
    "op\030\001 \002(\005\0223\n\nnoticeList\030\002 \003(\0132\037.SystemNot"
    "iceProto.SystemNotice\022\023\n\013startNumber\030\003 \001"
    "(\005\022\021\n\tendNumber\030\004 \001(\005\022\023\n\013totalNumber\030\005 \001"
    "(\005\"@\n\020ClientNoticeUIHL\022,\n\004list\030\001 \003(\0132\036.S"
    "ystemNoticeProto.UIHighLight\"*\n\013UIHighLi"
    "ght\022\014\n\004type\030\001 \002(\005\022\r\n\005value\030\002 \002(\005\"5\n\014ToCl"
    "ientUIHL\022%\n\004list\030\001 \003(\0132\027.SystemNoticePro"
    "to.UIHL\"9\n\004UIHL\022\017\n\007bigType\030\001 \001(\005\022\021\n\tsmal"
    "lType\030\002 \003(\005\022\r\n\005value\030\003 \003(\005\".\n\014ClientNoti"
    "ce\022\r\n\005title\030\001 \002(\t\022\017\n\007content\030\002 \001(\t\"E\n\016To"
    "ClientNotice\0223\n\nnoticeList\030\001 \003(\0132\037.Syste"
    "mNoticeProto.ClientNotice\"P\n\023ToClientNot"
    "iceArena\022\014\n\004time\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\014\n\004"
    "flag\030\003 \001(\005\022\017\n\007ranking\030\004 \001(\005\"Y\n\023HintClien"
    "tTaskPanel\022\017\n\007bigType\030\001 \003(\005\022\021\n\tsmallType"
    "\030\002 \003(\005\022\016\n\006fValue\030\003 \003(\005\022\016\n\006sValue\030\004 \003(\005", 878);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SystemNotice/SystemNotice.proto", &protobuf_RegisterTypes);
  SystemNotice::default_instance_ = new SystemNotice();
  SystemNoticeOp::default_instance_ = new SystemNoticeOp();
  ClientNoticeUIHL::default_instance_ = new ClientNoticeUIHL();
  UIHighLight::default_instance_ = new UIHighLight();
  ToClientUIHL::default_instance_ = new ToClientUIHL();
  UIHL::default_instance_ = new UIHL();
  ClientNotice::default_instance_ = new ClientNotice();
  ToClientNotice::default_instance_ = new ToClientNotice();
  ToClientNoticeArena::default_instance_ = new ToClientNoticeArena();
  HintClientTaskPanel::default_instance_ = new HintClientTaskPanel();
  SystemNotice::default_instance_->InitAsDefaultInstance();
  SystemNoticeOp::default_instance_->InitAsDefaultInstance();
  ClientNoticeUIHL::default_instance_->InitAsDefaultInstance();
  UIHighLight::default_instance_->InitAsDefaultInstance();
  ToClientUIHL::default_instance_->InitAsDefaultInstance();
  UIHL::default_instance_->InitAsDefaultInstance();
  ClientNotice::default_instance_->InitAsDefaultInstance();
  ToClientNotice::default_instance_->InitAsDefaultInstance();
  ToClientNoticeArena::default_instance_->InitAsDefaultInstance();
  HintClientTaskPanel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SystemNotice_2fSystemNotice_2eproto {
  StaticDescriptorInitializer_SystemNotice_2fSystemNotice_2eproto() {
    protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  }
} static_descriptor_initializer_SystemNotice_2fSystemNotice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SystemNotice::kIdFieldNumber;
const int SystemNotice::kShowTypeFieldNumber;
const int SystemNotice::kBeginTimeFieldNumber;
const int SystemNotice::kEndTimeFieldNumber;
const int SystemNotice::kIntervalTimeFieldNumber;
const int SystemNotice::kContentFieldNumber;
const int SystemNotice::kUrlFieldNumber;
const int SystemNotice::kStateFieldNumber;
const int SystemNotice::kTitleFieldNumber;
#endif  // !_MSC_VER

SystemNotice::SystemNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemNotice::InitAsDefaultInstance() {
}

SystemNotice::SystemNotice(const SystemNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemNotice::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  showtype_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  intervaltime_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemNotice::~SystemNotice() {
  SharedDtor();
}

void SystemNotice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void SystemNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemNotice_descriptor_;
}

const SystemNotice& SystemNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

SystemNotice* SystemNotice::default_instance_ = NULL;

SystemNotice* SystemNotice::New() const {
  return new SystemNotice;
}

void SystemNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    showtype_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    intervaltime_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_showType;
        break;
      }

      // optional int32 showType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showtype_)));
          set_has_showtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_intervalTime;
        break;
      }

      // optional int32 intervalTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intervalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intervaltime_)));
          set_has_intervaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_url;
        break;
      }

      // optional string url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_title;
        break;
      }

      // optional string title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 showType = 2;
  if (has_showtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->showtype(), output);
  }

  // optional int64 beginTime = 3;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->begintime(), output);
  }

  // optional int64 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->endtime(), output);
  }

  // optional int32 intervalTime = 5;
  if (has_intervaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->intervaltime(), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->url(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 showType = 2;
  if (has_showtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->showtype(), target);
  }

  // optional int64 beginTime = 3;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->begintime(), target);
  }

  // optional int64 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endtime(), target);
  }

  // optional int32 intervalTime = 5;
  if (has_intervaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->intervaltime(), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional string url = 7;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->url(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional string title = 9;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 showType = 2;
    if (has_showtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showtype());
    }

    // optional int64 beginTime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 intervalTime = 5;
    if (has_intervaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intervaltime());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string url = 7;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string title = 9;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemNotice::MergeFrom(const SystemNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_showtype()) {
      set_showtype(from.showtype());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_intervaltime()) {
      set_intervaltime(from.intervaltime());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemNotice::CopyFrom(const SystemNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNotice::IsInitialized() const {

  return true;
}

void SystemNotice::Swap(SystemNotice* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(showtype_, other->showtype_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(intervaltime_, other->intervaltime_);
    std::swap(content_, other->content_);
    std::swap(url_, other->url_);
    std::swap(state_, other->state_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemNotice_descriptor_;
  metadata.reflection = SystemNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemNoticeOp::kOpFieldNumber;
const int SystemNoticeOp::kNoticeListFieldNumber;
const int SystemNoticeOp::kStartNumberFieldNumber;
const int SystemNoticeOp::kEndNumberFieldNumber;
const int SystemNoticeOp::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

SystemNoticeOp::SystemNoticeOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemNoticeOp::InitAsDefaultInstance() {
}

SystemNoticeOp::SystemNoticeOp(const SystemNoticeOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemNoticeOp::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  startnumber_ = 0;
  endnumber_ = 0;
  totalnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemNoticeOp::~SystemNoticeOp() {
  SharedDtor();
}

void SystemNoticeOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemNoticeOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemNoticeOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemNoticeOp_descriptor_;
}

const SystemNoticeOp& SystemNoticeOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

SystemNoticeOp* SystemNoticeOp::default_instance_ = NULL;

SystemNoticeOp* SystemNoticeOp::New() const {
  return new SystemNoticeOp;
}

void SystemNoticeOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    startnumber_ = 0;
    endnumber_ = 0;
    totalnumber_ = 0;
  }
  noticelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemNoticeOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_noticeList;
        break;
      }

      // repeated .SystemNoticeProto.SystemNotice noticeList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noticeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_noticelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_noticeList;
        if (input->ExpectTag(24)) goto parse_startNumber;
        break;
      }

      // optional int32 startNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startnumber_)));
          set_has_startnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endNumber;
        break;
      }

      // optional int32 endNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endnumber_)));
          set_has_endnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalNumber;
        break;
      }

      // optional int32 totalNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumber_)));
          set_has_totalnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemNoticeOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // repeated .SystemNoticeProto.SystemNotice noticeList = 2;
  for (int i = 0; i < this->noticelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->noticelist(i), output);
  }

  // optional int32 startNumber = 3;
  if (has_startnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startnumber(), output);
  }

  // optional int32 endNumber = 4;
  if (has_endnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endnumber(), output);
  }

  // optional int32 totalNumber = 5;
  if (has_totalnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemNoticeOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // repeated .SystemNoticeProto.SystemNotice noticeList = 2;
  for (int i = 0; i < this->noticelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->noticelist(i), target);
  }

  // optional int32 startNumber = 3;
  if (has_startnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startnumber(), target);
  }

  // optional int32 endNumber = 4;
  if (has_endnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endnumber(), target);
  }

  // optional int32 totalNumber = 5;
  if (has_totalnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemNoticeOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int32 startNumber = 3;
    if (has_startnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startnumber());
    }

    // optional int32 endNumber = 4;
    if (has_endnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endnumber());
    }

    // optional int32 totalNumber = 5;
    if (has_totalnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumber());
    }

  }
  // repeated .SystemNoticeProto.SystemNotice noticeList = 2;
  total_size += 1 * this->noticelist_size();
  for (int i = 0; i < this->noticelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->noticelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemNoticeOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemNoticeOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemNoticeOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemNoticeOp::MergeFrom(const SystemNoticeOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  noticelist_.MergeFrom(from.noticelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_startnumber()) {
      set_startnumber(from.startnumber());
    }
    if (from.has_endnumber()) {
      set_endnumber(from.endnumber());
    }
    if (from.has_totalnumber()) {
      set_totalnumber(from.totalnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemNoticeOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemNoticeOp::CopyFrom(const SystemNoticeOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNoticeOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemNoticeOp::Swap(SystemNoticeOp* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    noticelist_.Swap(&other->noticelist_);
    std::swap(startnumber_, other->startnumber_);
    std::swap(endnumber_, other->endnumber_);
    std::swap(totalnumber_, other->totalnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemNoticeOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemNoticeOp_descriptor_;
  metadata.reflection = SystemNoticeOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientNoticeUIHL::kListFieldNumber;
#endif  // !_MSC_VER

ClientNoticeUIHL::ClientNoticeUIHL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientNoticeUIHL::InitAsDefaultInstance() {
}

ClientNoticeUIHL::ClientNoticeUIHL(const ClientNoticeUIHL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientNoticeUIHL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNoticeUIHL::~ClientNoticeUIHL() {
  SharedDtor();
}

void ClientNoticeUIHL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientNoticeUIHL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNoticeUIHL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNoticeUIHL_descriptor_;
}

const ClientNoticeUIHL& ClientNoticeUIHL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

ClientNoticeUIHL* ClientNoticeUIHL::default_instance_ = NULL;

ClientNoticeUIHL* ClientNoticeUIHL::New() const {
  return new ClientNoticeUIHL;
}

void ClientNoticeUIHL::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNoticeUIHL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SystemNoticeProto.UIHighLight list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientNoticeUIHL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SystemNoticeProto.UIHighLight list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientNoticeUIHL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SystemNoticeProto.UIHighLight list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientNoticeUIHL::ByteSize() const {
  int total_size = 0;

  // repeated .SystemNoticeProto.UIHighLight list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNoticeUIHL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNoticeUIHL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNoticeUIHL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNoticeUIHL::MergeFrom(const ClientNoticeUIHL& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNoticeUIHL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNoticeUIHL::CopyFrom(const ClientNoticeUIHL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNoticeUIHL::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ClientNoticeUIHL::Swap(ClientNoticeUIHL* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNoticeUIHL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNoticeUIHL_descriptor_;
  metadata.reflection = ClientNoticeUIHL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIHighLight::kTypeFieldNumber;
const int UIHighLight::kValueFieldNumber;
#endif  // !_MSC_VER

UIHighLight::UIHighLight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIHighLight::InitAsDefaultInstance() {
}

UIHighLight::UIHighLight(const UIHighLight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIHighLight::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIHighLight::~UIHighLight() {
  SharedDtor();
}

void UIHighLight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UIHighLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIHighLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIHighLight_descriptor_;
}

const UIHighLight& UIHighLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

UIHighLight* UIHighLight::default_instance_ = NULL;

UIHighLight* UIHighLight::New() const {
  return new UIHighLight;
}

void UIHighLight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIHighLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIHighLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIHighLight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIHighLight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIHighLight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIHighLight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIHighLight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIHighLight::MergeFrom(const UIHighLight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIHighLight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIHighLight::CopyFrom(const UIHighLight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIHighLight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UIHighLight::Swap(UIHighLight* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIHighLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIHighLight_descriptor_;
  metadata.reflection = UIHighLight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientUIHL::kListFieldNumber;
#endif  // !_MSC_VER

ToClientUIHL::ToClientUIHL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientUIHL::InitAsDefaultInstance() {
}

ToClientUIHL::ToClientUIHL(const ToClientUIHL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientUIHL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientUIHL::~ToClientUIHL() {
  SharedDtor();
}

void ToClientUIHL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientUIHL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientUIHL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientUIHL_descriptor_;
}

const ToClientUIHL& ToClientUIHL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

ToClientUIHL* ToClientUIHL::default_instance_ = NULL;

ToClientUIHL* ToClientUIHL::New() const {
  return new ToClientUIHL;
}

void ToClientUIHL::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientUIHL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SystemNoticeProto.UIHL list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientUIHL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SystemNoticeProto.UIHL list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientUIHL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SystemNoticeProto.UIHL list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientUIHL::ByteSize() const {
  int total_size = 0;

  // repeated .SystemNoticeProto.UIHL list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientUIHL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientUIHL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientUIHL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientUIHL::MergeFrom(const ToClientUIHL& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientUIHL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientUIHL::CopyFrom(const ToClientUIHL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientUIHL::IsInitialized() const {

  return true;
}

void ToClientUIHL::Swap(ToClientUIHL* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientUIHL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientUIHL_descriptor_;
  metadata.reflection = ToClientUIHL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UIHL::kBigTypeFieldNumber;
const int UIHL::kSmallTypeFieldNumber;
const int UIHL::kValueFieldNumber;
#endif  // !_MSC_VER

UIHL::UIHL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UIHL::InitAsDefaultInstance() {
}

UIHL::UIHL(const UIHL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UIHL::SharedCtor() {
  _cached_size_ = 0;
  bigtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UIHL::~UIHL() {
  SharedDtor();
}

void UIHL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UIHL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIHL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIHL_descriptor_;
}

const UIHL& UIHL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

UIHL* UIHL::default_instance_ = NULL;

UIHL* UIHL::New() const {
  return new UIHL;
}

void UIHL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bigtype_ = 0;
  }
  smalltype_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UIHL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bigType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bigtype_)));
          set_has_bigtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smallType;
        break;
      }

      // repeated int32 smallType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_smalltype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_smalltype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smallType;
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // repeated int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UIHL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bigType = 1;
  if (has_bigtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bigtype(), output);
  }

  // repeated int32 smallType = 2;
  for (int i = 0; i < this->smalltype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->smalltype(i), output);
  }

  // repeated int32 value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UIHL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bigType = 1;
  if (has_bigtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bigtype(), target);
  }

  // repeated int32 smallType = 2;
  for (int i = 0; i < this->smalltype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->smalltype(i), target);
  }

  // repeated int32 value = 3;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UIHL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bigType = 1;
    if (has_bigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bigtype());
    }

  }
  // repeated int32 smallType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->smalltype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->smalltype(i));
    }
    total_size += 1 * this->smalltype_size() + data_size;
  }

  // repeated int32 value = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIHL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UIHL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UIHL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UIHL::MergeFrom(const UIHL& from) {
  GOOGLE_CHECK_NE(&from, this);
  smalltype_.MergeFrom(from.smalltype_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bigtype()) {
      set_bigtype(from.bigtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UIHL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIHL::CopyFrom(const UIHL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIHL::IsInitialized() const {

  return true;
}

void UIHL::Swap(UIHL* other) {
  if (other != this) {
    std::swap(bigtype_, other->bigtype_);
    smalltype_.Swap(&other->smalltype_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UIHL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIHL_descriptor_;
  metadata.reflection = UIHL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientNotice::kTitleFieldNumber;
const int ClientNotice::kContentFieldNumber;
#endif  // !_MSC_VER

ClientNotice::ClientNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientNotice::InitAsDefaultInstance() {
}

ClientNotice::ClientNotice(const ClientNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientNotice::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientNotice::~ClientNotice() {
  SharedDtor();
}

void ClientNotice::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ClientNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientNotice_descriptor_;
}

const ClientNotice& ClientNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

ClientNotice* ClientNotice::default_instance_ = NULL;

ClientNotice* ClientNotice::New() const {
  return new ClientNotice;
}

void ClientNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientNotice::MergeFrom(const ClientNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientNotice::CopyFrom(const ClientNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientNotice::Swap(ClientNotice* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientNotice_descriptor_;
  metadata.reflection = ClientNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientNotice::kNoticeListFieldNumber;
#endif  // !_MSC_VER

ToClientNotice::ToClientNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientNotice::InitAsDefaultInstance() {
}

ToClientNotice::ToClientNotice(const ToClientNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientNotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientNotice::~ToClientNotice() {
  SharedDtor();
}

void ToClientNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientNotice_descriptor_;
}

const ToClientNotice& ToClientNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

ToClientNotice* ToClientNotice::default_instance_ = NULL;

ToClientNotice* ToClientNotice::New() const {
  return new ToClientNotice;
}

void ToClientNotice::Clear() {
  noticelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SystemNoticeProto.ClientNotice noticeList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noticeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_noticelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_noticeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SystemNoticeProto.ClientNotice noticeList = 1;
  for (int i = 0; i < this->noticelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->noticelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SystemNoticeProto.ClientNotice noticeList = 1;
  for (int i = 0; i < this->noticelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->noticelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientNotice::ByteSize() const {
  int total_size = 0;

  // repeated .SystemNoticeProto.ClientNotice noticeList = 1;
  total_size += 1 * this->noticelist_size();
  for (int i = 0; i < this->noticelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->noticelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientNotice::MergeFrom(const ToClientNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  noticelist_.MergeFrom(from.noticelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientNotice::CopyFrom(const ToClientNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientNotice::IsInitialized() const {

  for (int i = 0; i < noticelist_size(); i++) {
    if (!this->noticelist(i).IsInitialized()) return false;
  }
  return true;
}

void ToClientNotice::Swap(ToClientNotice* other) {
  if (other != this) {
    noticelist_.Swap(&other->noticelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientNotice_descriptor_;
  metadata.reflection = ToClientNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientNoticeArena::kTimeFieldNumber;
const int ToClientNoticeArena::kNameFieldNumber;
const int ToClientNoticeArena::kFlagFieldNumber;
const int ToClientNoticeArena::kRankingFieldNumber;
#endif  // !_MSC_VER

ToClientNoticeArena::ToClientNoticeArena()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientNoticeArena::InitAsDefaultInstance() {
}

ToClientNoticeArena::ToClientNoticeArena(const ToClientNoticeArena& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientNoticeArena::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientNoticeArena::~ToClientNoticeArena() {
  SharedDtor();
}

void ToClientNoticeArena::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ToClientNoticeArena::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientNoticeArena::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientNoticeArena_descriptor_;
}

const ToClientNoticeArena& ToClientNoticeArena::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

ToClientNoticeArena* ToClientNoticeArena::default_instance_ = NULL;

ToClientNoticeArena* ToClientNoticeArena::New() const {
  return new ToClientNoticeArena;
}

void ToClientNoticeArena::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    flag_ = 0;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientNoticeArena::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional int32 flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientNoticeArena::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flag(), output);
  }

  // optional int32 ranking = 4;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientNoticeArena::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flag(), target);
  }

  // optional int32 ranking = 4;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientNoticeArena::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // optional int32 ranking = 4;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientNoticeArena::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientNoticeArena* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientNoticeArena*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientNoticeArena::MergeFrom(const ToClientNoticeArena& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientNoticeArena::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientNoticeArena::CopyFrom(const ToClientNoticeArena& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientNoticeArena::IsInitialized() const {

  return true;
}

void ToClientNoticeArena::Swap(ToClientNoticeArena* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(flag_, other->flag_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientNoticeArena::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientNoticeArena_descriptor_;
  metadata.reflection = ToClientNoticeArena_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HintClientTaskPanel::kBigTypeFieldNumber;
const int HintClientTaskPanel::kSmallTypeFieldNumber;
const int HintClientTaskPanel::kFValueFieldNumber;
const int HintClientTaskPanel::kSValueFieldNumber;
#endif  // !_MSC_VER

HintClientTaskPanel::HintClientTaskPanel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HintClientTaskPanel::InitAsDefaultInstance() {
}

HintClientTaskPanel::HintClientTaskPanel(const HintClientTaskPanel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HintClientTaskPanel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HintClientTaskPanel::~HintClientTaskPanel() {
  SharedDtor();
}

void HintClientTaskPanel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HintClientTaskPanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HintClientTaskPanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HintClientTaskPanel_descriptor_;
}

const HintClientTaskPanel& HintClientTaskPanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  return *default_instance_;
}

HintClientTaskPanel* HintClientTaskPanel::default_instance_ = NULL;

HintClientTaskPanel* HintClientTaskPanel::New() const {
  return new HintClientTaskPanel;
}

void HintClientTaskPanel::Clear() {
  bigtype_.Clear();
  smalltype_.Clear();
  fvalue_.Clear();
  svalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HintClientTaskPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bigType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bigType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_bigtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bigtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_bigType;
        if (input->ExpectTag(16)) goto parse_smallType;
        break;
      }

      // repeated int32 smallType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_smallType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_smalltype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_smalltype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_smallType;
        if (input->ExpectTag(24)) goto parse_fValue;
        break;
      }

      // repeated int32 fValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_fvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fValue;
        if (input->ExpectTag(32)) goto parse_sValue;
        break;
      }

      // repeated int32 sValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_svalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_svalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HintClientTaskPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 bigType = 1;
  for (int i = 0; i < this->bigtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bigtype(i), output);
  }

  // repeated int32 smallType = 2;
  for (int i = 0; i < this->smalltype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->smalltype(i), output);
  }

  // repeated int32 fValue = 3;
  for (int i = 0; i < this->fvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->fvalue(i), output);
  }

  // repeated int32 sValue = 4;
  for (int i = 0; i < this->svalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->svalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HintClientTaskPanel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 bigType = 1;
  for (int i = 0; i < this->bigtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->bigtype(i), target);
  }

  // repeated int32 smallType = 2;
  for (int i = 0; i < this->smalltype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->smalltype(i), target);
  }

  // repeated int32 fValue = 3;
  for (int i = 0; i < this->fvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->fvalue(i), target);
  }

  // repeated int32 sValue = 4;
  for (int i = 0; i < this->svalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->svalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HintClientTaskPanel::ByteSize() const {
  int total_size = 0;

  // repeated int32 bigType = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bigtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bigtype(i));
    }
    total_size += 1 * this->bigtype_size() + data_size;
  }

  // repeated int32 smallType = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->smalltype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->smalltype(i));
    }
    total_size += 1 * this->smalltype_size() + data_size;
  }

  // repeated int32 fValue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->fvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fvalue(i));
    }
    total_size += 1 * this->fvalue_size() + data_size;
  }

  // repeated int32 sValue = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->svalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->svalue(i));
    }
    total_size += 1 * this->svalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HintClientTaskPanel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HintClientTaskPanel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HintClientTaskPanel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HintClientTaskPanel::MergeFrom(const HintClientTaskPanel& from) {
  GOOGLE_CHECK_NE(&from, this);
  bigtype_.MergeFrom(from.bigtype_);
  smalltype_.MergeFrom(from.smalltype_);
  fvalue_.MergeFrom(from.fvalue_);
  svalue_.MergeFrom(from.svalue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HintClientTaskPanel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HintClientTaskPanel::CopyFrom(const HintClientTaskPanel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HintClientTaskPanel::IsInitialized() const {

  return true;
}

void HintClientTaskPanel::Swap(HintClientTaskPanel* other) {
  if (other != this) {
    bigtype_.Swap(&other->bigtype_);
    smalltype_.Swap(&other->smalltype_);
    fvalue_.Swap(&other->fvalue_);
    svalue_.Swap(&other->svalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HintClientTaskPanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HintClientTaskPanel_descriptor_;
  metadata.reflection = HintClientTaskPanel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SystemNoticeProto

// @@protoc_insertion_point(global_scope)
