// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_BugSubmit.proto

#ifndef PROTOBUF_MSProtoc_2fMS_5fBugSubmit_2eproto__INCLUDED
#define PROTOBUF_MSProtoc_2fMS_5fBugSubmit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MS_BugSubmit {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

class Admin_C2GMBugSubmit;
class Admin_GM2DBBugSubmit;
class Admin_DBBugSubmitBaseInfo;
class Admin_DBBugSubmit;
class Admin_ReqBugSubmitList;
class Admin_RetBugSubmitList;
class Admin_ReqBugSubmitOp;
class Admin_RetBugSubmitOp;

// ===================================================================

class Admin_C2GMBugSubmit : public ::google::protobuf::Message {
 public:
  Admin_C2GMBugSubmit();
  virtual ~Admin_C2GMBugSubmit();

  Admin_C2GMBugSubmit(const Admin_C2GMBugSubmit& from);

  inline Admin_C2GMBugSubmit& operator=(const Admin_C2GMBugSubmit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_C2GMBugSubmit& default_instance();

  void Swap(Admin_C2GMBugSubmit* other);

  // implements Message ----------------------------------------------

  Admin_C2GMBugSubmit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_C2GMBugSubmit& from);
  void MergeFrom(const Admin_C2GMBugSubmit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string qq = 4;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 4;
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_C2GMBugSubmit)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_qq();
  inline void clear_has_qq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* text_;
  ::std::string* qq_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_C2GMBugSubmit* default_instance_;
};
// -------------------------------------------------------------------

class Admin_GM2DBBugSubmit : public ::google::protobuf::Message {
 public:
  Admin_GM2DBBugSubmit();
  virtual ~Admin_GM2DBBugSubmit();

  Admin_GM2DBBugSubmit(const Admin_GM2DBBugSubmit& from);

  inline Admin_GM2DBBugSubmit& operator=(const Admin_GM2DBBugSubmit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_GM2DBBugSubmit& default_instance();

  void Swap(Admin_GM2DBBugSubmit* other);

  // implements Message ----------------------------------------------

  Admin_GM2DBBugSubmit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_GM2DBBugSubmit& from);
  void MergeFrom(const Admin_GM2DBBugSubmit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string title = 4;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 4;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional string qq = 6;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 6;
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_GM2DBBugSubmit)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_qq();
  inline void clear_has_qq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 type_;
  ::std::string* title_;
  ::std::string* text_;
  ::std::string* qq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_GM2DBBugSubmit* default_instance_;
};
// -------------------------------------------------------------------

class Admin_DBBugSubmitBaseInfo : public ::google::protobuf::Message {
 public:
  Admin_DBBugSubmitBaseInfo();
  virtual ~Admin_DBBugSubmitBaseInfo();

  Admin_DBBugSubmitBaseInfo(const Admin_DBBugSubmitBaseInfo& from);

  inline Admin_DBBugSubmitBaseInfo& operator=(const Admin_DBBugSubmitBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_DBBugSubmitBaseInfo& default_instance();

  void Swap(Admin_DBBugSubmitBaseInfo* other);

  // implements Message ----------------------------------------------

  Admin_DBBugSubmitBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_DBBugSubmitBaseInfo& from);
  void MergeFrom(const Admin_DBBugSubmitBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bugID = 1;
  inline bool has_bugid() const;
  inline void clear_bugid();
  static const int kBugIDFieldNumber = 1;
  inline ::google::protobuf::int64 bugid() const;
  inline void set_bugid(::google::protobuf::int64 value);

  // required int64 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int64 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_DBBugSubmitBaseInfo)
 private:
  inline void set_has_bugid();
  inline void clear_has_bugid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bugid_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 type_;
  ::std::string* title_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_DBBugSubmitBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_DBBugSubmit : public ::google::protobuf::Message {
 public:
  Admin_DBBugSubmit();
  virtual ~Admin_DBBugSubmit();

  Admin_DBBugSubmit(const Admin_DBBugSubmit& from);

  inline Admin_DBBugSubmit& operator=(const Admin_DBBugSubmit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_DBBugSubmit& default_instance();

  void Swap(Admin_DBBugSubmit* other);

  // implements Message ----------------------------------------------

  Admin_DBBugSubmit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_DBBugSubmit& from);
  void MergeFrom(const Admin_DBBugSubmit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 bugID = 1;
  inline bool has_bugid() const;
  inline void clear_bugid();
  static const int kBugIDFieldNumber = 1;
  inline ::google::protobuf::int64 bugid() const;
  inline void set_bugid(::google::protobuf::int64 value);

  // required int64 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string text = 6;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 6;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // required int64 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string qq = 8;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQqFieldNumber = 8;
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // optional string result = 9;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 9;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_DBBugSubmit)
 private:
  inline void set_has_bugid();
  inline void clear_has_bugid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bugid_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 type_;
  ::std::string* title_;
  ::std::string* text_;
  ::google::protobuf::int64 time_;
  ::std::string* qq_;
  ::std::string* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_DBBugSubmit* default_instance_;
};
// -------------------------------------------------------------------

class Admin_ReqBugSubmitList : public ::google::protobuf::Message {
 public:
  Admin_ReqBugSubmitList();
  virtual ~Admin_ReqBugSubmitList();

  Admin_ReqBugSubmitList(const Admin_ReqBugSubmitList& from);

  inline Admin_ReqBugSubmitList& operator=(const Admin_ReqBugSubmitList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_ReqBugSubmitList& default_instance();

  void Swap(Admin_ReqBugSubmitList* other);

  // implements Message ----------------------------------------------

  Admin_ReqBugSubmitList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_ReqBugSubmitList& from);
  void MergeFrom(const Admin_ReqBugSubmitList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 start = 2;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 2;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // required int32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int64 beginTime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_ReqBugSubmitList)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_ReqBugSubmitList* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RetBugSubmitList : public ::google::protobuf::Message {
 public:
  Admin_RetBugSubmitList();
  virtual ~Admin_RetBugSubmitList();

  Admin_RetBugSubmitList(const Admin_RetBugSubmitList& from);

  inline Admin_RetBugSubmitList& operator=(const Admin_RetBugSubmitList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RetBugSubmitList& default_instance();

  void Swap(Admin_RetBugSubmitList* other);

  // implements Message ----------------------------------------------

  Admin_RetBugSubmitList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RetBugSubmitList& from);
  void MergeFrom(const Admin_RetBugSubmitList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 totalCount = 2;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::int32 totalcount() const;
  inline void set_totalcount(::google::protobuf::int32 value);

  // repeated .MS_BugSubmit.Admin_DBBugSubmitBaseInfo baseBugList = 3;
  inline int basebuglist_size() const;
  inline void clear_basebuglist();
  static const int kBaseBugListFieldNumber = 3;
  inline const ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo& basebuglist(int index) const;
  inline ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo* mutable_basebuglist(int index);
  inline ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo* add_basebuglist();
  inline const ::google::protobuf::RepeatedPtrField< ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo >&
      basebuglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo >*
      mutable_basebuglist();

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_RetBugSubmitList)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 totalcount_;
  ::google::protobuf::RepeatedPtrField< ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo > basebuglist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_RetBugSubmitList* default_instance_;
};
// -------------------------------------------------------------------

class Admin_ReqBugSubmitOp : public ::google::protobuf::Message {
 public:
  Admin_ReqBugSubmitOp();
  virtual ~Admin_ReqBugSubmitOp();

  Admin_ReqBugSubmitOp(const Admin_ReqBugSubmitOp& from);

  inline Admin_ReqBugSubmitOp& operator=(const Admin_ReqBugSubmitOp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_ReqBugSubmitOp& default_instance();

  void Swap(Admin_ReqBugSubmitOp* other);

  // implements Message ----------------------------------------------

  Admin_ReqBugSubmitOp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_ReqBugSubmitOp& from);
  void MergeFrom(const Admin_ReqBugSubmitOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // required int64 bugID = 2;
  inline bool has_bugid() const;
  inline void clear_bugid();
  static const int kBugIDFieldNumber = 2;
  inline ::google::protobuf::int64 bugid() const;
  inline void set_bugid(::google::protobuf::int64 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_ReqBugSubmitOp)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_bugid();
  inline void clear_has_bugid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 bugid_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 type_;
  ::std::string* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_ReqBugSubmitOp* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RetBugSubmitOp : public ::google::protobuf::Message {
 public:
  Admin_RetBugSubmitOp();
  virtual ~Admin_RetBugSubmitOp();

  Admin_RetBugSubmitOp(const Admin_RetBugSubmitOp& from);

  inline Admin_RetBugSubmitOp& operator=(const Admin_RetBugSubmitOp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RetBugSubmitOp& default_instance();

  void Swap(Admin_RetBugSubmitOp* other);

  // implements Message ----------------------------------------------

  Admin_RetBugSubmitOp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RetBugSubmitOp& from);
  void MergeFrom(const Admin_RetBugSubmitOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 Op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional .MS_BugSubmit.Admin_DBBugSubmit bugInfo = 3;
  inline bool has_buginfo() const;
  inline void clear_buginfo();
  static const int kBugInfoFieldNumber = 3;
  inline const ::MS_BugSubmit::Admin_DBBugSubmit& buginfo() const;
  inline ::MS_BugSubmit::Admin_DBBugSubmit* mutable_buginfo();
  inline ::MS_BugSubmit::Admin_DBBugSubmit* release_buginfo();
  inline void set_allocated_buginfo(::MS_BugSubmit::Admin_DBBugSubmit* buginfo);

  // @@protoc_insertion_point(class_scope:MS_BugSubmit.Admin_RetBugSubmitOp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_buginfo();
  inline void clear_has_buginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 op_;
  ::MS_BugSubmit::Admin_DBBugSubmit* buginfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fBugSubmit_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fBugSubmit_2eproto();

  void InitAsDefaultInstance();
  static Admin_RetBugSubmitOp* default_instance_;
};
// ===================================================================


// ===================================================================

// Admin_C2GMBugSubmit

// required int32 type = 1;
inline bool Admin_C2GMBugSubmit::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_C2GMBugSubmit::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_C2GMBugSubmit::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_C2GMBugSubmit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_C2GMBugSubmit::type() const {
  return type_;
}
inline void Admin_C2GMBugSubmit::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string title = 2;
inline bool Admin_C2GMBugSubmit::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_C2GMBugSubmit::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_C2GMBugSubmit::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_C2GMBugSubmit::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Admin_C2GMBugSubmit::title() const {
  return *title_;
}
inline void Admin_C2GMBugSubmit::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_C2GMBugSubmit::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_C2GMBugSubmit::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_C2GMBugSubmit::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Admin_C2GMBugSubmit::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_C2GMBugSubmit::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string text = 3;
inline bool Admin_C2GMBugSubmit::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_C2GMBugSubmit::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_C2GMBugSubmit::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_C2GMBugSubmit::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Admin_C2GMBugSubmit::text() const {
  return *text_;
}
inline void Admin_C2GMBugSubmit::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Admin_C2GMBugSubmit::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Admin_C2GMBugSubmit::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_C2GMBugSubmit::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Admin_C2GMBugSubmit::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_C2GMBugSubmit::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string qq = 4;
inline bool Admin_C2GMBugSubmit::has_qq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_C2GMBugSubmit::set_has_qq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_C2GMBugSubmit::clear_has_qq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_C2GMBugSubmit::clear_qq() {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& Admin_C2GMBugSubmit::qq() const {
  return *qq_;
}
inline void Admin_C2GMBugSubmit::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void Admin_C2GMBugSubmit::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void Admin_C2GMBugSubmit::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_C2GMBugSubmit::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  return qq_;
}
inline ::std::string* Admin_C2GMBugSubmit::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_C2GMBugSubmit::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_GM2DBBugSubmit

// required int64 charID = 1;
inline bool Admin_GM2DBBugSubmit::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_GM2DBBugSubmit::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_GM2DBBugSubmit::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_GM2DBBugSubmit::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_GM2DBBugSubmit::charid() const {
  return charid_;
}
inline void Admin_GM2DBBugSubmit::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 state = 2;
inline bool Admin_GM2DBBugSubmit::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_GM2DBBugSubmit::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_GM2DBBugSubmit::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_GM2DBBugSubmit::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Admin_GM2DBBugSubmit::state() const {
  return state_;
}
inline void Admin_GM2DBBugSubmit::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int32 type = 3;
inline bool Admin_GM2DBBugSubmit::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_GM2DBBugSubmit::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_GM2DBBugSubmit::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_GM2DBBugSubmit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_GM2DBBugSubmit::type() const {
  return type_;
}
inline void Admin_GM2DBBugSubmit::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string title = 4;
inline bool Admin_GM2DBBugSubmit::has_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_GM2DBBugSubmit::set_has_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_GM2DBBugSubmit::clear_has_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_GM2DBBugSubmit::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Admin_GM2DBBugSubmit::title() const {
  return *title_;
}
inline void Admin_GM2DBBugSubmit::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_GM2DBBugSubmit::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_GM2DBBugSubmit::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_GM2DBBugSubmit::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Admin_GM2DBBugSubmit::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_GM2DBBugSubmit::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string text = 5;
inline bool Admin_GM2DBBugSubmit::has_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_GM2DBBugSubmit::set_has_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_GM2DBBugSubmit::clear_has_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_GM2DBBugSubmit::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Admin_GM2DBBugSubmit::text() const {
  return *text_;
}
inline void Admin_GM2DBBugSubmit::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Admin_GM2DBBugSubmit::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Admin_GM2DBBugSubmit::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_GM2DBBugSubmit::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Admin_GM2DBBugSubmit::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_GM2DBBugSubmit::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string qq = 6;
inline bool Admin_GM2DBBugSubmit::has_qq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_GM2DBBugSubmit::set_has_qq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_GM2DBBugSubmit::clear_has_qq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_GM2DBBugSubmit::clear_qq() {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& Admin_GM2DBBugSubmit::qq() const {
  return *qq_;
}
inline void Admin_GM2DBBugSubmit::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void Admin_GM2DBBugSubmit::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void Admin_GM2DBBugSubmit::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_GM2DBBugSubmit::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  return qq_;
}
inline ::std::string* Admin_GM2DBBugSubmit::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_GM2DBBugSubmit::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_DBBugSubmitBaseInfo

// required int64 bugID = 1;
inline bool Admin_DBBugSubmitBaseInfo::has_bugid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_DBBugSubmitBaseInfo::set_has_bugid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_has_bugid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_bugid() {
  bugid_ = GOOGLE_LONGLONG(0);
  clear_has_bugid();
}
inline ::google::protobuf::int64 Admin_DBBugSubmitBaseInfo::bugid() const {
  return bugid_;
}
inline void Admin_DBBugSubmitBaseInfo::set_bugid(::google::protobuf::int64 value) {
  set_has_bugid();
  bugid_ = value;
}

// required int64 charID = 2;
inline bool Admin_DBBugSubmitBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_DBBugSubmitBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_DBBugSubmitBaseInfo::charid() const {
  return charid_;
}
inline void Admin_DBBugSubmitBaseInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 state = 3;
inline bool Admin_DBBugSubmitBaseInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_DBBugSubmitBaseInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Admin_DBBugSubmitBaseInfo::state() const {
  return state_;
}
inline void Admin_DBBugSubmitBaseInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int32 type = 4;
inline bool Admin_DBBugSubmitBaseInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_DBBugSubmitBaseInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_DBBugSubmitBaseInfo::type() const {
  return type_;
}
inline void Admin_DBBugSubmitBaseInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string title = 5;
inline bool Admin_DBBugSubmitBaseInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_DBBugSubmitBaseInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Admin_DBBugSubmitBaseInfo::title() const {
  return *title_;
}
inline void Admin_DBBugSubmitBaseInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_DBBugSubmitBaseInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_DBBugSubmitBaseInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_DBBugSubmitBaseInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Admin_DBBugSubmitBaseInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_DBBugSubmitBaseInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 time = 6;
inline bool Admin_DBBugSubmitBaseInfo::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_DBBugSubmitBaseInfo::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_DBBugSubmitBaseInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Admin_DBBugSubmitBaseInfo::time() const {
  return time_;
}
inline void Admin_DBBugSubmitBaseInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// Admin_DBBugSubmit

// required int64 bugID = 1;
inline bool Admin_DBBugSubmit::has_bugid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_DBBugSubmit::set_has_bugid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_DBBugSubmit::clear_has_bugid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_DBBugSubmit::clear_bugid() {
  bugid_ = GOOGLE_LONGLONG(0);
  clear_has_bugid();
}
inline ::google::protobuf::int64 Admin_DBBugSubmit::bugid() const {
  return bugid_;
}
inline void Admin_DBBugSubmit::set_bugid(::google::protobuf::int64 value) {
  set_has_bugid();
  bugid_ = value;
}

// required int64 charID = 2;
inline bool Admin_DBBugSubmit::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_DBBugSubmit::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_DBBugSubmit::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_DBBugSubmit::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_DBBugSubmit::charid() const {
  return charid_;
}
inline void Admin_DBBugSubmit::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 state = 3;
inline bool Admin_DBBugSubmit::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_DBBugSubmit::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_DBBugSubmit::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_DBBugSubmit::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 Admin_DBBugSubmit::state() const {
  return state_;
}
inline void Admin_DBBugSubmit::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int32 type = 4;
inline bool Admin_DBBugSubmit::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_DBBugSubmit::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_DBBugSubmit::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_DBBugSubmit::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_DBBugSubmit::type() const {
  return type_;
}
inline void Admin_DBBugSubmit::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required string title = 5;
inline bool Admin_DBBugSubmit::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_DBBugSubmit::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_DBBugSubmit::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_DBBugSubmit::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Admin_DBBugSubmit::title() const {
  return *title_;
}
inline void Admin_DBBugSubmit::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_DBBugSubmit::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Admin_DBBugSubmit::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_DBBugSubmit::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Admin_DBBugSubmit::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_DBBugSubmit::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string text = 6;
inline bool Admin_DBBugSubmit::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_DBBugSubmit::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_DBBugSubmit::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_DBBugSubmit::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Admin_DBBugSubmit::text() const {
  return *text_;
}
inline void Admin_DBBugSubmit::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Admin_DBBugSubmit::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Admin_DBBugSubmit::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_DBBugSubmit::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Admin_DBBugSubmit::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_DBBugSubmit::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 time = 7;
inline bool Admin_DBBugSubmit::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Admin_DBBugSubmit::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Admin_DBBugSubmit::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Admin_DBBugSubmit::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Admin_DBBugSubmit::time() const {
  return time_;
}
inline void Admin_DBBugSubmit::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string qq = 8;
inline bool Admin_DBBugSubmit::has_qq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Admin_DBBugSubmit::set_has_qq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Admin_DBBugSubmit::clear_has_qq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Admin_DBBugSubmit::clear_qq() {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& Admin_DBBugSubmit::qq() const {
  return *qq_;
}
inline void Admin_DBBugSubmit::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void Admin_DBBugSubmit::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
}
inline void Admin_DBBugSubmit::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_DBBugSubmit::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    qq_ = new ::std::string;
  }
  return qq_;
}
inline ::std::string* Admin_DBBugSubmit::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_DBBugSubmit::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::kEmptyString) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result = 9;
inline bool Admin_DBBugSubmit::has_result() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Admin_DBBugSubmit::set_has_result() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Admin_DBBugSubmit::clear_has_result() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Admin_DBBugSubmit::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& Admin_DBBugSubmit::result() const {
  return *result_;
}
inline void Admin_DBBugSubmit::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Admin_DBBugSubmit::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Admin_DBBugSubmit::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_DBBugSubmit::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* Admin_DBBugSubmit::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_DBBugSubmit::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_ReqBugSubmitList

// required int32 type = 1;
inline bool Admin_ReqBugSubmitList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_ReqBugSubmitList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_ReqBugSubmitList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_ReqBugSubmitList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_ReqBugSubmitList::type() const {
  return type_;
}
inline void Admin_ReqBugSubmitList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 start = 2;
inline bool Admin_ReqBugSubmitList::has_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_ReqBugSubmitList::set_has_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_ReqBugSubmitList::clear_has_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_ReqBugSubmitList::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 Admin_ReqBugSubmitList::start() const {
  return start_;
}
inline void Admin_ReqBugSubmitList::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
}

// required int32 count = 3;
inline bool Admin_ReqBugSubmitList::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_ReqBugSubmitList::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_ReqBugSubmitList::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_ReqBugSubmitList::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Admin_ReqBugSubmitList::count() const {
  return count_;
}
inline void Admin_ReqBugSubmitList::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int64 beginTime = 4;
inline bool Admin_ReqBugSubmitList::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_ReqBugSubmitList::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_ReqBugSubmitList::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_ReqBugSubmitList::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 Admin_ReqBugSubmitList::begintime() const {
  return begintime_;
}
inline void Admin_ReqBugSubmitList::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 5;
inline bool Admin_ReqBugSubmitList::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_ReqBugSubmitList::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_ReqBugSubmitList::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_ReqBugSubmitList::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 Admin_ReqBugSubmitList::endtime() const {
  return endtime_;
}
inline void Admin_ReqBugSubmitList::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// Admin_RetBugSubmitList

// required int32 ret = 1;
inline bool Admin_RetBugSubmitList::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RetBugSubmitList::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RetBugSubmitList::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RetBugSubmitList::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_RetBugSubmitList::ret() const {
  return ret_;
}
inline void Admin_RetBugSubmitList::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 totalCount = 2;
inline bool Admin_RetBugSubmitList::has_totalcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_RetBugSubmitList::set_has_totalcount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_RetBugSubmitList::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_RetBugSubmitList::clear_totalcount() {
  totalcount_ = 0;
  clear_has_totalcount();
}
inline ::google::protobuf::int32 Admin_RetBugSubmitList::totalcount() const {
  return totalcount_;
}
inline void Admin_RetBugSubmitList::set_totalcount(::google::protobuf::int32 value) {
  set_has_totalcount();
  totalcount_ = value;
}

// repeated .MS_BugSubmit.Admin_DBBugSubmitBaseInfo baseBugList = 3;
inline int Admin_RetBugSubmitList::basebuglist_size() const {
  return basebuglist_.size();
}
inline void Admin_RetBugSubmitList::clear_basebuglist() {
  basebuglist_.Clear();
}
inline const ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo& Admin_RetBugSubmitList::basebuglist(int index) const {
  return basebuglist_.Get(index);
}
inline ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo* Admin_RetBugSubmitList::mutable_basebuglist(int index) {
  return basebuglist_.Mutable(index);
}
inline ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo* Admin_RetBugSubmitList::add_basebuglist() {
  return basebuglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo >&
Admin_RetBugSubmitList::basebuglist() const {
  return basebuglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MS_BugSubmit::Admin_DBBugSubmitBaseInfo >*
Admin_RetBugSubmitList::mutable_basebuglist() {
  return &basebuglist_;
}

// -------------------------------------------------------------------

// Admin_ReqBugSubmitOp

// required int32 Op = 1;
inline bool Admin_ReqBugSubmitOp::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_ReqBugSubmitOp::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_ReqBugSubmitOp::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_ReqBugSubmitOp::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Admin_ReqBugSubmitOp::op() const {
  return op_;
}
inline void Admin_ReqBugSubmitOp::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// required int64 bugID = 2;
inline bool Admin_ReqBugSubmitOp::has_bugid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_ReqBugSubmitOp::set_has_bugid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_ReqBugSubmitOp::clear_has_bugid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_ReqBugSubmitOp::clear_bugid() {
  bugid_ = GOOGLE_LONGLONG(0);
  clear_has_bugid();
}
inline ::google::protobuf::int64 Admin_ReqBugSubmitOp::bugid() const {
  return bugid_;
}
inline void Admin_ReqBugSubmitOp::set_bugid(::google::protobuf::int64 value) {
  set_has_bugid();
  bugid_ = value;
}

// optional int32 type = 3;
inline bool Admin_ReqBugSubmitOp::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_ReqBugSubmitOp::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_ReqBugSubmitOp::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_ReqBugSubmitOp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_ReqBugSubmitOp::type() const {
  return type_;
}
inline void Admin_ReqBugSubmitOp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string result = 4;
inline bool Admin_ReqBugSubmitOp::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_ReqBugSubmitOp::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_ReqBugSubmitOp::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_ReqBugSubmitOp::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& Admin_ReqBugSubmitOp::result() const {
  return *result_;
}
inline void Admin_ReqBugSubmitOp::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Admin_ReqBugSubmitOp::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void Admin_ReqBugSubmitOp::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_ReqBugSubmitOp::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* Admin_ReqBugSubmitOp::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_ReqBugSubmitOp::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_RetBugSubmitOp

// required int32 ret = 1;
inline bool Admin_RetBugSubmitOp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RetBugSubmitOp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RetBugSubmitOp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RetBugSubmitOp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_RetBugSubmitOp::ret() const {
  return ret_;
}
inline void Admin_RetBugSubmitOp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 Op = 2;
inline bool Admin_RetBugSubmitOp::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_RetBugSubmitOp::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_RetBugSubmitOp::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_RetBugSubmitOp::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Admin_RetBugSubmitOp::op() const {
  return op_;
}
inline void Admin_RetBugSubmitOp::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional .MS_BugSubmit.Admin_DBBugSubmit bugInfo = 3;
inline bool Admin_RetBugSubmitOp::has_buginfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_RetBugSubmitOp::set_has_buginfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_RetBugSubmitOp::clear_has_buginfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_RetBugSubmitOp::clear_buginfo() {
  if (buginfo_ != NULL) buginfo_->::MS_BugSubmit::Admin_DBBugSubmit::Clear();
  clear_has_buginfo();
}
inline const ::MS_BugSubmit::Admin_DBBugSubmit& Admin_RetBugSubmitOp::buginfo() const {
  return buginfo_ != NULL ? *buginfo_ : *default_instance_->buginfo_;
}
inline ::MS_BugSubmit::Admin_DBBugSubmit* Admin_RetBugSubmitOp::mutable_buginfo() {
  set_has_buginfo();
  if (buginfo_ == NULL) buginfo_ = new ::MS_BugSubmit::Admin_DBBugSubmit;
  return buginfo_;
}
inline ::MS_BugSubmit::Admin_DBBugSubmit* Admin_RetBugSubmitOp::release_buginfo() {
  clear_has_buginfo();
  ::MS_BugSubmit::Admin_DBBugSubmit* temp = buginfo_;
  buginfo_ = NULL;
  return temp;
}
inline void Admin_RetBugSubmitOp::set_allocated_buginfo(::MS_BugSubmit::Admin_DBBugSubmit* buginfo) {
  delete buginfo_;
  buginfo_ = buginfo;
  if (buginfo) {
    set_has_buginfo();
  } else {
    clear_has_buginfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_BugSubmit

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSProtoc_2fMS_5fBugSubmit_2eproto__INCLUDED
