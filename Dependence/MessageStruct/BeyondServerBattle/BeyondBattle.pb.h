// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BeyondServerBattle/BeyondBattle.proto

#ifndef PROTOBUF_BeyondServerBattle_2fBeyondBattle_2eproto__INCLUDED
#define PROTOBUF_BeyondServerBattle_2fBeyondBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ServerBattle {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

class AckBeyondBattle;
class ClientReqBeyondRank;
class AckBeyondRank;
class BattleRankInfo;
class RankPlayerInfo;
class ClientReqBeyondPlayerInfo;
class MatchPlayerType;
class MatchPlayerReturn;
class BeyondBattleResult;
class BattlePlayerResult;
class AckGetBeyondReward;
class BroadPlayerMatch;
class ToWSMatchedPlayer;
class BroadPlayerIsMatched;
class BroadPlayerCancelMatch;
class BroadCastPKResult;
class BeyondPlayerInfo;
class ItemInfo;
class ClientMatchPlayerType;
class ToClientMatchPlayerType;

// ===================================================================

class AckBeyondBattle : public ::google::protobuf::Message {
 public:
  AckBeyondBattle();
  virtual ~AckBeyondBattle();

  AckBeyondBattle(const AckBeyondBattle& from);

  inline AckBeyondBattle& operator=(const AckBeyondBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBeyondBattle& default_instance();

  void Swap(AckBeyondBattle* other);

  // implements Message ----------------------------------------------

  AckBeyondBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBeyondBattle& from);
  void MergeFrom(const AckBeyondBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 reward = 3;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline ::google::protobuf::int32 reward() const;
  inline void set_reward(::google::protobuf::int32 value);

  // optional int32 single = 4;
  inline bool has_single() const;
  inline void clear_single();
  static const int kSingleFieldNumber = 4;
  inline ::google::protobuf::int32 single() const;
  inline void set_single(::google::protobuf::int32 value);

  // optional int32 group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int64 cdtime = 6;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdtimeFieldNumber = 6;
  inline ::google::protobuf::int64 cdtime() const;
  inline void set_cdtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.AckBeyondBattle)
 private:
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_reward();
  inline void clear_has_reward();
  inline void set_has_single();
  inline void clear_has_single();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_cdtime();
  inline void clear_has_cdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 reward_;
  ::google::protobuf::int32 single_;
  ::google::protobuf::int64 cdtime_;
  ::google::protobuf::int32 group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static AckBeyondBattle* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqBeyondRank : public ::google::protobuf::Message {
 public:
  ClientReqBeyondRank();
  virtual ~ClientReqBeyondRank();

  ClientReqBeyondRank(const ClientReqBeyondRank& from);

  inline ClientReqBeyondRank& operator=(const ClientReqBeyondRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqBeyondRank& default_instance();

  void Swap(ClientReqBeyondRank* other);

  // implements Message ----------------------------------------------

  ClientReqBeyondRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqBeyondRank& from);
  void MergeFrom(const ClientReqBeyondRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 page = 1;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 1;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.ClientReqBeyondRank)
 private:
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 page_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static ClientReqBeyondRank* default_instance_;
};
// -------------------------------------------------------------------

class AckBeyondRank : public ::google::protobuf::Message {
 public:
  AckBeyondRank();
  virtual ~AckBeyondRank();

  AckBeyondRank(const AckBeyondRank& from);

  inline AckBeyondRank& operator=(const AckBeyondRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBeyondRank& default_instance();

  void Swap(AckBeyondRank* other);

  // implements Message ----------------------------------------------

  AckBeyondRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBeyondRank& from);
  void MergeFrom(const AckBeyondRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerBattle.BattleRankInfo binfo = 1;
  inline int binfo_size() const;
  inline void clear_binfo();
  static const int kBinfoFieldNumber = 1;
  inline const ::ServerBattle::BattleRankInfo& binfo(int index) const;
  inline ::ServerBattle::BattleRankInfo* mutable_binfo(int index);
  inline ::ServerBattle::BattleRankInfo* add_binfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattleRankInfo >&
      binfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattleRankInfo >*
      mutable_binfo();

  // optional .ServerBattle.RankPlayerInfo pinfo = 2;
  inline bool has_pinfo() const;
  inline void clear_pinfo();
  static const int kPinfoFieldNumber = 2;
  inline const ::ServerBattle::RankPlayerInfo& pinfo() const;
  inline ::ServerBattle::RankPlayerInfo* mutable_pinfo();
  inline ::ServerBattle::RankPlayerInfo* release_pinfo();
  inline void set_allocated_pinfo(::ServerBattle::RankPlayerInfo* pinfo);

  // optional int32 myselfrank = 3;
  inline bool has_myselfrank() const;
  inline void clear_myselfrank();
  static const int kMyselfrankFieldNumber = 3;
  inline ::google::protobuf::int32 myselfrank() const;
  inline void set_myselfrank(::google::protobuf::int32 value);

  // optional int32 page = 4;
  inline bool has_page() const;
  inline void clear_page();
  static const int kPageFieldNumber = 4;
  inline ::google::protobuf::int32 page() const;
  inline void set_page(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.AckBeyondRank)
 private:
  inline void set_has_pinfo();
  inline void clear_has_pinfo();
  inline void set_has_myselfrank();
  inline void clear_has_myselfrank();
  inline void set_has_page();
  inline void clear_has_page();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattleRankInfo > binfo_;
  ::ServerBattle::RankPlayerInfo* pinfo_;
  ::google::protobuf::int32 myselfrank_;
  ::google::protobuf::int32 page_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static AckBeyondRank* default_instance_;
};
// -------------------------------------------------------------------

class BattleRankInfo : public ::google::protobuf::Message {
 public:
  BattleRankInfo();
  virtual ~BattleRankInfo();

  BattleRankInfo(const BattleRankInfo& from);

  inline BattleRankInfo& operator=(const BattleRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattleRankInfo& default_instance();

  void Swap(BattleRankInfo* other);

  // implements Message ----------------------------------------------

  BattleRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattleRankInfo& from);
  void MergeFrom(const BattleRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 viplv = 6;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 6;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.BattleRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 profession_;
  ::std::string* name_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BattleRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankPlayerInfo : public ::google::protobuf::Message {
 public:
  RankPlayerInfo();
  virtual ~RankPlayerInfo();

  RankPlayerInfo(const RankPlayerInfo& from);

  inline RankPlayerInfo& operator=(const RankPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankPlayerInfo& default_instance();

  void Swap(RankPlayerInfo* other);

  // implements Message ----------------------------------------------

  RankPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankPlayerInfo& from);
  void MergeFrom(const RankPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 suitrnt = 1;
  inline bool has_suitrnt() const;
  inline void clear_suitrnt();
  static const int kSuitrntFieldNumber = 1;
  inline ::google::protobuf::int32 suitrnt() const;
  inline void set_suitrnt(::google::protobuf::int32 value);

  // optional int32 mainEquip = 2;
  inline bool has_mainequip() const;
  inline void clear_mainequip();
  static const int kMainEquipFieldNumber = 2;
  inline ::google::protobuf::int32 mainequip() const;
  inline void set_mainequip(::google::protobuf::int32 value);

  // optional int32 costume = 3;
  inline bool has_costume() const;
  inline void clear_costume();
  static const int kCostumeFieldNumber = 3;
  inline ::google::protobuf::int32 costume() const;
  inline void set_costume(::google::protobuf::int32 value);

  // optional int32 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional bool sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline bool sex() const;
  inline void set_sex(bool value);

  // optional int32 magicid = 6;
  inline bool has_magicid() const;
  inline void clear_magicid();
  static const int kMagicidFieldNumber = 6;
  inline ::google::protobuf::int32 magicid() const;
  inline void set_magicid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.RankPlayerInfo)
 private:
  inline void set_has_suitrnt();
  inline void clear_has_suitrnt();
  inline void set_has_mainequip();
  inline void clear_has_mainequip();
  inline void set_has_costume();
  inline void clear_has_costume();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_magicid();
  inline void clear_has_magicid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 suitrnt_;
  ::google::protobuf::int32 mainequip_;
  ::google::protobuf::int32 costume_;
  ::google::protobuf::int32 fight_;
  bool sex_;
  ::google::protobuf::int32 magicid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static RankPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqBeyondPlayerInfo : public ::google::protobuf::Message {
 public:
  ClientReqBeyondPlayerInfo();
  virtual ~ClientReqBeyondPlayerInfo();

  ClientReqBeyondPlayerInfo(const ClientReqBeyondPlayerInfo& from);

  inline ClientReqBeyondPlayerInfo& operator=(const ClientReqBeyondPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqBeyondPlayerInfo& default_instance();

  void Swap(ClientReqBeyondPlayerInfo* other);

  // implements Message ----------------------------------------------

  ClientReqBeyondPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqBeyondPlayerInfo& from);
  void MergeFrom(const ClientReqBeyondPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.ClientReqBeyondPlayerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static ClientReqBeyondPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class MatchPlayerType : public ::google::protobuf::Message {
 public:
  MatchPlayerType();
  virtual ~MatchPlayerType();

  MatchPlayerType(const MatchPlayerType& from);

  inline MatchPlayerType& operator=(const MatchPlayerType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchPlayerType& default_instance();

  void Swap(MatchPlayerType* other);

  // implements Message ----------------------------------------------

  MatchPlayerType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchPlayerType& from);
  void MergeFrom(const MatchPlayerType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.MatchPlayerType)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static MatchPlayerType* default_instance_;
};
// -------------------------------------------------------------------

class MatchPlayerReturn : public ::google::protobuf::Message {
 public:
  MatchPlayerReturn();
  virtual ~MatchPlayerReturn();

  MatchPlayerReturn(const MatchPlayerReturn& from);

  inline MatchPlayerReturn& operator=(const MatchPlayerReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchPlayerReturn& default_instance();

  void Swap(MatchPlayerReturn* other);

  // implements Message ----------------------------------------------

  MatchPlayerReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchPlayerReturn& from);
  void MergeFrom(const MatchPlayerReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int64 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.MatchPlayerReturn)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static MatchPlayerReturn* default_instance_;
};
// -------------------------------------------------------------------

class BeyondBattleResult : public ::google::protobuf::Message {
 public:
  BeyondBattleResult();
  virtual ~BeyondBattleResult();

  BeyondBattleResult(const BeyondBattleResult& from);

  inline BeyondBattleResult& operator=(const BeyondBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeyondBattleResult& default_instance();

  void Swap(BeyondBattleResult* other);

  // implements Message ----------------------------------------------

  BeyondBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeyondBattleResult& from);
  void MergeFrom(const BeyondBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .ServerBattle.BattlePlayerResult res = 2;
  inline int res_size() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline const ::ServerBattle::BattlePlayerResult& res(int index) const;
  inline ::ServerBattle::BattlePlayerResult* mutable_res(int index);
  inline ::ServerBattle::BattlePlayerResult* add_res();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattlePlayerResult >&
      res() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattlePlayerResult >*
      mutable_res();

  // @@protoc_insertion_point(class_scope:ServerBattle.BeyondBattleResult)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattlePlayerResult > res_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BeyondBattleResult* default_instance_;
};
// -------------------------------------------------------------------

class BattlePlayerResult : public ::google::protobuf::Message {
 public:
  BattlePlayerResult();
  virtual ~BattlePlayerResult();

  BattlePlayerResult(const BattlePlayerResult& from);

  inline BattlePlayerResult& operator=(const BattlePlayerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BattlePlayerResult& default_instance();

  void Swap(BattlePlayerResult* other);

  // implements Message ----------------------------------------------

  BattlePlayerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BattlePlayerResult& from);
  void MergeFrom(const BattlePlayerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 attack = 3;
  inline bool has_attack() const;
  inline void clear_attack();
  static const int kAttackFieldNumber = 3;
  inline ::google::protobuf::int64 attack() const;
  inline void set_attack(::google::protobuf::int64 value);

  // optional int32 nowscore = 4;
  inline bool has_nowscore() const;
  inline void clear_nowscore();
  static const int kNowscoreFieldNumber = 4;
  inline ::google::protobuf::int32 nowscore() const;
  inline void set_nowscore(::google::protobuf::int32 value);

  // optional int32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.BattlePlayerResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_attack();
  inline void clear_has_attack();
  inline void set_has_nowscore();
  inline void clear_has_nowscore();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int64 attack_;
  ::google::protobuf::int32 nowscore_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BattlePlayerResult* default_instance_;
};
// -------------------------------------------------------------------

class AckGetBeyondReward : public ::google::protobuf::Message {
 public:
  AckGetBeyondReward();
  virtual ~AckGetBeyondReward();

  AckGetBeyondReward(const AckGetBeyondReward& from);

  inline AckGetBeyondReward& operator=(const AckGetBeyondReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGetBeyondReward& default_instance();

  void Swap(AckGetBeyondReward* other);

  // implements Message ----------------------------------------------

  AckGetBeyondReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGetBeyondReward& from);
  void MergeFrom(const AckGetBeyondReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.AckGetBeyondReward)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static AckGetBeyondReward* default_instance_;
};
// -------------------------------------------------------------------

class BroadPlayerMatch : public ::google::protobuf::Message {
 public:
  BroadPlayerMatch();
  virtual ~BroadPlayerMatch();

  BroadPlayerMatch(const BroadPlayerMatch& from);

  inline BroadPlayerMatch& operator=(const BroadPlayerMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadPlayerMatch& default_instance();

  void Swap(BroadPlayerMatch* other);

  // implements Message ----------------------------------------------

  BroadPlayerMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadPlayerMatch& from);
  void MergeFrom(const BroadPlayerMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional int32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.BroadPlayerMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BroadPlayerMatch* default_instance_;
};
// -------------------------------------------------------------------

class ToWSMatchedPlayer : public ::google::protobuf::Message {
 public:
  ToWSMatchedPlayer();
  virtual ~ToWSMatchedPlayer();

  ToWSMatchedPlayer(const ToWSMatchedPlayer& from);

  inline ToWSMatchedPlayer& operator=(const ToWSMatchedPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToWSMatchedPlayer& default_instance();

  void Swap(ToWSMatchedPlayer* other);

  // implements Message ----------------------------------------------

  ToWSMatchedPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToWSMatchedPlayer& from);
  void MergeFrom(const ToWSMatchedPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 target = 2;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 2;
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 myself = 4;
  inline bool has_myself() const;
  inline void clear_myself();
  static const int kMyselfFieldNumber = 4;
  inline ::google::protobuf::int32 myself() const;
  inline void set_myself(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.ToWSMatchedPlayer)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_myself();
  inline void clear_has_myself();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 myself_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static ToWSMatchedPlayer* default_instance_;
};
// -------------------------------------------------------------------

class BroadPlayerIsMatched : public ::google::protobuf::Message {
 public:
  BroadPlayerIsMatched();
  virtual ~BroadPlayerIsMatched();

  BroadPlayerIsMatched(const BroadPlayerIsMatched& from);

  inline BroadPlayerIsMatched& operator=(const BroadPlayerIsMatched& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadPlayerIsMatched& default_instance();

  void Swap(BroadPlayerIsMatched* other);

  // implements Message ----------------------------------------------

  BroadPlayerIsMatched* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadPlayerIsMatched& from);
  void MergeFrom(const BroadPlayerIsMatched& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.BroadPlayerIsMatched)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BroadPlayerIsMatched* default_instance_;
};
// -------------------------------------------------------------------

class BroadPlayerCancelMatch : public ::google::protobuf::Message {
 public:
  BroadPlayerCancelMatch();
  virtual ~BroadPlayerCancelMatch();

  BroadPlayerCancelMatch(const BroadPlayerCancelMatch& from);

  inline BroadPlayerCancelMatch& operator=(const BroadPlayerCancelMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadPlayerCancelMatch& default_instance();

  void Swap(BroadPlayerCancelMatch* other);

  // implements Message ----------------------------------------------

  BroadPlayerCancelMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadPlayerCancelMatch& from);
  void MergeFrom(const BroadPlayerCancelMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.BroadPlayerCancelMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BroadPlayerCancelMatch* default_instance_;
};
// -------------------------------------------------------------------

class BroadCastPKResult : public ::google::protobuf::Message {
 public:
  BroadCastPKResult();
  virtual ~BroadCastPKResult();

  BroadCastPKResult(const BroadCastPKResult& from);

  inline BroadCastPKResult& operator=(const BroadCastPKResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadCastPKResult& default_instance();

  void Swap(BroadCastPKResult* other);

  // implements Message ----------------------------------------------

  BroadCastPKResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadCastPKResult& from);
  void MergeFrom(const BroadCastPKResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional string charname = 3;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 3;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional .ServerBattle.BeyondPlayerInfo info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::ServerBattle::BeyondPlayerInfo& info() const;
  inline ::ServerBattle::BeyondPlayerInfo* mutable_info();
  inline ::ServerBattle::BeyondPlayerInfo* release_info();
  inline void set_allocated_info(::ServerBattle::BeyondPlayerInfo* info);

  // @@protoc_insertion_point(class_scope:ServerBattle.BroadCastPKResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 profession_;
  ::ServerBattle::BeyondPlayerInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BroadCastPKResult* default_instance_;
};
// -------------------------------------------------------------------

class BeyondPlayerInfo : public ::google::protobuf::Message {
 public:
  BeyondPlayerInfo();
  virtual ~BeyondPlayerInfo();

  BeyondPlayerInfo(const BeyondPlayerInfo& from);

  inline BeyondPlayerInfo& operator=(const BeyondPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeyondPlayerInfo& default_instance();

  void Swap(BeyondPlayerInfo* other);

  // implements Message ----------------------------------------------

  BeyondPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeyondPlayerInfo& from);
  void MergeFrom(const BeyondPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sex = 1;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 1;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 hpmax = 3;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 3;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 mp = 4;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 4;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // optional int32 mpmax = 5;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 5;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // optional int32 strength = 6;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 6;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // optional int32 cleverpower = 7;
  inline bool has_cleverpower() const;
  inline void clear_cleverpower();
  static const int kCleverpowerFieldNumber = 7;
  inline ::google::protobuf::int32 cleverpower() const;
  inline void set_cleverpower(::google::protobuf::int32 value);

  // optional int32 cleverair = 8;
  inline bool has_cleverair() const;
  inline void clear_cleverair();
  static const int kCleverairFieldNumber = 8;
  inline ::google::protobuf::int32 cleverair() const;
  inline void set_cleverair(::google::protobuf::int32 value);

  // optional int32 physicalpower = 9;
  inline bool has_physicalpower() const;
  inline void clear_physicalpower();
  static const int kPhysicalpowerFieldNumber = 9;
  inline ::google::protobuf::int32 physicalpower() const;
  inline void set_physicalpower(::google::protobuf::int32 value);

  // optional int32 patience = 10;
  inline bool has_patience() const;
  inline void clear_patience();
  static const int kPatienceFieldNumber = 10;
  inline ::google::protobuf::int32 patience() const;
  inline void set_patience(::google::protobuf::int32 value);

  // optional int32 agility = 11;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 11;
  inline ::google::protobuf::int32 agility() const;
  inline void set_agility(::google::protobuf::int32 value);

  // optional int32 power = 12;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 12;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 phyattack = 13;
  inline bool has_phyattack() const;
  inline void clear_phyattack();
  static const int kPhyattackFieldNumber = 13;
  inline ::google::protobuf::int32 phyattack() const;
  inline void set_phyattack(::google::protobuf::int32 value);

  // optional int32 phyattackmax = 14;
  inline bool has_phyattackmax() const;
  inline void clear_phyattackmax();
  static const int kPhyattackmaxFieldNumber = 14;
  inline ::google::protobuf::int32 phyattackmax() const;
  inline void set_phyattackmax(::google::protobuf::int32 value);

  // optional int32 phydefence = 15;
  inline bool has_phydefence() const;
  inline void clear_phydefence();
  static const int kPhydefenceFieldNumber = 15;
  inline ::google::protobuf::int32 phydefence() const;
  inline void set_phydefence(::google::protobuf::int32 value);

  // optional int32 magicattack = 16;
  inline bool has_magicattack() const;
  inline void clear_magicattack();
  static const int kMagicattackFieldNumber = 16;
  inline ::google::protobuf::int32 magicattack() const;
  inline void set_magicattack(::google::protobuf::int32 value);

  // optional int32 magicattackmax = 17;
  inline bool has_magicattackmax() const;
  inline void clear_magicattackmax();
  static const int kMagicattackmaxFieldNumber = 17;
  inline ::google::protobuf::int32 magicattackmax() const;
  inline void set_magicattackmax(::google::protobuf::int32 value);

  // optional int32 magicdefence = 18;
  inline bool has_magicdefence() const;
  inline void clear_magicdefence();
  static const int kMagicdefenceFieldNumber = 18;
  inline ::google::protobuf::int32 magicdefence() const;
  inline void set_magicdefence(::google::protobuf::int32 value);

  // optional int32 hitrate = 19;
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitrateFieldNumber = 19;
  inline ::google::protobuf::int32 hitrate() const;
  inline void set_hitrate(::google::protobuf::int32 value);

  // optional int32 avoidrate = 20;
  inline bool has_avoidrate() const;
  inline void clear_avoidrate();
  static const int kAvoidrateFieldNumber = 20;
  inline ::google::protobuf::int32 avoidrate() const;
  inline void set_avoidrate(::google::protobuf::int32 value);

  // optional int32 baselucky = 21;
  inline bool has_baselucky() const;
  inline void clear_baselucky();
  static const int kBaseluckyFieldNumber = 21;
  inline ::google::protobuf::int32 baselucky() const;
  inline void set_baselucky(::google::protobuf::int32 value);

  // optional int32 crackdownrate = 22;
  inline bool has_crackdownrate() const;
  inline void clear_crackdownrate();
  static const int kCrackdownrateFieldNumber = 22;
  inline ::google::protobuf::int32 crackdownrate() const;
  inline void set_crackdownrate(::google::protobuf::int32 value);

  // optional int32 baserte = 23;
  inline bool has_baserte() const;
  inline void clear_baserte();
  static const int kBaserteFieldNumber = 23;
  inline ::google::protobuf::int32 baserte() const;
  inline void set_baserte(::google::protobuf::int32 value);

  // repeated .ServerBattle.ItemInfo equip = 24;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 24;
  inline const ::ServerBattle::ItemInfo& equip(int index) const;
  inline ::ServerBattle::ItemInfo* mutable_equip(int index);
  inline ::ServerBattle::ItemInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerBattle::ItemInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerBattle::ItemInfo >*
      mutable_equip();

  // optional int32 fight = 25;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 25;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional int32 powermax = 26;
  inline bool has_powermax() const;
  inline void clear_powermax();
  static const int kPowermaxFieldNumber = 26;
  inline ::google::protobuf::int32 powermax() const;
  inline void set_powermax(::google::protobuf::int32 value);

  // optional int64 exp = 27;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 27;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int32 lv = 28;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 28;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 magicequipid = 29;
  inline bool has_magicequipid() const;
  inline void clear_magicequipid();
  static const int kMagicequipidFieldNumber = 29;
  inline ::google::protobuf::int32 magicequipid() const;
  inline void set_magicequipid(::google::protobuf::int32 value);

  // optional string guildname = 30;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 30;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional int32 guildjob = 31;
  inline bool has_guildjob() const;
  inline void clear_guildjob();
  static const int kGuildjobFieldNumber = 31;
  inline ::google::protobuf::int32 guildjob() const;
  inline void set_guildjob(::google::protobuf::int32 value);

  // optional int32 titleid = 32;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 32;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional int32 pkcount = 33;
  inline bool has_pkcount() const;
  inline void clear_pkcount();
  static const int kPkcountFieldNumber = 33;
  inline ::google::protobuf::int32 pkcount() const;
  inline void set_pkcount(::google::protobuf::int32 value);

  // optional int32 viplv = 34;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 34;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // optional int32 country = 35;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 35;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.BeyondPlayerInfo)
 private:
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_cleverpower();
  inline void clear_has_cleverpower();
  inline void set_has_cleverair();
  inline void clear_has_cleverair();
  inline void set_has_physicalpower();
  inline void clear_has_physicalpower();
  inline void set_has_patience();
  inline void clear_has_patience();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_phyattack();
  inline void clear_has_phyattack();
  inline void set_has_phyattackmax();
  inline void clear_has_phyattackmax();
  inline void set_has_phydefence();
  inline void clear_has_phydefence();
  inline void set_has_magicattack();
  inline void clear_has_magicattack();
  inline void set_has_magicattackmax();
  inline void clear_has_magicattackmax();
  inline void set_has_magicdefence();
  inline void clear_has_magicdefence();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_avoidrate();
  inline void clear_has_avoidrate();
  inline void set_has_baselucky();
  inline void clear_has_baselucky();
  inline void set_has_crackdownrate();
  inline void clear_has_crackdownrate();
  inline void set_has_baserte();
  inline void clear_has_baserte();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_powermax();
  inline void clear_has_powermax();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_magicequipid();
  inline void clear_has_magicequipid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildjob();
  inline void clear_has_guildjob();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_pkcount();
  inline void clear_has_pkcount();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 cleverpower_;
  ::google::protobuf::int32 cleverair_;
  ::google::protobuf::int32 physicalpower_;
  ::google::protobuf::int32 patience_;
  ::google::protobuf::int32 agility_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 phyattack_;
  ::google::protobuf::int32 phyattackmax_;
  ::google::protobuf::int32 phydefence_;
  ::google::protobuf::int32 magicattack_;
  ::google::protobuf::int32 magicattackmax_;
  ::google::protobuf::int32 magicdefence_;
  ::google::protobuf::int32 hitrate_;
  ::google::protobuf::int32 avoidrate_;
  ::google::protobuf::int32 baselucky_;
  ::google::protobuf::int32 crackdownrate_;
  ::google::protobuf::int32 baserte_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::RepeatedPtrField< ::ServerBattle::ItemInfo > equip_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 powermax_;
  ::google::protobuf::int32 lv_;
  ::std::string* guildname_;
  ::google::protobuf::int32 magicequipid_;
  ::google::protobuf::int32 guildjob_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 pkcount_;
  ::google::protobuf::int32 viplv_;
  ::google::protobuf::int32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static BeyondPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  void Swap(ItemInfo* other);

  // implements Message ----------------------------------------------

  ItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // repeated uint32 newattr = 3;
  inline int newattr_size() const;
  inline void clear_newattr();
  static const int kNewattrFieldNumber = 3;
  inline ::google::protobuf::uint32 newattr(int index) const;
  inline void set_newattr(int index, ::google::protobuf::uint32 value);
  inline void add_newattr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      newattr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_newattr();

  // repeated int32 stoneid = 4;
  inline int stoneid_size() const;
  inline void clear_stoneid();
  static const int kStoneidFieldNumber = 4;
  inline ::google::protobuf::int32 stoneid(int index) const;
  inline void set_stoneid(int index, ::google::protobuf::int32 value);
  inline void add_stoneid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stoneid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stoneid();

  // optional int64 endtime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 5;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int32 num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated int32 inlayPos = 7;
  inline int inlaypos_size() const;
  inline void clear_inlaypos();
  static const int kInlayPosFieldNumber = 7;
  inline ::google::protobuf::int32 inlaypos(int index) const;
  inline void set_inlaypos(int index, ::google::protobuf::int32 value);
  inline void add_inlaypos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      inlaypos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_inlaypos();

  // repeated uint32 refineAttrLv = 8;
  inline int refineattrlv_size() const;
  inline void clear_refineattrlv();
  static const int kRefineAttrLvFieldNumber = 8;
  inline ::google::protobuf::uint32 refineattrlv(int index) const;
  inline void set_refineattrlv(int index, ::google::protobuf::uint32 value);
  inline void add_refineattrlv(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      refineattrlv() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_refineattrlv();

  // @@protoc_insertion_point(class_scope:ServerBattle.ItemInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > newattr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stoneid_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > inlaypos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > refineattrlv_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static ItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientMatchPlayerType : public ::google::protobuf::Message {
 public:
  ClientMatchPlayerType();
  virtual ~ClientMatchPlayerType();

  ClientMatchPlayerType(const ClientMatchPlayerType& from);

  inline ClientMatchPlayerType& operator=(const ClientMatchPlayerType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMatchPlayerType& default_instance();

  void Swap(ClientMatchPlayerType* other);

  // implements Message ----------------------------------------------

  ClientMatchPlayerType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMatchPlayerType& from);
  void MergeFrom(const ClientMatchPlayerType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.ClientMatchPlayerType)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static ClientMatchPlayerType* default_instance_;
};
// -------------------------------------------------------------------

class ToClientMatchPlayerType : public ::google::protobuf::Message {
 public:
  ToClientMatchPlayerType();
  virtual ~ToClientMatchPlayerType();

  ToClientMatchPlayerType(const ToClientMatchPlayerType& from);

  inline ToClientMatchPlayerType& operator=(const ToClientMatchPlayerType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToClientMatchPlayerType& default_instance();

  void Swap(ToClientMatchPlayerType* other);

  // implements Message ----------------------------------------------

  ToClientMatchPlayerType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToClientMatchPlayerType& from);
  void MergeFrom(const ToClientMatchPlayerType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ServerBattle.ToClientMatchPlayerType)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_AssignDesc_BeyondServerBattle_2fBeyondBattle_2eproto();
  friend void protobuf_ShutdownFile_BeyondServerBattle_2fBeyondBattle_2eproto();

  void InitAsDefaultInstance();
  static ToClientMatchPlayerType* default_instance_;
};
// ===================================================================


// ===================================================================

// AckBeyondBattle

// required int32 score = 1;
inline bool AckBeyondBattle::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBeyondBattle::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBeyondBattle::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBeyondBattle::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 AckBeyondBattle::score() const {
  return score_;
}
inline void AckBeyondBattle::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 count = 2;
inline bool AckBeyondBattle::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckBeyondBattle::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckBeyondBattle::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckBeyondBattle::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 AckBeyondBattle::count() const {
  return count_;
}
inline void AckBeyondBattle::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 reward = 3;
inline bool AckBeyondBattle::has_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckBeyondBattle::set_has_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckBeyondBattle::clear_has_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckBeyondBattle::clear_reward() {
  reward_ = 0;
  clear_has_reward();
}
inline ::google::protobuf::int32 AckBeyondBattle::reward() const {
  return reward_;
}
inline void AckBeyondBattle::set_reward(::google::protobuf::int32 value) {
  set_has_reward();
  reward_ = value;
}

// optional int32 single = 4;
inline bool AckBeyondBattle::has_single() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckBeyondBattle::set_has_single() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckBeyondBattle::clear_has_single() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckBeyondBattle::clear_single() {
  single_ = 0;
  clear_has_single();
}
inline ::google::protobuf::int32 AckBeyondBattle::single() const {
  return single_;
}
inline void AckBeyondBattle::set_single(::google::protobuf::int32 value) {
  set_has_single();
  single_ = value;
}

// optional int32 group = 5;
inline bool AckBeyondBattle::has_group() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckBeyondBattle::set_has_group() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckBeyondBattle::clear_has_group() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckBeyondBattle::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 AckBeyondBattle::group() const {
  return group_;
}
inline void AckBeyondBattle::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int64 cdtime = 6;
inline bool AckBeyondBattle::has_cdtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckBeyondBattle::set_has_cdtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckBeyondBattle::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckBeyondBattle::clear_cdtime() {
  cdtime_ = GOOGLE_LONGLONG(0);
  clear_has_cdtime();
}
inline ::google::protobuf::int64 AckBeyondBattle::cdtime() const {
  return cdtime_;
}
inline void AckBeyondBattle::set_cdtime(::google::protobuf::int64 value) {
  set_has_cdtime();
  cdtime_ = value;
}

// -------------------------------------------------------------------

// ClientReqBeyondRank

// required int32 page = 1;
inline bool ClientReqBeyondRank::has_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqBeyondRank::set_has_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqBeyondRank::clear_has_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqBeyondRank::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 ClientReqBeyondRank::page() const {
  return page_;
}
inline void ClientReqBeyondRank::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// -------------------------------------------------------------------

// AckBeyondRank

// repeated .ServerBattle.BattleRankInfo binfo = 1;
inline int AckBeyondRank::binfo_size() const {
  return binfo_.size();
}
inline void AckBeyondRank::clear_binfo() {
  binfo_.Clear();
}
inline const ::ServerBattle::BattleRankInfo& AckBeyondRank::binfo(int index) const {
  return binfo_.Get(index);
}
inline ::ServerBattle::BattleRankInfo* AckBeyondRank::mutable_binfo(int index) {
  return binfo_.Mutable(index);
}
inline ::ServerBattle::BattleRankInfo* AckBeyondRank::add_binfo() {
  return binfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattleRankInfo >&
AckBeyondRank::binfo() const {
  return binfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattleRankInfo >*
AckBeyondRank::mutable_binfo() {
  return &binfo_;
}

// optional .ServerBattle.RankPlayerInfo pinfo = 2;
inline bool AckBeyondRank::has_pinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckBeyondRank::set_has_pinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckBeyondRank::clear_has_pinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckBeyondRank::clear_pinfo() {
  if (pinfo_ != NULL) pinfo_->::ServerBattle::RankPlayerInfo::Clear();
  clear_has_pinfo();
}
inline const ::ServerBattle::RankPlayerInfo& AckBeyondRank::pinfo() const {
  return pinfo_ != NULL ? *pinfo_ : *default_instance_->pinfo_;
}
inline ::ServerBattle::RankPlayerInfo* AckBeyondRank::mutable_pinfo() {
  set_has_pinfo();
  if (pinfo_ == NULL) pinfo_ = new ::ServerBattle::RankPlayerInfo;
  return pinfo_;
}
inline ::ServerBattle::RankPlayerInfo* AckBeyondRank::release_pinfo() {
  clear_has_pinfo();
  ::ServerBattle::RankPlayerInfo* temp = pinfo_;
  pinfo_ = NULL;
  return temp;
}
inline void AckBeyondRank::set_allocated_pinfo(::ServerBattle::RankPlayerInfo* pinfo) {
  delete pinfo_;
  pinfo_ = pinfo;
  if (pinfo) {
    set_has_pinfo();
  } else {
    clear_has_pinfo();
  }
}

// optional int32 myselfrank = 3;
inline bool AckBeyondRank::has_myselfrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckBeyondRank::set_has_myselfrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckBeyondRank::clear_has_myselfrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckBeyondRank::clear_myselfrank() {
  myselfrank_ = 0;
  clear_has_myselfrank();
}
inline ::google::protobuf::int32 AckBeyondRank::myselfrank() const {
  return myselfrank_;
}
inline void AckBeyondRank::set_myselfrank(::google::protobuf::int32 value) {
  set_has_myselfrank();
  myselfrank_ = value;
}

// optional int32 page = 4;
inline bool AckBeyondRank::has_page() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckBeyondRank::set_has_page() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckBeyondRank::clear_has_page() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckBeyondRank::clear_page() {
  page_ = 0;
  clear_has_page();
}
inline ::google::protobuf::int32 AckBeyondRank::page() const {
  return page_;
}
inline void AckBeyondRank::set_page(::google::protobuf::int32 value) {
  set_has_page();
  page_ = value;
}

// -------------------------------------------------------------------

// BattleRankInfo

// required int32 rank = 1;
inline bool BattleRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattleRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattleRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattleRankInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 BattleRankInfo::rank() const {
  return rank_;
}
inline void BattleRankInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 charid = 2;
inline bool BattleRankInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattleRankInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattleRankInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattleRankInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BattleRankInfo::charid() const {
  return charid_;
}
inline void BattleRankInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool BattleRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattleRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattleRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattleRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BattleRankInfo::name() const {
  return *name_;
}
inline void BattleRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattleRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattleRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattleRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BattleRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattleRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 profession = 4;
inline bool BattleRankInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattleRankInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattleRankInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattleRankInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 BattleRankInfo::profession() const {
  return profession_;
}
inline void BattleRankInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 score = 5;
inline bool BattleRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattleRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattleRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattleRankInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 BattleRankInfo::score() const {
  return score_;
}
inline void BattleRankInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 viplv = 6;
inline bool BattleRankInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BattleRankInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BattleRankInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BattleRankInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 BattleRankInfo::viplv() const {
  return viplv_;
}
inline void BattleRankInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// RankPlayerInfo

// optional int32 suitrnt = 1;
inline bool RankPlayerInfo::has_suitrnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankPlayerInfo::set_has_suitrnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankPlayerInfo::clear_has_suitrnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankPlayerInfo::clear_suitrnt() {
  suitrnt_ = 0;
  clear_has_suitrnt();
}
inline ::google::protobuf::int32 RankPlayerInfo::suitrnt() const {
  return suitrnt_;
}
inline void RankPlayerInfo::set_suitrnt(::google::protobuf::int32 value) {
  set_has_suitrnt();
  suitrnt_ = value;
}

// optional int32 mainEquip = 2;
inline bool RankPlayerInfo::has_mainequip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankPlayerInfo::set_has_mainequip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankPlayerInfo::clear_has_mainequip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankPlayerInfo::clear_mainequip() {
  mainequip_ = 0;
  clear_has_mainequip();
}
inline ::google::protobuf::int32 RankPlayerInfo::mainequip() const {
  return mainequip_;
}
inline void RankPlayerInfo::set_mainequip(::google::protobuf::int32 value) {
  set_has_mainequip();
  mainequip_ = value;
}

// optional int32 costume = 3;
inline bool RankPlayerInfo::has_costume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankPlayerInfo::set_has_costume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankPlayerInfo::clear_has_costume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankPlayerInfo::clear_costume() {
  costume_ = 0;
  clear_has_costume();
}
inline ::google::protobuf::int32 RankPlayerInfo::costume() const {
  return costume_;
}
inline void RankPlayerInfo::set_costume(::google::protobuf::int32 value) {
  set_has_costume();
  costume_ = value;
}

// optional int32 fight = 4;
inline bool RankPlayerInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankPlayerInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankPlayerInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankPlayerInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 RankPlayerInfo::fight() const {
  return fight_;
}
inline void RankPlayerInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional bool sex = 5;
inline bool RankPlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankPlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankPlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankPlayerInfo::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
inline bool RankPlayerInfo::sex() const {
  return sex_;
}
inline void RankPlayerInfo::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 magicid = 6;
inline bool RankPlayerInfo::has_magicid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankPlayerInfo::set_has_magicid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankPlayerInfo::clear_has_magicid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankPlayerInfo::clear_magicid() {
  magicid_ = 0;
  clear_has_magicid();
}
inline ::google::protobuf::int32 RankPlayerInfo::magicid() const {
  return magicid_;
}
inline void RankPlayerInfo::set_magicid(::google::protobuf::int32 value) {
  set_has_magicid();
  magicid_ = value;
}

// -------------------------------------------------------------------

// ClientReqBeyondPlayerInfo

// required int64 charid = 1;
inline bool ClientReqBeyondPlayerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqBeyondPlayerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqBeyondPlayerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqBeyondPlayerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ClientReqBeyondPlayerInfo::charid() const {
  return charid_;
}
inline void ClientReqBeyondPlayerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// MatchPlayerType

// required int32 type = 1;
inline bool MatchPlayerType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchPlayerType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchPlayerType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchPlayerType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MatchPlayerType::type() const {
  return type_;
}
inline void MatchPlayerType::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 charid = 2;
inline bool MatchPlayerType::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchPlayerType::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchPlayerType::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchPlayerType::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 MatchPlayerType::charid() const {
  return charid_;
}
inline void MatchPlayerType::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// MatchPlayerReturn

// required int32 ret = 1;
inline bool MatchPlayerReturn::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchPlayerReturn::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchPlayerReturn::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchPlayerReturn::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 MatchPlayerReturn::ret() const {
  return ret_;
}
inline void MatchPlayerReturn::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int64 mapid = 2;
inline bool MatchPlayerReturn::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchPlayerReturn::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchPlayerReturn::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchPlayerReturn::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 MatchPlayerReturn::mapid() const {
  return mapid_;
}
inline void MatchPlayerReturn::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// BeyondBattleResult

// required int32 ret = 1;
inline bool BeyondBattleResult::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeyondBattleResult::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeyondBattleResult::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeyondBattleResult::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 BeyondBattleResult::ret() const {
  return ret_;
}
inline void BeyondBattleResult::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .ServerBattle.BattlePlayerResult res = 2;
inline int BeyondBattleResult::res_size() const {
  return res_.size();
}
inline void BeyondBattleResult::clear_res() {
  res_.Clear();
}
inline const ::ServerBattle::BattlePlayerResult& BeyondBattleResult::res(int index) const {
  return res_.Get(index);
}
inline ::ServerBattle::BattlePlayerResult* BeyondBattleResult::mutable_res(int index) {
  return res_.Mutable(index);
}
inline ::ServerBattle::BattlePlayerResult* BeyondBattleResult::add_res() {
  return res_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattlePlayerResult >&
BeyondBattleResult::res() const {
  return res_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattle::BattlePlayerResult >*
BeyondBattleResult::mutable_res() {
  return &res_;
}

// -------------------------------------------------------------------

// BattlePlayerResult

// required int64 charid = 1;
inline bool BattlePlayerResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BattlePlayerResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BattlePlayerResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BattlePlayerResult::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BattlePlayerResult::charid() const {
  return charid_;
}
inline void BattlePlayerResult::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool BattlePlayerResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BattlePlayerResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BattlePlayerResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BattlePlayerResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BattlePlayerResult::name() const {
  return *name_;
}
inline void BattlePlayerResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattlePlayerResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BattlePlayerResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BattlePlayerResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BattlePlayerResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BattlePlayerResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 attack = 3;
inline bool BattlePlayerResult::has_attack() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BattlePlayerResult::set_has_attack() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BattlePlayerResult::clear_has_attack() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BattlePlayerResult::clear_attack() {
  attack_ = GOOGLE_LONGLONG(0);
  clear_has_attack();
}
inline ::google::protobuf::int64 BattlePlayerResult::attack() const {
  return attack_;
}
inline void BattlePlayerResult::set_attack(::google::protobuf::int64 value) {
  set_has_attack();
  attack_ = value;
}

// optional int32 nowscore = 4;
inline bool BattlePlayerResult::has_nowscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BattlePlayerResult::set_has_nowscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BattlePlayerResult::clear_has_nowscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BattlePlayerResult::clear_nowscore() {
  nowscore_ = 0;
  clear_has_nowscore();
}
inline ::google::protobuf::int32 BattlePlayerResult::nowscore() const {
  return nowscore_;
}
inline void BattlePlayerResult::set_nowscore(::google::protobuf::int32 value) {
  set_has_nowscore();
  nowscore_ = value;
}

// optional int32 score = 5;
inline bool BattlePlayerResult::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BattlePlayerResult::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BattlePlayerResult::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BattlePlayerResult::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 BattlePlayerResult::score() const {
  return score_;
}
inline void BattlePlayerResult::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// AckGetBeyondReward

// required int32 ret = 1;
inline bool AckGetBeyondReward::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGetBeyondReward::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGetBeyondReward::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGetBeyondReward::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckGetBeyondReward::ret() const {
  return ret_;
}
inline void AckGetBeyondReward::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// BroadPlayerMatch

// required int64 charid = 1;
inline bool BroadPlayerMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadPlayerMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadPlayerMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadPlayerMatch::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BroadPlayerMatch::charid() const {
  return charid_;
}
inline void BroadPlayerMatch::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 lv = 2;
inline bool BroadPlayerMatch::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadPlayerMatch::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadPlayerMatch::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadPlayerMatch::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 BroadPlayerMatch::lv() const {
  return lv_;
}
inline void BroadPlayerMatch::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 fight = 3;
inline bool BroadPlayerMatch::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadPlayerMatch::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BroadPlayerMatch::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BroadPlayerMatch::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 BroadPlayerMatch::fight() const {
  return fight_;
}
inline void BroadPlayerMatch::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 score = 4;
inline bool BroadPlayerMatch::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadPlayerMatch::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BroadPlayerMatch::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BroadPlayerMatch::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 BroadPlayerMatch::score() const {
  return score_;
}
inline void BroadPlayerMatch::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int32 type = 5;
inline bool BroadPlayerMatch::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BroadPlayerMatch::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BroadPlayerMatch::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BroadPlayerMatch::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BroadPlayerMatch::type() const {
  return type_;
}
inline void BroadPlayerMatch::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ToWSMatchedPlayer

// required int64 charid = 1;
inline bool ToWSMatchedPlayer::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToWSMatchedPlayer::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToWSMatchedPlayer::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToWSMatchedPlayer::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ToWSMatchedPlayer::charid() const {
  return charid_;
}
inline void ToWSMatchedPlayer::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 target = 2;
inline bool ToWSMatchedPlayer::has_target() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToWSMatchedPlayer::set_has_target() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToWSMatchedPlayer::clear_has_target() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToWSMatchedPlayer::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 ToWSMatchedPlayer::target() const {
  return target_;
}
inline void ToWSMatchedPlayer::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
}

// optional int32 id = 3;
inline bool ToWSMatchedPlayer::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToWSMatchedPlayer::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToWSMatchedPlayer::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToWSMatchedPlayer::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ToWSMatchedPlayer::id() const {
  return id_;
}
inline void ToWSMatchedPlayer::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 myself = 4;
inline bool ToWSMatchedPlayer::has_myself() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToWSMatchedPlayer::set_has_myself() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToWSMatchedPlayer::clear_has_myself() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToWSMatchedPlayer::clear_myself() {
  myself_ = 0;
  clear_has_myself();
}
inline ::google::protobuf::int32 ToWSMatchedPlayer::myself() const {
  return myself_;
}
inline void ToWSMatchedPlayer::set_myself(::google::protobuf::int32 value) {
  set_has_myself();
  myself_ = value;
}

// -------------------------------------------------------------------

// BroadPlayerIsMatched

// required int64 charid = 1;
inline bool BroadPlayerIsMatched::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadPlayerIsMatched::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadPlayerIsMatched::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadPlayerIsMatched::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BroadPlayerIsMatched::charid() const {
  return charid_;
}
inline void BroadPlayerIsMatched::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// BroadPlayerCancelMatch

// required int64 charid = 1;
inline bool BroadPlayerCancelMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadPlayerCancelMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadPlayerCancelMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadPlayerCancelMatch::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BroadPlayerCancelMatch::charid() const {
  return charid_;
}
inline void BroadPlayerCancelMatch::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// BroadCastPKResult

// required int64 charid = 1;
inline bool BroadCastPKResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadCastPKResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadCastPKResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadCastPKResult::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BroadCastPKResult::charid() const {
  return charid_;
}
inline void BroadCastPKResult::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 score = 2;
inline bool BroadCastPKResult::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadCastPKResult::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadCastPKResult::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadCastPKResult::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 BroadCastPKResult::score() const {
  return score_;
}
inline void BroadCastPKResult::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional string charname = 3;
inline bool BroadCastPKResult::has_charname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadCastPKResult::set_has_charname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BroadCastPKResult::clear_has_charname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BroadCastPKResult::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& BroadCastPKResult::charname() const {
  return *charname_;
}
inline void BroadCastPKResult::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void BroadCastPKResult::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void BroadCastPKResult::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BroadCastPKResult::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* BroadCastPKResult::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BroadCastPKResult::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 profession = 4;
inline bool BroadCastPKResult::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadCastPKResult::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BroadCastPKResult::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BroadCastPKResult::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 BroadCastPKResult::profession() const {
  return profession_;
}
inline void BroadCastPKResult::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional .ServerBattle.BeyondPlayerInfo info = 5;
inline bool BroadCastPKResult::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BroadCastPKResult::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BroadCastPKResult::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BroadCastPKResult::clear_info() {
  if (info_ != NULL) info_->::ServerBattle::BeyondPlayerInfo::Clear();
  clear_has_info();
}
inline const ::ServerBattle::BeyondPlayerInfo& BroadCastPKResult::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::ServerBattle::BeyondPlayerInfo* BroadCastPKResult::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::ServerBattle::BeyondPlayerInfo;
  return info_;
}
inline ::ServerBattle::BeyondPlayerInfo* BroadCastPKResult::release_info() {
  clear_has_info();
  ::ServerBattle::BeyondPlayerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void BroadCastPKResult::set_allocated_info(::ServerBattle::BeyondPlayerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// BeyondPlayerInfo

// optional int32 sex = 1;
inline bool BeyondPlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeyondPlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeyondPlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeyondPlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::sex() const {
  return sex_;
}
inline void BeyondPlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 hp = 2;
inline bool BeyondPlayerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeyondPlayerInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeyondPlayerInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeyondPlayerInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::hp() const {
  return hp_;
}
inline void BeyondPlayerInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 hpmax = 3;
inline bool BeyondPlayerInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeyondPlayerInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeyondPlayerInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeyondPlayerInfo::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::hpmax() const {
  return hpmax_;
}
inline void BeyondPlayerInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 mp = 4;
inline bool BeyondPlayerInfo::has_mp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeyondPlayerInfo::set_has_mp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BeyondPlayerInfo::clear_has_mp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BeyondPlayerInfo::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::mp() const {
  return mp_;
}
inline void BeyondPlayerInfo::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// optional int32 mpmax = 5;
inline bool BeyondPlayerInfo::has_mpmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BeyondPlayerInfo::set_has_mpmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BeyondPlayerInfo::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BeyondPlayerInfo::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::mpmax() const {
  return mpmax_;
}
inline void BeyondPlayerInfo::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// optional int32 strength = 6;
inline bool BeyondPlayerInfo::has_strength() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BeyondPlayerInfo::set_has_strength() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BeyondPlayerInfo::clear_has_strength() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BeyondPlayerInfo::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::strength() const {
  return strength_;
}
inline void BeyondPlayerInfo::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// optional int32 cleverpower = 7;
inline bool BeyondPlayerInfo::has_cleverpower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BeyondPlayerInfo::set_has_cleverpower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BeyondPlayerInfo::clear_has_cleverpower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BeyondPlayerInfo::clear_cleverpower() {
  cleverpower_ = 0;
  clear_has_cleverpower();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::cleverpower() const {
  return cleverpower_;
}
inline void BeyondPlayerInfo::set_cleverpower(::google::protobuf::int32 value) {
  set_has_cleverpower();
  cleverpower_ = value;
}

// optional int32 cleverair = 8;
inline bool BeyondPlayerInfo::has_cleverair() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BeyondPlayerInfo::set_has_cleverair() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BeyondPlayerInfo::clear_has_cleverair() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BeyondPlayerInfo::clear_cleverair() {
  cleverair_ = 0;
  clear_has_cleverair();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::cleverair() const {
  return cleverair_;
}
inline void BeyondPlayerInfo::set_cleverair(::google::protobuf::int32 value) {
  set_has_cleverair();
  cleverair_ = value;
}

// optional int32 physicalpower = 9;
inline bool BeyondPlayerInfo::has_physicalpower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BeyondPlayerInfo::set_has_physicalpower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BeyondPlayerInfo::clear_has_physicalpower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BeyondPlayerInfo::clear_physicalpower() {
  physicalpower_ = 0;
  clear_has_physicalpower();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::physicalpower() const {
  return physicalpower_;
}
inline void BeyondPlayerInfo::set_physicalpower(::google::protobuf::int32 value) {
  set_has_physicalpower();
  physicalpower_ = value;
}

// optional int32 patience = 10;
inline bool BeyondPlayerInfo::has_patience() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BeyondPlayerInfo::set_has_patience() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BeyondPlayerInfo::clear_has_patience() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BeyondPlayerInfo::clear_patience() {
  patience_ = 0;
  clear_has_patience();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::patience() const {
  return patience_;
}
inline void BeyondPlayerInfo::set_patience(::google::protobuf::int32 value) {
  set_has_patience();
  patience_ = value;
}

// optional int32 agility = 11;
inline bool BeyondPlayerInfo::has_agility() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BeyondPlayerInfo::set_has_agility() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BeyondPlayerInfo::clear_has_agility() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BeyondPlayerInfo::clear_agility() {
  agility_ = 0;
  clear_has_agility();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::agility() const {
  return agility_;
}
inline void BeyondPlayerInfo::set_agility(::google::protobuf::int32 value) {
  set_has_agility();
  agility_ = value;
}

// optional int32 power = 12;
inline bool BeyondPlayerInfo::has_power() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BeyondPlayerInfo::set_has_power() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BeyondPlayerInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BeyondPlayerInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::power() const {
  return power_;
}
inline void BeyondPlayerInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 phyattack = 13;
inline bool BeyondPlayerInfo::has_phyattack() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BeyondPlayerInfo::set_has_phyattack() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BeyondPlayerInfo::clear_has_phyattack() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BeyondPlayerInfo::clear_phyattack() {
  phyattack_ = 0;
  clear_has_phyattack();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::phyattack() const {
  return phyattack_;
}
inline void BeyondPlayerInfo::set_phyattack(::google::protobuf::int32 value) {
  set_has_phyattack();
  phyattack_ = value;
}

// optional int32 phyattackmax = 14;
inline bool BeyondPlayerInfo::has_phyattackmax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BeyondPlayerInfo::set_has_phyattackmax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BeyondPlayerInfo::clear_has_phyattackmax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BeyondPlayerInfo::clear_phyattackmax() {
  phyattackmax_ = 0;
  clear_has_phyattackmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::phyattackmax() const {
  return phyattackmax_;
}
inline void BeyondPlayerInfo::set_phyattackmax(::google::protobuf::int32 value) {
  set_has_phyattackmax();
  phyattackmax_ = value;
}

// optional int32 phydefence = 15;
inline bool BeyondPlayerInfo::has_phydefence() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BeyondPlayerInfo::set_has_phydefence() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BeyondPlayerInfo::clear_has_phydefence() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BeyondPlayerInfo::clear_phydefence() {
  phydefence_ = 0;
  clear_has_phydefence();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::phydefence() const {
  return phydefence_;
}
inline void BeyondPlayerInfo::set_phydefence(::google::protobuf::int32 value) {
  set_has_phydefence();
  phydefence_ = value;
}

// optional int32 magicattack = 16;
inline bool BeyondPlayerInfo::has_magicattack() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicattack() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BeyondPlayerInfo::clear_has_magicattack() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BeyondPlayerInfo::clear_magicattack() {
  magicattack_ = 0;
  clear_has_magicattack();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicattack() const {
  return magicattack_;
}
inline void BeyondPlayerInfo::set_magicattack(::google::protobuf::int32 value) {
  set_has_magicattack();
  magicattack_ = value;
}

// optional int32 magicattackmax = 17;
inline bool BeyondPlayerInfo::has_magicattackmax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicattackmax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BeyondPlayerInfo::clear_has_magicattackmax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BeyondPlayerInfo::clear_magicattackmax() {
  magicattackmax_ = 0;
  clear_has_magicattackmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicattackmax() const {
  return magicattackmax_;
}
inline void BeyondPlayerInfo::set_magicattackmax(::google::protobuf::int32 value) {
  set_has_magicattackmax();
  magicattackmax_ = value;
}

// optional int32 magicdefence = 18;
inline bool BeyondPlayerInfo::has_magicdefence() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicdefence() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BeyondPlayerInfo::clear_has_magicdefence() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BeyondPlayerInfo::clear_magicdefence() {
  magicdefence_ = 0;
  clear_has_magicdefence();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicdefence() const {
  return magicdefence_;
}
inline void BeyondPlayerInfo::set_magicdefence(::google::protobuf::int32 value) {
  set_has_magicdefence();
  magicdefence_ = value;
}

// optional int32 hitrate = 19;
inline bool BeyondPlayerInfo::has_hitrate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BeyondPlayerInfo::set_has_hitrate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BeyondPlayerInfo::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BeyondPlayerInfo::clear_hitrate() {
  hitrate_ = 0;
  clear_has_hitrate();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::hitrate() const {
  return hitrate_;
}
inline void BeyondPlayerInfo::set_hitrate(::google::protobuf::int32 value) {
  set_has_hitrate();
  hitrate_ = value;
}

// optional int32 avoidrate = 20;
inline bool BeyondPlayerInfo::has_avoidrate() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BeyondPlayerInfo::set_has_avoidrate() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BeyondPlayerInfo::clear_has_avoidrate() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BeyondPlayerInfo::clear_avoidrate() {
  avoidrate_ = 0;
  clear_has_avoidrate();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::avoidrate() const {
  return avoidrate_;
}
inline void BeyondPlayerInfo::set_avoidrate(::google::protobuf::int32 value) {
  set_has_avoidrate();
  avoidrate_ = value;
}

// optional int32 baselucky = 21;
inline bool BeyondPlayerInfo::has_baselucky() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BeyondPlayerInfo::set_has_baselucky() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BeyondPlayerInfo::clear_has_baselucky() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BeyondPlayerInfo::clear_baselucky() {
  baselucky_ = 0;
  clear_has_baselucky();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::baselucky() const {
  return baselucky_;
}
inline void BeyondPlayerInfo::set_baselucky(::google::protobuf::int32 value) {
  set_has_baselucky();
  baselucky_ = value;
}

// optional int32 crackdownrate = 22;
inline bool BeyondPlayerInfo::has_crackdownrate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BeyondPlayerInfo::set_has_crackdownrate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BeyondPlayerInfo::clear_has_crackdownrate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BeyondPlayerInfo::clear_crackdownrate() {
  crackdownrate_ = 0;
  clear_has_crackdownrate();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::crackdownrate() const {
  return crackdownrate_;
}
inline void BeyondPlayerInfo::set_crackdownrate(::google::protobuf::int32 value) {
  set_has_crackdownrate();
  crackdownrate_ = value;
}

// optional int32 baserte = 23;
inline bool BeyondPlayerInfo::has_baserte() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BeyondPlayerInfo::set_has_baserte() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BeyondPlayerInfo::clear_has_baserte() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BeyondPlayerInfo::clear_baserte() {
  baserte_ = 0;
  clear_has_baserte();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::baserte() const {
  return baserte_;
}
inline void BeyondPlayerInfo::set_baserte(::google::protobuf::int32 value) {
  set_has_baserte();
  baserte_ = value;
}

// repeated .ServerBattle.ItemInfo equip = 24;
inline int BeyondPlayerInfo::equip_size() const {
  return equip_.size();
}
inline void BeyondPlayerInfo::clear_equip() {
  equip_.Clear();
}
inline const ::ServerBattle::ItemInfo& BeyondPlayerInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::ServerBattle::ItemInfo* BeyondPlayerInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::ServerBattle::ItemInfo* BeyondPlayerInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerBattle::ItemInfo >&
BeyondPlayerInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerBattle::ItemInfo >*
BeyondPlayerInfo::mutable_equip() {
  return &equip_;
}

// optional int32 fight = 25;
inline bool BeyondPlayerInfo::has_fight() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_fight() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BeyondPlayerInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BeyondPlayerInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::fight() const {
  return fight_;
}
inline void BeyondPlayerInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 powermax = 26;
inline bool BeyondPlayerInfo::has_powermax() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_powermax() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BeyondPlayerInfo::clear_has_powermax() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BeyondPlayerInfo::clear_powermax() {
  powermax_ = 0;
  clear_has_powermax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::powermax() const {
  return powermax_;
}
inline void BeyondPlayerInfo::set_powermax(::google::protobuf::int32 value) {
  set_has_powermax();
  powermax_ = value;
}

// optional int64 exp = 27;
inline bool BeyondPlayerInfo::has_exp() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_exp() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BeyondPlayerInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BeyondPlayerInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 BeyondPlayerInfo::exp() const {
  return exp_;
}
inline void BeyondPlayerInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 lv = 28;
inline bool BeyondPlayerInfo::has_lv() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_lv() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BeyondPlayerInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BeyondPlayerInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::lv() const {
  return lv_;
}
inline void BeyondPlayerInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 magicequipid = 29;
inline bool BeyondPlayerInfo::has_magicequipid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicequipid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BeyondPlayerInfo::clear_has_magicequipid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BeyondPlayerInfo::clear_magicequipid() {
  magicequipid_ = 0;
  clear_has_magicequipid();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicequipid() const {
  return magicequipid_;
}
inline void BeyondPlayerInfo::set_magicequipid(::google::protobuf::int32 value) {
  set_has_magicequipid();
  magicequipid_ = value;
}

// optional string guildname = 30;
inline bool BeyondPlayerInfo::has_guildname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_guildname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BeyondPlayerInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BeyondPlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& BeyondPlayerInfo::guildname() const {
  return *guildname_;
}
inline void BeyondPlayerInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BeyondPlayerInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BeyondPlayerInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BeyondPlayerInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* BeyondPlayerInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BeyondPlayerInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 guildjob = 31;
inline bool BeyondPlayerInfo::has_guildjob() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_guildjob() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BeyondPlayerInfo::clear_has_guildjob() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BeyondPlayerInfo::clear_guildjob() {
  guildjob_ = 0;
  clear_has_guildjob();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::guildjob() const {
  return guildjob_;
}
inline void BeyondPlayerInfo::set_guildjob(::google::protobuf::int32 value) {
  set_has_guildjob();
  guildjob_ = value;
}

// optional int32 titleid = 32;
inline bool BeyondPlayerInfo::has_titleid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_titleid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BeyondPlayerInfo::clear_has_titleid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BeyondPlayerInfo::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::titleid() const {
  return titleid_;
}
inline void BeyondPlayerInfo::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional int32 pkcount = 33;
inline bool BeyondPlayerInfo::has_pkcount() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BeyondPlayerInfo::set_has_pkcount() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BeyondPlayerInfo::clear_has_pkcount() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BeyondPlayerInfo::clear_pkcount() {
  pkcount_ = 0;
  clear_has_pkcount();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::pkcount() const {
  return pkcount_;
}
inline void BeyondPlayerInfo::set_pkcount(::google::protobuf::int32 value) {
  set_has_pkcount();
  pkcount_ = value;
}

// optional int32 viplv = 34;
inline bool BeyondPlayerInfo::has_viplv() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BeyondPlayerInfo::set_has_viplv() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BeyondPlayerInfo::clear_has_viplv() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BeyondPlayerInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::viplv() const {
  return viplv_;
}
inline void BeyondPlayerInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional int32 country = 35;
inline bool BeyondPlayerInfo::has_country() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BeyondPlayerInfo::set_has_country() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BeyondPlayerInfo::clear_has_country() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BeyondPlayerInfo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::country() const {
  return country_;
}
inline void BeyondPlayerInfo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// -------------------------------------------------------------------

// ItemInfo

// required int32 id = 1;
inline bool ItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ItemInfo::id() const {
  return id_;
}
inline void ItemInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 flag = 2;
inline bool ItemInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemInfo::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 ItemInfo::flag() const {
  return flag_;
}
inline void ItemInfo::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// repeated uint32 newattr = 3;
inline int ItemInfo::newattr_size() const {
  return newattr_.size();
}
inline void ItemInfo::clear_newattr() {
  newattr_.Clear();
}
inline ::google::protobuf::uint32 ItemInfo::newattr(int index) const {
  return newattr_.Get(index);
}
inline void ItemInfo::set_newattr(int index, ::google::protobuf::uint32 value) {
  newattr_.Set(index, value);
}
inline void ItemInfo::add_newattr(::google::protobuf::uint32 value) {
  newattr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ItemInfo::newattr() const {
  return newattr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ItemInfo::mutable_newattr() {
  return &newattr_;
}

// repeated int32 stoneid = 4;
inline int ItemInfo::stoneid_size() const {
  return stoneid_.size();
}
inline void ItemInfo::clear_stoneid() {
  stoneid_.Clear();
}
inline ::google::protobuf::int32 ItemInfo::stoneid(int index) const {
  return stoneid_.Get(index);
}
inline void ItemInfo::set_stoneid(int index, ::google::protobuf::int32 value) {
  stoneid_.Set(index, value);
}
inline void ItemInfo::add_stoneid(::google::protobuf::int32 value) {
  stoneid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ItemInfo::stoneid() const {
  return stoneid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ItemInfo::mutable_stoneid() {
  return &stoneid_;
}

// optional int64 endtime = 5;
inline bool ItemInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 ItemInfo::endtime() const {
  return endtime_;
}
inline void ItemInfo::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int32 num = 6;
inline bool ItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ItemInfo::num() const {
  return num_;
}
inline void ItemInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// repeated int32 inlayPos = 7;
inline int ItemInfo::inlaypos_size() const {
  return inlaypos_.size();
}
inline void ItemInfo::clear_inlaypos() {
  inlaypos_.Clear();
}
inline ::google::protobuf::int32 ItemInfo::inlaypos(int index) const {
  return inlaypos_.Get(index);
}
inline void ItemInfo::set_inlaypos(int index, ::google::protobuf::int32 value) {
  inlaypos_.Set(index, value);
}
inline void ItemInfo::add_inlaypos(::google::protobuf::int32 value) {
  inlaypos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ItemInfo::inlaypos() const {
  return inlaypos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ItemInfo::mutable_inlaypos() {
  return &inlaypos_;
}

// repeated uint32 refineAttrLv = 8;
inline int ItemInfo::refineattrlv_size() const {
  return refineattrlv_.size();
}
inline void ItemInfo::clear_refineattrlv() {
  refineattrlv_.Clear();
}
inline ::google::protobuf::uint32 ItemInfo::refineattrlv(int index) const {
  return refineattrlv_.Get(index);
}
inline void ItemInfo::set_refineattrlv(int index, ::google::protobuf::uint32 value) {
  refineattrlv_.Set(index, value);
}
inline void ItemInfo::add_refineattrlv(::google::protobuf::uint32 value) {
  refineattrlv_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ItemInfo::refineattrlv() const {
  return refineattrlv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ItemInfo::mutable_refineattrlv() {
  return &refineattrlv_;
}

// -------------------------------------------------------------------

// ClientMatchPlayerType

// required int32 type = 1;
inline bool ClientMatchPlayerType::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMatchPlayerType::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMatchPlayerType::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMatchPlayerType::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ClientMatchPlayerType::type() const {
  return type_;
}
inline void ClientMatchPlayerType::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ToClientMatchPlayerType

// required int32 ret = 1;
inline bool ToClientMatchPlayerType::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToClientMatchPlayerType::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToClientMatchPlayerType::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToClientMatchPlayerType::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ToClientMatchPlayerType::ret() const {
  return ret_;
}
inline void ToClientMatchPlayerType::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerBattle

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BeyondServerBattle_2fBeyondBattle_2eproto__INCLUDED
