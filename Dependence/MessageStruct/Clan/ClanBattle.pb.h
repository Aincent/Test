// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clan/ClanBattle.proto

#ifndef PROTOBUF_Clan_2fClanBattle_2eproto__INCLUDED
#define PROTOBUF_Clan_2fClanBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ClanPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

class ReqBatterInfo;
class AckBatterInfo;
class BatterInfo;
class AckBatterMap;
class ReqOccupyFlag;
class AckOccupyFlag;
class BaseBatterInfo;
class FlagInfo;
class ScoreChange;
class FlagStateChange;
class FlagProtectedTimeOut;
class ClanBattleResult;
class OccupyFail;
class ReqGS2WSGetFactionName;
class AckGS2WSGetFactionName;
class ToGameClanDelete;
class ClientReqMMapPlayer;

// ===================================================================

class ReqBatterInfo : public ::google::protobuf::Message {
 public:
  ReqBatterInfo();
  virtual ~ReqBatterInfo();

  ReqBatterInfo(const ReqBatterInfo& from);

  inline ReqBatterInfo& operator=(const ReqBatterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBatterInfo& default_instance();

  void Swap(ReqBatterInfo* other);

  // implements Message ----------------------------------------------

  ReqBatterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqBatterInfo& from);
  void MergeFrom(const ReqBatterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.ReqBatterInfo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ReqBatterInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckBatterInfo : public ::google::protobuf::Message {
 public:
  AckBatterInfo();
  virtual ~AckBatterInfo();

  AckBatterInfo(const AckBatterInfo& from);

  inline AckBatterInfo& operator=(const AckBatterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBatterInfo& default_instance();

  void Swap(AckBatterInfo* other);

  // implements Message ----------------------------------------------

  AckBatterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBatterInfo& from);
  void MergeFrom(const AckBatterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // repeated .ClanPackage.BatterInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::ClanPackage::BatterInfo& info(int index) const;
  inline ::ClanPackage::BatterInfo* mutable_info(int index);
  inline ::ClanPackage::BatterInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ClanPackage::BatterInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClanPackage::BatterInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ClanPackage.AckBatterInfo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ClanPackage::BatterInfo > info_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static AckBatterInfo* default_instance_;
};
// -------------------------------------------------------------------

class BatterInfo : public ::google::protobuf::Message {
 public:
  BatterInfo();
  virtual ~BatterInfo();

  BatterInfo(const BatterInfo& from);

  inline BatterInfo& operator=(const BatterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatterInfo& default_instance();

  void Swap(BatterInfo* other);

  // implements Message ----------------------------------------------

  BatterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatterInfo& from);
  void MergeFrom(const BatterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 firstclanid = 1;
  inline bool has_firstclanid() const;
  inline void clear_firstclanid();
  static const int kFirstclanidFieldNumber = 1;
  inline ::google::protobuf::int32 firstclanid() const;
  inline void set_firstclanid(::google::protobuf::int32 value);

  // optional int32 secondclanid = 2;
  inline bool has_secondclanid() const;
  inline void clear_secondclanid();
  static const int kSecondclanidFieldNumber = 2;
  inline ::google::protobuf::int32 secondclanid() const;
  inline void set_secondclanid(::google::protobuf::int32 value);

  // optional int32 firstclanscore = 3;
  inline bool has_firstclanscore() const;
  inline void clear_firstclanscore();
  static const int kFirstclanscoreFieldNumber = 3;
  inline ::google::protobuf::int32 firstclanscore() const;
  inline void set_firstclanscore(::google::protobuf::int32 value);

  // optional int32 secondclanscore = 4;
  inline bool has_secondclanscore() const;
  inline void clear_secondclanscore();
  static const int kSecondclanscoreFieldNumber = 4;
  inline ::google::protobuf::int32 secondclanscore() const;
  inline void set_secondclanscore(::google::protobuf::int32 value);

  // optional int32 winid = 5;
  inline bool has_winid() const;
  inline void clear_winid();
  static const int kWinidFieldNumber = 5;
  inline ::google::protobuf::int32 winid() const;
  inline void set_winid(::google::protobuf::int32 value);

  // optional bytes firstname = 6;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstnameFieldNumber = 6;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const void* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // optional bytes secondname = 7;
  inline bool has_secondname() const;
  inline void clear_secondname();
  static const int kSecondnameFieldNumber = 7;
  inline const ::std::string& secondname() const;
  inline void set_secondname(const ::std::string& value);
  inline void set_secondname(const char* value);
  inline void set_secondname(const void* value, size_t size);
  inline ::std::string* mutable_secondname();
  inline ::std::string* release_secondname();
  inline void set_allocated_secondname(::std::string* secondname);

  // optional int32 finish = 8;
  inline bool has_finish() const;
  inline void clear_finish();
  static const int kFinishFieldNumber = 8;
  inline ::google::protobuf::int32 finish() const;
  inline void set_finish(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.BatterInfo)
 private:
  inline void set_has_firstclanid();
  inline void clear_has_firstclanid();
  inline void set_has_secondclanid();
  inline void clear_has_secondclanid();
  inline void set_has_firstclanscore();
  inline void clear_has_firstclanscore();
  inline void set_has_secondclanscore();
  inline void clear_has_secondclanscore();
  inline void set_has_winid();
  inline void clear_has_winid();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_secondname();
  inline void clear_has_secondname();
  inline void set_has_finish();
  inline void clear_has_finish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 firstclanid_;
  ::google::protobuf::int32 secondclanid_;
  ::google::protobuf::int32 firstclanscore_;
  ::google::protobuf::int32 secondclanscore_;
  ::std::string* firstname_;
  ::google::protobuf::int32 winid_;
  ::google::protobuf::int32 finish_;
  ::std::string* secondname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static BatterInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckBatterMap : public ::google::protobuf::Message {
 public:
  AckBatterMap();
  virtual ~AckBatterMap();

  AckBatterMap(const AckBatterMap& from);

  inline AckBatterMap& operator=(const AckBatterMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBatterMap& default_instance();

  void Swap(AckBatterMap* other);

  // implements Message ----------------------------------------------

  AckBatterMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBatterMap& from);
  void MergeFrom(const AckBatterMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int64 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.AckBatterMap)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static AckBatterMap* default_instance_;
};
// -------------------------------------------------------------------

class ReqOccupyFlag : public ::google::protobuf::Message {
 public:
  ReqOccupyFlag();
  virtual ~ReqOccupyFlag();

  ReqOccupyFlag(const ReqOccupyFlag& from);

  inline ReqOccupyFlag& operator=(const ReqOccupyFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOccupyFlag& default_instance();

  void Swap(ReqOccupyFlag* other);

  // implements Message ----------------------------------------------

  ReqOccupyFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOccupyFlag& from);
  void MergeFrom(const ReqOccupyFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.ReqOccupyFlag)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ReqOccupyFlag* default_instance_;
};
// -------------------------------------------------------------------

class AckOccupyFlag : public ::google::protobuf::Message {
 public:
  AckOccupyFlag();
  virtual ~AckOccupyFlag();

  AckOccupyFlag(const AckOccupyFlag& from);

  inline AckOccupyFlag& operator=(const AckOccupyFlag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckOccupyFlag& default_instance();

  void Swap(AckOccupyFlag* other);

  // implements Message ----------------------------------------------

  AckOccupyFlag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckOccupyFlag& from);
  void MergeFrom(const AckOccupyFlag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.AckOccupyFlag)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static AckOccupyFlag* default_instance_;
};
// -------------------------------------------------------------------

class BaseBatterInfo : public ::google::protobuf::Message {
 public:
  BaseBatterInfo();
  virtual ~BaseBatterInfo();

  BaseBatterInfo(const BaseBatterInfo& from);

  inline BaseBatterInfo& operator=(const BaseBatterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseBatterInfo& default_instance();

  void Swap(BaseBatterInfo* other);

  // implements Message ----------------------------------------------

  BaseBatterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseBatterInfo& from);
  void MergeFrom(const BaseBatterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 selfflag = 1;
  inline bool has_selfflag() const;
  inline void clear_selfflag();
  static const int kSelfflagFieldNumber = 1;
  inline ::google::protobuf::int32 selfflag() const;
  inline void set_selfflag(::google::protobuf::int32 value);

  // optional int32 targetflag = 2;
  inline bool has_targetflag() const;
  inline void clear_targetflag();
  static const int kTargetflagFieldNumber = 2;
  inline ::google::protobuf::int32 targetflag() const;
  inline void set_targetflag(::google::protobuf::int32 value);

  // optional int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional bytes targetclanname = 4;
  inline bool has_targetclanname() const;
  inline void clear_targetclanname();
  static const int kTargetclannameFieldNumber = 4;
  inline const ::std::string& targetclanname() const;
  inline void set_targetclanname(const ::std::string& value);
  inline void set_targetclanname(const char* value);
  inline void set_targetclanname(const void* value, size_t size);
  inline ::std::string* mutable_targetclanname();
  inline ::std::string* release_targetclanname();
  inline void set_allocated_targetclanname(::std::string* targetclanname);

  // repeated .ClanPackage.FlagInfo info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::ClanPackage::FlagInfo& info(int index) const;
  inline ::ClanPackage::FlagInfo* mutable_info(int index);
  inline ::ClanPackage::FlagInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ClanPackage::FlagInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ClanPackage::FlagInfo >*
      mutable_info();

  // optional int32 redscore = 6;
  inline bool has_redscore() const;
  inline void clear_redscore();
  static const int kRedscoreFieldNumber = 6;
  inline ::google::protobuf::int32 redscore() const;
  inline void set_redscore(::google::protobuf::int32 value);

  // optional int32 bluescore = 7;
  inline bool has_bluescore() const;
  inline void clear_bluescore();
  static const int kBluescoreFieldNumber = 7;
  inline ::google::protobuf::int32 bluescore() const;
  inline void set_bluescore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.BaseBatterInfo)
 private:
  inline void set_has_selfflag();
  inline void clear_has_selfflag();
  inline void set_has_targetflag();
  inline void clear_has_targetflag();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_targetclanname();
  inline void clear_has_targetclanname();
  inline void set_has_redscore();
  inline void clear_has_redscore();
  inline void set_has_bluescore();
  inline void clear_has_bluescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 selfflag_;
  ::google::protobuf::int32 targetflag_;
  ::google::protobuf::int64 time_;
  ::std::string* targetclanname_;
  ::google::protobuf::RepeatedPtrField< ::ClanPackage::FlagInfo > info_;
  ::google::protobuf::int32 redscore_;
  ::google::protobuf::int32 bluescore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static BaseBatterInfo* default_instance_;
};
// -------------------------------------------------------------------

class FlagInfo : public ::google::protobuf::Message {
 public:
  FlagInfo();
  virtual ~FlagInfo();

  FlagInfo(const FlagInfo& from);

  inline FlagInfo& operator=(const FlagInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlagInfo& default_instance();

  void Swap(FlagInfo* other);

  // implements Message ----------------------------------------------

  FlagInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlagInfo& from);
  void MergeFrom(const FlagInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 ower = 3;
  inline bool has_ower() const;
  inline void clear_ower();
  static const int kOwerFieldNumber = 3;
  inline ::google::protobuf::int32 ower() const;
  inline void set_ower(::google::protobuf::int32 value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.FlagInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ower();
  inline void clear_has_ower();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ower_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static FlagInfo* default_instance_;
};
// -------------------------------------------------------------------

class ScoreChange : public ::google::protobuf::Message {
 public:
  ScoreChange();
  virtual ~ScoreChange();

  ScoreChange(const ScoreChange& from);

  inline ScoreChange& operator=(const ScoreChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreChange& default_instance();

  void Swap(ScoreChange* other);

  // implements Message ----------------------------------------------

  ScoreChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreChange& from);
  void MergeFrom(const ScoreChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 owner = 1;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 1;
  inline ::google::protobuf::int32 owner() const;
  inline void set_owner(::google::protobuf::int32 value);

  // optional int32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.ScoreChange)
 private:
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 owner_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ScoreChange* default_instance_;
};
// -------------------------------------------------------------------

class FlagStateChange : public ::google::protobuf::Message {
 public:
  FlagStateChange();
  virtual ~FlagStateChange();

  FlagStateChange(const FlagStateChange& from);

  inline FlagStateChange& operator=(const FlagStateChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlagStateChange& default_instance();

  void Swap(FlagStateChange* other);

  // implements Message ----------------------------------------------

  FlagStateChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlagStateChange& from);
  void MergeFrom(const FlagStateChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerkey = 1;
  inline bool has_playerkey() const;
  inline void clear_playerkey();
  static const int kPlayerkeyFieldNumber = 1;
  inline ::google::protobuf::int32 playerkey() const;
  inline void set_playerkey(::google::protobuf::int32 value);

  // optional int32 flagkey = 2;
  inline bool has_flagkey() const;
  inline void clear_flagkey();
  static const int kFlagkeyFieldNumber = 2;
  inline ::google::protobuf::int32 flagkey() const;
  inline void set_flagkey(::google::protobuf::int32 value);

  // optional int32 owner = 3;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 3;
  inline ::google::protobuf::int32 owner() const;
  inline void set_owner(::google::protobuf::int32 value);

  // optional bytes clanname = 4;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClannameFieldNumber = 4;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const void* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // optional bytes playername = 5;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayernameFieldNumber = 5;
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const void* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // @@protoc_insertion_point(class_scope:ClanPackage.FlagStateChange)
 private:
  inline void set_has_playerkey();
  inline void clear_has_playerkey();
  inline void set_has_flagkey();
  inline void clear_has_flagkey();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_clanname();
  inline void clear_has_clanname();
  inline void set_has_playername();
  inline void clear_has_playername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerkey_;
  ::google::protobuf::int32 flagkey_;
  ::std::string* clanname_;
  ::std::string* playername_;
  ::google::protobuf::int32 owner_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static FlagStateChange* default_instance_;
};
// -------------------------------------------------------------------

class FlagProtectedTimeOut : public ::google::protobuf::Message {
 public:
  FlagProtectedTimeOut();
  virtual ~FlagProtectedTimeOut();

  FlagProtectedTimeOut(const FlagProtectedTimeOut& from);

  inline FlagProtectedTimeOut& operator=(const FlagProtectedTimeOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FlagProtectedTimeOut& default_instance();

  void Swap(FlagProtectedTimeOut* other);

  // implements Message ----------------------------------------------

  FlagProtectedTimeOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FlagProtectedTimeOut& from);
  void MergeFrom(const FlagProtectedTimeOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.FlagProtectedTimeOut)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static FlagProtectedTimeOut* default_instance_;
};
// -------------------------------------------------------------------

class ClanBattleResult : public ::google::protobuf::Message {
 public:
  ClanBattleResult();
  virtual ~ClanBattleResult();

  ClanBattleResult(const ClanBattleResult& from);

  inline ClanBattleResult& operator=(const ClanBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClanBattleResult& default_instance();

  void Swap(ClanBattleResult* other);

  // implements Message ----------------------------------------------

  ClanBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClanBattleResult& from);
  void MergeFrom(const ClanBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.ClanBattleResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ClanBattleResult* default_instance_;
};
// -------------------------------------------------------------------

class OccupyFail : public ::google::protobuf::Message {
 public:
  OccupyFail();
  virtual ~OccupyFail();

  OccupyFail(const OccupyFail& from);

  inline OccupyFail& operator=(const OccupyFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupyFail& default_instance();

  void Swap(OccupyFail* other);

  // implements Message ----------------------------------------------

  OccupyFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OccupyFail& from);
  void MergeFrom(const OccupyFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.OccupyFail)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static OccupyFail* default_instance_;
};
// -------------------------------------------------------------------

class ReqGS2WSGetFactionName : public ::google::protobuf::Message {
 public:
  ReqGS2WSGetFactionName();
  virtual ~ReqGS2WSGetFactionName();

  ReqGS2WSGetFactionName(const ReqGS2WSGetFactionName& from);

  inline ReqGS2WSGetFactionName& operator=(const ReqGS2WSGetFactionName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGS2WSGetFactionName& default_instance();

  void Swap(ReqGS2WSGetFactionName* other);

  // implements Message ----------------------------------------------

  ReqGS2WSGetFactionName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGS2WSGetFactionName& from);
  void MergeFrom(const ReqGS2WSGetFactionName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.ReqGS2WSGetFactionName)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ReqGS2WSGetFactionName* default_instance_;
};
// -------------------------------------------------------------------

class AckGS2WSGetFactionName : public ::google::protobuf::Message {
 public:
  AckGS2WSGetFactionName();
  virtual ~AckGS2WSGetFactionName();

  AckGS2WSGetFactionName(const AckGS2WSGetFactionName& from);

  inline AckGS2WSGetFactionName& operator=(const AckGS2WSGetFactionName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGS2WSGetFactionName& default_instance();

  void Swap(AckGS2WSGetFactionName* other);

  // implements Message ----------------------------------------------

  AckGS2WSGetFactionName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGS2WSGetFactionName& from);
  void MergeFrom(const AckGS2WSGetFactionName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ClanPackage.AckGS2WSGetFactionName)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static AckGS2WSGetFactionName* default_instance_;
};
// -------------------------------------------------------------------

class ToGameClanDelete : public ::google::protobuf::Message {
 public:
  ToGameClanDelete();
  virtual ~ToGameClanDelete();

  ToGameClanDelete(const ToGameClanDelete& from);

  inline ToGameClanDelete& operator=(const ToGameClanDelete& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGameClanDelete& default_instance();

  void Swap(ToGameClanDelete* other);

  // implements Message ----------------------------------------------

  ToGameClanDelete* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGameClanDelete& from);
  void MergeFrom(const ToGameClanDelete& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::int64 cid() const;
  inline void set_cid(::google::protobuf::int64 value);

  // optional int64 only = 2;
  inline bool has_only() const;
  inline void clear_only();
  static const int kOnlyFieldNumber = 2;
  inline ::google::protobuf::int64 only() const;
  inline void set_only(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:ClanPackage.ToGameClanDelete)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_only();
  inline void clear_has_only();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 cid_;
  ::google::protobuf::int64 only_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ToGameClanDelete* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqMMapPlayer : public ::google::protobuf::Message {
 public:
  ClientReqMMapPlayer();
  virtual ~ClientReqMMapPlayer();

  ClientReqMMapPlayer(const ClientReqMMapPlayer& from);

  inline ClientReqMMapPlayer& operator=(const ClientReqMMapPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqMMapPlayer& default_instance();

  void Swap(ClientReqMMapPlayer* other);

  // implements Message ----------------------------------------------

  ClientReqMMapPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqMMapPlayer& from);
  void MergeFrom(const ClientReqMMapPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 key = 1;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key(int index) const;
  inline void set_key(int index, ::google::protobuf::int32 value);
  inline void add_key(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      key() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_key();

  // repeated bool ismyself = 2;
  inline int ismyself_size() const;
  inline void clear_ismyself();
  static const int kIsmyselfFieldNumber = 2;
  inline bool ismyself(int index) const;
  inline void set_ismyself(int index, bool value);
  inline void add_ismyself(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      ismyself() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_ismyself();

  // repeated int32 xpos = 3;
  inline int xpos_size() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 3;
  inline ::google::protobuf::int32 xpos(int index) const;
  inline void set_xpos(int index, ::google::protobuf::int32 value);
  inline void add_xpos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      xpos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_xpos();

  // repeated int32 ypos = 4;
  inline int ypos_size() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 4;
  inline ::google::protobuf::int32 ypos(int index) const;
  inline void set_ypos(int index, ::google::protobuf::int32 value);
  inline void add_ypos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ypos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ypos();

  // @@protoc_insertion_point(class_scope:ClanPackage.ClientReqMMapPlayer)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > key_;
  ::google::protobuf::RepeatedField< bool > ismyself_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > xpos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_AssignDesc_Clan_2fClanBattle_2eproto();
  friend void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto();

  void InitAsDefaultInstance();
  static ClientReqMMapPlayer* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqBatterInfo

// required int32 flag = 1;
inline bool ReqBatterInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqBatterInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqBatterInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqBatterInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ReqBatterInfo::flag() const {
  return flag_;
}
inline void ReqBatterInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// AckBatterInfo

// required int32 flag = 1;
inline bool AckBatterInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBatterInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBatterInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBatterInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 AckBatterInfo::flag() const {
  return flag_;
}
inline void AckBatterInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// repeated .ClanPackage.BatterInfo info = 2;
inline int AckBatterInfo::info_size() const {
  return info_.size();
}
inline void AckBatterInfo::clear_info() {
  info_.Clear();
}
inline const ::ClanPackage::BatterInfo& AckBatterInfo::info(int index) const {
  return info_.Get(index);
}
inline ::ClanPackage::BatterInfo* AckBatterInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ClanPackage::BatterInfo* AckBatterInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClanPackage::BatterInfo >&
AckBatterInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClanPackage::BatterInfo >*
AckBatterInfo::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// BatterInfo

// required int32 firstclanid = 1;
inline bool BatterInfo::has_firstclanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatterInfo::set_has_firstclanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatterInfo::clear_has_firstclanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatterInfo::clear_firstclanid() {
  firstclanid_ = 0;
  clear_has_firstclanid();
}
inline ::google::protobuf::int32 BatterInfo::firstclanid() const {
  return firstclanid_;
}
inline void BatterInfo::set_firstclanid(::google::protobuf::int32 value) {
  set_has_firstclanid();
  firstclanid_ = value;
}

// optional int32 secondclanid = 2;
inline bool BatterInfo::has_secondclanid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatterInfo::set_has_secondclanid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatterInfo::clear_has_secondclanid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatterInfo::clear_secondclanid() {
  secondclanid_ = 0;
  clear_has_secondclanid();
}
inline ::google::protobuf::int32 BatterInfo::secondclanid() const {
  return secondclanid_;
}
inline void BatterInfo::set_secondclanid(::google::protobuf::int32 value) {
  set_has_secondclanid();
  secondclanid_ = value;
}

// optional int32 firstclanscore = 3;
inline bool BatterInfo::has_firstclanscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BatterInfo::set_has_firstclanscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BatterInfo::clear_has_firstclanscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BatterInfo::clear_firstclanscore() {
  firstclanscore_ = 0;
  clear_has_firstclanscore();
}
inline ::google::protobuf::int32 BatterInfo::firstclanscore() const {
  return firstclanscore_;
}
inline void BatterInfo::set_firstclanscore(::google::protobuf::int32 value) {
  set_has_firstclanscore();
  firstclanscore_ = value;
}

// optional int32 secondclanscore = 4;
inline bool BatterInfo::has_secondclanscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BatterInfo::set_has_secondclanscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BatterInfo::clear_has_secondclanscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BatterInfo::clear_secondclanscore() {
  secondclanscore_ = 0;
  clear_has_secondclanscore();
}
inline ::google::protobuf::int32 BatterInfo::secondclanscore() const {
  return secondclanscore_;
}
inline void BatterInfo::set_secondclanscore(::google::protobuf::int32 value) {
  set_has_secondclanscore();
  secondclanscore_ = value;
}

// optional int32 winid = 5;
inline bool BatterInfo::has_winid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BatterInfo::set_has_winid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BatterInfo::clear_has_winid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BatterInfo::clear_winid() {
  winid_ = 0;
  clear_has_winid();
}
inline ::google::protobuf::int32 BatterInfo::winid() const {
  return winid_;
}
inline void BatterInfo::set_winid(::google::protobuf::int32 value) {
  set_has_winid();
  winid_ = value;
}

// optional bytes firstname = 6;
inline bool BatterInfo::has_firstname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BatterInfo::set_has_firstname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BatterInfo::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BatterInfo::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& BatterInfo::firstname() const {
  return *firstname_;
}
inline void BatterInfo::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void BatterInfo::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void BatterInfo::set_firstname(const void* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BatterInfo::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* BatterInfo::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BatterInfo::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes secondname = 7;
inline bool BatterInfo::has_secondname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BatterInfo::set_has_secondname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BatterInfo::clear_has_secondname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BatterInfo::clear_secondname() {
  if (secondname_ != &::google::protobuf::internal::kEmptyString) {
    secondname_->clear();
  }
  clear_has_secondname();
}
inline const ::std::string& BatterInfo::secondname() const {
  return *secondname_;
}
inline void BatterInfo::set_secondname(const ::std::string& value) {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::kEmptyString) {
    secondname_ = new ::std::string;
  }
  secondname_->assign(value);
}
inline void BatterInfo::set_secondname(const char* value) {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::kEmptyString) {
    secondname_ = new ::std::string;
  }
  secondname_->assign(value);
}
inline void BatterInfo::set_secondname(const void* value, size_t size) {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::kEmptyString) {
    secondname_ = new ::std::string;
  }
  secondname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BatterInfo::mutable_secondname() {
  set_has_secondname();
  if (secondname_ == &::google::protobuf::internal::kEmptyString) {
    secondname_ = new ::std::string;
  }
  return secondname_;
}
inline ::std::string* BatterInfo::release_secondname() {
  clear_has_secondname();
  if (secondname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondname_;
    secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BatterInfo::set_allocated_secondname(::std::string* secondname) {
  if (secondname_ != &::google::protobuf::internal::kEmptyString) {
    delete secondname_;
  }
  if (secondname) {
    set_has_secondname();
    secondname_ = secondname;
  } else {
    clear_has_secondname();
    secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 finish = 8;
inline bool BatterInfo::has_finish() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BatterInfo::set_has_finish() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BatterInfo::clear_has_finish() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BatterInfo::clear_finish() {
  finish_ = 0;
  clear_has_finish();
}
inline ::google::protobuf::int32 BatterInfo::finish() const {
  return finish_;
}
inline void BatterInfo::set_finish(::google::protobuf::int32 value) {
  set_has_finish();
  finish_ = value;
}

// -------------------------------------------------------------------

// AckBatterMap

// required int32 ret = 1;
inline bool AckBatterMap::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckBatterMap::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckBatterMap::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckBatterMap::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckBatterMap::ret() const {
  return ret_;
}
inline void AckBatterMap::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int64 mapid = 2;
inline bool AckBatterMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckBatterMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckBatterMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckBatterMap::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 AckBatterMap::mapid() const {
  return mapid_;
}
inline void AckBatterMap::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// ReqOccupyFlag

// required int32 key = 1;
inline bool ReqOccupyFlag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOccupyFlag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOccupyFlag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOccupyFlag::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 ReqOccupyFlag::key() const {
  return key_;
}
inline void ReqOccupyFlag::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// AckOccupyFlag

// required int32 key = 1;
inline bool AckOccupyFlag::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckOccupyFlag::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckOccupyFlag::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckOccupyFlag::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 AckOccupyFlag::key() const {
  return key_;
}
inline void AckOccupyFlag::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 ret = 2;
inline bool AckOccupyFlag::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckOccupyFlag::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckOccupyFlag::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckOccupyFlag::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckOccupyFlag::ret() const {
  return ret_;
}
inline void AckOccupyFlag::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// BaseBatterInfo

// required int32 selfflag = 1;
inline bool BaseBatterInfo::has_selfflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseBatterInfo::set_has_selfflag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseBatterInfo::clear_has_selfflag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseBatterInfo::clear_selfflag() {
  selfflag_ = 0;
  clear_has_selfflag();
}
inline ::google::protobuf::int32 BaseBatterInfo::selfflag() const {
  return selfflag_;
}
inline void BaseBatterInfo::set_selfflag(::google::protobuf::int32 value) {
  set_has_selfflag();
  selfflag_ = value;
}

// optional int32 targetflag = 2;
inline bool BaseBatterInfo::has_targetflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseBatterInfo::set_has_targetflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseBatterInfo::clear_has_targetflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseBatterInfo::clear_targetflag() {
  targetflag_ = 0;
  clear_has_targetflag();
}
inline ::google::protobuf::int32 BaseBatterInfo::targetflag() const {
  return targetflag_;
}
inline void BaseBatterInfo::set_targetflag(::google::protobuf::int32 value) {
  set_has_targetflag();
  targetflag_ = value;
}

// optional int64 time = 3;
inline bool BaseBatterInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseBatterInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseBatterInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseBatterInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BaseBatterInfo::time() const {
  return time_;
}
inline void BaseBatterInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional bytes targetclanname = 4;
inline bool BaseBatterInfo::has_targetclanname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseBatterInfo::set_has_targetclanname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseBatterInfo::clear_has_targetclanname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseBatterInfo::clear_targetclanname() {
  if (targetclanname_ != &::google::protobuf::internal::kEmptyString) {
    targetclanname_->clear();
  }
  clear_has_targetclanname();
}
inline const ::std::string& BaseBatterInfo::targetclanname() const {
  return *targetclanname_;
}
inline void BaseBatterInfo::set_targetclanname(const ::std::string& value) {
  set_has_targetclanname();
  if (targetclanname_ == &::google::protobuf::internal::kEmptyString) {
    targetclanname_ = new ::std::string;
  }
  targetclanname_->assign(value);
}
inline void BaseBatterInfo::set_targetclanname(const char* value) {
  set_has_targetclanname();
  if (targetclanname_ == &::google::protobuf::internal::kEmptyString) {
    targetclanname_ = new ::std::string;
  }
  targetclanname_->assign(value);
}
inline void BaseBatterInfo::set_targetclanname(const void* value, size_t size) {
  set_has_targetclanname();
  if (targetclanname_ == &::google::protobuf::internal::kEmptyString) {
    targetclanname_ = new ::std::string;
  }
  targetclanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseBatterInfo::mutable_targetclanname() {
  set_has_targetclanname();
  if (targetclanname_ == &::google::protobuf::internal::kEmptyString) {
    targetclanname_ = new ::std::string;
  }
  return targetclanname_;
}
inline ::std::string* BaseBatterInfo::release_targetclanname() {
  clear_has_targetclanname();
  if (targetclanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetclanname_;
    targetclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BaseBatterInfo::set_allocated_targetclanname(::std::string* targetclanname) {
  if (targetclanname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetclanname_;
  }
  if (targetclanname) {
    set_has_targetclanname();
    targetclanname_ = targetclanname;
  } else {
    clear_has_targetclanname();
    targetclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ClanPackage.FlagInfo info = 5;
inline int BaseBatterInfo::info_size() const {
  return info_.size();
}
inline void BaseBatterInfo::clear_info() {
  info_.Clear();
}
inline const ::ClanPackage::FlagInfo& BaseBatterInfo::info(int index) const {
  return info_.Get(index);
}
inline ::ClanPackage::FlagInfo* BaseBatterInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ClanPackage::FlagInfo* BaseBatterInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ClanPackage::FlagInfo >&
BaseBatterInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ClanPackage::FlagInfo >*
BaseBatterInfo::mutable_info() {
  return &info_;
}

// optional int32 redscore = 6;
inline bool BaseBatterInfo::has_redscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseBatterInfo::set_has_redscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseBatterInfo::clear_has_redscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseBatterInfo::clear_redscore() {
  redscore_ = 0;
  clear_has_redscore();
}
inline ::google::protobuf::int32 BaseBatterInfo::redscore() const {
  return redscore_;
}
inline void BaseBatterInfo::set_redscore(::google::protobuf::int32 value) {
  set_has_redscore();
  redscore_ = value;
}

// optional int32 bluescore = 7;
inline bool BaseBatterInfo::has_bluescore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseBatterInfo::set_has_bluescore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseBatterInfo::clear_has_bluescore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseBatterInfo::clear_bluescore() {
  bluescore_ = 0;
  clear_has_bluescore();
}
inline ::google::protobuf::int32 BaseBatterInfo::bluescore() const {
  return bluescore_;
}
inline void BaseBatterInfo::set_bluescore(::google::protobuf::int32 value) {
  set_has_bluescore();
  bluescore_ = value;
}

// -------------------------------------------------------------------

// FlagInfo

// required int32 key = 1;
inline bool FlagInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlagInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlagInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlagInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 FlagInfo::key() const {
  return key_;
}
inline void FlagInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 id = 2;
inline bool FlagInfo::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlagInfo::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlagInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlagInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FlagInfo::id() const {
  return id_;
}
inline void FlagInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ower = 3;
inline bool FlagInfo::has_ower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlagInfo::set_has_ower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlagInfo::clear_has_ower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlagInfo::clear_ower() {
  ower_ = 0;
  clear_has_ower();
}
inline ::google::protobuf::int32 FlagInfo::ower() const {
  return ower_;
}
inline void FlagInfo::set_ower(::google::protobuf::int32 value) {
  set_has_ower();
  ower_ = value;
}

// optional int32 time = 4;
inline bool FlagInfo::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlagInfo::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlagInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlagInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 FlagInfo::time() const {
  return time_;
}
inline void FlagInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ScoreChange

// required int32 owner = 1;
inline bool ScoreChange::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreChange::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreChange::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreChange::clear_owner() {
  owner_ = 0;
  clear_has_owner();
}
inline ::google::protobuf::int32 ScoreChange::owner() const {
  return owner_;
}
inline void ScoreChange::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
}

// optional int32 score = 2;
inline bool ScoreChange::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreChange::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreChange::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreChange::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 ScoreChange::score() const {
  return score_;
}
inline void ScoreChange::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// FlagStateChange

// required int32 playerkey = 1;
inline bool FlagStateChange::has_playerkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlagStateChange::set_has_playerkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlagStateChange::clear_has_playerkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlagStateChange::clear_playerkey() {
  playerkey_ = 0;
  clear_has_playerkey();
}
inline ::google::protobuf::int32 FlagStateChange::playerkey() const {
  return playerkey_;
}
inline void FlagStateChange::set_playerkey(::google::protobuf::int32 value) {
  set_has_playerkey();
  playerkey_ = value;
}

// optional int32 flagkey = 2;
inline bool FlagStateChange::has_flagkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlagStateChange::set_has_flagkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FlagStateChange::clear_has_flagkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FlagStateChange::clear_flagkey() {
  flagkey_ = 0;
  clear_has_flagkey();
}
inline ::google::protobuf::int32 FlagStateChange::flagkey() const {
  return flagkey_;
}
inline void FlagStateChange::set_flagkey(::google::protobuf::int32 value) {
  set_has_flagkey();
  flagkey_ = value;
}

// optional int32 owner = 3;
inline bool FlagStateChange::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FlagStateChange::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FlagStateChange::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FlagStateChange::clear_owner() {
  owner_ = 0;
  clear_has_owner();
}
inline ::google::protobuf::int32 FlagStateChange::owner() const {
  return owner_;
}
inline void FlagStateChange::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
}

// optional bytes clanname = 4;
inline bool FlagStateChange::has_clanname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FlagStateChange::set_has_clanname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FlagStateChange::clear_has_clanname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FlagStateChange::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& FlagStateChange::clanname() const {
  return *clanname_;
}
inline void FlagStateChange::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void FlagStateChange::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void FlagStateChange::set_clanname(const void* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlagStateChange::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* FlagStateChange::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlagStateChange::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes playername = 5;
inline bool FlagStateChange::has_playername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FlagStateChange::set_has_playername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FlagStateChange::clear_has_playername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FlagStateChange::clear_playername() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& FlagStateChange::playername() const {
  return *playername_;
}
inline void FlagStateChange::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void FlagStateChange::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
}
inline void FlagStateChange::set_playername(const void* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FlagStateChange::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    playername_ = new ::std::string;
  }
  return playername_;
}
inline ::std::string* FlagStateChange::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FlagStateChange::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FlagProtectedTimeOut

// required int32 key = 1;
inline bool FlagProtectedTimeOut::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlagProtectedTimeOut::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FlagProtectedTimeOut::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FlagProtectedTimeOut::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 FlagProtectedTimeOut::key() const {
  return key_;
}
inline void FlagProtectedTimeOut::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// ClanBattleResult

// required int32 result = 1;
inline bool ClanBattleResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClanBattleResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClanBattleResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClanBattleResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ClanBattleResult::result() const {
  return result_;
}
inline void ClanBattleResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// OccupyFail

// required int32 ret = 1;
inline bool OccupyFail::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OccupyFail::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OccupyFail::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OccupyFail::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 OccupyFail::ret() const {
  return ret_;
}
inline void OccupyFail::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// ReqGS2WSGetFactionName

// required int32 id = 1;
inline bool ReqGS2WSGetFactionName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGS2WSGetFactionName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGS2WSGetFactionName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGS2WSGetFactionName::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqGS2WSGetFactionName::id() const {
  return id_;
}
inline void ReqGS2WSGetFactionName::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckGS2WSGetFactionName

// required int32 id = 1;
inline bool AckGS2WSGetFactionName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGS2WSGetFactionName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGS2WSGetFactionName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGS2WSGetFactionName::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AckGS2WSGetFactionName::id() const {
  return id_;
}
inline void AckGS2WSGetFactionName::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool AckGS2WSGetFactionName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGS2WSGetFactionName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGS2WSGetFactionName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGS2WSGetFactionName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AckGS2WSGetFactionName::name() const {
  return *name_;
}
inline void AckGS2WSGetFactionName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AckGS2WSGetFactionName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AckGS2WSGetFactionName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AckGS2WSGetFactionName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* AckGS2WSGetFactionName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AckGS2WSGetFactionName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ToGameClanDelete

// required int64 cid = 1;
inline bool ToGameClanDelete::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGameClanDelete::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGameClanDelete::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGameClanDelete::clear_cid() {
  cid_ = GOOGLE_LONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::int64 ToGameClanDelete::cid() const {
  return cid_;
}
inline void ToGameClanDelete::set_cid(::google::protobuf::int64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int64 only = 2;
inline bool ToGameClanDelete::has_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGameClanDelete::set_has_only() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGameClanDelete::clear_has_only() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGameClanDelete::clear_only() {
  only_ = GOOGLE_LONGLONG(0);
  clear_has_only();
}
inline ::google::protobuf::int64 ToGameClanDelete::only() const {
  return only_;
}
inline void ToGameClanDelete::set_only(::google::protobuf::int64 value) {
  set_has_only();
  only_ = value;
}

// -------------------------------------------------------------------

// ClientReqMMapPlayer

// repeated int32 key = 1;
inline int ClientReqMMapPlayer::key_size() const {
  return key_.size();
}
inline void ClientReqMMapPlayer::clear_key() {
  key_.Clear();
}
inline ::google::protobuf::int32 ClientReqMMapPlayer::key(int index) const {
  return key_.Get(index);
}
inline void ClientReqMMapPlayer::set_key(int index, ::google::protobuf::int32 value) {
  key_.Set(index, value);
}
inline void ClientReqMMapPlayer::add_key(::google::protobuf::int32 value) {
  key_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientReqMMapPlayer::key() const {
  return key_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientReqMMapPlayer::mutable_key() {
  return &key_;
}

// repeated bool ismyself = 2;
inline int ClientReqMMapPlayer::ismyself_size() const {
  return ismyself_.size();
}
inline void ClientReqMMapPlayer::clear_ismyself() {
  ismyself_.Clear();
}
inline bool ClientReqMMapPlayer::ismyself(int index) const {
  return ismyself_.Get(index);
}
inline void ClientReqMMapPlayer::set_ismyself(int index, bool value) {
  ismyself_.Set(index, value);
}
inline void ClientReqMMapPlayer::add_ismyself(bool value) {
  ismyself_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ClientReqMMapPlayer::ismyself() const {
  return ismyself_;
}
inline ::google::protobuf::RepeatedField< bool >*
ClientReqMMapPlayer::mutable_ismyself() {
  return &ismyself_;
}

// repeated int32 xpos = 3;
inline int ClientReqMMapPlayer::xpos_size() const {
  return xpos_.size();
}
inline void ClientReqMMapPlayer::clear_xpos() {
  xpos_.Clear();
}
inline ::google::protobuf::int32 ClientReqMMapPlayer::xpos(int index) const {
  return xpos_.Get(index);
}
inline void ClientReqMMapPlayer::set_xpos(int index, ::google::protobuf::int32 value) {
  xpos_.Set(index, value);
}
inline void ClientReqMMapPlayer::add_xpos(::google::protobuf::int32 value) {
  xpos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientReqMMapPlayer::xpos() const {
  return xpos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientReqMMapPlayer::mutable_xpos() {
  return &xpos_;
}

// repeated int32 ypos = 4;
inline int ClientReqMMapPlayer::ypos_size() const {
  return ypos_.size();
}
inline void ClientReqMMapPlayer::clear_ypos() {
  ypos_.Clear();
}
inline ::google::protobuf::int32 ClientReqMMapPlayer::ypos(int index) const {
  return ypos_.Get(index);
}
inline void ClientReqMMapPlayer::set_ypos(int index, ::google::protobuf::int32 value) {
  ypos_.Set(index, value);
}
inline void ClientReqMMapPlayer::add_ypos(::google::protobuf::int32 value) {
  ypos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientReqMMapPlayer::ypos() const {
  return ypos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientReqMMapPlayer::mutable_ypos() {
  return &ypos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClanPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Clan_2fClanBattle_2eproto__INCLUDED
