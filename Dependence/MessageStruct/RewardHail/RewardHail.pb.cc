// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RewardHail/RewardHail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RewardHail/RewardHail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RewardHail {

namespace {

const ::google::protobuf::Descriptor* SignIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientGetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientGetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenSignIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenSignIn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSignInInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSignInInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientOlineRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientOlineRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetOnlineReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetOnlineReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenLevelReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenLevelReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenToalLoginAndFirstChargeRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenToalLoginAndFirstChargeRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientOnceReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientOnceReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RewardHail_2fRewardHail_2eproto() {
  protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RewardHail/RewardHail.proto");
  GOOGLE_CHECK(file != NULL);
  SignIn_descriptor_ = file->message_type(0);
  static const int SignIn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignIn, day_),
  };
  SignIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignIn_descriptor_,
      SignIn::default_instance_,
      SignIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignIn));
  GetReward_descriptor_ = file->message_type(1);
  static const int GetReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, list_),
  };
  GetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetReward_descriptor_,
      GetReward::default_instance_,
      GetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetReward));
  ToClientGetReward_descriptor_ = file->message_type(2);
  static const int ToClientGetReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGetReward, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGetReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGetReward, list_),
  };
  ToClientGetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientGetReward_descriptor_,
      ToClientGetReward::default_instance_,
      ToClientGetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientGetReward));
  OpenSignIn_descriptor_ = file->message_type(3);
  static const int OpenSignIn_offsets_[1] = {
  };
  OpenSignIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenSignIn_descriptor_,
      OpenSignIn::default_instance_,
      OpenSignIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSignIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenSignIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenSignIn));
  ClientSignInInfo_descriptor_ = file->message_type(4);
  static const int ClientSignInInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSignInInfo, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSignInInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSignInInfo, restaddsigncount_),
  };
  ClientSignInInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSignInInfo_descriptor_,
      ClientSignInInfo::default_instance_,
      ClientSignInInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSignInInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSignInInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSignInInfo));
  ClientOlineRewardInfo_descriptor_ = file->message_type(5);
  static const int ClientOlineRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOlineRewardInfo, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOlineRewardInfo, time_),
  };
  ClientOlineRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientOlineRewardInfo_descriptor_,
      ClientOlineRewardInfo::default_instance_,
      ClientOlineRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOlineRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOlineRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientOlineRewardInfo));
  GetOnlineReward_descriptor_ = file->message_type(6);
  static const int GetOnlineReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineReward, idlist_),
  };
  GetOnlineReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetOnlineReward_descriptor_,
      GetOnlineReward::default_instance_,
      GetOnlineReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetOnlineReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetOnlineReward));
  OpenLevelReward_descriptor_ = file->message_type(7);
  static const int OpenLevelReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLevelReward, levelreward_),
  };
  OpenLevelReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenLevelReward_descriptor_,
      OpenLevelReward::default_instance_,
      OpenLevelReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLevelReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenLevelReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenLevelReward));
  OpenToalLoginAndFirstChargeRewardInfo_descriptor_ = file->message_type(8);
  static const int OpenToalLoginAndFirstChargeRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenToalLoginAndFirstChargeRewardInfo, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenToalLoginAndFirstChargeRewardInfo, rewardinfo_),
  };
  OpenToalLoginAndFirstChargeRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenToalLoginAndFirstChargeRewardInfo_descriptor_,
      OpenToalLoginAndFirstChargeRewardInfo::default_instance_,
      OpenToalLoginAndFirstChargeRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenToalLoginAndFirstChargeRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenToalLoginAndFirstChargeRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenToalLoginAndFirstChargeRewardInfo));
  ClientOnceReward_descriptor_ = file->message_type(9);
  static const int ClientOnceReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOnceReward, firstchargereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOnceReward, microreward_),
  };
  ClientOnceReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientOnceReward_descriptor_,
      ClientOnceReward::default_instance_,
      ClientOnceReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOnceReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientOnceReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientOnceReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RewardHail_2fRewardHail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignIn_descriptor_, &SignIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetReward_descriptor_, &GetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientGetReward_descriptor_, &ToClientGetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenSignIn_descriptor_, &OpenSignIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSignInInfo_descriptor_, &ClientSignInInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientOlineRewardInfo_descriptor_, &ClientOlineRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetOnlineReward_descriptor_, &GetOnlineReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenLevelReward_descriptor_, &OpenLevelReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenToalLoginAndFirstChargeRewardInfo_descriptor_, &OpenToalLoginAndFirstChargeRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientOnceReward_descriptor_, &ClientOnceReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RewardHail_2fRewardHail_2eproto() {
  delete SignIn::default_instance_;
  delete SignIn_reflection_;
  delete GetReward::default_instance_;
  delete GetReward_reflection_;
  delete ToClientGetReward::default_instance_;
  delete ToClientGetReward_reflection_;
  delete OpenSignIn::default_instance_;
  delete OpenSignIn_reflection_;
  delete ClientSignInInfo::default_instance_;
  delete ClientSignInInfo_reflection_;
  delete ClientOlineRewardInfo::default_instance_;
  delete ClientOlineRewardInfo_reflection_;
  delete GetOnlineReward::default_instance_;
  delete GetOnlineReward_reflection_;
  delete OpenLevelReward::default_instance_;
  delete OpenLevelReward_reflection_;
  delete OpenToalLoginAndFirstChargeRewardInfo::default_instance_;
  delete OpenToalLoginAndFirstChargeRewardInfo_reflection_;
  delete ClientOnceReward::default_instance_;
  delete ClientOnceReward_reflection_;
}

void protobuf_AddDesc_RewardHail_2fRewardHail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033RewardHail/RewardHail.proto\022\nRewardHai"
    "l\"\025\n\006SignIn\022\013\n\003day\030\001 \002(\005\"\'\n\tGetReward\022\014\n"
    "\004type\030\001 \002(\005\022\014\n\004list\030\002 \003(\005\"<\n\021ToClientGet"
    "Reward\022\013\n\003res\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\014\n\004lis"
    "t\030\003 \003(\005\"\014\n\nOpenSignIn\"L\n\020ClientSignInInf"
    "o\022\016\n\006SignIn\030\001 \002(\005\022\016\n\006Reward\030\002 \002(\005\022\030\n\020res"
    "tAddSignCount\030\003 \001(\005\"9\n\025ClientOlineReward"
    "Info\022\022\n\nrewardInfo\030\001 \002(\005\022\014\n\004time\030\002 \002(\005\"!"
    "\n\017GetOnlineReward\022\016\n\006IdList\030\001 \003(\005\"&\n\017Ope"
    "nLevelReward\022\023\n\013levelReward\030\001 \002(\005\"O\n%Ope"
    "nToalLoginAndFirstChargeRewardInfo\022\022\n\nto"
    "talcount\030\001 \001(\005\022\022\n\nrewardInfo\030\002 \001(\005\"B\n\020Cl"
    "ientOnceReward\022\031\n\021firstChargeReward\030\001 \001("
    "\005\022\023\n\013microReward\030\002 \001(\005", 542);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RewardHail/RewardHail.proto", &protobuf_RegisterTypes);
  SignIn::default_instance_ = new SignIn();
  GetReward::default_instance_ = new GetReward();
  ToClientGetReward::default_instance_ = new ToClientGetReward();
  OpenSignIn::default_instance_ = new OpenSignIn();
  ClientSignInInfo::default_instance_ = new ClientSignInInfo();
  ClientOlineRewardInfo::default_instance_ = new ClientOlineRewardInfo();
  GetOnlineReward::default_instance_ = new GetOnlineReward();
  OpenLevelReward::default_instance_ = new OpenLevelReward();
  OpenToalLoginAndFirstChargeRewardInfo::default_instance_ = new OpenToalLoginAndFirstChargeRewardInfo();
  ClientOnceReward::default_instance_ = new ClientOnceReward();
  SignIn::default_instance_->InitAsDefaultInstance();
  GetReward::default_instance_->InitAsDefaultInstance();
  ToClientGetReward::default_instance_->InitAsDefaultInstance();
  OpenSignIn::default_instance_->InitAsDefaultInstance();
  ClientSignInInfo::default_instance_->InitAsDefaultInstance();
  ClientOlineRewardInfo::default_instance_->InitAsDefaultInstance();
  GetOnlineReward::default_instance_->InitAsDefaultInstance();
  OpenLevelReward::default_instance_->InitAsDefaultInstance();
  OpenToalLoginAndFirstChargeRewardInfo::default_instance_->InitAsDefaultInstance();
  ClientOnceReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RewardHail_2fRewardHail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RewardHail_2fRewardHail_2eproto {
  StaticDescriptorInitializer_RewardHail_2fRewardHail_2eproto() {
    protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  }
} static_descriptor_initializer_RewardHail_2fRewardHail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SignIn::kDayFieldNumber;
#endif  // !_MSC_VER

SignIn::SignIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignIn::InitAsDefaultInstance() {
}

SignIn::SignIn(const SignIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignIn::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignIn::~SignIn() {
  SharedDtor();
}

void SignIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignIn_descriptor_;
}

const SignIn& SignIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

SignIn* SignIn::default_instance_ = NULL;

SignIn* SignIn::New() const {
  return new SignIn;
}

void SignIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignIn::MergeFrom(const SignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignIn::CopyFrom(const SignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SignIn::Swap(SignIn* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignIn_descriptor_;
  metadata.reflection = SignIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetReward::kTypeFieldNumber;
const int GetReward::kListFieldNumber;
#endif  // !_MSC_VER

GetReward::GetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetReward::InitAsDefaultInstance() {
}

GetReward::GetReward(const GetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetReward::~GetReward() {
  SharedDtor();
}

void GetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetReward_descriptor_;
}

const GetReward& GetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

GetReward* GetReward::default_instance_ = NULL;

GetReward* GetReward::New() const {
  return new GetReward;
}

void GetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list;
        break;
      }

      // repeated int32 list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated int32 list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated int32 list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetReward::MergeFrom(const GetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReward::CopyFrom(const GetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetReward::Swap(GetReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetReward_descriptor_;
  metadata.reflection = GetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientGetReward::kResFieldNumber;
const int ToClientGetReward::kTypeFieldNumber;
const int ToClientGetReward::kListFieldNumber;
#endif  // !_MSC_VER

ToClientGetReward::ToClientGetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientGetReward::InitAsDefaultInstance() {
}

ToClientGetReward::ToClientGetReward(const ToClientGetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientGetReward::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientGetReward::~ToClientGetReward() {
  SharedDtor();
}

void ToClientGetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientGetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientGetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientGetReward_descriptor_;
}

const ToClientGetReward& ToClientGetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

ToClientGetReward* ToClientGetReward::default_instance_ = NULL;

ToClientGetReward* ToClientGetReward::New() const {
  return new ToClientGetReward;
}

void ToClientGetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    type_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientGetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list;
        break;
      }

      // repeated int32 list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientGetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientGetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientGetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientGetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientGetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientGetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientGetReward::MergeFrom(const ToClientGetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientGetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientGetReward::CopyFrom(const ToClientGetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientGetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ToClientGetReward::Swap(ToClientGetReward* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientGetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientGetReward_descriptor_;
  metadata.reflection = ToClientGetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenSignIn::OpenSignIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenSignIn::InitAsDefaultInstance() {
}

OpenSignIn::OpenSignIn(const OpenSignIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenSignIn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenSignIn::~OpenSignIn() {
  SharedDtor();
}

void OpenSignIn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenSignIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenSignIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenSignIn_descriptor_;
}

const OpenSignIn& OpenSignIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

OpenSignIn* OpenSignIn::default_instance_ = NULL;

OpenSignIn* OpenSignIn::New() const {
  return new OpenSignIn;
}

void OpenSignIn::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenSignIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OpenSignIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenSignIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenSignIn::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenSignIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenSignIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenSignIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenSignIn::MergeFrom(const OpenSignIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenSignIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenSignIn::CopyFrom(const OpenSignIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenSignIn::IsInitialized() const {

  return true;
}

void OpenSignIn::Swap(OpenSignIn* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenSignIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenSignIn_descriptor_;
  metadata.reflection = OpenSignIn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSignInInfo::kSignInFieldNumber;
const int ClientSignInInfo::kRewardFieldNumber;
const int ClientSignInInfo::kRestAddSignCountFieldNumber;
#endif  // !_MSC_VER

ClientSignInInfo::ClientSignInInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSignInInfo::InitAsDefaultInstance() {
}

ClientSignInInfo::ClientSignInInfo(const ClientSignInInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSignInInfo::SharedCtor() {
  _cached_size_ = 0;
  signin_ = 0;
  reward_ = 0;
  restaddsigncount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSignInInfo::~ClientSignInInfo() {
  SharedDtor();
}

void ClientSignInInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSignInInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSignInInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSignInInfo_descriptor_;
}

const ClientSignInInfo& ClientSignInInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

ClientSignInInfo* ClientSignInInfo::default_instance_ = NULL;

ClientSignInInfo* ClientSignInInfo::New() const {
  return new ClientSignInInfo;
}

void ClientSignInInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signin_ = 0;
    reward_ = 0;
    restaddsigncount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSignInInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SignIn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signin_)));
          set_has_signin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reward;
        break;
      }

      // required int32 Reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_restAddSignCount;
        break;
      }

      // optional int32 restAddSignCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_restAddSignCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &restaddsigncount_)));
          set_has_restaddsigncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSignInInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SignIn = 1;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signin(), output);
  }

  // required int32 Reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward(), output);
  }

  // optional int32 restAddSignCount = 3;
  if (has_restaddsigncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->restaddsigncount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSignInInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SignIn = 1;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signin(), target);
  }

  // required int32 Reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward(), target);
  }

  // optional int32 restAddSignCount = 3;
  if (has_restaddsigncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->restaddsigncount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSignInInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SignIn = 1;
    if (has_signin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signin());
    }

    // required int32 Reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 restAddSignCount = 3;
    if (has_restaddsigncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->restaddsigncount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSignInInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSignInInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSignInInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSignInInfo::MergeFrom(const ClientSignInInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signin()) {
      set_signin(from.signin());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_restaddsigncount()) {
      set_restaddsigncount(from.restaddsigncount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSignInInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSignInInfo::CopyFrom(const ClientSignInInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSignInInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientSignInInfo::Swap(ClientSignInInfo* other) {
  if (other != this) {
    std::swap(signin_, other->signin_);
    std::swap(reward_, other->reward_);
    std::swap(restaddsigncount_, other->restaddsigncount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSignInInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSignInInfo_descriptor_;
  metadata.reflection = ClientSignInInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientOlineRewardInfo::kRewardInfoFieldNumber;
const int ClientOlineRewardInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

ClientOlineRewardInfo::ClientOlineRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientOlineRewardInfo::InitAsDefaultInstance() {
}

ClientOlineRewardInfo::ClientOlineRewardInfo(const ClientOlineRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientOlineRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  rewardinfo_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientOlineRewardInfo::~ClientOlineRewardInfo() {
  SharedDtor();
}

void ClientOlineRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientOlineRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientOlineRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientOlineRewardInfo_descriptor_;
}

const ClientOlineRewardInfo& ClientOlineRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

ClientOlineRewardInfo* ClientOlineRewardInfo::default_instance_ = NULL;

ClientOlineRewardInfo* ClientOlineRewardInfo::New() const {
  return new ClientOlineRewardInfo;
}

void ClientOlineRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardinfo_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientOlineRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rewardInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardinfo_)));
          set_has_rewardinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientOlineRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rewardInfo = 1;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardinfo(), output);
  }

  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientOlineRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rewardInfo = 1;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardinfo(), target);
  }

  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientOlineRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rewardInfo = 1;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardinfo());
    }

    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientOlineRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientOlineRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientOlineRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientOlineRewardInfo::MergeFrom(const ClientOlineRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardinfo()) {
      set_rewardinfo(from.rewardinfo());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientOlineRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientOlineRewardInfo::CopyFrom(const ClientOlineRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOlineRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientOlineRewardInfo::Swap(ClientOlineRewardInfo* other) {
  if (other != this) {
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientOlineRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientOlineRewardInfo_descriptor_;
  metadata.reflection = ClientOlineRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetOnlineReward::kIdListFieldNumber;
#endif  // !_MSC_VER

GetOnlineReward::GetOnlineReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetOnlineReward::InitAsDefaultInstance() {
}

GetOnlineReward::GetOnlineReward(const GetOnlineReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetOnlineReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetOnlineReward::~GetOnlineReward() {
  SharedDtor();
}

void GetOnlineReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetOnlineReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetOnlineReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetOnlineReward_descriptor_;
}

const GetOnlineReward& GetOnlineReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

GetOnlineReward* GetOnlineReward::default_instance_ = NULL;

GetOnlineReward* GetOnlineReward::New() const {
  return new GetOnlineReward;
}

void GetOnlineReward::Clear() {
  idlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetOnlineReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 IdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_idlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_idlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_IdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetOnlineReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 IdList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->idlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetOnlineReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 IdList = 1;
  for (int i = 0; i < this->idlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->idlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetOnlineReward::ByteSize() const {
  int total_size = 0;

  // repeated int32 IdList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->idlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->idlist(i));
    }
    total_size += 1 * this->idlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetOnlineReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetOnlineReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetOnlineReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetOnlineReward::MergeFrom(const GetOnlineReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  idlist_.MergeFrom(from.idlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetOnlineReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOnlineReward::CopyFrom(const GetOnlineReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOnlineReward::IsInitialized() const {

  return true;
}

void GetOnlineReward::Swap(GetOnlineReward* other) {
  if (other != this) {
    idlist_.Swap(&other->idlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetOnlineReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetOnlineReward_descriptor_;
  metadata.reflection = GetOnlineReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenLevelReward::kLevelRewardFieldNumber;
#endif  // !_MSC_VER

OpenLevelReward::OpenLevelReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenLevelReward::InitAsDefaultInstance() {
}

OpenLevelReward::OpenLevelReward(const OpenLevelReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenLevelReward::SharedCtor() {
  _cached_size_ = 0;
  levelreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenLevelReward::~OpenLevelReward() {
  SharedDtor();
}

void OpenLevelReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenLevelReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenLevelReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenLevelReward_descriptor_;
}

const OpenLevelReward& OpenLevelReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

OpenLevelReward* OpenLevelReward::default_instance_ = NULL;

OpenLevelReward* OpenLevelReward::New() const {
  return new OpenLevelReward;
}

void OpenLevelReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenLevelReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 levelReward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelreward_)));
          set_has_levelreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenLevelReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 levelReward = 1;
  if (has_levelreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenLevelReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 levelReward = 1;
  if (has_levelreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenLevelReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 levelReward = 1;
    if (has_levelreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenLevelReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenLevelReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenLevelReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenLevelReward::MergeFrom(const OpenLevelReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelreward()) {
      set_levelreward(from.levelreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenLevelReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenLevelReward::CopyFrom(const OpenLevelReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenLevelReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OpenLevelReward::Swap(OpenLevelReward* other) {
  if (other != this) {
    std::swap(levelreward_, other->levelreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenLevelReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenLevelReward_descriptor_;
  metadata.reflection = OpenLevelReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenToalLoginAndFirstChargeRewardInfo::kTotalcountFieldNumber;
const int OpenToalLoginAndFirstChargeRewardInfo::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

OpenToalLoginAndFirstChargeRewardInfo::OpenToalLoginAndFirstChargeRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenToalLoginAndFirstChargeRewardInfo::InitAsDefaultInstance() {
}

OpenToalLoginAndFirstChargeRewardInfo::OpenToalLoginAndFirstChargeRewardInfo(const OpenToalLoginAndFirstChargeRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenToalLoginAndFirstChargeRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  totalcount_ = 0;
  rewardinfo_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenToalLoginAndFirstChargeRewardInfo::~OpenToalLoginAndFirstChargeRewardInfo() {
  SharedDtor();
}

void OpenToalLoginAndFirstChargeRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenToalLoginAndFirstChargeRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenToalLoginAndFirstChargeRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenToalLoginAndFirstChargeRewardInfo_descriptor_;
}

const OpenToalLoginAndFirstChargeRewardInfo& OpenToalLoginAndFirstChargeRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

OpenToalLoginAndFirstChargeRewardInfo* OpenToalLoginAndFirstChargeRewardInfo::default_instance_ = NULL;

OpenToalLoginAndFirstChargeRewardInfo* OpenToalLoginAndFirstChargeRewardInfo::New() const {
  return new OpenToalLoginAndFirstChargeRewardInfo;
}

void OpenToalLoginAndFirstChargeRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalcount_ = 0;
    rewardinfo_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenToalLoginAndFirstChargeRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalcount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardInfo;
        break;
      }

      // optional int32 rewardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardinfo_)));
          set_has_rewardinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenToalLoginAndFirstChargeRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalcount = 1;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalcount(), output);
  }

  // optional int32 rewardInfo = 2;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenToalLoginAndFirstChargeRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalcount = 1;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalcount(), target);
  }

  // optional int32 rewardInfo = 2;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenToalLoginAndFirstChargeRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalcount = 1;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 rewardInfo = 2;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenToalLoginAndFirstChargeRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenToalLoginAndFirstChargeRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenToalLoginAndFirstChargeRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenToalLoginAndFirstChargeRewardInfo::MergeFrom(const OpenToalLoginAndFirstChargeRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_rewardinfo()) {
      set_rewardinfo(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenToalLoginAndFirstChargeRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenToalLoginAndFirstChargeRewardInfo::CopyFrom(const OpenToalLoginAndFirstChargeRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenToalLoginAndFirstChargeRewardInfo::IsInitialized() const {

  return true;
}

void OpenToalLoginAndFirstChargeRewardInfo::Swap(OpenToalLoginAndFirstChargeRewardInfo* other) {
  if (other != this) {
    std::swap(totalcount_, other->totalcount_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenToalLoginAndFirstChargeRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenToalLoginAndFirstChargeRewardInfo_descriptor_;
  metadata.reflection = OpenToalLoginAndFirstChargeRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientOnceReward::kFirstChargeRewardFieldNumber;
const int ClientOnceReward::kMicroRewardFieldNumber;
#endif  // !_MSC_VER

ClientOnceReward::ClientOnceReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientOnceReward::InitAsDefaultInstance() {
}

ClientOnceReward::ClientOnceReward(const ClientOnceReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientOnceReward::SharedCtor() {
  _cached_size_ = 0;
  firstchargereward_ = 0;
  microreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientOnceReward::~ClientOnceReward() {
  SharedDtor();
}

void ClientOnceReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientOnceReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientOnceReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientOnceReward_descriptor_;
}

const ClientOnceReward& ClientOnceReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RewardHail_2fRewardHail_2eproto();
  return *default_instance_;
}

ClientOnceReward* ClientOnceReward::default_instance_ = NULL;

ClientOnceReward* ClientOnceReward::New() const {
  return new ClientOnceReward;
}

void ClientOnceReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstchargereward_ = 0;
    microreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientOnceReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 firstChargeReward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstchargereward_)));
          set_has_firstchargereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_microReward;
        break;
      }

      // optional int32 microReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_microReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &microreward_)));
          set_has_microreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientOnceReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 firstChargeReward = 1;
  if (has_firstchargereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstchargereward(), output);
  }

  // optional int32 microReward = 2;
  if (has_microreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->microreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientOnceReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 firstChargeReward = 1;
  if (has_firstchargereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstchargereward(), target);
  }

  // optional int32 microReward = 2;
  if (has_microreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->microreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientOnceReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 firstChargeReward = 1;
    if (has_firstchargereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstchargereward());
    }

    // optional int32 microReward = 2;
    if (has_microreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->microreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientOnceReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientOnceReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientOnceReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientOnceReward::MergeFrom(const ClientOnceReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstchargereward()) {
      set_firstchargereward(from.firstchargereward());
    }
    if (from.has_microreward()) {
      set_microreward(from.microreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientOnceReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientOnceReward::CopyFrom(const ClientOnceReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientOnceReward::IsInitialized() const {

  return true;
}

void ClientOnceReward::Swap(ClientOnceReward* other) {
  if (other != this) {
    std::swap(firstchargereward_, other->firstchargereward_);
    std::swap(microreward_, other->microreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientOnceReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientOnceReward_descriptor_;
  metadata.reflection = ClientOnceReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RewardHail

// @@protoc_insertion_point(global_scope)
