// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CDTime/CDTimePro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CDTime/CDTimePro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CDTimePro {

namespace {

const ::google::protobuf::Descriptor* CDTimeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDTimeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDTimeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDTimeList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CDTime_2fCDTimePro_2eproto() {
  protobuf_AddDesc_CDTime_2fCDTimePro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CDTime/CDTimePro.proto");
  GOOGLE_CHECK(file != NULL);
  CDTimeData_descriptor_ = file->message_type(0);
  static const int CDTimeData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeData, channeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeData, time_),
  };
  CDTimeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDTimeData_descriptor_,
      CDTimeData::default_instance_,
      CDTimeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDTimeData));
  CDTimeList_descriptor_ = file->message_type(1);
  static const int CDTimeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeList, datalist_),
  };
  CDTimeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDTimeList_descriptor_,
      CDTimeList::default_instance_,
      CDTimeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDTimeList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CDTime_2fCDTimePro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDTimeData_descriptor_, &CDTimeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDTimeList_descriptor_, &CDTimeList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CDTime_2fCDTimePro_2eproto() {
  delete CDTimeData::default_instance_;
  delete CDTimeData_reflection_;
  delete CDTimeList::default_instance_;
  delete CDTimeList_reflection_;
}

void protobuf_AddDesc_CDTime_2fCDTimePro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026CDTime/CDTimePro.proto\022\tCDTimePro\"/\n\nC"
    "DTimeData\022\023\n\013channelType\030\001 \001(\005\022\014\n\004time\030\002"
    " \001(\005\"5\n\nCDTimeList\022\'\n\010dataList\030\001 \003(\0132\025.C"
    "DTimePro.CDTimeData", 139);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CDTime/CDTimePro.proto", &protobuf_RegisterTypes);
  CDTimeData::default_instance_ = new CDTimeData();
  CDTimeList::default_instance_ = new CDTimeList();
  CDTimeData::default_instance_->InitAsDefaultInstance();
  CDTimeList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CDTime_2fCDTimePro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CDTime_2fCDTimePro_2eproto {
  StaticDescriptorInitializer_CDTime_2fCDTimePro_2eproto() {
    protobuf_AddDesc_CDTime_2fCDTimePro_2eproto();
  }
} static_descriptor_initializer_CDTime_2fCDTimePro_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CDTimeData::kChannelTypeFieldNumber;
const int CDTimeData::kTimeFieldNumber;
#endif  // !_MSC_VER

CDTimeData::CDTimeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDTimeData::InitAsDefaultInstance() {
}

CDTimeData::CDTimeData(const CDTimeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDTimeData::SharedCtor() {
  _cached_size_ = 0;
  channeltype_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTimeData::~CDTimeData() {
  SharedDtor();
}

void CDTimeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDTimeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDTimeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTimeData_descriptor_;
}

const CDTimeData& CDTimeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CDTime_2fCDTimePro_2eproto();
  return *default_instance_;
}

CDTimeData* CDTimeData::default_instance_ = NULL;

CDTimeData* CDTimeData::New() const {
  return new CDTimeData;
}

void CDTimeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channeltype_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDTimeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 channelType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channeltype_)));
          set_has_channeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDTimeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 channelType = 1;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->channeltype(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDTimeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 channelType = 1;
  if (has_channeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->channeltype(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDTimeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 channelType = 1;
    if (has_channeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channeltype());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDTimeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDTimeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDTimeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDTimeData::MergeFrom(const CDTimeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDTimeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTimeData::CopyFrom(const CDTimeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTimeData::IsInitialized() const {

  return true;
}

void CDTimeData::Swap(CDTimeData* other) {
  if (other != this) {
    std::swap(channeltype_, other->channeltype_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDTimeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDTimeData_descriptor_;
  metadata.reflection = CDTimeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDTimeList::kDataListFieldNumber;
#endif  // !_MSC_VER

CDTimeList::CDTimeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDTimeList::InitAsDefaultInstance() {
}

CDTimeList::CDTimeList(const CDTimeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDTimeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTimeList::~CDTimeList() {
  SharedDtor();
}

void CDTimeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDTimeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDTimeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTimeList_descriptor_;
}

const CDTimeList& CDTimeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CDTime_2fCDTimePro_2eproto();
  return *default_instance_;
}

CDTimeList* CDTimeList::default_instance_ = NULL;

CDTimeList* CDTimeList::New() const {
  return new CDTimeList;
}

void CDTimeList::Clear() {
  datalist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDTimeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDTimePro.CDTimeData dataList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dataList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDTimeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CDTimePro.CDTimeData dataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datalist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDTimeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CDTimePro.CDTimeData dataList = 1;
  for (int i = 0; i < this->datalist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datalist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDTimeList::ByteSize() const {
  int total_size = 0;

  // repeated .CDTimePro.CDTimeData dataList = 1;
  total_size += 1 * this->datalist_size();
  for (int i = 0; i < this->datalist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datalist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDTimeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDTimeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDTimeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDTimeList::MergeFrom(const CDTimeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  datalist_.MergeFrom(from.datalist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDTimeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTimeList::CopyFrom(const CDTimeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTimeList::IsInitialized() const {

  return true;
}

void CDTimeList::Swap(CDTimeList* other) {
  if (other != this) {
    datalist_.Swap(&other->datalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDTimeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDTimeList_descriptor_;
  metadata.reflection = CDTimeList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CDTimePro

// @@protoc_insertion_point(global_scope)
