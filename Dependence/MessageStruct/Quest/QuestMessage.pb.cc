// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Quest/QuestMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Quest/QuestMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuestProto {

namespace {

const ::google::protobuf::Descriptor* ClientBranchTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientBranchTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMainTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMainTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDailyTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDailyTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateClanTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateClanTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateCampTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCampTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSubmitTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubmitTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToSubmitTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToSubmitTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFreshStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFreshStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToFreshStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToFreshStar_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOneKeyComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOneKeyComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToOneKeyComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToOneKeyComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekQuestItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekQuestItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekQuest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Quest_2fQuestMessage_2eproto() {
  protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Quest/QuestMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ClientBranchTask_descriptor_ = file->message_type(0);
  static const int ClientBranchTask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBranchTask, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBranchTask, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBranchTask, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBranchTask, state_),
  };
  ClientBranchTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientBranchTask_descriptor_,
      ClientBranchTask::default_instance_,
      ClientBranchTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBranchTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientBranchTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientBranchTask));
  UpdateMainTask_descriptor_ = file->message_type(1);
  static const int UpdateMainTask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, branch_),
  };
  UpdateMainTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMainTask_descriptor_,
      UpdateMainTask::default_instance_,
      UpdateMainTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMainTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMainTask));
  UpdateDailyTask_descriptor_ = file->message_type(2);
  static const int UpdateDailyTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, numstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, rewardstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, times_),
  };
  UpdateDailyTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDailyTask_descriptor_,
      UpdateDailyTask::default_instance_,
      UpdateDailyTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDailyTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDailyTask));
  UpdateClanTask_descriptor_ = file->message_type(3);
  static const int UpdateClanTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, numstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, rewardstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, times_),
  };
  UpdateClanTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateClanTask_descriptor_,
      UpdateClanTask::default_instance_,
      UpdateClanTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateClanTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateClanTask));
  UpdateCampTask_descriptor_ = file->message_type(4);
  static const int UpdateCampTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, numstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, rewardstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, times_),
  };
  UpdateCampTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateCampTask_descriptor_,
      UpdateCampTask::default_instance_,
      UpdateCampTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCampTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateCampTask));
  ReqSubmitTask_descriptor_ = file->message_type(5);
  static const int ReqSubmitTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitTask, questid_),
  };
  ReqSubmitTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSubmitTask_descriptor_,
      ReqSubmitTask::default_instance_,
      ReqSubmitTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubmitTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSubmitTask));
  ToSubmitTask_descriptor_ = file->message_type(6);
  static const int ToSubmitTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToSubmitTask, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToSubmitTask, error_),
  };
  ToSubmitTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToSubmitTask_descriptor_,
      ToSubmitTask::default_instance_,
      ToSubmitTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToSubmitTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToSubmitTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToSubmitTask));
  ReqFreshStar_descriptor_ = file->message_type(7);
  static const int ReqFreshStar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFreshStar, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFreshStar, freshtype_),
  };
  ReqFreshStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFreshStar_descriptor_,
      ReqFreshStar::default_instance_,
      ReqFreshStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFreshStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFreshStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFreshStar));
  ToFreshStar_descriptor_ = file->message_type(8);
  static const int ToFreshStar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToFreshStar, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToFreshStar, freshtype_),
  };
  ToFreshStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToFreshStar_descriptor_,
      ToFreshStar::default_instance_,
      ToFreshStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToFreshStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToFreshStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToFreshStar));
  ReqOneKeyComplete_descriptor_ = file->message_type(9);
  static const int ReqOneKeyComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOneKeyComplete, taskid_),
  };
  ReqOneKeyComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOneKeyComplete_descriptor_,
      ReqOneKeyComplete::default_instance_,
      ReqOneKeyComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOneKeyComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOneKeyComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOneKeyComplete));
  ToOneKeyComplete_descriptor_ = file->message_type(10);
  static const int ToOneKeyComplete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToOneKeyComplete, error_),
  };
  ToOneKeyComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToOneKeyComplete_descriptor_,
      ToOneKeyComplete::default_instance_,
      ToOneKeyComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToOneKeyComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToOneKeyComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToOneKeyComplete));
  WeekQuestItem_descriptor_ = file->message_type(11);
  static const int WeekQuestItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, bindtype_),
  };
  WeekQuestItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekQuestItem_descriptor_,
      WeekQuestItem::default_instance_,
      WeekQuestItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekQuestItem));
  WeekQuest_descriptor_ = file->message_type(12);
  static const int WeekQuest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, fvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, svalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, rewardids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, endrewardids_),
  };
  WeekQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekQuest_descriptor_,
      WeekQuest::default_instance_,
      WeekQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekQuest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Quest_2fQuestMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientBranchTask_descriptor_, &ClientBranchTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMainTask_descriptor_, &UpdateMainTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDailyTask_descriptor_, &UpdateDailyTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateClanTask_descriptor_, &UpdateClanTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateCampTask_descriptor_, &UpdateCampTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSubmitTask_descriptor_, &ReqSubmitTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToSubmitTask_descriptor_, &ToSubmitTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFreshStar_descriptor_, &ReqFreshStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToFreshStar_descriptor_, &ToFreshStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOneKeyComplete_descriptor_, &ReqOneKeyComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToOneKeyComplete_descriptor_, &ToOneKeyComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekQuestItem_descriptor_, &WeekQuestItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekQuest_descriptor_, &WeekQuest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Quest_2fQuestMessage_2eproto() {
  delete ClientBranchTask::default_instance_;
  delete ClientBranchTask_reflection_;
  delete UpdateMainTask::default_instance_;
  delete UpdateMainTask_reflection_;
  delete UpdateDailyTask::default_instance_;
  delete UpdateDailyTask_reflection_;
  delete UpdateClanTask::default_instance_;
  delete UpdateClanTask_reflection_;
  delete UpdateCampTask::default_instance_;
  delete UpdateCampTask_reflection_;
  delete ReqSubmitTask::default_instance_;
  delete ReqSubmitTask_reflection_;
  delete ToSubmitTask::default_instance_;
  delete ToSubmitTask_reflection_;
  delete ReqFreshStar::default_instance_;
  delete ReqFreshStar_reflection_;
  delete ToFreshStar::default_instance_;
  delete ToFreshStar_reflection_;
  delete ReqOneKeyComplete::default_instance_;
  delete ReqOneKeyComplete_reflection_;
  delete ToOneKeyComplete::default_instance_;
  delete ToOneKeyComplete_reflection_;
  delete WeekQuestItem::default_instance_;
  delete WeekQuestItem_reflection_;
  delete WeekQuest::default_instance_;
  delete WeekQuest_reflection_;
}

void protobuf_AddDesc_Quest_2fQuestMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Quest/QuestMessage.proto\022\nQuestProto\"R"
    "\n\020ClientBranchTask\022\017\n\007questid\030\001 \003(\005\022\016\n\006f"
    "value\030\002 \003(\005\022\016\n\006svalue\030\003 \003(\005\022\r\n\005state\030\004 \003"
    "(\005\"~\n\016UpdateMainTask\022\017\n\007questid\030\001 \002(\005\022\016\n"
    "\006fvalue\030\002 \002(\005\022\016\n\006svalue\030\003 \002(\005\022\r\n\005state\030\004"
    " \002(\005\022,\n\006branch\030\005 \001(\0132\034.QuestProto.Client"
    "BranchTask\"\205\001\n\017UpdateDailyTask\022\017\n\007questi"
    "d\030\001 \002(\005\022\016\n\006fvalue\030\002 \002(\005\022\016\n\006svalue\030\003 \002(\005\022"
    "\r\n\005state\030\004 \002(\005\022\017\n\007numstar\030\005 \002(\005\022\022\n\nrewar"
    "dstar\030\006 \002(\005\022\r\n\005times\030\007 \002(\005\"\204\001\n\016UpdateCla"
    "nTask\022\017\n\007questid\030\001 \002(\005\022\016\n\006fvalue\030\002 \002(\005\022\016"
    "\n\006svalue\030\003 \002(\005\022\r\n\005state\030\004 \002(\005\022\017\n\007numstar"
    "\030\005 \002(\005\022\022\n\nrewardstar\030\006 \002(\005\022\r\n\005times\030\007 \002("
    "\005\"\204\001\n\016UpdateCampTask\022\017\n\007questid\030\001 \002(\005\022\016\n"
    "\006fvalue\030\002 \002(\005\022\016\n\006svalue\030\003 \002(\005\022\r\n\005state\030\004"
    " \002(\005\022\017\n\007numstar\030\005 \002(\005\022\022\n\nrewardstar\030\006 \002("
    "\005\022\r\n\005times\030\007 \002(\005\" \n\rReqSubmitTask\022\017\n\007que"
    "stid\030\001 \002(\005\".\n\014ToSubmitTask\022\017\n\007questid\030\001 "
    "\002(\005\022\r\n\005error\030\002 \002(\005\"1\n\014ReqFreshStar\022\016\n\006ta"
    "skid\030\001 \002(\005\022\021\n\tfreshtype\030\002 \002(\005\"/\n\013ToFresh"
    "Star\022\r\n\005error\030\001 \002(\005\022\021\n\tfreshtype\030\002 \002(\005\"#"
    "\n\021ReqOneKeyComplete\022\016\n\006taskid\030\001 \002(\005\"!\n\020T"
    "oOneKeyComplete\022\r\n\005error\030\001 \002(\005\"A\n\rWeekQu"
    "estItem\022\016\n\006itemID\030\001 \001(\005\022\016\n\006counts\030\002 \001(\005\022"
    "\020\n\010bindType\030\003 \001(\005\"\271\001\n\tWeekQuest\022\017\n\007quest"
    "ID\030\001 \001(\005\022\016\n\006fvalue\030\002 \001(\005\022\016\n\006svalue\030\003 \001(\005"
    "\022\r\n\005state\030\004 \001(\005\022\r\n\005times\030\005 \001(\005\022,\n\treward"
    "IDs\030\006 \003(\0132\031.QuestProto.WeekQuestItem\022/\n\014"
    "endrewardIDs\030\007 \003(\0132\031.QuestProto.WeekQues"
    "tItem", 1165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Quest/QuestMessage.proto", &protobuf_RegisterTypes);
  ClientBranchTask::default_instance_ = new ClientBranchTask();
  UpdateMainTask::default_instance_ = new UpdateMainTask();
  UpdateDailyTask::default_instance_ = new UpdateDailyTask();
  UpdateClanTask::default_instance_ = new UpdateClanTask();
  UpdateCampTask::default_instance_ = new UpdateCampTask();
  ReqSubmitTask::default_instance_ = new ReqSubmitTask();
  ToSubmitTask::default_instance_ = new ToSubmitTask();
  ReqFreshStar::default_instance_ = new ReqFreshStar();
  ToFreshStar::default_instance_ = new ToFreshStar();
  ReqOneKeyComplete::default_instance_ = new ReqOneKeyComplete();
  ToOneKeyComplete::default_instance_ = new ToOneKeyComplete();
  WeekQuestItem::default_instance_ = new WeekQuestItem();
  WeekQuest::default_instance_ = new WeekQuest();
  ClientBranchTask::default_instance_->InitAsDefaultInstance();
  UpdateMainTask::default_instance_->InitAsDefaultInstance();
  UpdateDailyTask::default_instance_->InitAsDefaultInstance();
  UpdateClanTask::default_instance_->InitAsDefaultInstance();
  UpdateCampTask::default_instance_->InitAsDefaultInstance();
  ReqSubmitTask::default_instance_->InitAsDefaultInstance();
  ToSubmitTask::default_instance_->InitAsDefaultInstance();
  ReqFreshStar::default_instance_->InitAsDefaultInstance();
  ToFreshStar::default_instance_->InitAsDefaultInstance();
  ReqOneKeyComplete::default_instance_->InitAsDefaultInstance();
  ToOneKeyComplete::default_instance_->InitAsDefaultInstance();
  WeekQuestItem::default_instance_->InitAsDefaultInstance();
  WeekQuest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Quest_2fQuestMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Quest_2fQuestMessage_2eproto {
  StaticDescriptorInitializer_Quest_2fQuestMessage_2eproto() {
    protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  }
} static_descriptor_initializer_Quest_2fQuestMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientBranchTask::kQuestidFieldNumber;
const int ClientBranchTask::kFvalueFieldNumber;
const int ClientBranchTask::kSvalueFieldNumber;
const int ClientBranchTask::kStateFieldNumber;
#endif  // !_MSC_VER

ClientBranchTask::ClientBranchTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientBranchTask::InitAsDefaultInstance() {
}

ClientBranchTask::ClientBranchTask(const ClientBranchTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientBranchTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientBranchTask::~ClientBranchTask() {
  SharedDtor();
}

void ClientBranchTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientBranchTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientBranchTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientBranchTask_descriptor_;
}

const ClientBranchTask& ClientBranchTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ClientBranchTask* ClientBranchTask::default_instance_ = NULL;

ClientBranchTask* ClientBranchTask::New() const {
  return new ClientBranchTask;
}

void ClientBranchTask::Clear() {
  questid_.Clear();
  fvalue_.Clear();
  svalue_.Clear();
  state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientBranchTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_questid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_questid;
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // repeated int32 fvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        if (input->ExpectTag(24)) goto parse_svalue;
        break;
      }

      // repeated int32 svalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_svalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_svalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svalue;
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // repeated int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientBranchTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 questid = 1;
  for (int i = 0; i < this->questid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->questid(i), output);
  }

  // repeated int32 fvalue = 2;
  for (int i = 0; i < this->fvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fvalue(i), output);
  }

  // repeated int32 svalue = 3;
  for (int i = 0; i < this->svalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->svalue(i), output);
  }

  // repeated int32 state = 4;
  for (int i = 0; i < this->state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientBranchTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 questid = 1;
  for (int i = 0; i < this->questid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->questid(i), target);
  }

  // repeated int32 fvalue = 2;
  for (int i = 0; i < this->fvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fvalue(i), target);
  }

  // repeated int32 svalue = 3;
  for (int i = 0; i < this->svalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->svalue(i), target);
  }

  // repeated int32 state = 4;
  for (int i = 0; i < this->state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientBranchTask::ByteSize() const {
  int total_size = 0;

  // repeated int32 questid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->questid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questid(i));
    }
    total_size += 1 * this->questid_size() + data_size;
  }

  // repeated int32 fvalue = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fvalue(i));
    }
    total_size += 1 * this->fvalue_size() + data_size;
  }

  // repeated int32 svalue = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->svalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->svalue(i));
    }
    total_size += 1 * this->svalue_size() + data_size;
  }

  // repeated int32 state = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->state(i));
    }
    total_size += 1 * this->state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientBranchTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientBranchTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientBranchTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientBranchTask::MergeFrom(const ClientBranchTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  questid_.MergeFrom(from.questid_);
  fvalue_.MergeFrom(from.fvalue_);
  svalue_.MergeFrom(from.svalue_);
  state_.MergeFrom(from.state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientBranchTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientBranchTask::CopyFrom(const ClientBranchTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientBranchTask::IsInitialized() const {

  return true;
}

void ClientBranchTask::Swap(ClientBranchTask* other) {
  if (other != this) {
    questid_.Swap(&other->questid_);
    fvalue_.Swap(&other->fvalue_);
    svalue_.Swap(&other->svalue_);
    state_.Swap(&other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientBranchTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientBranchTask_descriptor_;
  metadata.reflection = ClientBranchTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMainTask::kQuestidFieldNumber;
const int UpdateMainTask::kFvalueFieldNumber;
const int UpdateMainTask::kSvalueFieldNumber;
const int UpdateMainTask::kStateFieldNumber;
const int UpdateMainTask::kBranchFieldNumber;
#endif  // !_MSC_VER

UpdateMainTask::UpdateMainTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMainTask::InitAsDefaultInstance() {
  branch_ = const_cast< ::QuestProto::ClientBranchTask*>(&::QuestProto::ClientBranchTask::default_instance());
}

UpdateMainTask::UpdateMainTask(const UpdateMainTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMainTask::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  fvalue_ = 0;
  svalue_ = 0;
  state_ = 0;
  branch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMainTask::~UpdateMainTask() {
  SharedDtor();
}

void UpdateMainTask::SharedDtor() {
  if (this != default_instance_) {
    delete branch_;
  }
}

void UpdateMainTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMainTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMainTask_descriptor_;
}

const UpdateMainTask& UpdateMainTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

UpdateMainTask* UpdateMainTask::default_instance_ = NULL;

UpdateMainTask* UpdateMainTask::New() const {
  return new UpdateMainTask;
}

void UpdateMainTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    fvalue_ = 0;
    svalue_ = 0;
    state_ = 0;
    if (has_branch()) {
      if (branch_ != NULL) branch_->::QuestProto::ClientBranchTask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMainTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // required int32 fvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svalue;
        break;
      }

      // required int32 svalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svalue_)));
          set_has_svalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_branch;
        break;
      }

      // optional .QuestProto.ClientBranchTask branch = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_branch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMainTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fvalue(), output);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svalue(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional .QuestProto.ClientBranchTask branch = 5;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->branch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMainTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fvalue(), target);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svalue(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional .QuestProto.ClientBranchTask branch = 5;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->branch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMainTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 fvalue = 2;
    if (has_fvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fvalue());
    }

    // required int32 svalue = 3;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svalue());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional .QuestProto.ClientBranchTask branch = 5;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->branch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMainTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMainTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMainTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMainTask::MergeFrom(const UpdateMainTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_branch()) {
      mutable_branch()->::QuestProto::ClientBranchTask::MergeFrom(from.branch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMainTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMainTask::CopyFrom(const UpdateMainTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMainTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UpdateMainTask::Swap(UpdateMainTask* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(svalue_, other->svalue_);
    std::swap(state_, other->state_);
    std::swap(branch_, other->branch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMainTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMainTask_descriptor_;
  metadata.reflection = UpdateMainTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDailyTask::kQuestidFieldNumber;
const int UpdateDailyTask::kFvalueFieldNumber;
const int UpdateDailyTask::kSvalueFieldNumber;
const int UpdateDailyTask::kStateFieldNumber;
const int UpdateDailyTask::kNumstarFieldNumber;
const int UpdateDailyTask::kRewardstarFieldNumber;
const int UpdateDailyTask::kTimesFieldNumber;
#endif  // !_MSC_VER

UpdateDailyTask::UpdateDailyTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDailyTask::InitAsDefaultInstance() {
}

UpdateDailyTask::UpdateDailyTask(const UpdateDailyTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDailyTask::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  fvalue_ = 0;
  svalue_ = 0;
  state_ = 0;
  numstar_ = 0;
  rewardstar_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDailyTask::~UpdateDailyTask() {
  SharedDtor();
}

void UpdateDailyTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDailyTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDailyTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDailyTask_descriptor_;
}

const UpdateDailyTask& UpdateDailyTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

UpdateDailyTask* UpdateDailyTask::default_instance_ = NULL;

UpdateDailyTask* UpdateDailyTask::New() const {
  return new UpdateDailyTask;
}

void UpdateDailyTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    fvalue_ = 0;
    svalue_ = 0;
    state_ = 0;
    numstar_ = 0;
    rewardstar_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDailyTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // required int32 fvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svalue;
        break;
      }

      // required int32 svalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svalue_)));
          set_has_svalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numstar;
        break;
      }

      // required int32 numstar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numstar_)));
          set_has_numstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardstar;
        break;
      }

      // required int32 rewardstar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardstar_)));
          set_has_rewardstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // required int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDailyTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fvalue(), output);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svalue(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int32 numstar = 5;
  if (has_numstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numstar(), output);
  }

  // required int32 rewardstar = 6;
  if (has_rewardstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewardstar(), output);
  }

  // required int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDailyTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fvalue(), target);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svalue(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int32 numstar = 5;
  if (has_numstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numstar(), target);
  }

  // required int32 rewardstar = 6;
  if (has_rewardstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewardstar(), target);
  }

  // required int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDailyTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 fvalue = 2;
    if (has_fvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fvalue());
    }

    // required int32 svalue = 3;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svalue());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 numstar = 5;
    if (has_numstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numstar());
    }

    // required int32 rewardstar = 6;
    if (has_rewardstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardstar());
    }

    // required int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDailyTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDailyTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDailyTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDailyTask::MergeFrom(const UpdateDailyTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_numstar()) {
      set_numstar(from.numstar());
    }
    if (from.has_rewardstar()) {
      set_rewardstar(from.rewardstar());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDailyTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDailyTask::CopyFrom(const UpdateDailyTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDailyTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UpdateDailyTask::Swap(UpdateDailyTask* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(svalue_, other->svalue_);
    std::swap(state_, other->state_);
    std::swap(numstar_, other->numstar_);
    std::swap(rewardstar_, other->rewardstar_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDailyTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDailyTask_descriptor_;
  metadata.reflection = UpdateDailyTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateClanTask::kQuestidFieldNumber;
const int UpdateClanTask::kFvalueFieldNumber;
const int UpdateClanTask::kSvalueFieldNumber;
const int UpdateClanTask::kStateFieldNumber;
const int UpdateClanTask::kNumstarFieldNumber;
const int UpdateClanTask::kRewardstarFieldNumber;
const int UpdateClanTask::kTimesFieldNumber;
#endif  // !_MSC_VER

UpdateClanTask::UpdateClanTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateClanTask::InitAsDefaultInstance() {
}

UpdateClanTask::UpdateClanTask(const UpdateClanTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateClanTask::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  fvalue_ = 0;
  svalue_ = 0;
  state_ = 0;
  numstar_ = 0;
  rewardstar_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateClanTask::~UpdateClanTask() {
  SharedDtor();
}

void UpdateClanTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateClanTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateClanTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateClanTask_descriptor_;
}

const UpdateClanTask& UpdateClanTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

UpdateClanTask* UpdateClanTask::default_instance_ = NULL;

UpdateClanTask* UpdateClanTask::New() const {
  return new UpdateClanTask;
}

void UpdateClanTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    fvalue_ = 0;
    svalue_ = 0;
    state_ = 0;
    numstar_ = 0;
    rewardstar_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateClanTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // required int32 fvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svalue;
        break;
      }

      // required int32 svalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svalue_)));
          set_has_svalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numstar;
        break;
      }

      // required int32 numstar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numstar_)));
          set_has_numstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardstar;
        break;
      }

      // required int32 rewardstar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardstar_)));
          set_has_rewardstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // required int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateClanTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fvalue(), output);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svalue(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int32 numstar = 5;
  if (has_numstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numstar(), output);
  }

  // required int32 rewardstar = 6;
  if (has_rewardstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewardstar(), output);
  }

  // required int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateClanTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fvalue(), target);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svalue(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int32 numstar = 5;
  if (has_numstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numstar(), target);
  }

  // required int32 rewardstar = 6;
  if (has_rewardstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewardstar(), target);
  }

  // required int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateClanTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 fvalue = 2;
    if (has_fvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fvalue());
    }

    // required int32 svalue = 3;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svalue());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 numstar = 5;
    if (has_numstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numstar());
    }

    // required int32 rewardstar = 6;
    if (has_rewardstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardstar());
    }

    // required int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateClanTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateClanTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateClanTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateClanTask::MergeFrom(const UpdateClanTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_numstar()) {
      set_numstar(from.numstar());
    }
    if (from.has_rewardstar()) {
      set_rewardstar(from.rewardstar());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateClanTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateClanTask::CopyFrom(const UpdateClanTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateClanTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UpdateClanTask::Swap(UpdateClanTask* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(svalue_, other->svalue_);
    std::swap(state_, other->state_);
    std::swap(numstar_, other->numstar_);
    std::swap(rewardstar_, other->rewardstar_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateClanTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateClanTask_descriptor_;
  metadata.reflection = UpdateClanTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCampTask::kQuestidFieldNumber;
const int UpdateCampTask::kFvalueFieldNumber;
const int UpdateCampTask::kSvalueFieldNumber;
const int UpdateCampTask::kStateFieldNumber;
const int UpdateCampTask::kNumstarFieldNumber;
const int UpdateCampTask::kRewardstarFieldNumber;
const int UpdateCampTask::kTimesFieldNumber;
#endif  // !_MSC_VER

UpdateCampTask::UpdateCampTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateCampTask::InitAsDefaultInstance() {
}

UpdateCampTask::UpdateCampTask(const UpdateCampTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateCampTask::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  fvalue_ = 0;
  svalue_ = 0;
  state_ = 0;
  numstar_ = 0;
  rewardstar_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCampTask::~UpdateCampTask() {
  SharedDtor();
}

void UpdateCampTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateCampTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCampTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCampTask_descriptor_;
}

const UpdateCampTask& UpdateCampTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

UpdateCampTask* UpdateCampTask::default_instance_ = NULL;

UpdateCampTask* UpdateCampTask::New() const {
  return new UpdateCampTask;
}

void UpdateCampTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    fvalue_ = 0;
    svalue_ = 0;
    state_ = 0;
    numstar_ = 0;
    rewardstar_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateCampTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // required int32 fvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svalue;
        break;
      }

      // required int32 svalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svalue_)));
          set_has_svalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numstar;
        break;
      }

      // required int32 numstar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numstar_)));
          set_has_numstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardstar;
        break;
      }

      // required int32 rewardstar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardstar_)));
          set_has_rewardstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // required int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateCampTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fvalue(), output);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svalue(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int32 numstar = 5;
  if (has_numstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numstar(), output);
  }

  // required int32 rewardstar = 6;
  if (has_rewardstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewardstar(), output);
  }

  // required int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateCampTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 fvalue = 2;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fvalue(), target);
  }

  // required int32 svalue = 3;
  if (has_svalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svalue(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int32 numstar = 5;
  if (has_numstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numstar(), target);
  }

  // required int32 rewardstar = 6;
  if (has_rewardstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewardstar(), target);
  }

  // required int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateCampTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 fvalue = 2;
    if (has_fvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fvalue());
    }

    // required int32 svalue = 3;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svalue());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 numstar = 5;
    if (has_numstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numstar());
    }

    // required int32 rewardstar = 6;
    if (has_rewardstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardstar());
    }

    // required int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCampTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateCampTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateCampTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateCampTask::MergeFrom(const UpdateCampTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_numstar()) {
      set_numstar(from.numstar());
    }
    if (from.has_rewardstar()) {
      set_rewardstar(from.rewardstar());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateCampTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCampTask::CopyFrom(const UpdateCampTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCampTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void UpdateCampTask::Swap(UpdateCampTask* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(svalue_, other->svalue_);
    std::swap(state_, other->state_);
    std::swap(numstar_, other->numstar_);
    std::swap(rewardstar_, other->rewardstar_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateCampTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCampTask_descriptor_;
  metadata.reflection = UpdateCampTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSubmitTask::kQuestidFieldNumber;
#endif  // !_MSC_VER

ReqSubmitTask::ReqSubmitTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSubmitTask::InitAsDefaultInstance() {
}

ReqSubmitTask::ReqSubmitTask(const ReqSubmitTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSubmitTask::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubmitTask::~ReqSubmitTask() {
  SharedDtor();
}

void ReqSubmitTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSubmitTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubmitTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubmitTask_descriptor_;
}

const ReqSubmitTask& ReqSubmitTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ReqSubmitTask* ReqSubmitTask::default_instance_ = NULL;

ReqSubmitTask* ReqSubmitTask::New() const {
  return new ReqSubmitTask;
}

void ReqSubmitTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSubmitTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSubmitTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSubmitTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSubmitTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubmitTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSubmitTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSubmitTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSubmitTask::MergeFrom(const ReqSubmitTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSubmitTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubmitTask::CopyFrom(const ReqSubmitTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubmitTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSubmitTask::Swap(ReqSubmitTask* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSubmitTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubmitTask_descriptor_;
  metadata.reflection = ReqSubmitTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToSubmitTask::kQuestidFieldNumber;
const int ToSubmitTask::kErrorFieldNumber;
#endif  // !_MSC_VER

ToSubmitTask::ToSubmitTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToSubmitTask::InitAsDefaultInstance() {
}

ToSubmitTask::ToSubmitTask(const ToSubmitTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToSubmitTask::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToSubmitTask::~ToSubmitTask() {
  SharedDtor();
}

void ToSubmitTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToSubmitTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToSubmitTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToSubmitTask_descriptor_;
}

const ToSubmitTask& ToSubmitTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ToSubmitTask* ToSubmitTask::default_instance_ = NULL;

ToSubmitTask* ToSubmitTask::New() const {
  return new ToSubmitTask;
}

void ToSubmitTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToSubmitTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // required int32 error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToSubmitTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToSubmitTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToSubmitTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToSubmitTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToSubmitTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToSubmitTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToSubmitTask::MergeFrom(const ToSubmitTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToSubmitTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToSubmitTask::CopyFrom(const ToSubmitTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToSubmitTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ToSubmitTask::Swap(ToSubmitTask* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToSubmitTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToSubmitTask_descriptor_;
  metadata.reflection = ToSubmitTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFreshStar::kTaskidFieldNumber;
const int ReqFreshStar::kFreshtypeFieldNumber;
#endif  // !_MSC_VER

ReqFreshStar::ReqFreshStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFreshStar::InitAsDefaultInstance() {
}

ReqFreshStar::ReqFreshStar(const ReqFreshStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFreshStar::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  freshtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFreshStar::~ReqFreshStar() {
  SharedDtor();
}

void ReqFreshStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFreshStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFreshStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFreshStar_descriptor_;
}

const ReqFreshStar& ReqFreshStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ReqFreshStar* ReqFreshStar::default_instance_ = NULL;

ReqFreshStar* ReqFreshStar::New() const {
  return new ReqFreshStar;
}

void ReqFreshStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
    freshtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFreshStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freshtype;
        break;
      }

      // required int32 freshtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshtype_)));
          set_has_freshtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFreshStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // required int32 freshtype = 2;
  if (has_freshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freshtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFreshStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // required int32 freshtype = 2;
  if (has_freshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freshtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFreshStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // required int32 freshtype = 2;
    if (has_freshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freshtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFreshStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFreshStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFreshStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFreshStar::MergeFrom(const ReqFreshStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_freshtype()) {
      set_freshtype(from.freshtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFreshStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFreshStar::CopyFrom(const ReqFreshStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFreshStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqFreshStar::Swap(ReqFreshStar* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(freshtype_, other->freshtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFreshStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFreshStar_descriptor_;
  metadata.reflection = ReqFreshStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToFreshStar::kErrorFieldNumber;
const int ToFreshStar::kFreshtypeFieldNumber;
#endif  // !_MSC_VER

ToFreshStar::ToFreshStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToFreshStar::InitAsDefaultInstance() {
}

ToFreshStar::ToFreshStar(const ToFreshStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToFreshStar::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  freshtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToFreshStar::~ToFreshStar() {
  SharedDtor();
}

void ToFreshStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToFreshStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToFreshStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToFreshStar_descriptor_;
}

const ToFreshStar& ToFreshStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ToFreshStar* ToFreshStar::default_instance_ = NULL;

ToFreshStar* ToFreshStar::New() const {
  return new ToFreshStar;
}

void ToFreshStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    freshtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToFreshStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freshtype;
        break;
      }

      // required int32 freshtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshtype_)));
          set_has_freshtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToFreshStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // required int32 freshtype = 2;
  if (has_freshtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freshtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToFreshStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // required int32 freshtype = 2;
  if (has_freshtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freshtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToFreshStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required int32 freshtype = 2;
    if (has_freshtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freshtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToFreshStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToFreshStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToFreshStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToFreshStar::MergeFrom(const ToFreshStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_freshtype()) {
      set_freshtype(from.freshtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToFreshStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToFreshStar::CopyFrom(const ToFreshStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToFreshStar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ToFreshStar::Swap(ToFreshStar* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(freshtype_, other->freshtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToFreshStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToFreshStar_descriptor_;
  metadata.reflection = ToFreshStar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOneKeyComplete::kTaskidFieldNumber;
#endif  // !_MSC_VER

ReqOneKeyComplete::ReqOneKeyComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOneKeyComplete::InitAsDefaultInstance() {
}

ReqOneKeyComplete::ReqOneKeyComplete(const ReqOneKeyComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOneKeyComplete::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOneKeyComplete::~ReqOneKeyComplete() {
  SharedDtor();
}

void ReqOneKeyComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOneKeyComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOneKeyComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOneKeyComplete_descriptor_;
}

const ReqOneKeyComplete& ReqOneKeyComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ReqOneKeyComplete* ReqOneKeyComplete::default_instance_ = NULL;

ReqOneKeyComplete* ReqOneKeyComplete::New() const {
  return new ReqOneKeyComplete;
}

void ReqOneKeyComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOneKeyComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOneKeyComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOneKeyComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOneKeyComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOneKeyComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOneKeyComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOneKeyComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOneKeyComplete::MergeFrom(const ReqOneKeyComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOneKeyComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOneKeyComplete::CopyFrom(const ReqOneKeyComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOneKeyComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOneKeyComplete::Swap(ReqOneKeyComplete* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOneKeyComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOneKeyComplete_descriptor_;
  metadata.reflection = ReqOneKeyComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToOneKeyComplete::kErrorFieldNumber;
#endif  // !_MSC_VER

ToOneKeyComplete::ToOneKeyComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToOneKeyComplete::InitAsDefaultInstance() {
}

ToOneKeyComplete::ToOneKeyComplete(const ToOneKeyComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToOneKeyComplete::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToOneKeyComplete::~ToOneKeyComplete() {
  SharedDtor();
}

void ToOneKeyComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToOneKeyComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToOneKeyComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToOneKeyComplete_descriptor_;
}

const ToOneKeyComplete& ToOneKeyComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

ToOneKeyComplete* ToOneKeyComplete::default_instance_ = NULL;

ToOneKeyComplete* ToOneKeyComplete::New() const {
  return new ToOneKeyComplete;
}

void ToOneKeyComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToOneKeyComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToOneKeyComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToOneKeyComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToOneKeyComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToOneKeyComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToOneKeyComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToOneKeyComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToOneKeyComplete::MergeFrom(const ToOneKeyComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToOneKeyComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToOneKeyComplete::CopyFrom(const ToOneKeyComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToOneKeyComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToOneKeyComplete::Swap(ToOneKeyComplete* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToOneKeyComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToOneKeyComplete_descriptor_;
  metadata.reflection = ToOneKeyComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekQuestItem::kItemIDFieldNumber;
const int WeekQuestItem::kCountsFieldNumber;
const int WeekQuestItem::kBindTypeFieldNumber;
#endif  // !_MSC_VER

WeekQuestItem::WeekQuestItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekQuestItem::InitAsDefaultInstance() {
}

WeekQuestItem::WeekQuestItem(const WeekQuestItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekQuestItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  counts_ = 0;
  bindtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekQuestItem::~WeekQuestItem() {
  SharedDtor();
}

void WeekQuestItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekQuestItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekQuestItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekQuestItem_descriptor_;
}

const WeekQuestItem& WeekQuestItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

WeekQuestItem* WeekQuestItem::default_instance_ = NULL;

WeekQuestItem* WeekQuestItem::New() const {
  return new WeekQuestItem;
}

void WeekQuestItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    counts_ = 0;
    bindtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekQuestItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bindType;
        break;
      }

      // optional int32 bindType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekQuestItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  // optional int32 bindType = 3;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bindtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekQuestItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  // optional int32 bindType = 3;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bindtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekQuestItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional int32 bindType = 3;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekQuestItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekQuestItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekQuestItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekQuestItem::MergeFrom(const WeekQuestItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekQuestItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekQuestItem::CopyFrom(const WeekQuestItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekQuestItem::IsInitialized() const {

  return true;
}

void WeekQuestItem::Swap(WeekQuestItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekQuestItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekQuestItem_descriptor_;
  metadata.reflection = WeekQuestItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekQuest::kQuestIDFieldNumber;
const int WeekQuest::kFvalueFieldNumber;
const int WeekQuest::kSvalueFieldNumber;
const int WeekQuest::kStateFieldNumber;
const int WeekQuest::kTimesFieldNumber;
const int WeekQuest::kRewardIDsFieldNumber;
const int WeekQuest::kEndrewardIDsFieldNumber;
#endif  // !_MSC_VER

WeekQuest::WeekQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekQuest::InitAsDefaultInstance() {
}

WeekQuest::WeekQuest(const WeekQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  fvalue_ = 0;
  svalue_ = 0;
  state_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekQuest::~WeekQuest() {
  SharedDtor();
}

void WeekQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekQuest_descriptor_;
}

const WeekQuest& WeekQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Quest_2fQuestMessage_2eproto();
  return *default_instance_;
}

WeekQuest* WeekQuest::default_instance_ = NULL;

WeekQuest* WeekQuest::New() const {
  return new WeekQuest;
}

void WeekQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    fvalue_ = 0;
    svalue_ = 0;
    state_ = 0;
    times_ = 0;
  }
  rewardids_.Clear();
  endrewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 questID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fvalue;
        break;
      }

      // optional int32 fvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fvalue_)));
          set_has_fvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_svalue;
        break;
      }

      // optional int32 svalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svalue_)));
          set_has_svalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional int32 times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewardIDs;
        break;
      }

      // repeated .QuestProto.WeekQuestItem rewardIDs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rewardIDs;
        if (input->ExpectTag(58)) goto parse_endrewardIDs;
        break;
      }

      // repeated .QuestProto.WeekQuestItem endrewardIDs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endrewardIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endrewardids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_endrewardIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 questID = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // optional int32 fvalue = 2;
  if (has_fvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fvalue(), output);
  }

  // optional int32 svalue = 3;
  if (has_svalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->svalue(), output);
  }

  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // optional int32 times = 5;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->times(), output);
  }

  // repeated .QuestProto.WeekQuestItem rewardIDs = 6;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewardids(i), output);
  }

  // repeated .QuestProto.WeekQuestItem endrewardIDs = 7;
  for (int i = 0; i < this->endrewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->endrewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 questID = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // optional int32 fvalue = 2;
  if (has_fvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fvalue(), target);
  }

  // optional int32 svalue = 3;
  if (has_svalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->svalue(), target);
  }

  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // optional int32 times = 5;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->times(), target);
  }

  // repeated .QuestProto.WeekQuestItem rewardIDs = 6;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewardids(i), target);
  }

  // repeated .QuestProto.WeekQuestItem endrewardIDs = 7;
  for (int i = 0; i < this->endrewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->endrewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 questID = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // optional int32 fvalue = 2;
    if (has_fvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fvalue());
    }

    // optional int32 svalue = 3;
    if (has_svalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->svalue());
    }

    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .QuestProto.WeekQuestItem rewardIDs = 6;
  total_size += 1 * this->rewardids_size();
  for (int i = 0; i < this->rewardids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardids(i));
  }

  // repeated .QuestProto.WeekQuestItem endrewardIDs = 7;
  total_size += 1 * this->endrewardids_size();
  for (int i = 0; i < this->endrewardids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endrewardids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekQuest::MergeFrom(const WeekQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  endrewardids_.MergeFrom(from.endrewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_fvalue()) {
      set_fvalue(from.fvalue());
    }
    if (from.has_svalue()) {
      set_svalue(from.svalue());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekQuest::CopyFrom(const WeekQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekQuest::IsInitialized() const {

  return true;
}

void WeekQuest::Swap(WeekQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(fvalue_, other->fvalue_);
    std::swap(svalue_, other->svalue_);
    std::swap(state_, other->state_);
    std::swap(times_, other->times_);
    rewardids_.Swap(&other->rewardids_);
    endrewardids_.Swap(&other->endrewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekQuest_descriptor_;
  metadata.reflection = WeekQuest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuestProto

// @@protoc_insertion_point(global_scope)
