// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/CountryWar.proto

#ifndef PROTOBUF_Country_2fCountryWar_2eproto__INCLUDED
#define PROTOBUF_Country_2fCountryWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CountryWar {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

class AckReqElementInfo;
class AckClientReqWarData;
class ClientReqFitchTaskReWard;
class AckFitchTaskReWard;
class AckReqHistoryRecord;
class ReqOccupyElement;
class AckReqOccupyElement;
class AckReqCountryWarMapID;
class CountryWarPrizeResult;
class ElementStateAlter;
class CountryWarAttrAlter;
class CountryWarTaskUpdate;
class ElementProtectedTimeOut;
class OccupyElementSuccess;
class PrizeItem;
class ElementInfo;
class taskinfo;
class HistoryRecord;
class RecordItem;
class CountryWarResult;
class WSToGMCountryBattle;

// ===================================================================

class AckReqElementInfo : public ::google::protobuf::Message {
 public:
  AckReqElementInfo();
  virtual ~AckReqElementInfo();

  AckReqElementInfo(const AckReqElementInfo& from);

  inline AckReqElementInfo& operator=(const AckReqElementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqElementInfo& default_instance();

  void Swap(AckReqElementInfo* other);

  // implements Message ----------------------------------------------

  AckReqElementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqElementInfo& from);
  void MergeFrom(const AckReqElementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryWar.ElementInfo item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::CountryWar::ElementInfo& item(int index) const;
  inline ::CountryWar::ElementInfo* mutable_item(int index);
  inline ::CountryWar::ElementInfo* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::ElementInfo >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryWar::ElementInfo >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:CountryWar.AckReqElementInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryWar::ElementInfo > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static AckReqElementInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckClientReqWarData : public ::google::protobuf::Message {
 public:
  AckClientReqWarData();
  virtual ~AckClientReqWarData();

  AckClientReqWarData(const AckClientReqWarData& from);

  inline AckClientReqWarData& operator=(const AckClientReqWarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckClientReqWarData& default_instance();

  void Swap(AckClientReqWarData* other);

  // implements Message ----------------------------------------------

  AckClientReqWarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckClientReqWarData& from);
  void MergeFrom(const AckClientReqWarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 scoresui = 1;
  inline bool has_scoresui() const;
  inline void clear_scoresui();
  static const int kScoresuiFieldNumber = 1;
  inline ::google::protobuf::int32 scoresui() const;
  inline void set_scoresui(::google::protobuf::int32 value);

  // optional int32 scoretang = 2;
  inline bool has_scoretang() const;
  inline void clear_scoretang();
  static const int kScoretangFieldNumber = 2;
  inline ::google::protobuf::int32 scoretang() const;
  inline void set_scoretang(::google::protobuf::int32 value);

  // optional int32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // optional int32 sort = 4;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 4;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // optional int32 bekilled = 5;
  inline bool has_bekilled() const;
  inline void clear_bekilled();
  static const int kBekilledFieldNumber = 5;
  inline ::google::protobuf::int32 bekilled() const;
  inline void set_bekilled(::google::protobuf::int32 value);

  // repeated .CountryWar.taskinfo item = 6;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 6;
  inline const ::CountryWar::taskinfo& item(int index) const;
  inline ::CountryWar::taskinfo* mutable_item(int index);
  inline ::CountryWar::taskinfo* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::taskinfo >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryWar::taskinfo >*
      mutable_item();

  // optional int32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.AckClientReqWarData)
 private:
  inline void set_has_scoresui();
  inline void clear_has_scoresui();
  inline void set_has_scoretang();
  inline void clear_has_scoretang();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_bekilled();
  inline void clear_has_bekilled();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 scoresui_;
  ::google::protobuf::int32 scoretang_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::RepeatedPtrField< ::CountryWar::taskinfo > item_;
  ::google::protobuf::int32 bekilled_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static AckClientReqWarData* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqFitchTaskReWard : public ::google::protobuf::Message {
 public:
  ClientReqFitchTaskReWard();
  virtual ~ClientReqFitchTaskReWard();

  ClientReqFitchTaskReWard(const ClientReqFitchTaskReWard& from);

  inline ClientReqFitchTaskReWard& operator=(const ClientReqFitchTaskReWard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqFitchTaskReWard& default_instance();

  void Swap(ClientReqFitchTaskReWard* other);

  // implements Message ----------------------------------------------

  ClientReqFitchTaskReWard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqFitchTaskReWard& from);
  void MergeFrom(const ClientReqFitchTaskReWard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.ClientReqFitchTaskReWard)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static ClientReqFitchTaskReWard* default_instance_;
};
// -------------------------------------------------------------------

class AckFitchTaskReWard : public ::google::protobuf::Message {
 public:
  AckFitchTaskReWard();
  virtual ~AckFitchTaskReWard();

  AckFitchTaskReWard(const AckFitchTaskReWard& from);

  inline AckFitchTaskReWard& operator=(const AckFitchTaskReWard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFitchTaskReWard& default_instance();

  void Swap(AckFitchTaskReWard* other);

  // implements Message ----------------------------------------------

  AckFitchTaskReWard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFitchTaskReWard& from);
  void MergeFrom(const AckFitchTaskReWard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.AckFitchTaskReWard)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static AckFitchTaskReWard* default_instance_;
};
// -------------------------------------------------------------------

class AckReqHistoryRecord : public ::google::protobuf::Message {
 public:
  AckReqHistoryRecord();
  virtual ~AckReqHistoryRecord();

  AckReqHistoryRecord(const AckReqHistoryRecord& from);

  inline AckReqHistoryRecord& operator=(const AckReqHistoryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqHistoryRecord& default_instance();

  void Swap(AckReqHistoryRecord* other);

  // implements Message ----------------------------------------------

  AckReqHistoryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqHistoryRecord& from);
  void MergeFrom(const AckReqHistoryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 suiwin = 1;
  inline bool has_suiwin() const;
  inline void clear_suiwin();
  static const int kSuiwinFieldNumber = 1;
  inline ::google::protobuf::int32 suiwin() const;
  inline void set_suiwin(::google::protobuf::int32 value);

  // optional int32 suilose = 2;
  inline bool has_suilose() const;
  inline void clear_suilose();
  static const int kSuiloseFieldNumber = 2;
  inline ::google::protobuf::int32 suilose() const;
  inline void set_suilose(::google::protobuf::int32 value);

  // optional int32 tangwin = 3;
  inline bool has_tangwin() const;
  inline void clear_tangwin();
  static const int kTangwinFieldNumber = 3;
  inline ::google::protobuf::int32 tangwin() const;
  inline void set_tangwin(::google::protobuf::int32 value);

  // optional int32 tanglose = 4;
  inline bool has_tanglose() const;
  inline void clear_tanglose();
  static const int kTangloseFieldNumber = 4;
  inline ::google::protobuf::int32 tanglose() const;
  inline void set_tanglose(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.AckReqHistoryRecord)
 private:
  inline void set_has_suiwin();
  inline void clear_has_suiwin();
  inline void set_has_suilose();
  inline void clear_has_suilose();
  inline void set_has_tangwin();
  inline void clear_has_tangwin();
  inline void set_has_tanglose();
  inline void clear_has_tanglose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 suiwin_;
  ::google::protobuf::int32 suilose_;
  ::google::protobuf::int32 tangwin_;
  ::google::protobuf::int32 tanglose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static AckReqHistoryRecord* default_instance_;
};
// -------------------------------------------------------------------

class ReqOccupyElement : public ::google::protobuf::Message {
 public:
  ReqOccupyElement();
  virtual ~ReqOccupyElement();

  ReqOccupyElement(const ReqOccupyElement& from);

  inline ReqOccupyElement& operator=(const ReqOccupyElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqOccupyElement& default_instance();

  void Swap(ReqOccupyElement* other);

  // implements Message ----------------------------------------------

  ReqOccupyElement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqOccupyElement& from);
  void MergeFrom(const ReqOccupyElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CountryWar.ReqOccupyElement)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static ReqOccupyElement* default_instance_;
};
// -------------------------------------------------------------------

class AckReqOccupyElement : public ::google::protobuf::Message {
 public:
  AckReqOccupyElement();
  virtual ~AckReqOccupyElement();

  AckReqOccupyElement(const AckReqOccupyElement& from);

  inline AckReqOccupyElement& operator=(const AckReqOccupyElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqOccupyElement& default_instance();

  void Swap(AckReqOccupyElement* other);

  // implements Message ----------------------------------------------

  AckReqOccupyElement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqOccupyElement& from);
  void MergeFrom(const AckReqOccupyElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline ::google::protobuf::int32 success() const;
  inline void set_success(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.AckReqOccupyElement)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static AckReqOccupyElement* default_instance_;
};
// -------------------------------------------------------------------

class AckReqCountryWarMapID : public ::google::protobuf::Message {
 public:
  AckReqCountryWarMapID();
  virtual ~AckReqCountryWarMapID();

  AckReqCountryWarMapID(const AckReqCountryWarMapID& from);

  inline AckReqCountryWarMapID& operator=(const AckReqCountryWarMapID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqCountryWarMapID& default_instance();

  void Swap(AckReqCountryWarMapID* other);

  // implements Message ----------------------------------------------

  AckReqCountryWarMapID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqCountryWarMapID& from);
  void MergeFrom(const AckReqCountryWarMapID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CountryWar.AckReqCountryWarMapID)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static AckReqCountryWarMapID* default_instance_;
};
// -------------------------------------------------------------------

class CountryWarPrizeResult : public ::google::protobuf::Message {
 public:
  CountryWarPrizeResult();
  virtual ~CountryWarPrizeResult();

  CountryWarPrizeResult(const CountryWarPrizeResult& from);

  inline CountryWarPrizeResult& operator=(const CountryWarPrizeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryWarPrizeResult& default_instance();

  void Swap(CountryWarPrizeResult* other);

  // implements Message ----------------------------------------------

  CountryWarPrizeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryWarPrizeResult& from);
  void MergeFrom(const CountryWarPrizeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 scoresui = 1;
  inline bool has_scoresui() const;
  inline void clear_scoresui();
  static const int kScoresuiFieldNumber = 1;
  inline ::google::protobuf::int32 scoresui() const;
  inline void set_scoresui(::google::protobuf::int32 value);

  // optional int32 scoretang = 2;
  inline bool has_scoretang() const;
  inline void clear_scoretang();
  static const int kScoretangFieldNumber = 2;
  inline ::google::protobuf::int32 scoretang() const;
  inline void set_scoretang(::google::protobuf::int32 value);

  // optional int32 contribute = 3;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 3;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // optional int32 sort = 4;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 4;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // repeated .CountryWar.PrizeItem item = 5;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 5;
  inline const ::CountryWar::PrizeItem& item(int index) const;
  inline ::CountryWar::PrizeItem* mutable_item(int index);
  inline ::CountryWar::PrizeItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::PrizeItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryWar::PrizeItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:CountryWar.CountryWarPrizeResult)
 private:
  inline void set_has_scoresui();
  inline void clear_has_scoresui();
  inline void set_has_scoretang();
  inline void clear_has_scoretang();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_sort();
  inline void clear_has_sort();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 scoresui_;
  ::google::protobuf::int32 scoretang_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::RepeatedPtrField< ::CountryWar::PrizeItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static CountryWarPrizeResult* default_instance_;
};
// -------------------------------------------------------------------

class ElementStateAlter : public ::google::protobuf::Message {
 public:
  ElementStateAlter();
  virtual ~ElementStateAlter();

  ElementStateAlter(const ElementStateAlter& from);

  inline ElementStateAlter& operator=(const ElementStateAlter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementStateAlter& default_instance();

  void Swap(ElementStateAlter* other);

  // implements Message ----------------------------------------------

  ElementStateAlter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElementStateAlter& from);
  void MergeFrom(const ElementStateAlter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.ElementStateAlter)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static ElementStateAlter* default_instance_;
};
// -------------------------------------------------------------------

class CountryWarAttrAlter : public ::google::protobuf::Message {
 public:
  CountryWarAttrAlter();
  virtual ~CountryWarAttrAlter();

  CountryWarAttrAlter(const CountryWarAttrAlter& from);

  inline CountryWarAttrAlter& operator=(const CountryWarAttrAlter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryWarAttrAlter& default_instance();

  void Swap(CountryWarAttrAlter* other);

  // implements Message ----------------------------------------------

  CountryWarAttrAlter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryWarAttrAlter& from);
  void MergeFrom(const CountryWarAttrAlter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.CountryWarAttrAlter)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static CountryWarAttrAlter* default_instance_;
};
// -------------------------------------------------------------------

class CountryWarTaskUpdate : public ::google::protobuf::Message {
 public:
  CountryWarTaskUpdate();
  virtual ~CountryWarTaskUpdate();

  CountryWarTaskUpdate(const CountryWarTaskUpdate& from);

  inline CountryWarTaskUpdate& operator=(const CountryWarTaskUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryWarTaskUpdate& default_instance();

  void Swap(CountryWarTaskUpdate* other);

  // implements Message ----------------------------------------------

  CountryWarTaskUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryWarTaskUpdate& from);
  void MergeFrom(const CountryWarTaskUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.CountryWarTaskUpdate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static CountryWarTaskUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ElementProtectedTimeOut : public ::google::protobuf::Message {
 public:
  ElementProtectedTimeOut();
  virtual ~ElementProtectedTimeOut();

  ElementProtectedTimeOut(const ElementProtectedTimeOut& from);

  inline ElementProtectedTimeOut& operator=(const ElementProtectedTimeOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementProtectedTimeOut& default_instance();

  void Swap(ElementProtectedTimeOut* other);

  // implements Message ----------------------------------------------

  ElementProtectedTimeOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElementProtectedTimeOut& from);
  void MergeFrom(const ElementProtectedTimeOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CountryWar.ElementProtectedTimeOut)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static ElementProtectedTimeOut* default_instance_;
};
// -------------------------------------------------------------------

class OccupyElementSuccess : public ::google::protobuf::Message {
 public:
  OccupyElementSuccess();
  virtual ~OccupyElementSuccess();

  OccupyElementSuccess(const OccupyElementSuccess& from);

  inline OccupyElementSuccess& operator=(const OccupyElementSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OccupyElementSuccess& default_instance();

  void Swap(OccupyElementSuccess* other);

  // implements Message ----------------------------------------------

  OccupyElementSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OccupyElementSuccess& from);
  void MergeFrom(const OccupyElementSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CountryWar.OccupyElementSuccess)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static OccupyElementSuccess* default_instance_;
};
// -------------------------------------------------------------------

class PrizeItem : public ::google::protobuf::Message {
 public:
  PrizeItem();
  virtual ~PrizeItem();

  PrizeItem(const PrizeItem& from);

  inline PrizeItem& operator=(const PrizeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrizeItem& default_instance();

  void Swap(PrizeItem* other);

  // implements Message ----------------------------------------------

  PrizeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrizeItem& from);
  void MergeFrom(const PrizeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.PrizeItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static PrizeItem* default_instance_;
};
// -------------------------------------------------------------------

class ElementInfo : public ::google::protobuf::Message {
 public:
  ElementInfo();
  virtual ~ElementInfo();

  ElementInfo(const ElementInfo& from);

  inline ElementInfo& operator=(const ElementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ElementInfo& default_instance();

  void Swap(ElementInfo* other);

  // implements Message ----------------------------------------------

  ElementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ElementInfo& from);
  void MergeFrom(const ElementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 ower = 2;
  inline bool has_ower() const;
  inline void clear_ower();
  static const int kOwerFieldNumber = 2;
  inline ::google::protobuf::int32 ower() const;
  inline void set_ower(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 monster = 4;
  inline bool has_monster() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 4;
  inline ::google::protobuf::int32 monster() const;
  inline void set_monster(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.ElementInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ower();
  inline void clear_has_ower();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_monster();
  inline void clear_has_monster();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ower_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 monster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static ElementInfo* default_instance_;
};
// -------------------------------------------------------------------

class taskinfo : public ::google::protobuf::Message {
 public:
  taskinfo();
  virtual ~taskinfo();

  taskinfo(const taskinfo& from);

  inline taskinfo& operator=(const taskinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const taskinfo& default_instance();

  void Swap(taskinfo* other);

  // implements Message ----------------------------------------------

  taskinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const taskinfo& from);
  void MergeFrom(const taskinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.taskinfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static taskinfo* default_instance_;
};
// -------------------------------------------------------------------

class HistoryRecord : public ::google::protobuf::Message {
 public:
  HistoryRecord();
  virtual ~HistoryRecord();

  HistoryRecord(const HistoryRecord& from);

  inline HistoryRecord& operator=(const HistoryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HistoryRecord& default_instance();

  void Swap(HistoryRecord* other);

  // implements Message ----------------------------------------------

  HistoryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HistoryRecord& from);
  void MergeFrom(const HistoryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CountryWar.RecordItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::CountryWar::RecordItem& item(int index) const;
  inline ::CountryWar::RecordItem* mutable_item(int index);
  inline ::CountryWar::RecordItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::RecordItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryWar::RecordItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:CountryWar.HistoryRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryWar::RecordItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static HistoryRecord* default_instance_;
};
// -------------------------------------------------------------------

class RecordItem : public ::google::protobuf::Message {
 public:
  RecordItem();
  virtual ~RecordItem();

  RecordItem(const RecordItem& from);

  inline RecordItem& operator=(const RecordItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordItem& default_instance();

  void Swap(RecordItem* other);

  // implements Message ----------------------------------------------

  RecordItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordItem& from);
  void MergeFrom(const RecordItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);

  // optional int32 lose = 3;
  inline bool has_lose() const;
  inline void clear_lose();
  static const int kLoseFieldNumber = 3;
  inline ::google::protobuf::int32 lose() const;
  inline void set_lose(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.RecordItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static RecordItem* default_instance_;
};
// -------------------------------------------------------------------

class CountryWarResult : public ::google::protobuf::Message {
 public:
  CountryWarResult();
  virtual ~CountryWarResult();

  CountryWarResult(const CountryWarResult& from);

  inline CountryWarResult& operator=(const CountryWarResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryWarResult& default_instance();

  void Swap(CountryWarResult* other);

  // implements Message ----------------------------------------------

  CountryWarResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryWarResult& from);
  void MergeFrom(const CountryWarResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 win = 1;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline ::google::protobuf::int32 win() const;
  inline void set_win(::google::protobuf::int32 value);

  // required int32 lose = 2;
  inline bool has_lose() const;
  inline void clear_lose();
  static const int kLoseFieldNumber = 2;
  inline ::google::protobuf::int32 lose() const;
  inline void set_lose(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryWar.CountryWarResult)
 private:
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_lose();
  inline void clear_has_lose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 win_;
  ::google::protobuf::int32 lose_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static CountryWarResult* default_instance_;
};
// -------------------------------------------------------------------

class WSToGMCountryBattle : public ::google::protobuf::Message {
 public:
  WSToGMCountryBattle();
  virtual ~WSToGMCountryBattle();

  WSToGMCountryBattle(const WSToGMCountryBattle& from);

  inline WSToGMCountryBattle& operator=(const WSToGMCountryBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToGMCountryBattle& default_instance();

  void Swap(WSToGMCountryBattle* other);

  // implements Message ----------------------------------------------

  WSToGMCountryBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToGMCountryBattle& from);
  void MergeFrom(const WSToGMCountryBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 warType = 1;
  inline bool has_wartype() const;
  inline void clear_wartype();
  static const int kWarTypeFieldNumber = 1;
  inline ::google::protobuf::int32 wartype() const;
  inline void set_wartype(::google::protobuf::int32 value);

  // required bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // repeated int64 charID = 3;
  inline int charid_size() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::int64 charid(int index) const;
  inline void set_charid(int index, ::google::protobuf::int64 value);
  inline void add_charid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      charid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_charid();

  // @@protoc_insertion_point(class_scope:CountryWar.WSToGMCountryBattle)
 private:
  inline void set_has_wartype();
  inline void clear_has_wartype();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 wartype_;
  bool flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static WSToGMCountryBattle* default_instance_;
};
// ===================================================================


// ===================================================================

// AckReqElementInfo

// repeated .CountryWar.ElementInfo item = 1;
inline int AckReqElementInfo::item_size() const {
  return item_.size();
}
inline void AckReqElementInfo::clear_item() {
  item_.Clear();
}
inline const ::CountryWar::ElementInfo& AckReqElementInfo::item(int index) const {
  return item_.Get(index);
}
inline ::CountryWar::ElementInfo* AckReqElementInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryWar::ElementInfo* AckReqElementInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::ElementInfo >&
AckReqElementInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryWar::ElementInfo >*
AckReqElementInfo::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// AckClientReqWarData

// required int32 scoresui = 1;
inline bool AckClientReqWarData::has_scoresui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckClientReqWarData::set_has_scoresui() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckClientReqWarData::clear_has_scoresui() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckClientReqWarData::clear_scoresui() {
  scoresui_ = 0;
  clear_has_scoresui();
}
inline ::google::protobuf::int32 AckClientReqWarData::scoresui() const {
  return scoresui_;
}
inline void AckClientReqWarData::set_scoresui(::google::protobuf::int32 value) {
  set_has_scoresui();
  scoresui_ = value;
}

// optional int32 scoretang = 2;
inline bool AckClientReqWarData::has_scoretang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckClientReqWarData::set_has_scoretang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckClientReqWarData::clear_has_scoretang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckClientReqWarData::clear_scoretang() {
  scoretang_ = 0;
  clear_has_scoretang();
}
inline ::google::protobuf::int32 AckClientReqWarData::scoretang() const {
  return scoretang_;
}
inline void AckClientReqWarData::set_scoretang(::google::protobuf::int32 value) {
  set_has_scoretang();
  scoretang_ = value;
}

// optional int32 contribute = 3;
inline bool AckClientReqWarData::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckClientReqWarData::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckClientReqWarData::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckClientReqWarData::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 AckClientReqWarData::contribute() const {
  return contribute_;
}
inline void AckClientReqWarData::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional int32 sort = 4;
inline bool AckClientReqWarData::has_sort() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckClientReqWarData::set_has_sort() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckClientReqWarData::clear_has_sort() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckClientReqWarData::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 AckClientReqWarData::sort() const {
  return sort_;
}
inline void AckClientReqWarData::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 bekilled = 5;
inline bool AckClientReqWarData::has_bekilled() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckClientReqWarData::set_has_bekilled() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckClientReqWarData::clear_has_bekilled() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckClientReqWarData::clear_bekilled() {
  bekilled_ = 0;
  clear_has_bekilled();
}
inline ::google::protobuf::int32 AckClientReqWarData::bekilled() const {
  return bekilled_;
}
inline void AckClientReqWarData::set_bekilled(::google::protobuf::int32 value) {
  set_has_bekilled();
  bekilled_ = value;
}

// repeated .CountryWar.taskinfo item = 6;
inline int AckClientReqWarData::item_size() const {
  return item_.size();
}
inline void AckClientReqWarData::clear_item() {
  item_.Clear();
}
inline const ::CountryWar::taskinfo& AckClientReqWarData::item(int index) const {
  return item_.Get(index);
}
inline ::CountryWar::taskinfo* AckClientReqWarData::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryWar::taskinfo* AckClientReqWarData::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::taskinfo >&
AckClientReqWarData::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryWar::taskinfo >*
AckClientReqWarData::mutable_item() {
  return &item_;
}

// optional int32 time = 7;
inline bool AckClientReqWarData::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckClientReqWarData::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckClientReqWarData::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckClientReqWarData::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 AckClientReqWarData::time() const {
  return time_;
}
inline void AckClientReqWarData::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ClientReqFitchTaskReWard

// required int32 id = 1;
inline bool ClientReqFitchTaskReWard::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqFitchTaskReWard::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqFitchTaskReWard::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqFitchTaskReWard::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClientReqFitchTaskReWard::id() const {
  return id_;
}
inline void ClientReqFitchTaskReWard::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckFitchTaskReWard

// required int32 id = 1;
inline bool AckFitchTaskReWard::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFitchTaskReWard::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFitchTaskReWard::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFitchTaskReWard::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AckFitchTaskReWard::id() const {
  return id_;
}
inline void AckFitchTaskReWard::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 success = 2;
inline bool AckFitchTaskReWard::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckFitchTaskReWard::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckFitchTaskReWard::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckFitchTaskReWard::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckFitchTaskReWard::success() const {
  return success_;
}
inline void AckFitchTaskReWard::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// AckReqHistoryRecord

// required int32 suiwin = 1;
inline bool AckReqHistoryRecord::has_suiwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckReqHistoryRecord::set_has_suiwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckReqHistoryRecord::clear_has_suiwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckReqHistoryRecord::clear_suiwin() {
  suiwin_ = 0;
  clear_has_suiwin();
}
inline ::google::protobuf::int32 AckReqHistoryRecord::suiwin() const {
  return suiwin_;
}
inline void AckReqHistoryRecord::set_suiwin(::google::protobuf::int32 value) {
  set_has_suiwin();
  suiwin_ = value;
}

// optional int32 suilose = 2;
inline bool AckReqHistoryRecord::has_suilose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckReqHistoryRecord::set_has_suilose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckReqHistoryRecord::clear_has_suilose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckReqHistoryRecord::clear_suilose() {
  suilose_ = 0;
  clear_has_suilose();
}
inline ::google::protobuf::int32 AckReqHistoryRecord::suilose() const {
  return suilose_;
}
inline void AckReqHistoryRecord::set_suilose(::google::protobuf::int32 value) {
  set_has_suilose();
  suilose_ = value;
}

// optional int32 tangwin = 3;
inline bool AckReqHistoryRecord::has_tangwin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckReqHistoryRecord::set_has_tangwin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckReqHistoryRecord::clear_has_tangwin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckReqHistoryRecord::clear_tangwin() {
  tangwin_ = 0;
  clear_has_tangwin();
}
inline ::google::protobuf::int32 AckReqHistoryRecord::tangwin() const {
  return tangwin_;
}
inline void AckReqHistoryRecord::set_tangwin(::google::protobuf::int32 value) {
  set_has_tangwin();
  tangwin_ = value;
}

// optional int32 tanglose = 4;
inline bool AckReqHistoryRecord::has_tanglose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckReqHistoryRecord::set_has_tanglose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckReqHistoryRecord::clear_has_tanglose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckReqHistoryRecord::clear_tanglose() {
  tanglose_ = 0;
  clear_has_tanglose();
}
inline ::google::protobuf::int32 AckReqHistoryRecord::tanglose() const {
  return tanglose_;
}
inline void AckReqHistoryRecord::set_tanglose(::google::protobuf::int32 value) {
  set_has_tanglose();
  tanglose_ = value;
}

// -------------------------------------------------------------------

// ReqOccupyElement

// required int64 id = 1;
inline bool ReqOccupyElement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqOccupyElement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqOccupyElement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqOccupyElement::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ReqOccupyElement::id() const {
  return id_;
}
inline void ReqOccupyElement::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckReqOccupyElement

// required int64 id = 1;
inline bool AckReqOccupyElement::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckReqOccupyElement::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckReqOccupyElement::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckReqOccupyElement::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 AckReqOccupyElement::id() const {
  return id_;
}
inline void AckReqOccupyElement::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 success = 2;
inline bool AckReqOccupyElement::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckReqOccupyElement::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckReqOccupyElement::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckReqOccupyElement::clear_success() {
  success_ = 0;
  clear_has_success();
}
inline ::google::protobuf::int32 AckReqOccupyElement::success() const {
  return success_;
}
inline void AckReqOccupyElement::set_success(::google::protobuf::int32 value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// AckReqCountryWarMapID

// required int64 id = 1;
inline bool AckReqCountryWarMapID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckReqCountryWarMapID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckReqCountryWarMapID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckReqCountryWarMapID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 AckReqCountryWarMapID::id() const {
  return id_;
}
inline void AckReqCountryWarMapID::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// CountryWarPrizeResult

// required int32 scoresui = 1;
inline bool CountryWarPrizeResult::has_scoresui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryWarPrizeResult::set_has_scoresui() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryWarPrizeResult::clear_has_scoresui() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryWarPrizeResult::clear_scoresui() {
  scoresui_ = 0;
  clear_has_scoresui();
}
inline ::google::protobuf::int32 CountryWarPrizeResult::scoresui() const {
  return scoresui_;
}
inline void CountryWarPrizeResult::set_scoresui(::google::protobuf::int32 value) {
  set_has_scoresui();
  scoresui_ = value;
}

// optional int32 scoretang = 2;
inline bool CountryWarPrizeResult::has_scoretang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryWarPrizeResult::set_has_scoretang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryWarPrizeResult::clear_has_scoretang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryWarPrizeResult::clear_scoretang() {
  scoretang_ = 0;
  clear_has_scoretang();
}
inline ::google::protobuf::int32 CountryWarPrizeResult::scoretang() const {
  return scoretang_;
}
inline void CountryWarPrizeResult::set_scoretang(::google::protobuf::int32 value) {
  set_has_scoretang();
  scoretang_ = value;
}

// optional int32 contribute = 3;
inline bool CountryWarPrizeResult::has_contribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryWarPrizeResult::set_has_contribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryWarPrizeResult::clear_has_contribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryWarPrizeResult::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 CountryWarPrizeResult::contribute() const {
  return contribute_;
}
inline void CountryWarPrizeResult::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional int32 sort = 4;
inline bool CountryWarPrizeResult::has_sort() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryWarPrizeResult::set_has_sort() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryWarPrizeResult::clear_has_sort() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryWarPrizeResult::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 CountryWarPrizeResult::sort() const {
  return sort_;
}
inline void CountryWarPrizeResult::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// repeated .CountryWar.PrizeItem item = 5;
inline int CountryWarPrizeResult::item_size() const {
  return item_.size();
}
inline void CountryWarPrizeResult::clear_item() {
  item_.Clear();
}
inline const ::CountryWar::PrizeItem& CountryWarPrizeResult::item(int index) const {
  return item_.Get(index);
}
inline ::CountryWar::PrizeItem* CountryWarPrizeResult::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryWar::PrizeItem* CountryWarPrizeResult::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::PrizeItem >&
CountryWarPrizeResult::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryWar::PrizeItem >*
CountryWarPrizeResult::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// ElementStateAlter

// required int64 id = 1;
inline bool ElementStateAlter::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElementStateAlter::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElementStateAlter::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElementStateAlter::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ElementStateAlter::id() const {
  return id_;
}
inline void ElementStateAlter::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool ElementStateAlter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElementStateAlter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElementStateAlter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElementStateAlter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 ElementStateAlter::value() const {
  return value_;
}
inline void ElementStateAlter::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// CountryWarAttrAlter

// required int32 id = 1;
inline bool CountryWarAttrAlter::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryWarAttrAlter::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryWarAttrAlter::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryWarAttrAlter::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CountryWarAttrAlter::id() const {
  return id_;
}
inline void CountryWarAttrAlter::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool CountryWarAttrAlter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryWarAttrAlter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryWarAttrAlter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryWarAttrAlter::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 CountryWarAttrAlter::value() const {
  return value_;
}
inline void CountryWarAttrAlter::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// CountryWarTaskUpdate

// required int32 id = 1;
inline bool CountryWarTaskUpdate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryWarTaskUpdate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryWarTaskUpdate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryWarTaskUpdate::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CountryWarTaskUpdate::id() const {
  return id_;
}
inline void CountryWarTaskUpdate::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool CountryWarTaskUpdate::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryWarTaskUpdate::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryWarTaskUpdate::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryWarTaskUpdate::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 CountryWarTaskUpdate::count() const {
  return count_;
}
inline void CountryWarTaskUpdate::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// ElementProtectedTimeOut

// required int64 id = 1;
inline bool ElementProtectedTimeOut::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElementProtectedTimeOut::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElementProtectedTimeOut::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElementProtectedTimeOut::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ElementProtectedTimeOut::id() const {
  return id_;
}
inline void ElementProtectedTimeOut::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// OccupyElementSuccess

// required int64 id = 1;
inline bool OccupyElementSuccess::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OccupyElementSuccess::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OccupyElementSuccess::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OccupyElementSuccess::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 OccupyElementSuccess::id() const {
  return id_;
}
inline void OccupyElementSuccess::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// PrizeItem

// required int32 id = 1;
inline bool PrizeItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrizeItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrizeItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrizeItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrizeItem::id() const {
  return id_;
}
inline void PrizeItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool PrizeItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrizeItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrizeItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrizeItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 PrizeItem::num() const {
  return num_;
}
inline void PrizeItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// ElementInfo

// required int32 id = 1;
inline bool ElementInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ElementInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ElementInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ElementInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ElementInfo::id() const {
  return id_;
}
inline void ElementInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 ower = 2;
inline bool ElementInfo::has_ower() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ElementInfo::set_has_ower() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ElementInfo::clear_has_ower() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ElementInfo::clear_ower() {
  ower_ = 0;
  clear_has_ower();
}
inline ::google::protobuf::int32 ElementInfo::ower() const {
  return ower_;
}
inline void ElementInfo::set_ower(::google::protobuf::int32 value) {
  set_has_ower();
  ower_ = value;
}

// optional int32 time = 3;
inline bool ElementInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ElementInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ElementInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ElementInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ElementInfo::time() const {
  return time_;
}
inline void ElementInfo::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 monster = 4;
inline bool ElementInfo::has_monster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ElementInfo::set_has_monster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ElementInfo::clear_has_monster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ElementInfo::clear_monster() {
  monster_ = 0;
  clear_has_monster();
}
inline ::google::protobuf::int32 ElementInfo::monster() const {
  return monster_;
}
inline void ElementInfo::set_monster(::google::protobuf::int32 value) {
  set_has_monster();
  monster_ = value;
}

// -------------------------------------------------------------------

// taskinfo

// required int32 id = 1;
inline bool taskinfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void taskinfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void taskinfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void taskinfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 taskinfo::id() const {
  return id_;
}
inline void taskinfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 count = 2;
inline bool taskinfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void taskinfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void taskinfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void taskinfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 taskinfo::count() const {
  return count_;
}
inline void taskinfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 flag = 3;
inline bool taskinfo::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void taskinfo::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void taskinfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void taskinfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 taskinfo::flag() const {
  return flag_;
}
inline void taskinfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// HistoryRecord

// repeated .CountryWar.RecordItem item = 1;
inline int HistoryRecord::item_size() const {
  return item_.size();
}
inline void HistoryRecord::clear_item() {
  item_.Clear();
}
inline const ::CountryWar::RecordItem& HistoryRecord::item(int index) const {
  return item_.Get(index);
}
inline ::CountryWar::RecordItem* HistoryRecord::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryWar::RecordItem* HistoryRecord::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryWar::RecordItem >&
HistoryRecord::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryWar::RecordItem >*
HistoryRecord::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// RecordItem

// required int32 id = 1;
inline bool RecordItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RecordItem::id() const {
  return id_;
}
inline void RecordItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 win = 2;
inline bool RecordItem::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordItem::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordItem::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordItem::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 RecordItem::win() const {
  return win_;
}
inline void RecordItem::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// optional int32 lose = 3;
inline bool RecordItem::has_lose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecordItem::set_has_lose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecordItem::clear_has_lose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecordItem::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 RecordItem::lose() const {
  return lose_;
}
inline void RecordItem::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
}

// -------------------------------------------------------------------

// CountryWarResult

// required int32 win = 1;
inline bool CountryWarResult::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryWarResult::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryWarResult::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryWarResult::clear_win() {
  win_ = 0;
  clear_has_win();
}
inline ::google::protobuf::int32 CountryWarResult::win() const {
  return win_;
}
inline void CountryWarResult::set_win(::google::protobuf::int32 value) {
  set_has_win();
  win_ = value;
}

// required int32 lose = 2;
inline bool CountryWarResult::has_lose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryWarResult::set_has_lose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryWarResult::clear_has_lose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryWarResult::clear_lose() {
  lose_ = 0;
  clear_has_lose();
}
inline ::google::protobuf::int32 CountryWarResult::lose() const {
  return lose_;
}
inline void CountryWarResult::set_lose(::google::protobuf::int32 value) {
  set_has_lose();
  lose_ = value;
}

// -------------------------------------------------------------------

// WSToGMCountryBattle

// required int32 warType = 1;
inline bool WSToGMCountryBattle::has_wartype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToGMCountryBattle::set_has_wartype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToGMCountryBattle::clear_has_wartype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToGMCountryBattle::clear_wartype() {
  wartype_ = 0;
  clear_has_wartype();
}
inline ::google::protobuf::int32 WSToGMCountryBattle::wartype() const {
  return wartype_;
}
inline void WSToGMCountryBattle::set_wartype(::google::protobuf::int32 value) {
  set_has_wartype();
  wartype_ = value;
}

// required bool flag = 2;
inline bool WSToGMCountryBattle::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToGMCountryBattle::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToGMCountryBattle::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToGMCountryBattle::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool WSToGMCountryBattle::flag() const {
  return flag_;
}
inline void WSToGMCountryBattle::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// repeated int64 charID = 3;
inline int WSToGMCountryBattle::charid_size() const {
  return charid_.size();
}
inline void WSToGMCountryBattle::clear_charid() {
  charid_.Clear();
}
inline ::google::protobuf::int64 WSToGMCountryBattle::charid(int index) const {
  return charid_.Get(index);
}
inline void WSToGMCountryBattle::set_charid(int index, ::google::protobuf::int64 value) {
  charid_.Set(index, value);
}
inline void WSToGMCountryBattle::add_charid(::google::protobuf::int64 value) {
  charid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
WSToGMCountryBattle::charid() const {
  return charid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
WSToGMCountryBattle::mutable_charid() {
  return &charid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryWar

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Country_2fCountryWar_2eproto__INCLUDED
