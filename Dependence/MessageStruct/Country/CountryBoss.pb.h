// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/CountryBoss.proto

#ifndef PROTOBUF_Country_2fCountryBoss_2eproto__INCLUDED
#define PROTOBUF_Country_2fCountryBoss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace CountryBossPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

class ClientReqCountryInstance;
class WSToClientCountryInstance;
class CountryIntegral;
class CountryBossHp;
class CountryBossHarmRank;
class CountryHarmRank;
class BossRank;
class BossHarmSettle;
class BossHarmItem;
class WSToClientInstanceBStart;
class CountryBossReward;
class CountryBossWin;
class CountryBossEndKill;
class CountryBossRankHurt;

// ===================================================================

class ClientReqCountryInstance : public ::google::protobuf::Message {
 public:
  ClientReqCountryInstance();
  virtual ~ClientReqCountryInstance();

  ClientReqCountryInstance(const ClientReqCountryInstance& from);

  inline ClientReqCountryInstance& operator=(const ClientReqCountryInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqCountryInstance& default_instance();

  void Swap(ClientReqCountryInstance* other);

  // implements Message ----------------------------------------------

  ClientReqCountryInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqCountryInstance& from);
  void MergeFrom(const ClientReqCountryInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.ClientReqCountryInstance)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static ClientReqCountryInstance* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientCountryInstance : public ::google::protobuf::Message {
 public:
  WSToClientCountryInstance();
  virtual ~WSToClientCountryInstance();

  WSToClientCountryInstance(const WSToClientCountryInstance& from);

  inline WSToClientCountryInstance& operator=(const WSToClientCountryInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientCountryInstance& default_instance();

  void Swap(WSToClientCountryInstance* other);

  // implements Message ----------------------------------------------

  WSToClientCountryInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientCountryInstance& from);
  void MergeFrom(const WSToClientCountryInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int64 instance = 2;
  inline bool has_instance() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 2;
  inline ::google::protobuf::int64 instance() const;
  inline void set_instance(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.WSToClientCountryInstance)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_instance();
  inline void clear_has_instance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 instance_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static WSToClientCountryInstance* default_instance_;
};
// -------------------------------------------------------------------

class CountryIntegral : public ::google::protobuf::Message {
 public:
  CountryIntegral();
  virtual ~CountryIntegral();

  CountryIntegral(const CountryIntegral& from);

  inline CountryIntegral& operator=(const CountryIntegral& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryIntegral& default_instance();

  void Swap(CountryIntegral* other);

  // implements Message ----------------------------------------------

  CountryIntegral* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryIntegral& from);
  void MergeFrom(const CountryIntegral& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 Sui = 1;
  inline bool has_sui() const;
  inline void clear_sui();
  static const int kSuiFieldNumber = 1;
  inline ::google::protobuf::int32 sui() const;
  inline void set_sui(::google::protobuf::int32 value);

  // optional int32 Tang = 2;
  inline bool has_tang() const;
  inline void clear_tang();
  static const int kTangFieldNumber = 2;
  inline ::google::protobuf::int32 tang() const;
  inline void set_tang(::google::protobuf::int32 value);

  // optional int32 enemy = 3;
  inline bool has_enemy() const;
  inline void clear_enemy();
  static const int kEnemyFieldNumber = 3;
  inline ::google::protobuf::int32 enemy() const;
  inline void set_enemy(::google::protobuf::int32 value);

  // optional int32 boss = 4;
  inline bool has_boss() const;
  inline void clear_boss();
  static const int kBossFieldNumber = 4;
  inline ::google::protobuf::int32 boss() const;
  inline void set_boss(::google::protobuf::int32 value);

  // optional int32 cor = 5;
  inline bool has_cor() const;
  inline void clear_cor();
  static const int kCorFieldNumber = 5;
  inline ::google::protobuf::int32 cor() const;
  inline void set_cor(::google::protobuf::int32 value);

  // optional int32 total = 6;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 6;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // optional int32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 country = 8;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 8;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int64 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // repeated .CountryBossPackage.CountryBossHp bossHp = 10;
  inline int bosshp_size() const;
  inline void clear_bosshp();
  static const int kBossHpFieldNumber = 10;
  inline const ::CountryBossPackage::CountryBossHp& bosshp(int index) const;
  inline ::CountryBossPackage::CountryBossHp* mutable_bosshp(int index);
  inline ::CountryBossPackage::CountryBossHp* add_bosshp();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryBossHp >&
      bosshp() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryBossHp >*
      mutable_bosshp();

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryIntegral)
 private:
  inline void set_has_sui();
  inline void clear_has_sui();
  inline void set_has_tang();
  inline void clear_has_tang();
  inline void set_has_enemy();
  inline void clear_has_enemy();
  inline void set_has_boss();
  inline void clear_has_boss();
  inline void set_has_cor();
  inline void clear_has_cor();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sui_;
  ::google::protobuf::int32 tang_;
  ::google::protobuf::int32 enemy_;
  ::google::protobuf::int32 boss_;
  ::google::protobuf::int32 cor_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryBossHp > bosshp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryIntegral* default_instance_;
};
// -------------------------------------------------------------------

class CountryBossHp : public ::google::protobuf::Message {
 public:
  CountryBossHp();
  virtual ~CountryBossHp();

  CountryBossHp(const CountryBossHp& from);

  inline CountryBossHp& operator=(const CountryBossHp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBossHp& default_instance();

  void Swap(CountryBossHp* other);

  // implements Message ----------------------------------------------

  CountryBossHp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBossHp& from);
  void MergeFrom(const CountryBossHp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 hp = 2;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 2;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryBossHp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryBossHp* default_instance_;
};
// -------------------------------------------------------------------

class CountryBossHarmRank : public ::google::protobuf::Message {
 public:
  CountryBossHarmRank();
  virtual ~CountryBossHarmRank();

  CountryBossHarmRank(const CountryBossHarmRank& from);

  inline CountryBossHarmRank& operator=(const CountryBossHarmRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBossHarmRank& default_instance();

  void Swap(CountryBossHarmRank* other);

  // implements Message ----------------------------------------------

  CountryBossHarmRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBossHarmRank& from);
  void MergeFrom(const CountryBossHarmRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .CountryBossPackage.CountryHarmRank harminfo = 2;
  inline int harminfo_size() const;
  inline void clear_harminfo();
  static const int kHarminfoFieldNumber = 2;
  inline const ::CountryBossPackage::CountryHarmRank& harminfo(int index) const;
  inline ::CountryBossPackage::CountryHarmRank* mutable_harminfo(int index);
  inline ::CountryBossPackage::CountryHarmRank* add_harminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryHarmRank >&
      harminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryHarmRank >*
      mutable_harminfo();

  // repeated .CountryBossPackage.BossRank bossinfo = 3;
  inline int bossinfo_size() const;
  inline void clear_bossinfo();
  static const int kBossinfoFieldNumber = 3;
  inline const ::CountryBossPackage::BossRank& bossinfo(int index) const;
  inline ::CountryBossPackage::BossRank* mutable_bossinfo(int index);
  inline ::CountryBossPackage::BossRank* add_bossinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossRank >&
      bossinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossRank >*
      mutable_bossinfo();

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryBossHarmRank)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryHarmRank > harminfo_;
  ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossRank > bossinfo_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryBossHarmRank* default_instance_;
};
// -------------------------------------------------------------------

class CountryHarmRank : public ::google::protobuf::Message {
 public:
  CountryHarmRank();
  virtual ~CountryHarmRank();

  CountryHarmRank(const CountryHarmRank& from);

  inline CountryHarmRank& operator=(const CountryHarmRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryHarmRank& default_instance();

  void Swap(CountryHarmRank* other);

  // implements Message ----------------------------------------------

  CountryHarmRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryHarmRank& from);
  void MergeFrom(const CountryHarmRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional float harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline float harm() const;
  inline void set_harm(float value);

  // optional int32 country = 4;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 4;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryHarmRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_country();
  inline void clear_has_country();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  float harm_;
  ::google::protobuf::int32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryHarmRank* default_instance_;
};
// -------------------------------------------------------------------

class BossRank : public ::google::protobuf::Message {
 public:
  BossRank();
  virtual ~BossRank();

  BossRank(const BossRank& from);

  inline BossRank& operator=(const BossRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossRank& default_instance();

  void Swap(BossRank* other);

  // implements Message ----------------------------------------------

  BossRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossRank& from);
  void MergeFrom(const BossRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional float harm = 2;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 2;
  inline float harm() const;
  inline void set_harm(float value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.BossRank)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 country_;
  float harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static BossRank* default_instance_;
};
// -------------------------------------------------------------------

class BossHarmSettle : public ::google::protobuf::Message {
 public:
  BossHarmSettle();
  virtual ~BossHarmSettle();

  BossHarmSettle(const BossHarmSettle& from);

  inline BossHarmSettle& operator=(const BossHarmSettle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossHarmSettle& default_instance();

  void Swap(BossHarmSettle* other);

  // implements Message ----------------------------------------------

  BossHarmSettle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossHarmSettle& from);
  void MergeFrom(const BossHarmSettle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 total = 2;
  inline bool has_total() const;
  inline void clear_total();
  static const int kTotalFieldNumber = 2;
  inline ::google::protobuf::int32 total() const;
  inline void set_total(::google::protobuf::int32 value);

  // optional int32 curRank = 3;
  inline bool has_currank() const;
  inline void clear_currank();
  static const int kCurRankFieldNumber = 3;
  inline ::google::protobuf::int32 currank() const;
  inline void set_currank(::google::protobuf::int32 value);

  // optional bool endCut = 4;
  inline bool has_endcut() const;
  inline void clear_endcut();
  static const int kEndCutFieldNumber = 4;
  inline bool endcut() const;
  inline void set_endcut(bool value);

  // optional int32 country = 5;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 5;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .CountryBossPackage.BossHarmItem item = 7;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 7;
  inline const ::CountryBossPackage::BossHarmItem& item(int index) const;
  inline ::CountryBossPackage::BossHarmItem* mutable_item(int index);
  inline ::CountryBossPackage::BossHarmItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossHarmItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossHarmItem >*
      mutable_item();

  // optional .CountryBossPackage.CountryBossEndKill endKill = 8;
  inline bool has_endkill() const;
  inline void clear_endkill();
  static const int kEndKillFieldNumber = 8;
  inline const ::CountryBossPackage::CountryBossEndKill& endkill() const;
  inline ::CountryBossPackage::CountryBossEndKill* mutable_endkill();
  inline ::CountryBossPackage::CountryBossEndKill* release_endkill();
  inline void set_allocated_endkill(::CountryBossPackage::CountryBossEndKill* endkill);

  // optional .CountryBossPackage.CountryBossRankHurt rankHurt = 9;
  inline bool has_rankhurt() const;
  inline void clear_rankhurt();
  static const int kRankHurtFieldNumber = 9;
  inline const ::CountryBossPackage::CountryBossRankHurt& rankhurt() const;
  inline ::CountryBossPackage::CountryBossRankHurt* mutable_rankhurt();
  inline ::CountryBossPackage::CountryBossRankHurt* release_rankhurt();
  inline void set_allocated_rankhurt(::CountryBossPackage::CountryBossRankHurt* rankhurt);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.BossHarmSettle)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_total();
  inline void clear_has_total();
  inline void set_has_currank();
  inline void clear_has_currank();
  inline void set_has_endcut();
  inline void clear_has_endcut();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_endkill();
  inline void clear_has_endkill();
  inline void set_has_rankhurt();
  inline void clear_has_rankhurt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 total_;
  ::google::protobuf::int32 currank_;
  bool endcut_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossHarmItem > item_;
  ::CountryBossPackage::CountryBossEndKill* endkill_;
  ::CountryBossPackage::CountryBossRankHurt* rankhurt_;
  ::google::protobuf::int32 country_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static BossHarmSettle* default_instance_;
};
// -------------------------------------------------------------------

class BossHarmItem : public ::google::protobuf::Message {
 public:
  BossHarmItem();
  virtual ~BossHarmItem();

  BossHarmItem(const BossHarmItem& from);

  inline BossHarmItem& operator=(const BossHarmItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossHarmItem& default_instance();

  void Swap(BossHarmItem* other);

  // implements Message ----------------------------------------------

  BossHarmItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossHarmItem& from);
  void MergeFrom(const BossHarmItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.BossHarmItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static BossHarmItem* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientInstanceBStart : public ::google::protobuf::Message {
 public:
  WSToClientInstanceBStart();
  virtual ~WSToClientInstanceBStart();

  WSToClientInstanceBStart(const WSToClientInstanceBStart& from);

  inline WSToClientInstanceBStart& operator=(const WSToClientInstanceBStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientInstanceBStart& default_instance();

  void Swap(WSToClientInstanceBStart* other);

  // implements Message ----------------------------------------------

  WSToClientInstanceBStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientInstanceBStart& from);
  void MergeFrom(const WSToClientInstanceBStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 ontime = 2;
  inline bool has_ontime() const;
  inline void clear_ontime();
  static const int kOntimeFieldNumber = 2;
  inline ::google::protobuf::int64 ontime() const;
  inline void set_ontime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.WSToClientInstanceBStart)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ontime();
  inline void clear_has_ontime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ontime_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static WSToClientInstanceBStart* default_instance_;
};
// -------------------------------------------------------------------

class CountryBossReward : public ::google::protobuf::Message {
 public:
  CountryBossReward();
  virtual ~CountryBossReward();

  CountryBossReward(const CountryBossReward& from);

  inline CountryBossReward& operator=(const CountryBossReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBossReward& default_instance();

  void Swap(CountryBossReward* other);

  // implements Message ----------------------------------------------

  CountryBossReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBossReward& from);
  void MergeFrom(const CountryBossReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // optional int32 Sui = 3;
  inline bool has_sui() const;
  inline void clear_sui();
  static const int kSuiFieldNumber = 3;
  inline ::google::protobuf::int32 sui() const;
  inline void set_sui(::google::protobuf::int32 value);

  // optional int32 Tang = 4;
  inline bool has_tang() const;
  inline void clear_tang();
  static const int kTangFieldNumber = 4;
  inline ::google::protobuf::int32 tang() const;
  inline void set_tang(::google::protobuf::int32 value);

  // optional int32 cor = 5;
  inline bool has_cor() const;
  inline void clear_cor();
  static const int kCorFieldNumber = 5;
  inline ::google::protobuf::int32 cor() const;
  inline void set_cor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryBossReward)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sui();
  inline void clear_has_sui();
  inline void set_has_tang();
  inline void clear_has_tang();
  inline void set_has_cor();
  inline void clear_has_cor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 country_;
  bool flag_;
  ::google::protobuf::int32 sui_;
  ::google::protobuf::int32 tang_;
  ::google::protobuf::int32 cor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryBossReward* default_instance_;
};
// -------------------------------------------------------------------

class CountryBossWin : public ::google::protobuf::Message {
 public:
  CountryBossWin();
  virtual ~CountryBossWin();

  CountryBossWin(const CountryBossWin& from);

  inline CountryBossWin& operator=(const CountryBossWin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBossWin& default_instance();

  void Swap(CountryBossWin* other);

  // implements Message ----------------------------------------------

  CountryBossWin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBossWin& from);
  void MergeFrom(const CountryBossWin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 country = 1;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 1;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int32 money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // repeated int32 itemid = 3;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 num = 4;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::int32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::int32 value);
  inline void add_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num();

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryBossWin)
 private:
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryBossWin* default_instance_;
};
// -------------------------------------------------------------------

class CountryBossEndKill : public ::google::protobuf::Message {
 public:
  CountryBossEndKill();
  virtual ~CountryBossEndKill();

  CountryBossEndKill(const CountryBossEndKill& from);

  inline CountryBossEndKill& operator=(const CountryBossEndKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBossEndKill& default_instance();

  void Swap(CountryBossEndKill* other);

  // implements Message ----------------------------------------------

  CountryBossEndKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBossEndKill& from);
  void MergeFrom(const CountryBossEndKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 credit = 2;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 2;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional int32 con = 3;
  inline bool has_con() const;
  inline void clear_con();
  static const int kConFieldNumber = 3;
  inline ::google::protobuf::int32 con() const;
  inline void set_con(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryBossEndKill)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_con();
  inline void clear_has_con();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::int32 con_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryBossEndKill* default_instance_;
};
// -------------------------------------------------------------------

class CountryBossRankHurt : public ::google::protobuf::Message {
 public:
  CountryBossRankHurt();
  virtual ~CountryBossRankHurt();

  CountryBossRankHurt(const CountryBossRankHurt& from);

  inline CountryBossRankHurt& operator=(const CountryBossRankHurt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CountryBossRankHurt& default_instance();

  void Swap(CountryBossRankHurt* other);

  // implements Message ----------------------------------------------

  CountryBossRankHurt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CountryBossRankHurt& from);
  void MergeFrom(const CountryBossRankHurt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 credit = 2;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 2;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional int32 con = 3;
  inline bool has_con() const;
  inline void clear_con();
  static const int kConFieldNumber = 3;
  inline ::google::protobuf::int32 con() const;
  inline void set_con(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CountryBossPackage.CountryBossRankHurt)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_con();
  inline void clear_has_con();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::int32 con_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_AssignDesc_Country_2fCountryBoss_2eproto();
  friend void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto();

  void InitAsDefaultInstance();
  static CountryBossRankHurt* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientReqCountryInstance

// required int32 type = 1;
inline bool ClientReqCountryInstance::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqCountryInstance::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqCountryInstance::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqCountryInstance::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ClientReqCountryInstance::type() const {
  return type_;
}
inline void ClientReqCountryInstance::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// WSToClientCountryInstance

// required int32 ret = 1;
inline bool WSToClientCountryInstance::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientCountryInstance::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientCountryInstance::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientCountryInstance::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientCountryInstance::ret() const {
  return ret_;
}
inline void WSToClientCountryInstance::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int64 instance = 2;
inline bool WSToClientCountryInstance::has_instance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientCountryInstance::set_has_instance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientCountryInstance::clear_has_instance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientCountryInstance::clear_instance() {
  instance_ = GOOGLE_LONGLONG(0);
  clear_has_instance();
}
inline ::google::protobuf::int64 WSToClientCountryInstance::instance() const {
  return instance_;
}
inline void WSToClientCountryInstance::set_instance(::google::protobuf::int64 value) {
  set_has_instance();
  instance_ = value;
}

// -------------------------------------------------------------------

// CountryIntegral

// required int32 Sui = 1;
inline bool CountryIntegral::has_sui() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryIntegral::set_has_sui() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryIntegral::clear_has_sui() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryIntegral::clear_sui() {
  sui_ = 0;
  clear_has_sui();
}
inline ::google::protobuf::int32 CountryIntegral::sui() const {
  return sui_;
}
inline void CountryIntegral::set_sui(::google::protobuf::int32 value) {
  set_has_sui();
  sui_ = value;
}

// optional int32 Tang = 2;
inline bool CountryIntegral::has_tang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryIntegral::set_has_tang() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryIntegral::clear_has_tang() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryIntegral::clear_tang() {
  tang_ = 0;
  clear_has_tang();
}
inline ::google::protobuf::int32 CountryIntegral::tang() const {
  return tang_;
}
inline void CountryIntegral::set_tang(::google::protobuf::int32 value) {
  set_has_tang();
  tang_ = value;
}

// optional int32 enemy = 3;
inline bool CountryIntegral::has_enemy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryIntegral::set_has_enemy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryIntegral::clear_has_enemy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryIntegral::clear_enemy() {
  enemy_ = 0;
  clear_has_enemy();
}
inline ::google::protobuf::int32 CountryIntegral::enemy() const {
  return enemy_;
}
inline void CountryIntegral::set_enemy(::google::protobuf::int32 value) {
  set_has_enemy();
  enemy_ = value;
}

// optional int32 boss = 4;
inline bool CountryIntegral::has_boss() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryIntegral::set_has_boss() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryIntegral::clear_has_boss() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryIntegral::clear_boss() {
  boss_ = 0;
  clear_has_boss();
}
inline ::google::protobuf::int32 CountryIntegral::boss() const {
  return boss_;
}
inline void CountryIntegral::set_boss(::google::protobuf::int32 value) {
  set_has_boss();
  boss_ = value;
}

// optional int32 cor = 5;
inline bool CountryIntegral::has_cor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountryIntegral::set_has_cor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountryIntegral::clear_has_cor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountryIntegral::clear_cor() {
  cor_ = 0;
  clear_has_cor();
}
inline ::google::protobuf::int32 CountryIntegral::cor() const {
  return cor_;
}
inline void CountryIntegral::set_cor(::google::protobuf::int32 value) {
  set_has_cor();
  cor_ = value;
}

// optional int32 total = 6;
inline bool CountryIntegral::has_total() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CountryIntegral::set_has_total() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CountryIntegral::clear_has_total() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CountryIntegral::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 CountryIntegral::total() const {
  return total_;
}
inline void CountryIntegral::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// optional int32 exp = 7;
inline bool CountryIntegral::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CountryIntegral::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CountryIntegral::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CountryIntegral::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 CountryIntegral::exp() const {
  return exp_;
}
inline void CountryIntegral::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 country = 8;
inline bool CountryIntegral::has_country() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CountryIntegral::set_has_country() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CountryIntegral::clear_has_country() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CountryIntegral::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 CountryIntegral::country() const {
  return country_;
}
inline void CountryIntegral::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int64 time = 9;
inline bool CountryIntegral::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CountryIntegral::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CountryIntegral::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CountryIntegral::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 CountryIntegral::time() const {
  return time_;
}
inline void CountryIntegral::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// repeated .CountryBossPackage.CountryBossHp bossHp = 10;
inline int CountryIntegral::bosshp_size() const {
  return bosshp_.size();
}
inline void CountryIntegral::clear_bosshp() {
  bosshp_.Clear();
}
inline const ::CountryBossPackage::CountryBossHp& CountryIntegral::bosshp(int index) const {
  return bosshp_.Get(index);
}
inline ::CountryBossPackage::CountryBossHp* CountryIntegral::mutable_bosshp(int index) {
  return bosshp_.Mutable(index);
}
inline ::CountryBossPackage::CountryBossHp* CountryIntegral::add_bosshp() {
  return bosshp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryBossHp >&
CountryIntegral::bosshp() const {
  return bosshp_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryBossHp >*
CountryIntegral::mutable_bosshp() {
  return &bosshp_;
}

// -------------------------------------------------------------------

// CountryBossHp

// required int32 id = 1;
inline bool CountryBossHp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBossHp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBossHp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBossHp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CountryBossHp::id() const {
  return id_;
}
inline void CountryBossHp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 hp = 2;
inline bool CountryBossHp::has_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryBossHp::set_has_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryBossHp::clear_has_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryBossHp::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 CountryBossHp::hp() const {
  return hp_;
}
inline void CountryBossHp::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// CountryBossHarmRank

// required int32 id = 1;
inline bool CountryBossHarmRank::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBossHarmRank::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBossHarmRank::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBossHarmRank::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CountryBossHarmRank::id() const {
  return id_;
}
inline void CountryBossHarmRank::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .CountryBossPackage.CountryHarmRank harminfo = 2;
inline int CountryBossHarmRank::harminfo_size() const {
  return harminfo_.size();
}
inline void CountryBossHarmRank::clear_harminfo() {
  harminfo_.Clear();
}
inline const ::CountryBossPackage::CountryHarmRank& CountryBossHarmRank::harminfo(int index) const {
  return harminfo_.Get(index);
}
inline ::CountryBossPackage::CountryHarmRank* CountryBossHarmRank::mutable_harminfo(int index) {
  return harminfo_.Mutable(index);
}
inline ::CountryBossPackage::CountryHarmRank* CountryBossHarmRank::add_harminfo() {
  return harminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryHarmRank >&
CountryBossHarmRank::harminfo() const {
  return harminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::CountryHarmRank >*
CountryBossHarmRank::mutable_harminfo() {
  return &harminfo_;
}

// repeated .CountryBossPackage.BossRank bossinfo = 3;
inline int CountryBossHarmRank::bossinfo_size() const {
  return bossinfo_.size();
}
inline void CountryBossHarmRank::clear_bossinfo() {
  bossinfo_.Clear();
}
inline const ::CountryBossPackage::BossRank& CountryBossHarmRank::bossinfo(int index) const {
  return bossinfo_.Get(index);
}
inline ::CountryBossPackage::BossRank* CountryBossHarmRank::mutable_bossinfo(int index) {
  return bossinfo_.Mutable(index);
}
inline ::CountryBossPackage::BossRank* CountryBossHarmRank::add_bossinfo() {
  return bossinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossRank >&
CountryBossHarmRank::bossinfo() const {
  return bossinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossRank >*
CountryBossHarmRank::mutable_bossinfo() {
  return &bossinfo_;
}

// -------------------------------------------------------------------

// CountryHarmRank

// required int64 charid = 1;
inline bool CountryHarmRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryHarmRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryHarmRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryHarmRank::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 CountryHarmRank::charid() const {
  return charid_;
}
inline void CountryHarmRank::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string charname = 2;
inline bool CountryHarmRank::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryHarmRank::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryHarmRank::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryHarmRank::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& CountryHarmRank::charname() const {
  return *charname_;
}
inline void CountryHarmRank::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void CountryHarmRank::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void CountryHarmRank::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CountryHarmRank::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* CountryHarmRank::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CountryHarmRank::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float harm = 3;
inline bool CountryHarmRank::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryHarmRank::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryHarmRank::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryHarmRank::clear_harm() {
  harm_ = 0;
  clear_has_harm();
}
inline float CountryHarmRank::harm() const {
  return harm_;
}
inline void CountryHarmRank::set_harm(float value) {
  set_has_harm();
  harm_ = value;
}

// optional int32 country = 4;
inline bool CountryHarmRank::has_country() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryHarmRank::set_has_country() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryHarmRank::clear_has_country() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryHarmRank::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 CountryHarmRank::country() const {
  return country_;
}
inline void CountryHarmRank::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// -------------------------------------------------------------------

// BossRank

// required int32 country = 1;
inline bool BossRank::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossRank::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossRank::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossRank::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 BossRank::country() const {
  return country_;
}
inline void BossRank::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional float harm = 2;
inline bool BossRank::has_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossRank::set_has_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossRank::clear_has_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossRank::clear_harm() {
  harm_ = 0;
  clear_has_harm();
}
inline float BossRank::harm() const {
  return harm_;
}
inline void BossRank::set_harm(float value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// BossHarmSettle

// required int32 id = 1;
inline bool BossHarmSettle::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossHarmSettle::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossHarmSettle::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossHarmSettle::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BossHarmSettle::id() const {
  return id_;
}
inline void BossHarmSettle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 total = 2;
inline bool BossHarmSettle::has_total() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossHarmSettle::set_has_total() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossHarmSettle::clear_has_total() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossHarmSettle::clear_total() {
  total_ = 0;
  clear_has_total();
}
inline ::google::protobuf::int32 BossHarmSettle::total() const {
  return total_;
}
inline void BossHarmSettle::set_total(::google::protobuf::int32 value) {
  set_has_total();
  total_ = value;
}

// optional int32 curRank = 3;
inline bool BossHarmSettle::has_currank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossHarmSettle::set_has_currank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossHarmSettle::clear_has_currank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossHarmSettle::clear_currank() {
  currank_ = 0;
  clear_has_currank();
}
inline ::google::protobuf::int32 BossHarmSettle::currank() const {
  return currank_;
}
inline void BossHarmSettle::set_currank(::google::protobuf::int32 value) {
  set_has_currank();
  currank_ = value;
}

// optional bool endCut = 4;
inline bool BossHarmSettle::has_endcut() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossHarmSettle::set_has_endcut() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossHarmSettle::clear_has_endcut() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossHarmSettle::clear_endcut() {
  endcut_ = false;
  clear_has_endcut();
}
inline bool BossHarmSettle::endcut() const {
  return endcut_;
}
inline void BossHarmSettle::set_endcut(bool value) {
  set_has_endcut();
  endcut_ = value;
}

// optional int32 country = 5;
inline bool BossHarmSettle::has_country() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossHarmSettle::set_has_country() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossHarmSettle::clear_has_country() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossHarmSettle::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 BossHarmSettle::country() const {
  return country_;
}
inline void BossHarmSettle::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional string name = 6;
inline bool BossHarmSettle::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossHarmSettle::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossHarmSettle::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossHarmSettle::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BossHarmSettle::name() const {
  return *name_;
}
inline void BossHarmSettle::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BossHarmSettle::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BossHarmSettle::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossHarmSettle::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BossHarmSettle::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossHarmSettle::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CountryBossPackage.BossHarmItem item = 7;
inline int BossHarmSettle::item_size() const {
  return item_.size();
}
inline void BossHarmSettle::clear_item() {
  item_.Clear();
}
inline const ::CountryBossPackage::BossHarmItem& BossHarmSettle::item(int index) const {
  return item_.Get(index);
}
inline ::CountryBossPackage::BossHarmItem* BossHarmSettle::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::CountryBossPackage::BossHarmItem* BossHarmSettle::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossHarmItem >&
BossHarmSettle::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::CountryBossPackage::BossHarmItem >*
BossHarmSettle::mutable_item() {
  return &item_;
}

// optional .CountryBossPackage.CountryBossEndKill endKill = 8;
inline bool BossHarmSettle::has_endkill() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossHarmSettle::set_has_endkill() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossHarmSettle::clear_has_endkill() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossHarmSettle::clear_endkill() {
  if (endkill_ != NULL) endkill_->::CountryBossPackage::CountryBossEndKill::Clear();
  clear_has_endkill();
}
inline const ::CountryBossPackage::CountryBossEndKill& BossHarmSettle::endkill() const {
  return endkill_ != NULL ? *endkill_ : *default_instance_->endkill_;
}
inline ::CountryBossPackage::CountryBossEndKill* BossHarmSettle::mutable_endkill() {
  set_has_endkill();
  if (endkill_ == NULL) endkill_ = new ::CountryBossPackage::CountryBossEndKill;
  return endkill_;
}
inline ::CountryBossPackage::CountryBossEndKill* BossHarmSettle::release_endkill() {
  clear_has_endkill();
  ::CountryBossPackage::CountryBossEndKill* temp = endkill_;
  endkill_ = NULL;
  return temp;
}
inline void BossHarmSettle::set_allocated_endkill(::CountryBossPackage::CountryBossEndKill* endkill) {
  delete endkill_;
  endkill_ = endkill;
  if (endkill) {
    set_has_endkill();
  } else {
    clear_has_endkill();
  }
}

// optional .CountryBossPackage.CountryBossRankHurt rankHurt = 9;
inline bool BossHarmSettle::has_rankhurt() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BossHarmSettle::set_has_rankhurt() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BossHarmSettle::clear_has_rankhurt() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BossHarmSettle::clear_rankhurt() {
  if (rankhurt_ != NULL) rankhurt_->::CountryBossPackage::CountryBossRankHurt::Clear();
  clear_has_rankhurt();
}
inline const ::CountryBossPackage::CountryBossRankHurt& BossHarmSettle::rankhurt() const {
  return rankhurt_ != NULL ? *rankhurt_ : *default_instance_->rankhurt_;
}
inline ::CountryBossPackage::CountryBossRankHurt* BossHarmSettle::mutable_rankhurt() {
  set_has_rankhurt();
  if (rankhurt_ == NULL) rankhurt_ = new ::CountryBossPackage::CountryBossRankHurt;
  return rankhurt_;
}
inline ::CountryBossPackage::CountryBossRankHurt* BossHarmSettle::release_rankhurt() {
  clear_has_rankhurt();
  ::CountryBossPackage::CountryBossRankHurt* temp = rankhurt_;
  rankhurt_ = NULL;
  return temp;
}
inline void BossHarmSettle::set_allocated_rankhurt(::CountryBossPackage::CountryBossRankHurt* rankhurt) {
  delete rankhurt_;
  rankhurt_ = rankhurt;
  if (rankhurt) {
    set_has_rankhurt();
  } else {
    clear_has_rankhurt();
  }
}

// -------------------------------------------------------------------

// BossHarmItem

// required int32 id = 1;
inline bool BossHarmItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossHarmItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossHarmItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossHarmItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BossHarmItem::id() const {
  return id_;
}
inline void BossHarmItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool BossHarmItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossHarmItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossHarmItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossHarmItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BossHarmItem::num() const {
  return num_;
}
inline void BossHarmItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// WSToClientInstanceBStart

// required int32 type = 1;
inline bool WSToClientInstanceBStart::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientInstanceBStart::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientInstanceBStart::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientInstanceBStart::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 WSToClientInstanceBStart::type() const {
  return type_;
}
inline void WSToClientInstanceBStart::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 ontime = 2;
inline bool WSToClientInstanceBStart::has_ontime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientInstanceBStart::set_has_ontime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientInstanceBStart::clear_has_ontime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientInstanceBStart::clear_ontime() {
  ontime_ = GOOGLE_LONGLONG(0);
  clear_has_ontime();
}
inline ::google::protobuf::int64 WSToClientInstanceBStart::ontime() const {
  return ontime_;
}
inline void WSToClientInstanceBStart::set_ontime(::google::protobuf::int64 value) {
  set_has_ontime();
  ontime_ = value;
}

// -------------------------------------------------------------------

// CountryBossReward

// required int32 country = 1;
inline bool CountryBossReward::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBossReward::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBossReward::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBossReward::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 CountryBossReward::country() const {
  return country_;
}
inline void CountryBossReward::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional bool flag = 2;
inline bool CountryBossReward::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryBossReward::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryBossReward::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryBossReward::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool CountryBossReward::flag() const {
  return flag_;
}
inline void CountryBossReward::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 Sui = 3;
inline bool CountryBossReward::has_sui() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryBossReward::set_has_sui() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryBossReward::clear_has_sui() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryBossReward::clear_sui() {
  sui_ = 0;
  clear_has_sui();
}
inline ::google::protobuf::int32 CountryBossReward::sui() const {
  return sui_;
}
inline void CountryBossReward::set_sui(::google::protobuf::int32 value) {
  set_has_sui();
  sui_ = value;
}

// optional int32 Tang = 4;
inline bool CountryBossReward::has_tang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CountryBossReward::set_has_tang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CountryBossReward::clear_has_tang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CountryBossReward::clear_tang() {
  tang_ = 0;
  clear_has_tang();
}
inline ::google::protobuf::int32 CountryBossReward::tang() const {
  return tang_;
}
inline void CountryBossReward::set_tang(::google::protobuf::int32 value) {
  set_has_tang();
  tang_ = value;
}

// optional int32 cor = 5;
inline bool CountryBossReward::has_cor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CountryBossReward::set_has_cor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CountryBossReward::clear_has_cor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CountryBossReward::clear_cor() {
  cor_ = 0;
  clear_has_cor();
}
inline ::google::protobuf::int32 CountryBossReward::cor() const {
  return cor_;
}
inline void CountryBossReward::set_cor(::google::protobuf::int32 value) {
  set_has_cor();
  cor_ = value;
}

// -------------------------------------------------------------------

// CountryBossWin

// required int32 country = 1;
inline bool CountryBossWin::has_country() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBossWin::set_has_country() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBossWin::clear_has_country() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBossWin::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 CountryBossWin::country() const {
  return country_;
}
inline void CountryBossWin::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int32 money = 2;
inline bool CountryBossWin::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryBossWin::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryBossWin::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryBossWin::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 CountryBossWin::money() const {
  return money_;
}
inline void CountryBossWin::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// repeated int32 itemid = 3;
inline int CountryBossWin::itemid_size() const {
  return itemid_.size();
}
inline void CountryBossWin::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 CountryBossWin::itemid(int index) const {
  return itemid_.Get(index);
}
inline void CountryBossWin::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void CountryBossWin::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CountryBossWin::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CountryBossWin::mutable_itemid() {
  return &itemid_;
}

// repeated int32 num = 4;
inline int CountryBossWin::num_size() const {
  return num_.size();
}
inline void CountryBossWin::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::int32 CountryBossWin::num(int index) const {
  return num_.Get(index);
}
inline void CountryBossWin::set_num(int index, ::google::protobuf::int32 value) {
  num_.Set(index, value);
}
inline void CountryBossWin::add_num(::google::protobuf::int32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CountryBossWin::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CountryBossWin::mutable_num() {
  return &num_;
}

// -------------------------------------------------------------------

// CountryBossEndKill

// required int32 exp = 1;
inline bool CountryBossEndKill::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBossEndKill::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBossEndKill::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBossEndKill::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 CountryBossEndKill::exp() const {
  return exp_;
}
inline void CountryBossEndKill::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 credit = 2;
inline bool CountryBossEndKill::has_credit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryBossEndKill::set_has_credit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryBossEndKill::clear_has_credit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryBossEndKill::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 CountryBossEndKill::credit() const {
  return credit_;
}
inline void CountryBossEndKill::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
}

// optional int32 con = 3;
inline bool CountryBossEndKill::has_con() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryBossEndKill::set_has_con() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryBossEndKill::clear_has_con() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryBossEndKill::clear_con() {
  con_ = 0;
  clear_has_con();
}
inline ::google::protobuf::int32 CountryBossEndKill::con() const {
  return con_;
}
inline void CountryBossEndKill::set_con(::google::protobuf::int32 value) {
  set_has_con();
  con_ = value;
}

// -------------------------------------------------------------------

// CountryBossRankHurt

// required int32 exp = 1;
inline bool CountryBossRankHurt::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CountryBossRankHurt::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CountryBossRankHurt::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CountryBossRankHurt::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 CountryBossRankHurt::exp() const {
  return exp_;
}
inline void CountryBossRankHurt::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 credit = 2;
inline bool CountryBossRankHurt::has_credit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CountryBossRankHurt::set_has_credit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CountryBossRankHurt::clear_has_credit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CountryBossRankHurt::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 CountryBossRankHurt::credit() const {
  return credit_;
}
inline void CountryBossRankHurt::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
}

// optional int32 con = 3;
inline bool CountryBossRankHurt::has_con() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CountryBossRankHurt::set_has_con() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CountryBossRankHurt::clear_has_con() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CountryBossRankHurt::clear_con() {
  con_ = 0;
  clear_has_con();
}
inline ::google::protobuf::int32 CountryBossRankHurt::con() const {
  return con_;
}
inline void CountryBossRankHurt::set_con(::google::protobuf::int32 value) {
  set_has_con();
  con_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryBossPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Country_2fCountryBoss_2eproto__INCLUDED
