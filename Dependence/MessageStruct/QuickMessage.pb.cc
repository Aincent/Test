// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuickMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QuickMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ServerMessage {

namespace {

const ::google::protobuf::Descriptor* ClientSingleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSingleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessagePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessagePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGateServerMessagePack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGateServerMessagePack_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGateServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGateServerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMSimplePackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMSimplePackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMRequestPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMRequestPackage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_QuickMessage_2eproto() {
  protobuf_AddDesc_QuickMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QuickMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ClientSingleMessage_descriptor_ = file->message_type(0);
  static const int ClientSingleMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleMessage, content_),
  };
  ClientSingleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSingleMessage_descriptor_,
      ClientSingleMessage::default_instance_,
      ClientSingleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSingleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSingleMessage));
  ClientMessagePackage_descriptor_ = file->message_type(1);
  static const int ClientMessagePackage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessagePackage, content_),
  };
  ClientMessagePackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessagePackage_descriptor_,
      ClientMessagePackage::default_instance_,
      ClientMessagePackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessagePackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessagePackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessagePackage));
  ToGateServerMessagePack_descriptor_ = file->message_type(2);
  static const int ToGateServerMessagePack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGateServerMessagePack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGateServerMessagePack, content_),
  };
  ToGateServerMessagePack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGateServerMessagePack_descriptor_,
      ToGateServerMessagePack::default_instance_,
      ToGateServerMessagePack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGateServerMessagePack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGateServerMessagePack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGateServerMessagePack));
  WSToGateServerMessage_descriptor_ = file->message_type(3);
  static const int WSToGateServerMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGateServerMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGateServerMessage, content_),
  };
  WSToGateServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGateServerMessage_descriptor_,
      WSToGateServerMessage::default_instance_,
      WSToGateServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGateServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGateServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGateServerMessage));
  ToGMSimplePackage_descriptor_ = file->message_type(4);
  static const int ToGMSimplePackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSimplePackage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSimplePackage, content_),
  };
  ToGMSimplePackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMSimplePackage_descriptor_,
      ToGMSimplePackage::default_instance_,
      ToGMSimplePackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSimplePackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSimplePackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMSimplePackage));
  ToGMRequestPackage_descriptor_ = file->message_type(5);
  static const int ToGMRequestPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMRequestPackage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMRequestPackage, content_),
  };
  ToGMRequestPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMRequestPackage_descriptor_,
      ToGMRequestPackage::default_instance_,
      ToGMRequestPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMRequestPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMRequestPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMRequestPackage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QuickMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSingleMessage_descriptor_, &ClientSingleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessagePackage_descriptor_, &ClientMessagePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGateServerMessagePack_descriptor_, &ToGateServerMessagePack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGateServerMessage_descriptor_, &WSToGateServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMSimplePackage_descriptor_, &ToGMSimplePackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMRequestPackage_descriptor_, &ToGMRequestPackage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QuickMessage_2eproto() {
  delete ClientSingleMessage::default_instance_;
  delete ClientSingleMessage_reflection_;
  delete ClientMessagePackage::default_instance_;
  delete ClientMessagePackage_reflection_;
  delete ToGateServerMessagePack::default_instance_;
  delete ToGateServerMessagePack_reflection_;
  delete WSToGateServerMessage::default_instance_;
  delete WSToGateServerMessage_reflection_;
  delete ToGMSimplePackage::default_instance_;
  delete ToGMSimplePackage_reflection_;
  delete ToGMRequestPackage::default_instance_;
  delete ToGMRequestPackage_reflection_;
}

void protobuf_AddDesc_QuickMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022QuickMessage.proto\022\rServerMessage\"2\n\023C"
    "lientSingleMessage\022\n\n\002id\030\001 \002(\005\022\017\n\007conten"
    "t\030\002 \001(\014\"K\n\024ClientMessagePackage\0223\n\007conte"
    "nt\030\001 \003(\0132\".ServerMessage.ClientSingleMes"
    "sage\"[\n\027ToGateServerMessagePack\022\n\n\002id\030\001 "
    "\002(\003\0224\n\007content\030\002 \001(\0132#.ServerMessage.Cli"
    "entMessagePackage\"X\n\025WSToGateServerMessa"
    "ge\022\n\n\002id\030\001 \002(\003\0223\n\007content\030\002 \001(\0132\".Server"
    "Message.ClientSingleMessage\"T\n\021ToGMSimpl"
    "ePackage\022\n\n\002id\030\001 \002(\003\0223\n\007content\030\002 \001(\0132\"."
    "ServerMessage.ClientSingleMessage\"U\n\022ToG"
    "MRequestPackage\022\n\n\002id\030\001 \002(\003\0223\n\007content\030\002"
    " \001(\0132\".ServerMessage.ClientSingleMessage", 520);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QuickMessage.proto", &protobuf_RegisterTypes);
  ClientSingleMessage::default_instance_ = new ClientSingleMessage();
  ClientMessagePackage::default_instance_ = new ClientMessagePackage();
  ToGateServerMessagePack::default_instance_ = new ToGateServerMessagePack();
  WSToGateServerMessage::default_instance_ = new WSToGateServerMessage();
  ToGMSimplePackage::default_instance_ = new ToGMSimplePackage();
  ToGMRequestPackage::default_instance_ = new ToGMRequestPackage();
  ClientSingleMessage::default_instance_->InitAsDefaultInstance();
  ClientMessagePackage::default_instance_->InitAsDefaultInstance();
  ToGateServerMessagePack::default_instance_->InitAsDefaultInstance();
  WSToGateServerMessage::default_instance_->InitAsDefaultInstance();
  ToGMSimplePackage::default_instance_->InitAsDefaultInstance();
  ToGMRequestPackage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QuickMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QuickMessage_2eproto {
  StaticDescriptorInitializer_QuickMessage_2eproto() {
    protobuf_AddDesc_QuickMessage_2eproto();
  }
} static_descriptor_initializer_QuickMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientSingleMessage::kIdFieldNumber;
const int ClientSingleMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ClientSingleMessage::ClientSingleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSingleMessage::InitAsDefaultInstance() {
}

ClientSingleMessage::ClientSingleMessage(const ClientSingleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSingleMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSingleMessage::~ClientSingleMessage() {
  SharedDtor();
}

void ClientSingleMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ClientSingleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSingleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSingleMessage_descriptor_;
}

const ClientSingleMessage& ClientSingleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuickMessage_2eproto();
  return *default_instance_;
}

ClientSingleMessage* ClientSingleMessage::default_instance_ = NULL;

ClientSingleMessage* ClientSingleMessage::New() const {
  return new ClientSingleMessage;
}

void ClientSingleMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSingleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSingleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSingleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSingleMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSingleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSingleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSingleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSingleMessage::MergeFrom(const ClientSingleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSingleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSingleMessage::CopyFrom(const ClientSingleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSingleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientSingleMessage::Swap(ClientSingleMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSingleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSingleMessage_descriptor_;
  metadata.reflection = ClientSingleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientMessagePackage::kContentFieldNumber;
#endif  // !_MSC_VER

ClientMessagePackage::ClientMessagePackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessagePackage::InitAsDefaultInstance() {
}

ClientMessagePackage::ClientMessagePackage(const ClientMessagePackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessagePackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessagePackage::~ClientMessagePackage() {
  SharedDtor();
}

void ClientMessagePackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientMessagePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessagePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessagePackage_descriptor_;
}

const ClientMessagePackage& ClientMessagePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuickMessage_2eproto();
  return *default_instance_;
}

ClientMessagePackage* ClientMessagePackage::default_instance_ = NULL;

ClientMessagePackage* ClientMessagePackage::New() const {
  return new ClientMessagePackage;
}

void ClientMessagePackage::Clear() {
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessagePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerMessage.ClientSingleMessage content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessagePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerMessage.ClientSingleMessage content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessagePackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerMessage.ClientSingleMessage content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessagePackage::ByteSize() const {
  int total_size = 0;

  // repeated .ServerMessage.ClientSingleMessage content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessagePackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessagePackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessagePackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessagePackage::MergeFrom(const ClientMessagePackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessagePackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessagePackage::CopyFrom(const ClientMessagePackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessagePackage::IsInitialized() const {

  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void ClientMessagePackage::Swap(ClientMessagePackage* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessagePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessagePackage_descriptor_;
  metadata.reflection = ClientMessagePackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGateServerMessagePack::kIdFieldNumber;
const int ToGateServerMessagePack::kContentFieldNumber;
#endif  // !_MSC_VER

ToGateServerMessagePack::ToGateServerMessagePack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGateServerMessagePack::InitAsDefaultInstance() {
  content_ = const_cast< ::ServerMessage::ClientMessagePackage*>(&::ServerMessage::ClientMessagePackage::default_instance());
}

ToGateServerMessagePack::ToGateServerMessagePack(const ToGateServerMessagePack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGateServerMessagePack::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGateServerMessagePack::~ToGateServerMessagePack() {
  SharedDtor();
}

void ToGateServerMessagePack::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void ToGateServerMessagePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGateServerMessagePack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGateServerMessagePack_descriptor_;
}

const ToGateServerMessagePack& ToGateServerMessagePack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuickMessage_2eproto();
  return *default_instance_;
}

ToGateServerMessagePack* ToGateServerMessagePack::default_instance_ = NULL;

ToGateServerMessagePack* ToGateServerMessagePack::New() const {
  return new ToGateServerMessagePack;
}

void ToGateServerMessagePack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != NULL) content_->::ServerMessage::ClientMessagePackage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGateServerMessagePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .ServerMessage.ClientMessagePackage content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGateServerMessagePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .ServerMessage.ClientMessagePackage content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGateServerMessagePack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .ServerMessage.ClientMessagePackage content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGateServerMessagePack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .ServerMessage.ClientMessagePackage content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGateServerMessagePack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGateServerMessagePack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGateServerMessagePack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGateServerMessagePack::MergeFrom(const ToGateServerMessagePack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      mutable_content()->::ServerMessage::ClientMessagePackage::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGateServerMessagePack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGateServerMessagePack::CopyFrom(const ToGateServerMessagePack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGateServerMessagePack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void ToGateServerMessagePack::Swap(ToGateServerMessagePack* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGateServerMessagePack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGateServerMessagePack_descriptor_;
  metadata.reflection = ToGateServerMessagePack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGateServerMessage::kIdFieldNumber;
const int WSToGateServerMessage::kContentFieldNumber;
#endif  // !_MSC_VER

WSToGateServerMessage::WSToGateServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGateServerMessage::InitAsDefaultInstance() {
  content_ = const_cast< ::ServerMessage::ClientSingleMessage*>(&::ServerMessage::ClientSingleMessage::default_instance());
}

WSToGateServerMessage::WSToGateServerMessage(const WSToGateServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGateServerMessage::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGateServerMessage::~WSToGateServerMessage() {
  SharedDtor();
}

void WSToGateServerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void WSToGateServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGateServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGateServerMessage_descriptor_;
}

const WSToGateServerMessage& WSToGateServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuickMessage_2eproto();
  return *default_instance_;
}

WSToGateServerMessage* WSToGateServerMessage::default_instance_ = NULL;

WSToGateServerMessage* WSToGateServerMessage::New() const {
  return new WSToGateServerMessage;
}

void WSToGateServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != NULL) content_->::ServerMessage::ClientSingleMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGateServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .ServerMessage.ClientSingleMessage content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGateServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .ServerMessage.ClientSingleMessage content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGateServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .ServerMessage.ClientSingleMessage content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGateServerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .ServerMessage.ClientSingleMessage content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGateServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGateServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGateServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGateServerMessage::MergeFrom(const WSToGateServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      mutable_content()->::ServerMessage::ClientSingleMessage::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGateServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGateServerMessage::CopyFrom(const WSToGateServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGateServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void WSToGateServerMessage::Swap(WSToGateServerMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGateServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGateServerMessage_descriptor_;
  metadata.reflection = WSToGateServerMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMSimplePackage::kIdFieldNumber;
const int ToGMSimplePackage::kContentFieldNumber;
#endif  // !_MSC_VER

ToGMSimplePackage::ToGMSimplePackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMSimplePackage::InitAsDefaultInstance() {
  content_ = const_cast< ::ServerMessage::ClientSingleMessage*>(&::ServerMessage::ClientSingleMessage::default_instance());
}

ToGMSimplePackage::ToGMSimplePackage(const ToGMSimplePackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMSimplePackage::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMSimplePackage::~ToGMSimplePackage() {
  SharedDtor();
}

void ToGMSimplePackage::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void ToGMSimplePackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMSimplePackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMSimplePackage_descriptor_;
}

const ToGMSimplePackage& ToGMSimplePackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuickMessage_2eproto();
  return *default_instance_;
}

ToGMSimplePackage* ToGMSimplePackage::default_instance_ = NULL;

ToGMSimplePackage* ToGMSimplePackage::New() const {
  return new ToGMSimplePackage;
}

void ToGMSimplePackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != NULL) content_->::ServerMessage::ClientSingleMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMSimplePackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .ServerMessage.ClientSingleMessage content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMSimplePackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .ServerMessage.ClientSingleMessage content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMSimplePackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .ServerMessage.ClientSingleMessage content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMSimplePackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .ServerMessage.ClientSingleMessage content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMSimplePackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMSimplePackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMSimplePackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMSimplePackage::MergeFrom(const ToGMSimplePackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      mutable_content()->::ServerMessage::ClientSingleMessage::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMSimplePackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMSimplePackage::CopyFrom(const ToGMSimplePackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMSimplePackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void ToGMSimplePackage::Swap(ToGMSimplePackage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMSimplePackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMSimplePackage_descriptor_;
  metadata.reflection = ToGMSimplePackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMRequestPackage::kIdFieldNumber;
const int ToGMRequestPackage::kContentFieldNumber;
#endif  // !_MSC_VER

ToGMRequestPackage::ToGMRequestPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMRequestPackage::InitAsDefaultInstance() {
  content_ = const_cast< ::ServerMessage::ClientSingleMessage*>(&::ServerMessage::ClientSingleMessage::default_instance());
}

ToGMRequestPackage::ToGMRequestPackage(const ToGMRequestPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMRequestPackage::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  content_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMRequestPackage::~ToGMRequestPackage() {
  SharedDtor();
}

void ToGMRequestPackage::SharedDtor() {
  if (this != default_instance_) {
    delete content_;
  }
}

void ToGMRequestPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMRequestPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMRequestPackage_descriptor_;
}

const ToGMRequestPackage& ToGMRequestPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QuickMessage_2eproto();
  return *default_instance_;
}

ToGMRequestPackage* ToGMRequestPackage::default_instance_ = NULL;

ToGMRequestPackage* ToGMRequestPackage::New() const {
  return new ToGMRequestPackage;
}

void ToGMRequestPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_content()) {
      if (content_ != NULL) content_->::ServerMessage::ClientSingleMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMRequestPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .ServerMessage.ClientSingleMessage content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMRequestPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .ServerMessage.ClientSingleMessage content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMRequestPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .ServerMessage.ClientSingleMessage content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMRequestPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .ServerMessage.ClientSingleMessage content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMRequestPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMRequestPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMRequestPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMRequestPackage::MergeFrom(const ToGMRequestPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      mutable_content()->::ServerMessage::ClientSingleMessage::MergeFrom(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMRequestPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMRequestPackage::CopyFrom(const ToGMRequestPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMRequestPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void ToGMRequestPackage::Swap(ToGMRequestPackage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMRequestPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMRequestPackage_descriptor_;
  metadata.reflection = ToGMRequestPackage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerMessage

// @@protoc_insertion_point(global_scope)
