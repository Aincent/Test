// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBoss/WorldBossDuplicate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldBoss/WorldBossDuplicate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace WorldBossDuplicate {

namespace {

const ::google::protobuf::Descriptor* ReqWorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckWorldBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckWorldBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDuplicateID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDuplicateID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqDuplicateID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqDuplicateID_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqFitPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqFitPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2WSEnterOrLeave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2WSEnterOrLeave_reflection_ = NULL;
const ::google::protobuf::Descriptor* GS2WSBossDead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GS2WSBossDead_reflection_ = NULL;
const ::google::protobuf::Descriptor* WS2GMBossUIHLState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WS2GMBossUIHLState_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneBossUpdateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneBossUpdateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqBossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqBossDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqBossDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DamageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DamageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldBossUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldBossUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto() {
  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WorldBoss/WorldBossDuplicate.proto");
  GOOGLE_CHECK(file != NULL);
  ReqWorldBossInfo_descriptor_ = file->message_type(0);
  static const int ReqWorldBossInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldBossInfo, flag_),
  };
  ReqWorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWorldBossInfo_descriptor_,
      ReqWorldBossInfo::default_instance_,
      ReqWorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWorldBossInfo));
  AckWorldBossInfo_descriptor_ = file->message_type(1);
  static const int AckWorldBossInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWorldBossInfo, info_),
  };
  AckWorldBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckWorldBossInfo_descriptor_,
      AckWorldBossInfo::default_instance_,
      AckWorldBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWorldBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWorldBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckWorldBossInfo));
  BossData_descriptor_ = file->message_type(2);
  static const int BossData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, cooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, time_),
  };
  BossData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossData_descriptor_,
      BossData::default_instance_,
      BossData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossData));
  ReqDuplicateID_descriptor_ = file->message_type(3);
  static const int ReqDuplicateID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDuplicateID, id_),
  };
  ReqDuplicateID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDuplicateID_descriptor_,
      ReqDuplicateID::default_instance_,
      ReqDuplicateID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDuplicateID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDuplicateID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDuplicateID));
  AckReqDuplicateID_descriptor_ = file->message_type(4);
  static const int AckReqDuplicateID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqDuplicateID, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqDuplicateID, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqDuplicateID, duplicateid_),
  };
  AckReqDuplicateID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqDuplicateID_descriptor_,
      AckReqDuplicateID::default_instance_,
      AckReqDuplicateID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqDuplicateID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqDuplicateID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqDuplicateID));
  AckReqFitPrize_descriptor_ = file->message_type(5);
  static const int AckReqFitPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFitPrize, ret_),
  };
  AckReqFitPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqFitPrize_descriptor_,
      AckReqFitPrize::default_instance_,
      AckReqFitPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFitPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqFitPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqFitPrize));
  BossDamage_descriptor_ = file->message_type(6);
  static const int BossDamage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, bood_),
  };
  BossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDamage_descriptor_,
      BossDamage::default_instance_,
      BossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDamage));
  PrizeInfo_descriptor_ = file->message_type(7);
  static const int PrizeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, damagesort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, lastattackid_),
  };
  PrizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeInfo_descriptor_,
      PrizeInfo::default_instance_,
      PrizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeInfo));
  TimeLimit_descriptor_ = file->message_type(8);
  static const int TimeLimit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimit, time_),
  };
  TimeLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeLimit_descriptor_,
      TimeLimit::default_instance_,
      TimeLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeLimit));
  GS2WSEnterOrLeave_descriptor_ = file->message_type(9);
  static const int GS2WSEnterOrLeave_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSEnterOrLeave, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSEnterOrLeave, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSEnterOrLeave, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSEnterOrLeave, time_),
  };
  GS2WSEnterOrLeave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2WSEnterOrLeave_descriptor_,
      GS2WSEnterOrLeave::default_instance_,
      GS2WSEnterOrLeave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSEnterOrLeave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSEnterOrLeave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2WSEnterOrLeave));
  GS2WSBossDead_descriptor_ = file->message_type(10);
  static const int GS2WSBossDead_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSBossDead, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSBossDead, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSBossDead, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSBossDead, charname_),
  };
  GS2WSBossDead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GS2WSBossDead_descriptor_,
      GS2WSBossDead::default_instance_,
      GS2WSBossDead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSBossDead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GS2WSBossDead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GS2WSBossDead));
  WS2GMBossUIHLState_descriptor_ = file->message_type(11);
  static const int WS2GMBossUIHLState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMBossUIHLState, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMBossUIHLState, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMBossUIHLState, mapid_),
  };
  WS2GMBossUIHLState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WS2GMBossUIHLState_descriptor_,
      WS2GMBossUIHLState::default_instance_,
      WS2GMBossUIHLState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMBossUIHLState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMBossUIHLState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WS2GMBossUIHLState));
  OneBossUpdateData_descriptor_ = file->message_type(12);
  static const int OneBossUpdateData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBossUpdateData, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBossUpdateData, time_),
  };
  OneBossUpdateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneBossUpdateData_descriptor_,
      OneBossUpdateData::default_instance_,
      OneBossUpdateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBossUpdateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneBossUpdateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneBossUpdateData));
  ClientReqBossDamage_descriptor_ = file->message_type(13);
  static const int ClientReqBossDamage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBossDamage, bossid_),
  };
  ClientReqBossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBossDamage_descriptor_,
      ClientReqBossDamage::default_instance_,
      ClientReqBossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBossDamage));
  AckReqBossDamage_descriptor_ = file->message_type(14);
  static const int AckReqBossDamage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqBossDamage, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqBossDamage, selfsort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqBossDamage, selfdamage_),
  };
  AckReqBossDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqBossDamage_descriptor_,
      AckReqBossDamage::default_instance_,
      AckReqBossDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqBossDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqBossDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqBossDamage));
  DamageData_descriptor_ = file->message_type(15);
  static const int DamageData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageData, charid_),
  };
  DamageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DamageData_descriptor_,
      DamageData::default_instance_,
      DamageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DamageData));
  WorldBossUpdate_descriptor_ = file->message_type(16);
  static const int WorldBossUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossUpdate, datas_),
  };
  WorldBossUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldBossUpdate_descriptor_,
      WorldBossUpdate::default_instance_,
      WorldBossUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldBossUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldBossUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWorldBossInfo_descriptor_, &ReqWorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckWorldBossInfo_descriptor_, &AckWorldBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossData_descriptor_, &BossData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDuplicateID_descriptor_, &ReqDuplicateID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqDuplicateID_descriptor_, &AckReqDuplicateID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqFitPrize_descriptor_, &AckReqFitPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDamage_descriptor_, &BossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeInfo_descriptor_, &PrizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeLimit_descriptor_, &TimeLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2WSEnterOrLeave_descriptor_, &GS2WSEnterOrLeave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GS2WSBossDead_descriptor_, &GS2WSBossDead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WS2GMBossUIHLState_descriptor_, &WS2GMBossUIHLState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneBossUpdateData_descriptor_, &OneBossUpdateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBossDamage_descriptor_, &ClientReqBossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqBossDamage_descriptor_, &AckReqBossDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DamageData_descriptor_, &DamageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldBossUpdate_descriptor_, &WorldBossUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto() {
  delete ReqWorldBossInfo::default_instance_;
  delete ReqWorldBossInfo_reflection_;
  delete AckWorldBossInfo::default_instance_;
  delete AckWorldBossInfo_reflection_;
  delete BossData::default_instance_;
  delete BossData_reflection_;
  delete ReqDuplicateID::default_instance_;
  delete ReqDuplicateID_reflection_;
  delete AckReqDuplicateID::default_instance_;
  delete AckReqDuplicateID_reflection_;
  delete AckReqFitPrize::default_instance_;
  delete AckReqFitPrize_reflection_;
  delete BossDamage::default_instance_;
  delete BossDamage_reflection_;
  delete PrizeInfo::default_instance_;
  delete PrizeInfo_reflection_;
  delete TimeLimit::default_instance_;
  delete TimeLimit_reflection_;
  delete GS2WSEnterOrLeave::default_instance_;
  delete GS2WSEnterOrLeave_reflection_;
  delete GS2WSBossDead::default_instance_;
  delete GS2WSBossDead_reflection_;
  delete WS2GMBossUIHLState::default_instance_;
  delete WS2GMBossUIHLState_reflection_;
  delete OneBossUpdateData::default_instance_;
  delete OneBossUpdateData_reflection_;
  delete ClientReqBossDamage::default_instance_;
  delete ClientReqBossDamage_reflection_;
  delete AckReqBossDamage::default_instance_;
  delete AckReqBossDamage_reflection_;
  delete DamageData::default_instance_;
  delete DamageData_reflection_;
  delete WorldBossUpdate::default_instance_;
  delete WorldBossUpdate_reflection_;
}

void protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"WorldBoss/WorldBossDuplicate.proto\022\022Wo"
    "rldBossDuplicate\" \n\020ReqWorldBossInfo\022\014\n\004"
    "flag\030\001 \002(\005\">\n\020AckWorldBossInfo\022*\n\004info\030\001"
    " \003(\0132\034.WorldBossDuplicate.BossData\"\206\001\n\010B"
    "ossData\022\n\n\002id\030\001 \002(\005\022\r\n\005state\030\002 \001(\005\022\013\n\003nu"
    "m\030\003 \001(\005\022\020\n\010cooltime\030\004 \001(\003\022\016\n\006charid\030\005 \001("
    "\003\022\020\n\010charname\030\006 \001(\014\022\020\n\010viplevel\030\007 \001(\005\022\014\n"
    "\004time\030\010 \001(\003\"\034\n\016ReqDuplicateID\022\n\n\002id\030\001 \002("
    "\005\"B\n\021AckReqDuplicateID\022\n\n\002id\030\001 \002(\005\022\014\n\004co"
    "de\030\002 \001(\005\022\023\n\013duplicateid\030\003 \001(\003\"\035\n\016AckReqF"
    "itPrize\022\013\n\003ret\030\001 \002(\005\"*\n\nBossDamage\022\016\n\006bo"
    "ssId\030\001 \003(\005\022\014\n\004bood\030\002 \003(\005\"Y\n\tPrizeInfo\022\020\n"
    "\010charname\030\001 \002(\014\022\020\n\010viplevel\030\002 \001(\005\022\022\n\ndam"
    "agesort\030\003 \001(\005\022\024\n\014lastattackid\030\004 \001(\003\"\031\n\tT"
    "imeLimit\022\014\n\004time\030\001 \002(\003\"N\n\021GS2WSEnterOrLe"
    "ave\022\016\n\006charid\030\001 \002(\003\022\r\n\005mapid\030\002 \001(\005\022\014\n\004fl"
    "ag\030\003 \001(\010\022\014\n\004time\030\004 \001(\003\"R\n\rGS2WSBossDead\022"
    "\r\n\005mapid\030\001 \002(\005\022\016\n\006charid\030\002 \001(\003\022\020\n\010viplev"
    "el\030\003 \001(\005\022\020\n\010charname\030\004 \001(\014\">\n\022WS2GMBossU"
    "IHLState\022\014\n\004flag\030\001 \002(\010\022\013\n\003num\030\002 \002(\005\022\r\n\005m"
    "apID\030\003 \001(\005\"1\n\021OneBossUpdateData\022\016\n\006bossi"
    "d\030\001 \001(\005\022\014\n\004time\030\002 \001(\004\"%\n\023ClientReqBossDa"
    "mage\022\016\n\006bossId\030\001 \002(\005\"g\n\020AckReqBossDamage"
    "\022-\n\005infos\030\001 \003(\0132\036.WorldBossDuplicate.Dam"
    "ageData\022\020\n\010selfsort\030\002 \001(\005\022\022\n\nselfdamage\030"
    "\003 \001(\002\"P\n\nDamageData\022\020\n\010charname\030\001 \002(\014\022\020\n"
    "\010viplevel\030\002 \001(\005\022\016\n\006damage\030\003 \001(\002\022\016\n\006chari"
    "d\030\004 \001(\003\"G\n\017WorldBossUpdate\0224\n\005datas\030\001 \003("
    "\0132%.WorldBossDuplicate.OneBossUpdateData", 1160);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WorldBoss/WorldBossDuplicate.proto", &protobuf_RegisterTypes);
  ReqWorldBossInfo::default_instance_ = new ReqWorldBossInfo();
  AckWorldBossInfo::default_instance_ = new AckWorldBossInfo();
  BossData::default_instance_ = new BossData();
  ReqDuplicateID::default_instance_ = new ReqDuplicateID();
  AckReqDuplicateID::default_instance_ = new AckReqDuplicateID();
  AckReqFitPrize::default_instance_ = new AckReqFitPrize();
  BossDamage::default_instance_ = new BossDamage();
  PrizeInfo::default_instance_ = new PrizeInfo();
  TimeLimit::default_instance_ = new TimeLimit();
  GS2WSEnterOrLeave::default_instance_ = new GS2WSEnterOrLeave();
  GS2WSBossDead::default_instance_ = new GS2WSBossDead();
  WS2GMBossUIHLState::default_instance_ = new WS2GMBossUIHLState();
  OneBossUpdateData::default_instance_ = new OneBossUpdateData();
  ClientReqBossDamage::default_instance_ = new ClientReqBossDamage();
  AckReqBossDamage::default_instance_ = new AckReqBossDamage();
  DamageData::default_instance_ = new DamageData();
  WorldBossUpdate::default_instance_ = new WorldBossUpdate();
  ReqWorldBossInfo::default_instance_->InitAsDefaultInstance();
  AckWorldBossInfo::default_instance_->InitAsDefaultInstance();
  BossData::default_instance_->InitAsDefaultInstance();
  ReqDuplicateID::default_instance_->InitAsDefaultInstance();
  AckReqDuplicateID::default_instance_->InitAsDefaultInstance();
  AckReqFitPrize::default_instance_->InitAsDefaultInstance();
  BossDamage::default_instance_->InitAsDefaultInstance();
  PrizeInfo::default_instance_->InitAsDefaultInstance();
  TimeLimit::default_instance_->InitAsDefaultInstance();
  GS2WSEnterOrLeave::default_instance_->InitAsDefaultInstance();
  GS2WSBossDead::default_instance_->InitAsDefaultInstance();
  WS2GMBossUIHLState::default_instance_->InitAsDefaultInstance();
  OneBossUpdateData::default_instance_->InitAsDefaultInstance();
  ClientReqBossDamage::default_instance_->InitAsDefaultInstance();
  AckReqBossDamage::default_instance_->InitAsDefaultInstance();
  DamageData::default_instance_->InitAsDefaultInstance();
  WorldBossUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldBoss_2fWorldBossDuplicate_2eproto {
  StaticDescriptorInitializer_WorldBoss_2fWorldBossDuplicate_2eproto() {
    protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  }
} static_descriptor_initializer_WorldBoss_2fWorldBossDuplicate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqWorldBossInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

ReqWorldBossInfo::ReqWorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWorldBossInfo::InitAsDefaultInstance() {
}

ReqWorldBossInfo::ReqWorldBossInfo(const ReqWorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWorldBossInfo::~ReqWorldBossInfo() {
  SharedDtor();
}

void ReqWorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWorldBossInfo_descriptor_;
}

const ReqWorldBossInfo& ReqWorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

ReqWorldBossInfo* ReqWorldBossInfo::default_instance_ = NULL;

ReqWorldBossInfo* ReqWorldBossInfo::New() const {
  return new ReqWorldBossInfo;
}

void ReqWorldBossInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWorldBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWorldBossInfo::MergeFrom(const ReqWorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWorldBossInfo::CopyFrom(const ReqWorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWorldBossInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqWorldBossInfo::Swap(ReqWorldBossInfo* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWorldBossInfo_descriptor_;
  metadata.reflection = ReqWorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckWorldBossInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

AckWorldBossInfo::AckWorldBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckWorldBossInfo::InitAsDefaultInstance() {
}

AckWorldBossInfo::AckWorldBossInfo(const AckWorldBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckWorldBossInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckWorldBossInfo::~AckWorldBossInfo() {
  SharedDtor();
}

void AckWorldBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckWorldBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckWorldBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckWorldBossInfo_descriptor_;
}

const AckWorldBossInfo& AckWorldBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

AckWorldBossInfo* AckWorldBossInfo::default_instance_ = NULL;

AckWorldBossInfo* AckWorldBossInfo::New() const {
  return new AckWorldBossInfo;
}

void AckWorldBossInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckWorldBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WorldBossDuplicate.BossData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckWorldBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .WorldBossDuplicate.BossData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckWorldBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WorldBossDuplicate.BossData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckWorldBossInfo::ByteSize() const {
  int total_size = 0;

  // repeated .WorldBossDuplicate.BossData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckWorldBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckWorldBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckWorldBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckWorldBossInfo::MergeFrom(const AckWorldBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckWorldBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWorldBossInfo::CopyFrom(const AckWorldBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWorldBossInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void AckWorldBossInfo::Swap(AckWorldBossInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckWorldBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckWorldBossInfo_descriptor_;
  metadata.reflection = AckWorldBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossData::kIdFieldNumber;
const int BossData::kStateFieldNumber;
const int BossData::kNumFieldNumber;
const int BossData::kCooltimeFieldNumber;
const int BossData::kCharidFieldNumber;
const int BossData::kCharnameFieldNumber;
const int BossData::kViplevelFieldNumber;
const int BossData::kTimeFieldNumber;
#endif  // !_MSC_VER

BossData::BossData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossData::InitAsDefaultInstance() {
}

BossData::BossData(const BossData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  num_ = 0;
  cooltime_ = GOOGLE_LONGLONG(0);
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossData::~BossData() {
  SharedDtor();
}

void BossData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void BossData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossData_descriptor_;
}

const BossData& BossData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

BossData* BossData::default_instance_ = NULL;

BossData* BossData::New() const {
  return new BossData;
}

void BossData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
    num_ = 0;
    cooltime_ = GOOGLE_LONGLONG(0);
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    viplevel_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cooltime;
        break;
      }

      // optional int64 cooltime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cooltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cooltime_)));
          set_has_cooltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional int64 charid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_charname;
        break;
      }

      // optional bytes charname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional int64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 cooltime = 4;
  if (has_cooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cooltime(), output);
  }

  // optional int64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->charid(), output);
  }

  // optional bytes charname = 6;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->charname(), output);
  }

  // optional int32 viplevel = 7;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplevel(), output);
  }

  // optional int64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 cooltime = 4;
  if (has_cooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cooltime(), target);
  }

  // optional int64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->charid(), target);
  }

  // optional bytes charname = 6;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->charname(), target);
  }

  // optional int32 viplevel = 7;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplevel(), target);
  }

  // optional int64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 cooltime = 4;
    if (has_cooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cooltime());
    }

    // optional int64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional bytes charname = 6;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // optional int32 viplevel = 7;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossData::MergeFrom(const BossData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_cooltime()) {
      set_cooltime(from.cooltime());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossData::CopyFrom(const BossData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossData::Swap(BossData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(num_, other->num_);
    std::swap(cooltime_, other->cooltime_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossData_descriptor_;
  metadata.reflection = BossData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDuplicateID::kIdFieldNumber;
#endif  // !_MSC_VER

ReqDuplicateID::ReqDuplicateID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDuplicateID::InitAsDefaultInstance() {
}

ReqDuplicateID::ReqDuplicateID(const ReqDuplicateID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDuplicateID::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDuplicateID::~ReqDuplicateID() {
  SharedDtor();
}

void ReqDuplicateID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDuplicateID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDuplicateID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDuplicateID_descriptor_;
}

const ReqDuplicateID& ReqDuplicateID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

ReqDuplicateID* ReqDuplicateID::default_instance_ = NULL;

ReqDuplicateID* ReqDuplicateID::New() const {
  return new ReqDuplicateID;
}

void ReqDuplicateID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDuplicateID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDuplicateID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDuplicateID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDuplicateID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDuplicateID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDuplicateID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDuplicateID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDuplicateID::MergeFrom(const ReqDuplicateID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDuplicateID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDuplicateID::CopyFrom(const ReqDuplicateID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDuplicateID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDuplicateID::Swap(ReqDuplicateID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDuplicateID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDuplicateID_descriptor_;
  metadata.reflection = ReqDuplicateID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqDuplicateID::kIdFieldNumber;
const int AckReqDuplicateID::kCodeFieldNumber;
const int AckReqDuplicateID::kDuplicateidFieldNumber;
#endif  // !_MSC_VER

AckReqDuplicateID::AckReqDuplicateID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqDuplicateID::InitAsDefaultInstance() {
}

AckReqDuplicateID::AckReqDuplicateID(const AckReqDuplicateID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqDuplicateID::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  code_ = 0;
  duplicateid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqDuplicateID::~AckReqDuplicateID() {
  SharedDtor();
}

void AckReqDuplicateID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqDuplicateID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqDuplicateID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqDuplicateID_descriptor_;
}

const AckReqDuplicateID& AckReqDuplicateID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

AckReqDuplicateID* AckReqDuplicateID::default_instance_ = NULL;

AckReqDuplicateID* AckReqDuplicateID::New() const {
  return new AckReqDuplicateID;
}

void AckReqDuplicateID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    code_ = 0;
    duplicateid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqDuplicateID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duplicateid;
        break;
      }

      // optional int64 duplicateid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqDuplicateID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional int64 duplicateid = 3;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->duplicateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqDuplicateID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional int64 duplicateid = 3;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->duplicateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqDuplicateID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int64 duplicateid = 3;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplicateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqDuplicateID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqDuplicateID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqDuplicateID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqDuplicateID::MergeFrom(const AckReqDuplicateID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqDuplicateID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqDuplicateID::CopyFrom(const AckReqDuplicateID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqDuplicateID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqDuplicateID::Swap(AckReqDuplicateID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqDuplicateID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqDuplicateID_descriptor_;
  metadata.reflection = AckReqDuplicateID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqFitPrize::kRetFieldNumber;
#endif  // !_MSC_VER

AckReqFitPrize::AckReqFitPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqFitPrize::InitAsDefaultInstance() {
}

AckReqFitPrize::AckReqFitPrize(const AckReqFitPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqFitPrize::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqFitPrize::~AckReqFitPrize() {
  SharedDtor();
}

void AckReqFitPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqFitPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqFitPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqFitPrize_descriptor_;
}

const AckReqFitPrize& AckReqFitPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

AckReqFitPrize* AckReqFitPrize::default_instance_ = NULL;

AckReqFitPrize* AckReqFitPrize::New() const {
  return new AckReqFitPrize;
}

void AckReqFitPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqFitPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqFitPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqFitPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqFitPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqFitPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqFitPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqFitPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqFitPrize::MergeFrom(const AckReqFitPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqFitPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqFitPrize::CopyFrom(const AckReqFitPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqFitPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqFitPrize::Swap(AckReqFitPrize* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqFitPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqFitPrize_descriptor_;
  metadata.reflection = AckReqFitPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamage::kBossIdFieldNumber;
const int BossDamage::kBoodFieldNumber;
#endif  // !_MSC_VER

BossDamage::BossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDamage::InitAsDefaultInstance() {
}

BossDamage::BossDamage(const BossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDamage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamage::~BossDamage() {
  SharedDtor();
}

void BossDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDamage_descriptor_;
}

const BossDamage& BossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

BossDamage* BossDamage::default_instance_ = NULL;

BossDamage* BossDamage::New() const {
  return new BossDamage;
}

void BossDamage::Clear() {
  bossid_.Clear();
  bood_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_bossid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bossid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_bossId;
        if (input->ExpectTag(16)) goto parse_bood;
        break;
      }

      // repeated int32 bood = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_bood())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bood())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bood;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 bossId = 1;
  for (int i = 0; i < this->bossid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->bossid(i), output);
  }

  // repeated int32 bood = 2;
  for (int i = 0; i < this->bood_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->bood(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 bossId = 1;
  for (int i = 0; i < this->bossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->bossid(i), target);
  }

  // repeated int32 bood = 2;
  for (int i = 0; i < this->bood_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->bood(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDamage::ByteSize() const {
  int total_size = 0;

  // repeated int32 bossId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bossid(i));
    }
    total_size += 1 * this->bossid_size() + data_size;
  }

  // repeated int32 bood = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->bood_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bood(i));
    }
    total_size += 1 * this->bood_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDamage::MergeFrom(const BossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossid_.MergeFrom(from.bossid_);
  bood_.MergeFrom(from.bood_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDamage::CopyFrom(const BossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamage::IsInitialized() const {

  return true;
}

void BossDamage::Swap(BossDamage* other) {
  if (other != this) {
    bossid_.Swap(&other->bossid_);
    bood_.Swap(&other->bood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDamage_descriptor_;
  metadata.reflection = BossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeInfo::kCharnameFieldNumber;
const int PrizeInfo::kViplevelFieldNumber;
const int PrizeInfo::kDamagesortFieldNumber;
const int PrizeInfo::kLastattackidFieldNumber;
#endif  // !_MSC_VER

PrizeInfo::PrizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeInfo::InitAsDefaultInstance() {
}

PrizeInfo::PrizeInfo(const PrizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeInfo::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  damagesort_ = 0;
  lastattackid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeInfo::~PrizeInfo() {
  SharedDtor();
}

void PrizeInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void PrizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeInfo_descriptor_;
}

const PrizeInfo& PrizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

PrizeInfo* PrizeInfo::default_instance_ = NULL;

PrizeInfo* PrizeInfo::New() const {
  return new PrizeInfo;
}

void PrizeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    viplevel_ = 0;
    damagesort_ = 0;
    lastattackid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damagesort;
        break;
      }

      // optional int32 damagesort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damagesort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagesort_)));
          set_has_damagesort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastattackid;
        break;
      }

      // optional int64 lastattackid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastattackid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastattackid_)));
          set_has_lastattackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->charname(), output);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }

  // optional int32 damagesort = 3;
  if (has_damagesort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damagesort(), output);
  }

  // optional int64 lastattackid = 4;
  if (has_lastattackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lastattackid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes charname = 1;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->charname(), target);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }

  // optional int32 damagesort = 3;
  if (has_damagesort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damagesort(), target);
  }

  // optional int64 lastattackid = 4;
  if (has_lastattackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lastattackid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // optional int32 viplevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 damagesort = 3;
    if (has_damagesort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagesort());
    }

    // optional int64 lastattackid = 4;
    if (has_lastattackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastattackid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeInfo::MergeFrom(const PrizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_damagesort()) {
      set_damagesort(from.damagesort());
    }
    if (from.has_lastattackid()) {
      set_lastattackid(from.lastattackid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeInfo::CopyFrom(const PrizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrizeInfo::Swap(PrizeInfo* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(damagesort_, other->damagesort_);
    std::swap(lastattackid_, other->lastattackid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeInfo_descriptor_;
  metadata.reflection = PrizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLimit::kTimeFieldNumber;
#endif  // !_MSC_VER

TimeLimit::TimeLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeLimit::InitAsDefaultInstance() {
}

TimeLimit::TimeLimit(const TimeLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLimit::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLimit::~TimeLimit() {
  SharedDtor();
}

void TimeLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeLimit_descriptor_;
}

const TimeLimit& TimeLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

TimeLimit* TimeLimit::default_instance_ = NULL;

TimeLimit* TimeLimit::New() const {
  return new TimeLimit;
}

void TimeLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeLimit::MergeFrom(const TimeLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeLimit::CopyFrom(const TimeLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TimeLimit::Swap(TimeLimit* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeLimit_descriptor_;
  metadata.reflection = TimeLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2WSEnterOrLeave::kCharidFieldNumber;
const int GS2WSEnterOrLeave::kMapidFieldNumber;
const int GS2WSEnterOrLeave::kFlagFieldNumber;
const int GS2WSEnterOrLeave::kTimeFieldNumber;
#endif  // !_MSC_VER

GS2WSEnterOrLeave::GS2WSEnterOrLeave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2WSEnterOrLeave::InitAsDefaultInstance() {
}

GS2WSEnterOrLeave::GS2WSEnterOrLeave(const GS2WSEnterOrLeave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2WSEnterOrLeave::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  flag_ = false;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2WSEnterOrLeave::~GS2WSEnterOrLeave() {
  SharedDtor();
}

void GS2WSEnterOrLeave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GS2WSEnterOrLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2WSEnterOrLeave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2WSEnterOrLeave_descriptor_;
}

const GS2WSEnterOrLeave& GS2WSEnterOrLeave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

GS2WSEnterOrLeave* GS2WSEnterOrLeave::default_instance_ = NULL;

GS2WSEnterOrLeave* GS2WSEnterOrLeave::New() const {
  return new GS2WSEnterOrLeave;
}

void GS2WSEnterOrLeave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
    flag_ = false;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2WSEnterOrLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional bool flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2WSEnterOrLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flag(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2WSEnterOrLeave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flag(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2WSEnterOrLeave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional bool flag = 3;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2WSEnterOrLeave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2WSEnterOrLeave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2WSEnterOrLeave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2WSEnterOrLeave::MergeFrom(const GS2WSEnterOrLeave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2WSEnterOrLeave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2WSEnterOrLeave::CopyFrom(const GS2WSEnterOrLeave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2WSEnterOrLeave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2WSEnterOrLeave::Swap(GS2WSEnterOrLeave* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(flag_, other->flag_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2WSEnterOrLeave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2WSEnterOrLeave_descriptor_;
  metadata.reflection = GS2WSEnterOrLeave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GS2WSBossDead::kMapidFieldNumber;
const int GS2WSBossDead::kCharidFieldNumber;
const int GS2WSBossDead::kViplevelFieldNumber;
const int GS2WSBossDead::kCharnameFieldNumber;
#endif  // !_MSC_VER

GS2WSBossDead::GS2WSBossDead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GS2WSBossDead::InitAsDefaultInstance() {
}

GS2WSBossDead::GS2WSBossDead(const GS2WSBossDead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GS2WSBossDead::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GS2WSBossDead::~GS2WSBossDead() {
  SharedDtor();
}

void GS2WSBossDead::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void GS2WSBossDead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GS2WSBossDead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GS2WSBossDead_descriptor_;
}

const GS2WSBossDead& GS2WSBossDead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

GS2WSBossDead* GS2WSBossDead::default_instance_ = NULL;

GS2WSBossDead* GS2WSBossDead::New() const {
  return new GS2WSBossDead;
}

void GS2WSBossDead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    viplevel_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GS2WSBossDead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charname;
        break;
      }

      // optional bytes charname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GS2WSBossDead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional int32 viplevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }

  // optional bytes charname = 4;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GS2WSBossDead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional int32 viplevel = 3;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplevel(), target);
  }

  // optional bytes charname = 4;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GS2WSBossDead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 viplevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional bytes charname = 4;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GS2WSBossDead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GS2WSBossDead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GS2WSBossDead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GS2WSBossDead::MergeFrom(const GS2WSBossDead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GS2WSBossDead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GS2WSBossDead::CopyFrom(const GS2WSBossDead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GS2WSBossDead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GS2WSBossDead::Swap(GS2WSBossDead* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GS2WSBossDead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GS2WSBossDead_descriptor_;
  metadata.reflection = GS2WSBossDead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WS2GMBossUIHLState::kFlagFieldNumber;
const int WS2GMBossUIHLState::kNumFieldNumber;
const int WS2GMBossUIHLState::kMapIDFieldNumber;
#endif  // !_MSC_VER

WS2GMBossUIHLState::WS2GMBossUIHLState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WS2GMBossUIHLState::InitAsDefaultInstance() {
}

WS2GMBossUIHLState::WS2GMBossUIHLState(const WS2GMBossUIHLState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WS2GMBossUIHLState::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  num_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WS2GMBossUIHLState::~WS2GMBossUIHLState() {
  SharedDtor();
}

void WS2GMBossUIHLState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WS2GMBossUIHLState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WS2GMBossUIHLState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WS2GMBossUIHLState_descriptor_;
}

const WS2GMBossUIHLState& WS2GMBossUIHLState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

WS2GMBossUIHLState* WS2GMBossUIHLState::default_instance_ = NULL;

WS2GMBossUIHLState* WS2GMBossUIHLState::New() const {
  return new WS2GMBossUIHLState;
}

void WS2GMBossUIHLState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
    num_ = 0;
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WS2GMBossUIHLState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapID;
        break;
      }

      // optional int32 mapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WS2GMBossUIHLState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 mapID = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WS2GMBossUIHLState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 mapID = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WS2GMBossUIHLState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 mapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WS2GMBossUIHLState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WS2GMBossUIHLState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WS2GMBossUIHLState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WS2GMBossUIHLState::MergeFrom(const WS2GMBossUIHLState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WS2GMBossUIHLState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WS2GMBossUIHLState::CopyFrom(const WS2GMBossUIHLState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WS2GMBossUIHLState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WS2GMBossUIHLState::Swap(WS2GMBossUIHLState* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(num_, other->num_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WS2GMBossUIHLState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WS2GMBossUIHLState_descriptor_;
  metadata.reflection = WS2GMBossUIHLState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneBossUpdateData::kBossidFieldNumber;
const int OneBossUpdateData::kTimeFieldNumber;
#endif  // !_MSC_VER

OneBossUpdateData::OneBossUpdateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneBossUpdateData::InitAsDefaultInstance() {
}

OneBossUpdateData::OneBossUpdateData(const OneBossUpdateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneBossUpdateData::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneBossUpdateData::~OneBossUpdateData() {
  SharedDtor();
}

void OneBossUpdateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneBossUpdateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneBossUpdateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneBossUpdateData_descriptor_;
}

const OneBossUpdateData& OneBossUpdateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

OneBossUpdateData* OneBossUpdateData::default_instance_ = NULL;

OneBossUpdateData* OneBossUpdateData::New() const {
  return new OneBossUpdateData;
}

void OneBossUpdateData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneBossUpdateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bossid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneBossUpdateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bossid = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneBossUpdateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bossid = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneBossUpdateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bossid = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneBossUpdateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneBossUpdateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneBossUpdateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneBossUpdateData::MergeFrom(const OneBossUpdateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneBossUpdateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneBossUpdateData::CopyFrom(const OneBossUpdateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneBossUpdateData::IsInitialized() const {

  return true;
}

void OneBossUpdateData::Swap(OneBossUpdateData* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneBossUpdateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneBossUpdateData_descriptor_;
  metadata.reflection = OneBossUpdateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqBossDamage::kBossIdFieldNumber;
#endif  // !_MSC_VER

ClientReqBossDamage::ClientReqBossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBossDamage::InitAsDefaultInstance() {
}

ClientReqBossDamage::ClientReqBossDamage(const ClientReqBossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBossDamage::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBossDamage::~ClientReqBossDamage() {
  SharedDtor();
}

void ClientReqBossDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBossDamage_descriptor_;
}

const ClientReqBossDamage& ClientReqBossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

ClientReqBossDamage* ClientReqBossDamage::default_instance_ = NULL;

ClientReqBossDamage* ClientReqBossDamage::New() const {
  return new ClientReqBossDamage;
}

void ClientReqBossDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBossDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBossDamage::MergeFrom(const ClientReqBossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBossDamage::CopyFrom(const ClientReqBossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBossDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqBossDamage::Swap(ClientReqBossDamage* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBossDamage_descriptor_;
  metadata.reflection = ClientReqBossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqBossDamage::kInfosFieldNumber;
const int AckReqBossDamage::kSelfsortFieldNumber;
const int AckReqBossDamage::kSelfdamageFieldNumber;
#endif  // !_MSC_VER

AckReqBossDamage::AckReqBossDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqBossDamage::InitAsDefaultInstance() {
}

AckReqBossDamage::AckReqBossDamage(const AckReqBossDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqBossDamage::SharedCtor() {
  _cached_size_ = 0;
  selfsort_ = 0;
  selfdamage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqBossDamage::~AckReqBossDamage() {
  SharedDtor();
}

void AckReqBossDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqBossDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqBossDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqBossDamage_descriptor_;
}

const AckReqBossDamage& AckReqBossDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

AckReqBossDamage* AckReqBossDamage::default_instance_ = NULL;

AckReqBossDamage* AckReqBossDamage::New() const {
  return new AckReqBossDamage;
}

void AckReqBossDamage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    selfsort_ = 0;
    selfdamage_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqBossDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WorldBossDuplicate.DamageData infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_selfsort;
        break;
      }

      // optional int32 selfsort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfsort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfsort_)));
          set_has_selfsort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_selfdamage;
        break;
      }

      // optional float selfdamage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_selfdamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &selfdamage_)));
          set_has_selfdamage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqBossDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .WorldBossDuplicate.DamageData infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional int32 selfsort = 2;
  if (has_selfsort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selfsort(), output);
  }

  // optional float selfdamage = 3;
  if (has_selfdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->selfdamage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqBossDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WorldBossDuplicate.DamageData infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional int32 selfsort = 2;
  if (has_selfsort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selfsort(), target);
  }

  // optional float selfdamage = 3;
  if (has_selfdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->selfdamage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqBossDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 selfsort = 2;
    if (has_selfsort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfsort());
    }

    // optional float selfdamage = 3;
    if (has_selfdamage()) {
      total_size += 1 + 4;
    }

  }
  // repeated .WorldBossDuplicate.DamageData infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqBossDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqBossDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqBossDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqBossDamage::MergeFrom(const AckReqBossDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfsort()) {
      set_selfsort(from.selfsort());
    }
    if (from.has_selfdamage()) {
      set_selfdamage(from.selfdamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqBossDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqBossDamage::CopyFrom(const AckReqBossDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqBossDamage::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void AckReqBossDamage::Swap(AckReqBossDamage* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(selfsort_, other->selfsort_);
    std::swap(selfdamage_, other->selfdamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqBossDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqBossDamage_descriptor_;
  metadata.reflection = AckReqBossDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DamageData::kCharnameFieldNumber;
const int DamageData::kViplevelFieldNumber;
const int DamageData::kDamageFieldNumber;
const int DamageData::kCharidFieldNumber;
#endif  // !_MSC_VER

DamageData::DamageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DamageData::InitAsDefaultInstance() {
}

DamageData::DamageData(const DamageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DamageData::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  damage_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DamageData::~DamageData() {
  SharedDtor();
}

void DamageData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void DamageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DamageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageData_descriptor_;
}

const DamageData& DamageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

DamageData* DamageData::default_instance_ = NULL;

DamageData* DamageData::New() const {
  return new DamageData;
}

void DamageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    viplevel_ = 0;
    damage_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DamageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_damage;
        break;
      }

      // optional float damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional int64 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DamageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->charname(), output);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }

  // optional float damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->damage(), output);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DamageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes charname = 1;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->charname(), target);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }

  // optional float damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->damage(), target);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DamageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

    // optional int32 viplevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional float damage = 3;
    if (has_damage()) {
      total_size += 1 + 4;
    }

    // optional int64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DamageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DamageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DamageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DamageData::MergeFrom(const DamageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DamageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DamageData::CopyFrom(const DamageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DamageData::Swap(DamageData* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(damage_, other->damage_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DamageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DamageData_descriptor_;
  metadata.reflection = DamageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossUpdate::kDatasFieldNumber;
#endif  // !_MSC_VER

WorldBossUpdate::WorldBossUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldBossUpdate::InitAsDefaultInstance() {
}

WorldBossUpdate::WorldBossUpdate(const WorldBossUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossUpdate::~WorldBossUpdate() {
  SharedDtor();
}

void WorldBossUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldBossUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldBossUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldBossUpdate_descriptor_;
}

const WorldBossUpdate& WorldBossUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  return *default_instance_;
}

WorldBossUpdate* WorldBossUpdate::default_instance_ = NULL;

WorldBossUpdate* WorldBossUpdate::New() const {
  return new WorldBossUpdate;
}

void WorldBossUpdate::Clear() {
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldBossUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WorldBossDuplicate.OneBossUpdateData datas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .WorldBossDuplicate.OneBossUpdateData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldBossUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WorldBossDuplicate.OneBossUpdateData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldBossUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .WorldBossDuplicate.OneBossUpdateData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldBossUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldBossUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldBossUpdate::MergeFrom(const WorldBossUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldBossUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldBossUpdate::CopyFrom(const WorldBossUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossUpdate::IsInitialized() const {

  return true;
}

void WorldBossUpdate::Swap(WorldBossUpdate* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldBossUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldBossUpdate_descriptor_;
  metadata.reflection = WorldBossUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WorldBossDuplicate

// @@protoc_insertion_point(global_scope)
