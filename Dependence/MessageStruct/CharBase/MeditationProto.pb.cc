// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharBase/MeditationProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharBase/MeditationProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MeditationProto {

namespace {

const ::google::protobuf::Descriptor* ReqMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* simMeditationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  simMeditationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInvitMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInvitMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckInvitMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckInvitMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendInvitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendInvitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReplyMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReplyMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReplyMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReplyMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqChangeMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqChangeMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastMeditation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastMeditation_reflection_ = NULL;
const ::google::protobuf::Descriptor* NexusChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NexusChange_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharBase_2fMeditationProto_2eproto() {
  protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharBase/MeditationProto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqMeditation_descriptor_ = file->message_type(0);
  static const int ReqMeditation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMeditation, type_),
  };
  ReqMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMeditation_descriptor_,
      ReqMeditation::default_instance_,
      ReqMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMeditation));
  RetMeditation_descriptor_ = file->message_type(1);
  static const int RetMeditation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMeditation, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMeditation, girlwarkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMeditation, flag_),
  };
  RetMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetMeditation_descriptor_,
      RetMeditation::default_instance_,
      RetMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetMeditation));
  SingleMeditation_descriptor_ = file->message_type(2);
  static const int SingleMeditation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMeditation, charkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMeditation, girlwarkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMeditation, flag_),
  };
  SingleMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleMeditation_descriptor_,
      SingleMeditation::default_instance_,
      SingleMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleMeditation));
  simMeditationInfo_descriptor_ = file->message_type(3);
  static const int simMeditationInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simMeditationInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simMeditationInfo, zhenqi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simMeditationInfo, intimate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simMeditationInfo, rate_),
  };
  simMeditationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      simMeditationInfo_descriptor_,
      simMeditationInfo::default_instance_,
      simMeditationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simMeditationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(simMeditationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(simMeditationInfo));
  ReqInvitMeditation_descriptor_ = file->message_type(4);
  static const int ReqInvitMeditation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInvitMeditation, targetid_),
  };
  ReqInvitMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInvitMeditation_descriptor_,
      ReqInvitMeditation::default_instance_,
      ReqInvitMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInvitMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInvitMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInvitMeditation));
  AckInvitMeditation_descriptor_ = file->message_type(5);
  static const int AckInvitMeditation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInvitMeditation, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInvitMeditation, targetid_),
  };
  AckInvitMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckInvitMeditation_descriptor_,
      AckInvitMeditation::default_instance_,
      AckInvitMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInvitMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInvitMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckInvitMeditation));
  SendInvitInfo_descriptor_ = file->message_type(6);
  static const int SendInvitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitInfo, charname_),
  };
  SendInvitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendInvitInfo_descriptor_,
      SendInvitInfo::default_instance_,
      SendInvitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendInvitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendInvitInfo));
  ReqReplyMeditation_descriptor_ = file->message_type(7);
  static const int ReqReplyMeditation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyMeditation, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyMeditation, charid_),
  };
  ReqReplyMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReplyMeditation_descriptor_,
      ReqReplyMeditation::default_instance_,
      ReqReplyMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReplyMeditation));
  AckReplyMeditation_descriptor_ = file->message_type(8);
  static const int AckReplyMeditation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReplyMeditation, code_),
  };
  AckReplyMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReplyMeditation_descriptor_,
      AckReplyMeditation::default_instance_,
      AckReplyMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReplyMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReplyMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReplyMeditation));
  AckReqChangeMeditation_descriptor_ = file->message_type(9);
  static const int AckReqChangeMeditation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqChangeMeditation, code_),
  };
  AckReqChangeMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqChangeMeditation_descriptor_,
      AckReqChangeMeditation::default_instance_,
      AckReqChangeMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqChangeMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqChangeMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqChangeMeditation));
  BroadcastMeditation_descriptor_ = file->message_type(10);
  static const int BroadcastMeditation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMeditation, charkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMeditation, girlwarkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMeditation, targetkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMeditation, targetgirlwarkey_),
  };
  BroadcastMeditation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastMeditation_descriptor_,
      BroadcastMeditation::default_instance_,
      BroadcastMeditation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMeditation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMeditation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastMeditation));
  NexusChange_descriptor_ = file->message_type(11);
  static const int NexusChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NexusChange, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NexusChange, type_),
  };
  NexusChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NexusChange_descriptor_,
      NexusChange::default_instance_,
      NexusChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NexusChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NexusChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NexusChange));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharBase_2fMeditationProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMeditation_descriptor_, &ReqMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetMeditation_descriptor_, &RetMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleMeditation_descriptor_, &SingleMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    simMeditationInfo_descriptor_, &simMeditationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInvitMeditation_descriptor_, &ReqInvitMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckInvitMeditation_descriptor_, &AckInvitMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendInvitInfo_descriptor_, &SendInvitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReplyMeditation_descriptor_, &ReqReplyMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReplyMeditation_descriptor_, &AckReplyMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqChangeMeditation_descriptor_, &AckReqChangeMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastMeditation_descriptor_, &BroadcastMeditation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NexusChange_descriptor_, &NexusChange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharBase_2fMeditationProto_2eproto() {
  delete ReqMeditation::default_instance_;
  delete ReqMeditation_reflection_;
  delete RetMeditation::default_instance_;
  delete RetMeditation_reflection_;
  delete SingleMeditation::default_instance_;
  delete SingleMeditation_reflection_;
  delete simMeditationInfo::default_instance_;
  delete simMeditationInfo_reflection_;
  delete ReqInvitMeditation::default_instance_;
  delete ReqInvitMeditation_reflection_;
  delete AckInvitMeditation::default_instance_;
  delete AckInvitMeditation_reflection_;
  delete SendInvitInfo::default_instance_;
  delete SendInvitInfo_reflection_;
  delete ReqReplyMeditation::default_instance_;
  delete ReqReplyMeditation_reflection_;
  delete AckReplyMeditation::default_instance_;
  delete AckReplyMeditation_reflection_;
  delete AckReqChangeMeditation::default_instance_;
  delete AckReqChangeMeditation_reflection_;
  delete BroadcastMeditation::default_instance_;
  delete BroadcastMeditation_reflection_;
  delete NexusChange::default_instance_;
  delete NexusChange_reflection_;
}

void protobuf_AddDesc_CharBase_2fMeditationProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CharBase::protobuf_AddDesc_CharBase_2fCharAttribute_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036CharBase/MeditationProto.proto\022\017Medita"
    "tionProto\032\034CharBase/CharAttribute.proto\""
    "\035\n\rReqMeditation\022\014\n\004type\030\001 \002(\005\"@\n\rRetMed"
    "itation\022\r\n\005error\030\001 \002(\005\022\022\n\ngirlwarkey\030\002 \001"
    "(\005\022\014\n\004flag\030\003 \001(\010\"E\n\020SingleMeditation\022\017\n\007"
    "charkey\030\001 \002(\005\022\022\n\ngirlwarkey\030\002 \001(\005\022\014\n\004fla"
    "g\030\003 \001(\010\"P\n\021simMeditationInfo\022\013\n\003exp\030\001 \002("
    "\005\022\016\n\006zhenqi\030\002 \001(\005\022\020\n\010intimate\030\003 \001(\005\022\014\n\004r"
    "ate\030\004 \001(\005\"&\n\022ReqInvitMeditation\022\020\n\010targe"
    "tid\030\001 \002(\003\"4\n\022AckInvitMeditation\022\014\n\004code\030"
    "\001 \002(\005\022\020\n\010targetid\030\002 \001(\003\"C\n\rSendInvitInfo"
    "\022\016\n\006charid\030\001 \002(\003\022\020\n\010viplevel\030\002 \001(\005\022\020\n\010ch"
    "arname\030\003 \001(\014\"2\n\022ReqReplyMeditation\022\014\n\004fl"
    "ag\030\001 \002(\010\022\016\n\006charid\030\002 \001(\003\"\"\n\022AckReplyMedi"
    "tation\022\014\n\004code\030\001 \002(\005\"&\n\026AckReqChangeMedi"
    "tation\022\014\n\004code\030\001 \002(\005\"g\n\023BroadcastMeditat"
    "ion\022\017\n\007charkey\030\001 \002(\005\022\022\n\ngirlwarkey\030\002 \001(\005"
    "\022\021\n\ttargetkey\030\003 \001(\005\022\030\n\020targetgirlwarkey\030"
    "\004 \001(\005\"-\n\013NexusChange\022\020\n\010targetid\030\001 \002(\003\022\014"
    "\n\004type\030\002 \001(\005", 772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharBase/MeditationProto.proto", &protobuf_RegisterTypes);
  ReqMeditation::default_instance_ = new ReqMeditation();
  RetMeditation::default_instance_ = new RetMeditation();
  SingleMeditation::default_instance_ = new SingleMeditation();
  simMeditationInfo::default_instance_ = new simMeditationInfo();
  ReqInvitMeditation::default_instance_ = new ReqInvitMeditation();
  AckInvitMeditation::default_instance_ = new AckInvitMeditation();
  SendInvitInfo::default_instance_ = new SendInvitInfo();
  ReqReplyMeditation::default_instance_ = new ReqReplyMeditation();
  AckReplyMeditation::default_instance_ = new AckReplyMeditation();
  AckReqChangeMeditation::default_instance_ = new AckReqChangeMeditation();
  BroadcastMeditation::default_instance_ = new BroadcastMeditation();
  NexusChange::default_instance_ = new NexusChange();
  ReqMeditation::default_instance_->InitAsDefaultInstance();
  RetMeditation::default_instance_->InitAsDefaultInstance();
  SingleMeditation::default_instance_->InitAsDefaultInstance();
  simMeditationInfo::default_instance_->InitAsDefaultInstance();
  ReqInvitMeditation::default_instance_->InitAsDefaultInstance();
  AckInvitMeditation::default_instance_->InitAsDefaultInstance();
  SendInvitInfo::default_instance_->InitAsDefaultInstance();
  ReqReplyMeditation::default_instance_->InitAsDefaultInstance();
  AckReplyMeditation::default_instance_->InitAsDefaultInstance();
  AckReqChangeMeditation::default_instance_->InitAsDefaultInstance();
  BroadcastMeditation::default_instance_->InitAsDefaultInstance();
  NexusChange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharBase_2fMeditationProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharBase_2fMeditationProto_2eproto {
  StaticDescriptorInitializer_CharBase_2fMeditationProto_2eproto() {
    protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  }
} static_descriptor_initializer_CharBase_2fMeditationProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqMeditation::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqMeditation::ReqMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMeditation::InitAsDefaultInstance() {
}

ReqMeditation::ReqMeditation(const ReqMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMeditation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMeditation::~ReqMeditation() {
  SharedDtor();
}

void ReqMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMeditation_descriptor_;
}

const ReqMeditation& ReqMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

ReqMeditation* ReqMeditation::default_instance_ = NULL;

ReqMeditation* ReqMeditation::New() const {
  return new ReqMeditation;
}

void ReqMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMeditation::MergeFrom(const ReqMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMeditation::CopyFrom(const ReqMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMeditation::Swap(ReqMeditation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMeditation_descriptor_;
  metadata.reflection = ReqMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetMeditation::kErrorFieldNumber;
const int RetMeditation::kGirlwarkeyFieldNumber;
const int RetMeditation::kFlagFieldNumber;
#endif  // !_MSC_VER

RetMeditation::RetMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetMeditation::InitAsDefaultInstance() {
}

RetMeditation::RetMeditation(const RetMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetMeditation::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  girlwarkey_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetMeditation::~RetMeditation() {
  SharedDtor();
}

void RetMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetMeditation_descriptor_;
}

const RetMeditation& RetMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

RetMeditation* RetMeditation::default_instance_ = NULL;

RetMeditation* RetMeditation::New() const {
  return new RetMeditation;
}

void RetMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    girlwarkey_ = 0;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_girlwarkey;
        break;
      }

      // optional int32 girlwarkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_girlwarkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &girlwarkey_)));
          set_has_girlwarkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional bool flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 girlwarkey = 2;
  if (has_girlwarkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->girlwarkey(), output);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 girlwarkey = 2;
  if (has_girlwarkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->girlwarkey(), target);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 girlwarkey = 2;
    if (has_girlwarkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->girlwarkey());
    }

    // optional bool flag = 3;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetMeditation::MergeFrom(const RetMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_girlwarkey()) {
      set_girlwarkey(from.girlwarkey());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetMeditation::CopyFrom(const RetMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetMeditation::Swap(RetMeditation* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(girlwarkey_, other->girlwarkey_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetMeditation_descriptor_;
  metadata.reflection = RetMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleMeditation::kCharkeyFieldNumber;
const int SingleMeditation::kGirlwarkeyFieldNumber;
const int SingleMeditation::kFlagFieldNumber;
#endif  // !_MSC_VER

SingleMeditation::SingleMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleMeditation::InitAsDefaultInstance() {
}

SingleMeditation::SingleMeditation(const SingleMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleMeditation::SharedCtor() {
  _cached_size_ = 0;
  charkey_ = 0;
  girlwarkey_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleMeditation::~SingleMeditation() {
  SharedDtor();
}

void SingleMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleMeditation_descriptor_;
}

const SingleMeditation& SingleMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

SingleMeditation* SingleMeditation::default_instance_ = NULL;

SingleMeditation* SingleMeditation::New() const {
  return new SingleMeditation;
}

void SingleMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charkey_ = 0;
    girlwarkey_ = 0;
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 charkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charkey_)));
          set_has_charkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_girlwarkey;
        break;
      }

      // optional int32 girlwarkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_girlwarkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &girlwarkey_)));
          set_has_girlwarkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional bool flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 charkey = 1;
  if (has_charkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charkey(), output);
  }

  // optional int32 girlwarkey = 2;
  if (has_girlwarkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->girlwarkey(), output);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 charkey = 1;
  if (has_charkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charkey(), target);
  }

  // optional int32 girlwarkey = 2;
  if (has_girlwarkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->girlwarkey(), target);
  }

  // optional bool flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 charkey = 1;
    if (has_charkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charkey());
    }

    // optional int32 girlwarkey = 2;
    if (has_girlwarkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->girlwarkey());
    }

    // optional bool flag = 3;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleMeditation::MergeFrom(const SingleMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charkey()) {
      set_charkey(from.charkey());
    }
    if (from.has_girlwarkey()) {
      set_girlwarkey(from.girlwarkey());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMeditation::CopyFrom(const SingleMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SingleMeditation::Swap(SingleMeditation* other) {
  if (other != this) {
    std::swap(charkey_, other->charkey_);
    std::swap(girlwarkey_, other->girlwarkey_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleMeditation_descriptor_;
  metadata.reflection = SingleMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int simMeditationInfo::kExpFieldNumber;
const int simMeditationInfo::kZhenqiFieldNumber;
const int simMeditationInfo::kIntimateFieldNumber;
const int simMeditationInfo::kRateFieldNumber;
#endif  // !_MSC_VER

simMeditationInfo::simMeditationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void simMeditationInfo::InitAsDefaultInstance() {
}

simMeditationInfo::simMeditationInfo(const simMeditationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void simMeditationInfo::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  zhenqi_ = 0;
  intimate_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

simMeditationInfo::~simMeditationInfo() {
  SharedDtor();
}

void simMeditationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void simMeditationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* simMeditationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return simMeditationInfo_descriptor_;
}

const simMeditationInfo& simMeditationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

simMeditationInfo* simMeditationInfo::default_instance_ = NULL;

simMeditationInfo* simMeditationInfo::New() const {
  return new simMeditationInfo;
}

void simMeditationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    zhenqi_ = 0;
    intimate_ = 0;
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool simMeditationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zhenqi;
        break;
      }

      // optional int32 zhenqi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zhenqi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zhenqi_)));
          set_has_zhenqi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intimate;
        break;
      }

      // optional int32 intimate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intimate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intimate_)));
          set_has_intimate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rate;
        break;
      }

      // optional int32 rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void simMeditationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 zhenqi = 2;
  if (has_zhenqi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zhenqi(), output);
  }

  // optional int32 intimate = 3;
  if (has_intimate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->intimate(), output);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* simMeditationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 zhenqi = 2;
  if (has_zhenqi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zhenqi(), target);
  }

  // optional int32 intimate = 3;
  if (has_intimate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->intimate(), target);
  }

  // optional int32 rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int simMeditationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 zhenqi = 2;
    if (has_zhenqi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zhenqi());
    }

    // optional int32 intimate = 3;
    if (has_intimate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intimate());
    }

    // optional int32 rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void simMeditationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const simMeditationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const simMeditationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void simMeditationInfo::MergeFrom(const simMeditationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_zhenqi()) {
      set_zhenqi(from.zhenqi());
    }
    if (from.has_intimate()) {
      set_intimate(from.intimate());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void simMeditationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void simMeditationInfo::CopyFrom(const simMeditationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool simMeditationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void simMeditationInfo::Swap(simMeditationInfo* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(zhenqi_, other->zhenqi_);
    std::swap(intimate_, other->intimate_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata simMeditationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = simMeditationInfo_descriptor_;
  metadata.reflection = simMeditationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInvitMeditation::kTargetidFieldNumber;
#endif  // !_MSC_VER

ReqInvitMeditation::ReqInvitMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInvitMeditation::InitAsDefaultInstance() {
}

ReqInvitMeditation::ReqInvitMeditation(const ReqInvitMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInvitMeditation::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInvitMeditation::~ReqInvitMeditation() {
  SharedDtor();
}

void ReqInvitMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInvitMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInvitMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInvitMeditation_descriptor_;
}

const ReqInvitMeditation& ReqInvitMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

ReqInvitMeditation* ReqInvitMeditation::default_instance_ = NULL;

ReqInvitMeditation* ReqInvitMeditation::New() const {
  return new ReqInvitMeditation;
}

void ReqInvitMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInvitMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInvitMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInvitMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInvitMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInvitMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInvitMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInvitMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInvitMeditation::MergeFrom(const ReqInvitMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInvitMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInvitMeditation::CopyFrom(const ReqInvitMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInvitMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInvitMeditation::Swap(ReqInvitMeditation* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInvitMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInvitMeditation_descriptor_;
  metadata.reflection = ReqInvitMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckInvitMeditation::kCodeFieldNumber;
const int AckInvitMeditation::kTargetidFieldNumber;
#endif  // !_MSC_VER

AckInvitMeditation::AckInvitMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckInvitMeditation::InitAsDefaultInstance() {
}

AckInvitMeditation::AckInvitMeditation(const AckInvitMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckInvitMeditation::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckInvitMeditation::~AckInvitMeditation() {
  SharedDtor();
}

void AckInvitMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckInvitMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckInvitMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckInvitMeditation_descriptor_;
}

const AckInvitMeditation& AckInvitMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

AckInvitMeditation* AckInvitMeditation::default_instance_ = NULL;

AckInvitMeditation* AckInvitMeditation::New() const {
  return new AckInvitMeditation;
}

void AckInvitMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    targetid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckInvitMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }

      // optional int64 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckInvitMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int64 targetid = 2;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckInvitMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int64 targetid = 2;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckInvitMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int64 targetid = 2;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckInvitMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckInvitMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckInvitMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckInvitMeditation::MergeFrom(const AckInvitMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckInvitMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInvitMeditation::CopyFrom(const AckInvitMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInvitMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckInvitMeditation::Swap(AckInvitMeditation* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckInvitMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckInvitMeditation_descriptor_;
  metadata.reflection = AckInvitMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendInvitInfo::kCharidFieldNumber;
const int SendInvitInfo::kViplevelFieldNumber;
const int SendInvitInfo::kCharnameFieldNumber;
#endif  // !_MSC_VER

SendInvitInfo::SendInvitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendInvitInfo::InitAsDefaultInstance() {
}

SendInvitInfo::SendInvitInfo(const SendInvitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendInvitInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  viplevel_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendInvitInfo::~SendInvitInfo() {
  SharedDtor();
}

void SendInvitInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void SendInvitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendInvitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendInvitInfo_descriptor_;
}

const SendInvitInfo& SendInvitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

SendInvitInfo* SendInvitInfo::default_instance_ = NULL;

SendInvitInfo* SendInvitInfo::New() const {
  return new SendInvitInfo;
}

void SendInvitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    viplevel_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendInvitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional bytes charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendInvitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }

  // optional bytes charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendInvitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }

  // optional bytes charname = 3;
  if (has_charname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendInvitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 viplevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional bytes charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendInvitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendInvitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendInvitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendInvitInfo::MergeFrom(const SendInvitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendInvitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendInvitInfo::CopyFrom(const SendInvitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendInvitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendInvitInfo::Swap(SendInvitInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendInvitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendInvitInfo_descriptor_;
  metadata.reflection = SendInvitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReplyMeditation::kFlagFieldNumber;
const int ReqReplyMeditation::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqReplyMeditation::ReqReplyMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReplyMeditation::InitAsDefaultInstance() {
}

ReqReplyMeditation::ReqReplyMeditation(const ReqReplyMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReplyMeditation::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReplyMeditation::~ReqReplyMeditation() {
  SharedDtor();
}

void ReqReplyMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqReplyMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReplyMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReplyMeditation_descriptor_;
}

const ReqReplyMeditation& ReqReplyMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

ReqReplyMeditation* ReqReplyMeditation::default_instance_ = NULL;

ReqReplyMeditation* ReqReplyMeditation::New() const {
  return new ReqReplyMeditation;
}

void ReqReplyMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReplyMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReplyMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReplyMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReplyMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReplyMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReplyMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReplyMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReplyMeditation::MergeFrom(const ReqReplyMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReplyMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReplyMeditation::CopyFrom(const ReqReplyMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReplyMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqReplyMeditation::Swap(ReqReplyMeditation* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReplyMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReplyMeditation_descriptor_;
  metadata.reflection = ReqReplyMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReplyMeditation::kCodeFieldNumber;
#endif  // !_MSC_VER

AckReplyMeditation::AckReplyMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReplyMeditation::InitAsDefaultInstance() {
}

AckReplyMeditation::AckReplyMeditation(const AckReplyMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReplyMeditation::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReplyMeditation::~AckReplyMeditation() {
  SharedDtor();
}

void AckReplyMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReplyMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReplyMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReplyMeditation_descriptor_;
}

const AckReplyMeditation& AckReplyMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

AckReplyMeditation* AckReplyMeditation::default_instance_ = NULL;

AckReplyMeditation* AckReplyMeditation::New() const {
  return new AckReplyMeditation;
}

void AckReplyMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReplyMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReplyMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReplyMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReplyMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReplyMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReplyMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReplyMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReplyMeditation::MergeFrom(const AckReplyMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReplyMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReplyMeditation::CopyFrom(const AckReplyMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReplyMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReplyMeditation::Swap(AckReplyMeditation* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReplyMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReplyMeditation_descriptor_;
  metadata.reflection = AckReplyMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqChangeMeditation::kCodeFieldNumber;
#endif  // !_MSC_VER

AckReqChangeMeditation::AckReqChangeMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqChangeMeditation::InitAsDefaultInstance() {
}

AckReqChangeMeditation::AckReqChangeMeditation(const AckReqChangeMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqChangeMeditation::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqChangeMeditation::~AckReqChangeMeditation() {
  SharedDtor();
}

void AckReqChangeMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqChangeMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqChangeMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqChangeMeditation_descriptor_;
}

const AckReqChangeMeditation& AckReqChangeMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

AckReqChangeMeditation* AckReqChangeMeditation::default_instance_ = NULL;

AckReqChangeMeditation* AckReqChangeMeditation::New() const {
  return new AckReqChangeMeditation;
}

void AckReqChangeMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqChangeMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqChangeMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqChangeMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqChangeMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqChangeMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqChangeMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqChangeMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqChangeMeditation::MergeFrom(const AckReqChangeMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqChangeMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqChangeMeditation::CopyFrom(const AckReqChangeMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqChangeMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqChangeMeditation::Swap(AckReqChangeMeditation* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqChangeMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqChangeMeditation_descriptor_;
  metadata.reflection = AckReqChangeMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastMeditation::kCharkeyFieldNumber;
const int BroadcastMeditation::kGirlwarkeyFieldNumber;
const int BroadcastMeditation::kTargetkeyFieldNumber;
const int BroadcastMeditation::kTargetgirlwarkeyFieldNumber;
#endif  // !_MSC_VER

BroadcastMeditation::BroadcastMeditation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadcastMeditation::InitAsDefaultInstance() {
}

BroadcastMeditation::BroadcastMeditation(const BroadcastMeditation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadcastMeditation::SharedCtor() {
  _cached_size_ = 0;
  charkey_ = 0;
  girlwarkey_ = 0;
  targetkey_ = 0;
  targetgirlwarkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastMeditation::~BroadcastMeditation() {
  SharedDtor();
}

void BroadcastMeditation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastMeditation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMeditation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastMeditation_descriptor_;
}

const BroadcastMeditation& BroadcastMeditation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

BroadcastMeditation* BroadcastMeditation::default_instance_ = NULL;

BroadcastMeditation* BroadcastMeditation::New() const {
  return new BroadcastMeditation;
}

void BroadcastMeditation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charkey_ = 0;
    girlwarkey_ = 0;
    targetkey_ = 0;
    targetgirlwarkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastMeditation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 charkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charkey_)));
          set_has_charkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_girlwarkey;
        break;
      }

      // optional int32 girlwarkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_girlwarkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &girlwarkey_)));
          set_has_girlwarkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetkey;
        break;
      }

      // optional int32 targetkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetkey_)));
          set_has_targetkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetgirlwarkey;
        break;
      }

      // optional int32 targetgirlwarkey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetgirlwarkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetgirlwarkey_)));
          set_has_targetgirlwarkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadcastMeditation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 charkey = 1;
  if (has_charkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->charkey(), output);
  }

  // optional int32 girlwarkey = 2;
  if (has_girlwarkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->girlwarkey(), output);
  }

  // optional int32 targetkey = 3;
  if (has_targetkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetkey(), output);
  }

  // optional int32 targetgirlwarkey = 4;
  if (has_targetgirlwarkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetgirlwarkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadcastMeditation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 charkey = 1;
  if (has_charkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->charkey(), target);
  }

  // optional int32 girlwarkey = 2;
  if (has_girlwarkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->girlwarkey(), target);
  }

  // optional int32 targetkey = 3;
  if (has_targetkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetkey(), target);
  }

  // optional int32 targetgirlwarkey = 4;
  if (has_targetgirlwarkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetgirlwarkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadcastMeditation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 charkey = 1;
    if (has_charkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charkey());
    }

    // optional int32 girlwarkey = 2;
    if (has_girlwarkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->girlwarkey());
    }

    // optional int32 targetkey = 3;
    if (has_targetkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetkey());
    }

    // optional int32 targetgirlwarkey = 4;
    if (has_targetgirlwarkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetgirlwarkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMeditation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastMeditation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastMeditation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastMeditation::MergeFrom(const BroadcastMeditation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charkey()) {
      set_charkey(from.charkey());
    }
    if (from.has_girlwarkey()) {
      set_girlwarkey(from.girlwarkey());
    }
    if (from.has_targetkey()) {
      set_targetkey(from.targetkey());
    }
    if (from.has_targetgirlwarkey()) {
      set_targetgirlwarkey(from.targetgirlwarkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastMeditation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMeditation::CopyFrom(const BroadcastMeditation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMeditation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadcastMeditation::Swap(BroadcastMeditation* other) {
  if (other != this) {
    std::swap(charkey_, other->charkey_);
    std::swap(girlwarkey_, other->girlwarkey_);
    std::swap(targetkey_, other->targetkey_);
    std::swap(targetgirlwarkey_, other->targetgirlwarkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastMeditation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastMeditation_descriptor_;
  metadata.reflection = BroadcastMeditation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NexusChange::kTargetidFieldNumber;
const int NexusChange::kTypeFieldNumber;
#endif  // !_MSC_VER

NexusChange::NexusChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NexusChange::InitAsDefaultInstance() {
}

NexusChange::NexusChange(const NexusChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NexusChange::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NexusChange::~NexusChange() {
  SharedDtor();
}

void NexusChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NexusChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NexusChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NexusChange_descriptor_;
}

const NexusChange& NexusChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharBase_2fMeditationProto_2eproto();
  return *default_instance_;
}

NexusChange* NexusChange::default_instance_ = NULL;

NexusChange* NexusChange::New() const {
  return new NexusChange;
}

void NexusChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NexusChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 targetid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NexusChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 targetid = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->targetid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NexusChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 targetid = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->targetid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NexusChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 targetid = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->targetid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NexusChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NexusChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NexusChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NexusChange::MergeFrom(const NexusChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NexusChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NexusChange::CopyFrom(const NexusChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NexusChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NexusChange::Swap(NexusChange* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NexusChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NexusChange_descriptor_;
  metadata.reflection = NexusChange_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MeditationProto

// @@protoc_insertion_point(global_scope)
