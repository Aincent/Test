// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/GoodsMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/GoodsMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Goods {

namespace {

const ::google::protobuf::Descriptor* ToGTDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynToClientDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynToClientDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMPickItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMPickItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGTPickItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGTPickItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickUpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickUpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PickedItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PickedItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynPickUpItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynPickUpItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGTDeleteDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTDeleteDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqMoveGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqMoveGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToCUpdateGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToCUpdateGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqArrangeGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqArrangeGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqUseGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqUseGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToCUseGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToCUseGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqRecoverGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqRecoverGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* CReqToGTOpenGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CReqToGTOpenGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToCOpenGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToCOpenGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToCSaveGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToCSaveGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGTAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTAddItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqMoveQuickSector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqMoveQuickSector_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToCMoveQuickSectorRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToCMoveQuickSectorRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMMoveGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMMoveGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMRecoverGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMRecoverGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMArrangeGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMArrangeGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAckToCTOpenGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAckToCTOpenGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTReqToCMOpenGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTReqToCMOpenGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMUseGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMUseGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* CTReqGMMoveQuickSector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CTReqGMMoveQuickSector_reflection_ = NULL;
const ::google::protobuf::Descriptor* GT2GMSplitGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GT2GMSplitGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateQuickSector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateQuickSector_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveUpdateGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveUpdateGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscardUpdateGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscardUpdateGoodsRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimDropSomeGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimDropSomeGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* SplitUpdateGoodsRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SplitUpdateGoodsRet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fGoodsMessage_2eproto() {
  protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/GoodsMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ToGTDropInfo_descriptor_ = file->message_type(0);
  static const int ToGTDropInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDropInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDropInfo, item_),
  };
  ToGTDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTDropInfo_descriptor_,
      ToGTDropInfo::default_instance_,
      ToGTDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTDropInfo));
  SynToClientDrop_descriptor_ = file->message_type(1);
  static const int SynToClientDrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynToClientDrop, item_),
  };
  SynToClientDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynToClientDrop_descriptor_,
      SynToClientDrop::default_instance_,
      SynToClientDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynToClientDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynToClientDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynToClientDrop));
  DropItemInfo_descriptor_ = file->message_type(2);
  static const int DropItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemInfo, isboss_),
  };
  DropItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropItemInfo_descriptor_,
      DropItemInfo::default_instance_,
      DropItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropItemInfo));
  SingleDropItem_descriptor_ = file->message_type(3);
  static const int SingleDropItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDropItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDropItem, onlyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDropItem, pos_),
  };
  SingleDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleDropItem_descriptor_,
      SingleDropItem::default_instance_,
      SingleDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleDropItem));
  ToGMPickItem_descriptor_ = file->message_type(4);
  static const int ToGMPickItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMPickItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMPickItem, item_),
  };
  ToGMPickItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMPickItem_descriptor_,
      ToGMPickItem::default_instance_,
      ToGMPickItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMPickItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMPickItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMPickItem));
  AckGTPickItem_descriptor_ = file->message_type(5);
  static const int AckGTPickItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGTPickItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGTPickItem, item_),
  };
  AckGTPickItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGTPickItem_descriptor_,
      AckGTPickItem::default_instance_,
      AckGTPickItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGTPickItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGTPickItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGTPickItem));
  PickUpItem_descriptor_ = file->message_type(6);
  static const int PickUpItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickUpItem, item_),
  };
  PickUpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PickUpItem_descriptor_,
      PickUpItem::default_instance_,
      PickUpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickUpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickUpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PickUpItem));
  PickedItem_descriptor_ = file->message_type(7);
  static const int PickedItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickedItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickedItem, onlyid_),
  };
  PickedItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PickedItem_descriptor_,
      PickedItem::default_instance_,
      PickedItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickedItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PickedItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PickedItem));
  SynPickUpItem_descriptor_ = file->message_type(8);
  static const int SynPickUpItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynPickUpItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynPickUpItem, ret_),
  };
  SynPickUpItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynPickUpItem_descriptor_,
      SynPickUpItem::default_instance_,
      SynPickUpItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynPickUpItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynPickUpItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynPickUpItem));
  ToGTDeleteDrop_descriptor_ = file->message_type(9);
  static const int ToGTDeleteDrop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDeleteDrop, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDeleteDrop, item_),
  };
  ToGTDeleteDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTDeleteDrop_descriptor_,
      ToGTDeleteDrop::default_instance_,
      ToGTDeleteDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDeleteDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTDeleteDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTDeleteDrop));
  DeleteDropItem_descriptor_ = file->message_type(10);
  static const int DeleteDropItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDropItem, id_),
  };
  DeleteDropItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteDropItem_descriptor_,
      DeleteDropItem::default_instance_,
      DeleteDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDropItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteDropItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteDropItem));
  ClientReqMoveGoods_descriptor_ = file->message_type(11);
  static const int ClientReqMoveGoods_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, startcontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, endcontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, endpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, type_),
  };
  ClientReqMoveGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqMoveGoods_descriptor_,
      ClientReqMoveGoods::default_instance_,
      ClientReqMoveGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqMoveGoods));
  GTAckToCUpdateGoodsRet_descriptor_ = file->message_type(12);
  static const int GTAckToCUpdateGoodsRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUpdateGoodsRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUpdateGoodsRet, updategoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUpdateGoodsRet, isadd_),
  };
  GTAckToCUpdateGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToCUpdateGoodsRet_descriptor_,
      GTAckToCUpdateGoodsRet::default_instance_,
      GTAckToCUpdateGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUpdateGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUpdateGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToCUpdateGoodsRet));
  UpdateGoods_descriptor_ = file->message_type(13);
  static const int UpdateGoods_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoods, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoods, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoods, iteminfo_),
  };
  UpdateGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateGoods_descriptor_,
      UpdateGoods::default_instance_,
      UpdateGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateGoods));
  ClientReqArrangeGoods_descriptor_ = file->message_type(14);
  static const int ClientReqArrangeGoods_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqArrangeGoods, container_),
  };
  ClientReqArrangeGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqArrangeGoods_descriptor_,
      ClientReqArrangeGoods::default_instance_,
      ClientReqArrangeGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqArrangeGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqArrangeGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqArrangeGoods));
  ClientReqUseGoods_descriptor_ = file->message_type(15);
  static const int ClientReqUseGoods_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqUseGoods, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqUseGoods, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqUseGoods, pos_),
  };
  ClientReqUseGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqUseGoods_descriptor_,
      ClientReqUseGoods::default_instance_,
      ClientReqUseGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqUseGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqUseGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqUseGoods));
  GTAckToCUseGoodsRet_descriptor_ = file->message_type(16);
  static const int GTAckToCUseGoodsRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUseGoodsRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUseGoodsRet, updategoods_),
  };
  GTAckToCUseGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToCUseGoodsRet_descriptor_,
      GTAckToCUseGoodsRet::default_instance_,
      GTAckToCUseGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUseGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCUseGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToCUseGoodsRet));
  ClientReqRecoverGoods_descriptor_ = file->message_type(17);
  static const int ClientReqRecoverGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqRecoverGoods, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqRecoverGoods, pos_),
  };
  ClientReqRecoverGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqRecoverGoods_descriptor_,
      ClientReqRecoverGoods::default_instance_,
      ClientReqRecoverGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqRecoverGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqRecoverGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqRecoverGoods));
  CReqToGTOpenGoodsRet_descriptor_ = file->message_type(18);
  static const int CReqToGTOpenGoodsRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReqToGTOpenGoodsRet, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReqToGTOpenGoodsRet, num_),
  };
  CReqToGTOpenGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CReqToGTOpenGoodsRet_descriptor_,
      CReqToGTOpenGoodsRet::default_instance_,
      CReqToGTOpenGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReqToGTOpenGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CReqToGTOpenGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CReqToGTOpenGoodsRet));
  GTAckToCOpenGoodsRet_descriptor_ = file->message_type(19);
  static const int GTAckToCOpenGoodsRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCOpenGoodsRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCOpenGoodsRet, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCOpenGoodsRet, pos_),
  };
  GTAckToCOpenGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToCOpenGoodsRet_descriptor_,
      GTAckToCOpenGoodsRet::default_instance_,
      GTAckToCOpenGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCOpenGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCOpenGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToCOpenGoodsRet));
  GTAckToCSaveGoodsRet_descriptor_ = file->message_type(20);
  static const int GTAckToCSaveGoodsRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSaveGoodsRet, updategoods_),
  };
  GTAckToCSaveGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToCSaveGoodsRet_descriptor_,
      GTAckToCSaveGoodsRet::default_instance_,
      GTAckToCSaveGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSaveGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSaveGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToCSaveGoodsRet));
  ToGTAddItem_descriptor_ = file->message_type(21);
  static const int ToGTAddItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAddItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAddItem, item_),
  };
  ToGTAddItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTAddItem_descriptor_,
      ToGTAddItem::default_instance_,
      ToGTAddItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAddItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAddItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTAddItem));
  ClientReqMoveQuickSector_descriptor_ = file->message_type(22);
  static const int ClientReqMoveQuickSector_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveQuickSector, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveQuickSector, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveQuickSector, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveQuickSector, container_),
  };
  ClientReqMoveQuickSector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqMoveQuickSector_descriptor_,
      ClientReqMoveQuickSector::default_instance_,
      ClientReqMoveQuickSector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveQuickSector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMoveQuickSector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqMoveQuickSector));
  GTAckToCMoveQuickSectorRet_descriptor_ = file->message_type(23);
  static const int GTAckToCMoveQuickSectorRet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, status_),
  };
  GTAckToCMoveQuickSectorRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToCMoveQuickSectorRet_descriptor_,
      GTAckToCMoveQuickSectorRet::default_instance_,
      GTAckToCMoveQuickSectorRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCMoveQuickSectorRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToCMoveQuickSectorRet));
  SplitGoods_descriptor_ = file->message_type(24);
  static const int SplitGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitGoods, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitGoods, num_),
  };
  SplitGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitGoods_descriptor_,
      SplitGoods::default_instance_,
      SplitGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitGoods));
  GTtoGMMoveGoods_descriptor_ = file->message_type(25);
  static const int GTtoGMMoveGoods_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, startcontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, startpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, endcontainer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, endpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, type_),
  };
  GTtoGMMoveGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMMoveGoods_descriptor_,
      GTtoGMMoveGoods::default_instance_,
      GTtoGMMoveGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMMoveGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMMoveGoods));
  GTtoGMRecoverGoods_descriptor_ = file->message_type(26);
  static const int GTtoGMRecoverGoods_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMRecoverGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMRecoverGoods, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMRecoverGoods, pos_),
  };
  GTtoGMRecoverGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMRecoverGoods_descriptor_,
      GTtoGMRecoverGoods::default_instance_,
      GTtoGMRecoverGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMRecoverGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMRecoverGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMRecoverGoods));
  GTtoGMArrangeGoods_descriptor_ = file->message_type(27);
  static const int GTtoGMArrangeGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMArrangeGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMArrangeGoods, container_),
  };
  GTtoGMArrangeGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMArrangeGoods_descriptor_,
      GTtoGMArrangeGoods::default_instance_,
      GTtoGMArrangeGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMArrangeGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMArrangeGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMArrangeGoods));
  GMAckToCTOpenGoodsRet_descriptor_ = file->message_type(28);
  static const int GMAckToCTOpenGoodsRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToCTOpenGoodsRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToCTOpenGoodsRet, ret_),
  };
  GMAckToCTOpenGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAckToCTOpenGoodsRet_descriptor_,
      GMAckToCTOpenGoodsRet::default_instance_,
      GMAckToCTOpenGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToCTOpenGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToCTOpenGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAckToCTOpenGoodsRet));
  GTReqToCMOpenGoodsRet_descriptor_ = file->message_type(29);
  static const int GTReqToCMOpenGoodsRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqToCMOpenGoodsRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqToCMOpenGoodsRet, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqToCMOpenGoodsRet, num_),
  };
  GTReqToCMOpenGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTReqToCMOpenGoodsRet_descriptor_,
      GTReqToCMOpenGoodsRet::default_instance_,
      GTReqToCMOpenGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqToCMOpenGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqToCMOpenGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTReqToCMOpenGoodsRet));
  GTtoGMUseGoods_descriptor_ = file->message_type(30);
  static const int GTtoGMUseGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMUseGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMUseGoods, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMUseGoods, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMUseGoods, pos_),
  };
  GTtoGMUseGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMUseGoods_descriptor_,
      GTtoGMUseGoods::default_instance_,
      GTtoGMUseGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMUseGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMUseGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMUseGoods));
  CTReqGMMoveQuickSector_descriptor_ = file->message_type(31);
  static const int CTReqGMMoveQuickSector_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, container_),
  };
  CTReqGMMoveQuickSector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CTReqGMMoveQuickSector_descriptor_,
      CTReqGMMoveQuickSector::default_instance_,
      CTReqGMMoveQuickSector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CTReqGMMoveQuickSector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CTReqGMMoveQuickSector));
  GT2GMSplitGoods_descriptor_ = file->message_type(32);
  static const int GT2GMSplitGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GT2GMSplitGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GT2GMSplitGoods, splitgoods_),
  };
  GT2GMSplitGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GT2GMSplitGoods_descriptor_,
      GT2GMSplitGoods::default_instance_,
      GT2GMSplitGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GT2GMSplitGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GT2GMSplitGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GT2GMSplitGoods));
  UpdateQuickSector_descriptor_ = file->message_type(33);
  static const int UpdateQuickSector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuickSector, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuickSector, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuickSector, goodid_),
  };
  UpdateQuickSector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateQuickSector_descriptor_,
      UpdateQuickSector::default_instance_,
      UpdateQuickSector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuickSector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateQuickSector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateQuickSector));
  MoveUpdateGoodsRet_descriptor_ = file->message_type(34);
  static const int MoveUpdateGoodsRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUpdateGoodsRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUpdateGoodsRet, updategoods_),
  };
  MoveUpdateGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveUpdateGoodsRet_descriptor_,
      MoveUpdateGoodsRet::default_instance_,
      MoveUpdateGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUpdateGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveUpdateGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveUpdateGoodsRet));
  DiscardUpdateGoodsRet_descriptor_ = file->message_type(35);
  static const int DiscardUpdateGoodsRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscardUpdateGoodsRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscardUpdateGoodsRet, updategoods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscardUpdateGoodsRet, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscardUpdateGoodsRet, discardnum_),
  };
  DiscardUpdateGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscardUpdateGoodsRet_descriptor_,
      DiscardUpdateGoodsRet::default_instance_,
      DiscardUpdateGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscardUpdateGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscardUpdateGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscardUpdateGoodsRet));
  DropGoodsInfo_descriptor_ = file->message_type(36);
  static const int DropGoodsInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropGoodsInfo, goods_),
  };
  DropGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropGoodsInfo_descriptor_,
      DropGoodsInfo::default_instance_,
      DropGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropGoodsInfo));
  SimDropSomeGoods_descriptor_ = file->message_type(37);
  static const int SimDropSomeGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDropSomeGoods, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDropSomeGoods, goodsinfo_),
  };
  SimDropSomeGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimDropSomeGoods_descriptor_,
      SimDropSomeGoods::default_instance_,
      SimDropSomeGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDropSomeGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDropSomeGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimDropSomeGoods));
  SplitUpdateGoodsRet_descriptor_ = file->message_type(38);
  static const int SplitUpdateGoodsRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitUpdateGoodsRet, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitUpdateGoodsRet, updategoods_),
  };
  SplitUpdateGoodsRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SplitUpdateGoodsRet_descriptor_,
      SplitUpdateGoodsRet::default_instance_,
      SplitUpdateGoodsRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitUpdateGoodsRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SplitUpdateGoodsRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SplitUpdateGoodsRet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fGoodsMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTDropInfo_descriptor_, &ToGTDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynToClientDrop_descriptor_, &SynToClientDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropItemInfo_descriptor_, &DropItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleDropItem_descriptor_, &SingleDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMPickItem_descriptor_, &ToGMPickItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGTPickItem_descriptor_, &AckGTPickItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PickUpItem_descriptor_, &PickUpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PickedItem_descriptor_, &PickedItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynPickUpItem_descriptor_, &SynPickUpItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTDeleteDrop_descriptor_, &ToGTDeleteDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteDropItem_descriptor_, &DeleteDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqMoveGoods_descriptor_, &ClientReqMoveGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToCUpdateGoodsRet_descriptor_, &GTAckToCUpdateGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateGoods_descriptor_, &UpdateGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqArrangeGoods_descriptor_, &ClientReqArrangeGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqUseGoods_descriptor_, &ClientReqUseGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToCUseGoodsRet_descriptor_, &GTAckToCUseGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqRecoverGoods_descriptor_, &ClientReqRecoverGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CReqToGTOpenGoodsRet_descriptor_, &CReqToGTOpenGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToCOpenGoodsRet_descriptor_, &GTAckToCOpenGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToCSaveGoodsRet_descriptor_, &GTAckToCSaveGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTAddItem_descriptor_, &ToGTAddItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqMoveQuickSector_descriptor_, &ClientReqMoveQuickSector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToCMoveQuickSectorRet_descriptor_, &GTAckToCMoveQuickSectorRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitGoods_descriptor_, &SplitGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMMoveGoods_descriptor_, &GTtoGMMoveGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMRecoverGoods_descriptor_, &GTtoGMRecoverGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMArrangeGoods_descriptor_, &GTtoGMArrangeGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAckToCTOpenGoodsRet_descriptor_, &GMAckToCTOpenGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTReqToCMOpenGoodsRet_descriptor_, &GTReqToCMOpenGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMUseGoods_descriptor_, &GTtoGMUseGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CTReqGMMoveQuickSector_descriptor_, &CTReqGMMoveQuickSector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GT2GMSplitGoods_descriptor_, &GT2GMSplitGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateQuickSector_descriptor_, &UpdateQuickSector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveUpdateGoodsRet_descriptor_, &MoveUpdateGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscardUpdateGoodsRet_descriptor_, &DiscardUpdateGoodsRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropGoodsInfo_descriptor_, &DropGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimDropSomeGoods_descriptor_, &SimDropSomeGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SplitUpdateGoodsRet_descriptor_, &SplitUpdateGoodsRet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fGoodsMessage_2eproto() {
  delete ToGTDropInfo::default_instance_;
  delete ToGTDropInfo_reflection_;
  delete SynToClientDrop::default_instance_;
  delete SynToClientDrop_reflection_;
  delete DropItemInfo::default_instance_;
  delete DropItemInfo_reflection_;
  delete SingleDropItem::default_instance_;
  delete SingleDropItem_reflection_;
  delete ToGMPickItem::default_instance_;
  delete ToGMPickItem_reflection_;
  delete AckGTPickItem::default_instance_;
  delete AckGTPickItem_reflection_;
  delete PickUpItem::default_instance_;
  delete PickUpItem_reflection_;
  delete PickedItem::default_instance_;
  delete PickedItem_reflection_;
  delete SynPickUpItem::default_instance_;
  delete SynPickUpItem_reflection_;
  delete ToGTDeleteDrop::default_instance_;
  delete ToGTDeleteDrop_reflection_;
  delete DeleteDropItem::default_instance_;
  delete DeleteDropItem_reflection_;
  delete ClientReqMoveGoods::default_instance_;
  delete ClientReqMoveGoods_reflection_;
  delete GTAckToCUpdateGoodsRet::default_instance_;
  delete GTAckToCUpdateGoodsRet_reflection_;
  delete UpdateGoods::default_instance_;
  delete UpdateGoods_reflection_;
  delete ClientReqArrangeGoods::default_instance_;
  delete ClientReqArrangeGoods_reflection_;
  delete ClientReqUseGoods::default_instance_;
  delete ClientReqUseGoods_reflection_;
  delete GTAckToCUseGoodsRet::default_instance_;
  delete GTAckToCUseGoodsRet_reflection_;
  delete ClientReqRecoverGoods::default_instance_;
  delete ClientReqRecoverGoods_reflection_;
  delete CReqToGTOpenGoodsRet::default_instance_;
  delete CReqToGTOpenGoodsRet_reflection_;
  delete GTAckToCOpenGoodsRet::default_instance_;
  delete GTAckToCOpenGoodsRet_reflection_;
  delete GTAckToCSaveGoodsRet::default_instance_;
  delete GTAckToCSaveGoodsRet_reflection_;
  delete ToGTAddItem::default_instance_;
  delete ToGTAddItem_reflection_;
  delete ClientReqMoveQuickSector::default_instance_;
  delete ClientReqMoveQuickSector_reflection_;
  delete GTAckToCMoveQuickSectorRet::default_instance_;
  delete GTAckToCMoveQuickSectorRet_reflection_;
  delete SplitGoods::default_instance_;
  delete SplitGoods_reflection_;
  delete GTtoGMMoveGoods::default_instance_;
  delete GTtoGMMoveGoods_reflection_;
  delete GTtoGMRecoverGoods::default_instance_;
  delete GTtoGMRecoverGoods_reflection_;
  delete GTtoGMArrangeGoods::default_instance_;
  delete GTtoGMArrangeGoods_reflection_;
  delete GMAckToCTOpenGoodsRet::default_instance_;
  delete GMAckToCTOpenGoodsRet_reflection_;
  delete GTReqToCMOpenGoodsRet::default_instance_;
  delete GTReqToCMOpenGoodsRet_reflection_;
  delete GTtoGMUseGoods::default_instance_;
  delete GTtoGMUseGoods_reflection_;
  delete CTReqGMMoveQuickSector::default_instance_;
  delete CTReqGMMoveQuickSector_reflection_;
  delete GT2GMSplitGoods::default_instance_;
  delete GT2GMSplitGoods_reflection_;
  delete UpdateQuickSector::default_instance_;
  delete UpdateQuickSector_reflection_;
  delete MoveUpdateGoodsRet::default_instance_;
  delete MoveUpdateGoodsRet_reflection_;
  delete DiscardUpdateGoodsRet::default_instance_;
  delete DiscardUpdateGoodsRet_reflection_;
  delete DropGoodsInfo::default_instance_;
  delete DropGoodsInfo_reflection_;
  delete SimDropSomeGoods::default_instance_;
  delete SimDropSomeGoods_reflection_;
  delete SplitUpdateGoodsRet::default_instance_;
  delete SplitUpdateGoodsRet_reflection_;
}

void protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CharLogin::protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034CharLogin/GoodsMessage.proto\022\005Goods\032\034C"
    "harLogin/CharBaseInfo.proto\"D\n\014ToGTDropI"
    "nfo\022\016\n\006charid\030\001 \002(\003\022$\n\004item\030\002 \001(\0132\026.Good"
    "s.SynToClientDrop\"4\n\017SynToClientDrop\022!\n\004"
    "item\030\001 \003(\0132\023.Goods.DropItemInfo\"\\\n\014DropI"
    "temInfo\022\n\n\002id\030\001 \002(\005\022\013\n\003key\030\002 \003(\r\022#\n\004item"
    "\030\003 \003(\0132\025.Goods.SingleDropItem\022\016\n\006isBoss\030"
    "\004 \001(\010\"9\n\016SingleDropItem\022\n\n\002id\030\001 \002(\005\022\016\n\006o"
    "nlyid\030\002 \001(\005\022\013\n\003pos\030\003 \001(\r\"\?\n\014ToGMPickItem"
    "\022\016\n\006charid\030\001 \002(\003\022\037\n\004item\030\002 \001(\0132\021.Goods.P"
    "ickUpItem\"C\n\rAckGTPickItem\022\016\n\006charid\030\001 \002"
    "(\003\022\"\n\004item\030\002 \001(\0132\024.Goods.SynPickUpItem\"-"
    "\n\nPickUpItem\022\037\n\004item\030\001 \003(\0132\021.Goods.Picke"
    "dItem\"(\n\nPickedItem\022\n\n\002id\030\001 \002(\005\022\016\n\006onlyi"
    "d\030\002 \001(\005\"=\n\rSynPickUpItem\022\037\n\004item\030\001 \003(\0132\021"
    ".Goods.PickedItem\022\013\n\003ret\030\002 \001(\005\"E\n\016ToGTDe"
    "leteDrop\022\016\n\006charid\030\001 \002(\003\022#\n\004item\030\002 \001(\0132\025"
    ".Goods.DeleteDropItem\"\034\n\016DeleteDropItem\022"
    "\n\n\002id\030\001 \003(\005\"r\n\022ClientReqMoveGoods\022\026\n\016sta"
    "rtContainer\030\001 \002(\005\022\020\n\010startPos\030\002 \002(\005\022\024\n\014e"
    "ndContainer\030\003 \002(\005\022\016\n\006endPos\030\004 \002(\005\022\014\n\004typ"
    "e\030\005 \002(\005\"`\n\026GTAckToCUpdateGoodsRet\022\016\n\006sta"
    "tus\030\001 \002(\005\022\'\n\013updateGoods\030\002 \003(\0132\022.Goods.U"
    "pdateGoods\022\r\n\005IsAdd\030\003 \001(\005\"Z\n\013UpdateGoods"
    "\022\021\n\tcontainer\030\001 \002(\005\022\013\n\003pos\030\002 \002(\005\022+\n\010item"
    "Info\030\003 \002(\0132\031.CharLogin.ClientItemInfo\"*\n"
    "\025ClientReqArrangeGoods\022\021\n\tcontainer\030\001 \002("
    "\005\"=\n\021ClientReqUseGoods\022\016\n\006goodID\030\001 \002(\005\022\013"
    "\n\003num\030\002 \002(\005\022\013\n\003pos\030\003 \002(\005\"N\n\023GTAckToCUseG"
    "oodsRet\022\016\n\006status\030\001 \002(\005\022\'\n\013updategoods\030\002"
    " \003(\0132\022.Goods.UpdateGoods\"7\n\025ClientReqRec"
    "overGoods\022\021\n\tcontainer\030\001 \002(\005\022\013\n\003pos\030\002 \002("
    "\005\"6\n\024CReqToGTOpenGoodsRet\022\021\n\tcontainer\030\001"
    " \002(\005\022\013\n\003num\030\002 \002(\005\"F\n\024GTAckToCOpenGoodsRe"
    "t\022\016\n\006status\030\001 \002(\005\022\021\n\tcontainer\030\002 \002(\005\022\013\n\003"
    "pos\030\003 \003(\005\"\?\n\024GTAckToCSaveGoodsRet\022\'\n\013upd"
    "ategoods\030\001 \003(\0132\022.Goods.UpdateGoods\"J\n\013To"
    "GTAddItem\022\016\n\006charid\030\001 \002(\003\022+\n\004item\030\002 \001(\0132"
    "\035.Goods.GTAckToCUpdateGoodsRet\"T\n\030Client"
    "ReqMoveQuickSector\022\014\n\004type\030\001 \002(\005\022\n\n\002id\030\002"
    " \002(\005\022\013\n\003pos\030\003 \002(\005\022\021\n\tcontainer\030\004 \002(\005\"f\n\032"
    "GTAckToCMoveQuickSectorRet\022\014\n\004type\030\001 \002(\005"
    "\022\n\n\002id\030\002 \002(\005\022\013\n\003pos\030\003 \002(\005\022\021\n\tcontainer\030\004"
    " \002(\005\022\016\n\006status\030\005 \002(\005\"&\n\nSplitGoods\022\013\n\003po"
    "s\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\"\177\n\017GTtoGMMoveGoods\022"
    "\016\n\006charid\030\001 \002(\003\022\026\n\016startContainer\030\002 \002(\005\022"
    "\020\n\010startPos\030\003 \002(\005\022\024\n\014endContainer\030\004 \002(\005\022"
    "\016\n\006endPos\030\005 \002(\005\022\014\n\004type\030\006 \002(\005\"D\n\022GTtoGMR"
    "ecoverGoods\022\016\n\006charid\030\001 \002(\003\022\021\n\tcontainer"
    "\030\002 \002(\005\022\013\n\003pos\030\003 \002(\005\"7\n\022GTtoGMArrangeGood"
    "s\022\016\n\006charid\030\001 \002(\003\022\021\n\tcontainer\030\002 \002(\005\"Q\n\025"
    "GMAckToCTOpenGoodsRet\022\016\n\006charid\030\001 \002(\003\022(\n"
    "\003ret\030\002 \002(\0132\033.Goods.GTAckToCOpenGoodsRet\""
    "G\n\025GTReqToCMOpenGoodsRet\022\016\n\006charid\030\001 \002(\003"
    "\022\021\n\tcontainer\030\002 \002(\005\022\013\n\003num\030\003 \002(\005\"J\n\016GTto"
    "GMUseGoods\022\016\n\006charid\030\001 \002(\003\022\016\n\006goodID\030\002 \002"
    "(\005\022\013\n\003num\030\003 \002(\005\022\013\n\003pos\030\004 \002(\005\"b\n\026CTReqGMM"
    "oveQuickSector\022\016\n\006charid\030\001 \002(\003\022\014\n\004type\030\002"
    " \002(\005\022\n\n\002id\030\003 \002(\005\022\013\n\003pos\030\004 \002(\005\022\021\n\tcontain"
    "er\030\005 \002(\005\"H\n\017GT2GMSplitGoods\022\016\n\006charid\030\001 "
    "\002(\003\022%\n\nsplitgoods\030\002 \002(\0132\021.Goods.SplitGoo"
    "ds\">\n\021UpdateQuickSector\022\014\n\004type\030\001 \002(\005\022\013\n"
    "\003pos\030\002 \002(\005\022\016\n\006goodID\030\003 \002(\005\"M\n\022MoveUpdate"
    "GoodsRet\022\016\n\006status\030\001 \002(\005\022\'\n\013updateGoods\030"
    "\002 \003(\0132\022.Goods.UpdateGoods\"u\n\025DiscardUpda"
    "teGoodsRet\022\016\n\006status\030\001 \002(\005\022\'\n\013updateGood"
    "s\030\002 \002(\0132\022.Goods.UpdateGoods\022\017\n\007goodsID\030\003"
    " \002(\005\022\022\n\ndiscardNum\030\004 \002(\005\"<\n\rDropGoodsInf"
    "o\022+\n\005goods\030\001 \003(\0132\034.Goods.DiscardUpdateGo"
    "odsRet\"J\n\020SimDropSomeGoods\022\r\n\005error\030\001 \002("
    "\005\022\'\n\tgoodsInfo\030\002 \001(\0132\024.Goods.DropGoodsIn"
    "fo\"N\n\023SplitUpdateGoodsRet\022\016\n\006status\030\001 \002("
    "\005\022\'\n\013updateGoods\030\002 \003(\0132\022.Goods.UpdateGoo"
    "ds", 2922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/GoodsMessage.proto", &protobuf_RegisterTypes);
  ToGTDropInfo::default_instance_ = new ToGTDropInfo();
  SynToClientDrop::default_instance_ = new SynToClientDrop();
  DropItemInfo::default_instance_ = new DropItemInfo();
  SingleDropItem::default_instance_ = new SingleDropItem();
  ToGMPickItem::default_instance_ = new ToGMPickItem();
  AckGTPickItem::default_instance_ = new AckGTPickItem();
  PickUpItem::default_instance_ = new PickUpItem();
  PickedItem::default_instance_ = new PickedItem();
  SynPickUpItem::default_instance_ = new SynPickUpItem();
  ToGTDeleteDrop::default_instance_ = new ToGTDeleteDrop();
  DeleteDropItem::default_instance_ = new DeleteDropItem();
  ClientReqMoveGoods::default_instance_ = new ClientReqMoveGoods();
  GTAckToCUpdateGoodsRet::default_instance_ = new GTAckToCUpdateGoodsRet();
  UpdateGoods::default_instance_ = new UpdateGoods();
  ClientReqArrangeGoods::default_instance_ = new ClientReqArrangeGoods();
  ClientReqUseGoods::default_instance_ = new ClientReqUseGoods();
  GTAckToCUseGoodsRet::default_instance_ = new GTAckToCUseGoodsRet();
  ClientReqRecoverGoods::default_instance_ = new ClientReqRecoverGoods();
  CReqToGTOpenGoodsRet::default_instance_ = new CReqToGTOpenGoodsRet();
  GTAckToCOpenGoodsRet::default_instance_ = new GTAckToCOpenGoodsRet();
  GTAckToCSaveGoodsRet::default_instance_ = new GTAckToCSaveGoodsRet();
  ToGTAddItem::default_instance_ = new ToGTAddItem();
  ClientReqMoveQuickSector::default_instance_ = new ClientReqMoveQuickSector();
  GTAckToCMoveQuickSectorRet::default_instance_ = new GTAckToCMoveQuickSectorRet();
  SplitGoods::default_instance_ = new SplitGoods();
  GTtoGMMoveGoods::default_instance_ = new GTtoGMMoveGoods();
  GTtoGMRecoverGoods::default_instance_ = new GTtoGMRecoverGoods();
  GTtoGMArrangeGoods::default_instance_ = new GTtoGMArrangeGoods();
  GMAckToCTOpenGoodsRet::default_instance_ = new GMAckToCTOpenGoodsRet();
  GTReqToCMOpenGoodsRet::default_instance_ = new GTReqToCMOpenGoodsRet();
  GTtoGMUseGoods::default_instance_ = new GTtoGMUseGoods();
  CTReqGMMoveQuickSector::default_instance_ = new CTReqGMMoveQuickSector();
  GT2GMSplitGoods::default_instance_ = new GT2GMSplitGoods();
  UpdateQuickSector::default_instance_ = new UpdateQuickSector();
  MoveUpdateGoodsRet::default_instance_ = new MoveUpdateGoodsRet();
  DiscardUpdateGoodsRet::default_instance_ = new DiscardUpdateGoodsRet();
  DropGoodsInfo::default_instance_ = new DropGoodsInfo();
  SimDropSomeGoods::default_instance_ = new SimDropSomeGoods();
  SplitUpdateGoodsRet::default_instance_ = new SplitUpdateGoodsRet();
  ToGTDropInfo::default_instance_->InitAsDefaultInstance();
  SynToClientDrop::default_instance_->InitAsDefaultInstance();
  DropItemInfo::default_instance_->InitAsDefaultInstance();
  SingleDropItem::default_instance_->InitAsDefaultInstance();
  ToGMPickItem::default_instance_->InitAsDefaultInstance();
  AckGTPickItem::default_instance_->InitAsDefaultInstance();
  PickUpItem::default_instance_->InitAsDefaultInstance();
  PickedItem::default_instance_->InitAsDefaultInstance();
  SynPickUpItem::default_instance_->InitAsDefaultInstance();
  ToGTDeleteDrop::default_instance_->InitAsDefaultInstance();
  DeleteDropItem::default_instance_->InitAsDefaultInstance();
  ClientReqMoveGoods::default_instance_->InitAsDefaultInstance();
  GTAckToCUpdateGoodsRet::default_instance_->InitAsDefaultInstance();
  UpdateGoods::default_instance_->InitAsDefaultInstance();
  ClientReqArrangeGoods::default_instance_->InitAsDefaultInstance();
  ClientReqUseGoods::default_instance_->InitAsDefaultInstance();
  GTAckToCUseGoodsRet::default_instance_->InitAsDefaultInstance();
  ClientReqRecoverGoods::default_instance_->InitAsDefaultInstance();
  CReqToGTOpenGoodsRet::default_instance_->InitAsDefaultInstance();
  GTAckToCOpenGoodsRet::default_instance_->InitAsDefaultInstance();
  GTAckToCSaveGoodsRet::default_instance_->InitAsDefaultInstance();
  ToGTAddItem::default_instance_->InitAsDefaultInstance();
  ClientReqMoveQuickSector::default_instance_->InitAsDefaultInstance();
  GTAckToCMoveQuickSectorRet::default_instance_->InitAsDefaultInstance();
  SplitGoods::default_instance_->InitAsDefaultInstance();
  GTtoGMMoveGoods::default_instance_->InitAsDefaultInstance();
  GTtoGMRecoverGoods::default_instance_->InitAsDefaultInstance();
  GTtoGMArrangeGoods::default_instance_->InitAsDefaultInstance();
  GMAckToCTOpenGoodsRet::default_instance_->InitAsDefaultInstance();
  GTReqToCMOpenGoodsRet::default_instance_->InitAsDefaultInstance();
  GTtoGMUseGoods::default_instance_->InitAsDefaultInstance();
  CTReqGMMoveQuickSector::default_instance_->InitAsDefaultInstance();
  GT2GMSplitGoods::default_instance_->InitAsDefaultInstance();
  UpdateQuickSector::default_instance_->InitAsDefaultInstance();
  MoveUpdateGoodsRet::default_instance_->InitAsDefaultInstance();
  DiscardUpdateGoodsRet::default_instance_->InitAsDefaultInstance();
  DropGoodsInfo::default_instance_->InitAsDefaultInstance();
  SimDropSomeGoods::default_instance_->InitAsDefaultInstance();
  SplitUpdateGoodsRet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fGoodsMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fGoodsMessage_2eproto {
  StaticDescriptorInitializer_CharLogin_2fGoodsMessage_2eproto() {
    protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fGoodsMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ToGTDropInfo::kCharidFieldNumber;
const int ToGTDropInfo::kItemFieldNumber;
#endif  // !_MSC_VER

ToGTDropInfo::ToGTDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTDropInfo::InitAsDefaultInstance() {
  item_ = const_cast< ::Goods::SynToClientDrop*>(&::Goods::SynToClientDrop::default_instance());
}

ToGTDropInfo::ToGTDropInfo(const ToGTDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTDropInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTDropInfo::~ToGTDropInfo() {
  SharedDtor();
}

void ToGTDropInfo::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ToGTDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTDropInfo_descriptor_;
}

const ToGTDropInfo& ToGTDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ToGTDropInfo* ToGTDropInfo::default_instance_ = NULL;

ToGTDropInfo* ToGTDropInfo::New() const {
  return new ToGTDropInfo;
}

void ToGTDropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::Goods::SynToClientDrop::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Goods.SynToClientDrop item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGTDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .Goods.SynToClientDrop item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .Goods.SynToClientDrop item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .Goods.SynToClientDrop item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTDropInfo::MergeFrom(const ToGTDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item()) {
      mutable_item()->::Goods::SynToClientDrop::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTDropInfo::CopyFrom(const ToGTDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTDropInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ToGTDropInfo::Swap(ToGTDropInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTDropInfo_descriptor_;
  metadata.reflection = ToGTDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynToClientDrop::kItemFieldNumber;
#endif  // !_MSC_VER

SynToClientDrop::SynToClientDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynToClientDrop::InitAsDefaultInstance() {
}

SynToClientDrop::SynToClientDrop(const SynToClientDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynToClientDrop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynToClientDrop::~SynToClientDrop() {
  SharedDtor();
}

void SynToClientDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynToClientDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynToClientDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynToClientDrop_descriptor_;
}

const SynToClientDrop& SynToClientDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

SynToClientDrop* SynToClientDrop::default_instance_ = NULL;

SynToClientDrop* SynToClientDrop::New() const {
  return new SynToClientDrop;
}

void SynToClientDrop::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynToClientDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Goods.DropItemInfo item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynToClientDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Goods.DropItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynToClientDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Goods.DropItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynToClientDrop::ByteSize() const {
  int total_size = 0;

  // repeated .Goods.DropItemInfo item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynToClientDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynToClientDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynToClientDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynToClientDrop::MergeFrom(const SynToClientDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynToClientDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynToClientDrop::CopyFrom(const SynToClientDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynToClientDrop::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void SynToClientDrop::Swap(SynToClientDrop* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynToClientDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynToClientDrop_descriptor_;
  metadata.reflection = SynToClientDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropItemInfo::kIdFieldNumber;
const int DropItemInfo::kKeyFieldNumber;
const int DropItemInfo::kItemFieldNumber;
const int DropItemInfo::kIsBossFieldNumber;
#endif  // !_MSC_VER

DropItemInfo::DropItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropItemInfo::InitAsDefaultInstance() {
}

DropItemInfo::DropItemInfo(const DropItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  isboss_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropItemInfo::~DropItemInfo() {
  SharedDtor();
}

void DropItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropItemInfo_descriptor_;
}

const DropItemInfo& DropItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

DropItemInfo* DropItemInfo::default_instance_ = NULL;

DropItemInfo* DropItemInfo::New() const {
  return new DropItemInfo;
}

void DropItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    isboss_ = false;
  }
  key_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // repeated uint32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .Goods.SingleDropItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_isBoss;
        break;
      }

      // optional bool isBoss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isboss_)));
          set_has_isboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated uint32 key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->key(i), output);
  }

  // repeated .Goods.SingleDropItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional bool isBoss = 4;
  if (has_isboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isboss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated uint32 key = 2;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->key(i), target);
  }

  // repeated .Goods.SingleDropItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional bool isBoss = 4;
  if (has_isboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isboss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool isBoss = 4;
    if (has_isboss()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 key = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->key(i));
    }
    total_size += 1 * this->key_size() + data_size;
  }

  // repeated .Goods.SingleDropItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropItemInfo::MergeFrom(const DropItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isboss()) {
      set_isboss(from.isboss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropItemInfo::CopyFrom(const DropItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void DropItemInfo::Swap(DropItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    key_.Swap(&other->key_);
    item_.Swap(&other->item_);
    std::swap(isboss_, other->isboss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropItemInfo_descriptor_;
  metadata.reflection = DropItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleDropItem::kIdFieldNumber;
const int SingleDropItem::kOnlyidFieldNumber;
const int SingleDropItem::kPosFieldNumber;
#endif  // !_MSC_VER

SingleDropItem::SingleDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleDropItem::InitAsDefaultInstance() {
}

SingleDropItem::SingleDropItem(const SingleDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleDropItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  onlyid_ = 0;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleDropItem::~SingleDropItem() {
  SharedDtor();
}

void SingleDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleDropItem_descriptor_;
}

const SingleDropItem& SingleDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

SingleDropItem* SingleDropItem::default_instance_ = NULL;

SingleDropItem* SingleDropItem::New() const {
  return new SingleDropItem;
}

void SingleDropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    onlyid_ = 0;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlyid;
        break;
      }

      // optional int32 onlyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlyid_)));
          set_has_onlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 onlyid = 2;
  if (has_onlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlyid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 onlyid = 2;
  if (has_onlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onlyid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleDropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 onlyid = 2;
    if (has_onlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlyid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleDropItem::MergeFrom(const SingleDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_onlyid()) {
      set_onlyid(from.onlyid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleDropItem::CopyFrom(const SingleDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SingleDropItem::Swap(SingleDropItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(onlyid_, other->onlyid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleDropItem_descriptor_;
  metadata.reflection = SingleDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMPickItem::kCharidFieldNumber;
const int ToGMPickItem::kItemFieldNumber;
#endif  // !_MSC_VER

ToGMPickItem::ToGMPickItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMPickItem::InitAsDefaultInstance() {
  item_ = const_cast< ::Goods::PickUpItem*>(&::Goods::PickUpItem::default_instance());
}

ToGMPickItem::ToGMPickItem(const ToGMPickItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMPickItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMPickItem::~ToGMPickItem() {
  SharedDtor();
}

void ToGMPickItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ToGMPickItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMPickItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMPickItem_descriptor_;
}

const ToGMPickItem& ToGMPickItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ToGMPickItem* ToGMPickItem::default_instance_ = NULL;

ToGMPickItem* ToGMPickItem::New() const {
  return new ToGMPickItem;
}

void ToGMPickItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::Goods::PickUpItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMPickItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Goods.PickUpItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMPickItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .Goods.PickUpItem item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMPickItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .Goods.PickUpItem item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMPickItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .Goods.PickUpItem item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMPickItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMPickItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMPickItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMPickItem::MergeFrom(const ToGMPickItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item()) {
      mutable_item()->::Goods::PickUpItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMPickItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMPickItem::CopyFrom(const ToGMPickItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMPickItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ToGMPickItem::Swap(ToGMPickItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMPickItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMPickItem_descriptor_;
  metadata.reflection = ToGMPickItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGTPickItem::kCharidFieldNumber;
const int AckGTPickItem::kItemFieldNumber;
#endif  // !_MSC_VER

AckGTPickItem::AckGTPickItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGTPickItem::InitAsDefaultInstance() {
  item_ = const_cast< ::Goods::SynPickUpItem*>(&::Goods::SynPickUpItem::default_instance());
}

AckGTPickItem::AckGTPickItem(const AckGTPickItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGTPickItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGTPickItem::~AckGTPickItem() {
  SharedDtor();
}

void AckGTPickItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void AckGTPickItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGTPickItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGTPickItem_descriptor_;
}

const AckGTPickItem& AckGTPickItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

AckGTPickItem* AckGTPickItem::default_instance_ = NULL;

AckGTPickItem* AckGTPickItem::New() const {
  return new AckGTPickItem;
}

void AckGTPickItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::Goods::SynPickUpItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGTPickItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Goods.SynPickUpItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGTPickItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .Goods.SynPickUpItem item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGTPickItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .Goods.SynPickUpItem item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGTPickItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .Goods.SynPickUpItem item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGTPickItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGTPickItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGTPickItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGTPickItem::MergeFrom(const AckGTPickItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item()) {
      mutable_item()->::Goods::SynPickUpItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGTPickItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGTPickItem::CopyFrom(const AckGTPickItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGTPickItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void AckGTPickItem::Swap(AckGTPickItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGTPickItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGTPickItem_descriptor_;
  metadata.reflection = AckGTPickItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PickUpItem::kItemFieldNumber;
#endif  // !_MSC_VER

PickUpItem::PickUpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PickUpItem::InitAsDefaultInstance() {
}

PickUpItem::PickUpItem(const PickUpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PickUpItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickUpItem::~PickUpItem() {
  SharedDtor();
}

void PickUpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickUpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickUpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickUpItem_descriptor_;
}

const PickUpItem& PickUpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

PickUpItem* PickUpItem::default_instance_ = NULL;

PickUpItem* PickUpItem::New() const {
  return new PickUpItem;
}

void PickUpItem::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PickUpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Goods.PickedItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PickUpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Goods.PickedItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PickUpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Goods.PickedItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PickUpItem::ByteSize() const {
  int total_size = 0;

  // repeated .Goods.PickedItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickUpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PickUpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PickUpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PickUpItem::MergeFrom(const PickUpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PickUpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickUpItem::CopyFrom(const PickUpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickUpItem::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void PickUpItem::Swap(PickUpItem* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PickUpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickUpItem_descriptor_;
  metadata.reflection = PickUpItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PickedItem::kIdFieldNumber;
const int PickedItem::kOnlyidFieldNumber;
#endif  // !_MSC_VER

PickedItem::PickedItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PickedItem::InitAsDefaultInstance() {
}

PickedItem::PickedItem(const PickedItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PickedItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  onlyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PickedItem::~PickedItem() {
  SharedDtor();
}

void PickedItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PickedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PickedItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PickedItem_descriptor_;
}

const PickedItem& PickedItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

PickedItem* PickedItem::default_instance_ = NULL;

PickedItem* PickedItem::New() const {
  return new PickedItem;
}

void PickedItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    onlyid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PickedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlyid;
        break;
      }

      // optional int32 onlyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlyid_)));
          set_has_onlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PickedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 onlyid = 2;
  if (has_onlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->onlyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PickedItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 onlyid = 2;
  if (has_onlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->onlyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PickedItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 onlyid = 2;
    if (has_onlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PickedItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PickedItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PickedItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PickedItem::MergeFrom(const PickedItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_onlyid()) {
      set_onlyid(from.onlyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PickedItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PickedItem::CopyFrom(const PickedItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PickedItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PickedItem::Swap(PickedItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(onlyid_, other->onlyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PickedItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PickedItem_descriptor_;
  metadata.reflection = PickedItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynPickUpItem::kItemFieldNumber;
const int SynPickUpItem::kRetFieldNumber;
#endif  // !_MSC_VER

SynPickUpItem::SynPickUpItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynPickUpItem::InitAsDefaultInstance() {
}

SynPickUpItem::SynPickUpItem(const SynPickUpItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynPickUpItem::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynPickUpItem::~SynPickUpItem() {
  SharedDtor();
}

void SynPickUpItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynPickUpItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynPickUpItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynPickUpItem_descriptor_;
}

const SynPickUpItem& SynPickUpItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

SynPickUpItem* SynPickUpItem::default_instance_ = NULL;

SynPickUpItem* SynPickUpItem::New() const {
  return new SynPickUpItem;
}

void SynPickUpItem::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    ret_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynPickUpItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Goods.PickedItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynPickUpItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Goods.PickedItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynPickUpItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Goods.PickedItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynPickUpItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .Goods.PickedItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynPickUpItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynPickUpItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynPickUpItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynPickUpItem::MergeFrom(const SynPickUpItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynPickUpItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynPickUpItem::CopyFrom(const SynPickUpItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynPickUpItem::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void SynPickUpItem::Swap(SynPickUpItem* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynPickUpItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynPickUpItem_descriptor_;
  metadata.reflection = SynPickUpItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGTDeleteDrop::kCharidFieldNumber;
const int ToGTDeleteDrop::kItemFieldNumber;
#endif  // !_MSC_VER

ToGTDeleteDrop::ToGTDeleteDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTDeleteDrop::InitAsDefaultInstance() {
  item_ = const_cast< ::Goods::DeleteDropItem*>(&::Goods::DeleteDropItem::default_instance());
}

ToGTDeleteDrop::ToGTDeleteDrop(const ToGTDeleteDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTDeleteDrop::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTDeleteDrop::~ToGTDeleteDrop() {
  SharedDtor();
}

void ToGTDeleteDrop::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ToGTDeleteDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTDeleteDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTDeleteDrop_descriptor_;
}

const ToGTDeleteDrop& ToGTDeleteDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ToGTDeleteDrop* ToGTDeleteDrop::default_instance_ = NULL;

ToGTDeleteDrop* ToGTDeleteDrop::New() const {
  return new ToGTDeleteDrop;
}

void ToGTDeleteDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::Goods::DeleteDropItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTDeleteDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Goods.DeleteDropItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGTDeleteDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .Goods.DeleteDropItem item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTDeleteDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .Goods.DeleteDropItem item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTDeleteDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .Goods.DeleteDropItem item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTDeleteDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTDeleteDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTDeleteDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTDeleteDrop::MergeFrom(const ToGTDeleteDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item()) {
      mutable_item()->::Goods::DeleteDropItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTDeleteDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTDeleteDrop::CopyFrom(const ToGTDeleteDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTDeleteDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToGTDeleteDrop::Swap(ToGTDeleteDrop* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTDeleteDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTDeleteDrop_descriptor_;
  metadata.reflection = ToGTDeleteDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteDropItem::kIdFieldNumber;
#endif  // !_MSC_VER

DeleteDropItem::DeleteDropItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteDropItem::InitAsDefaultInstance() {
}

DeleteDropItem::DeleteDropItem(const DeleteDropItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteDropItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteDropItem::~DeleteDropItem() {
  SharedDtor();
}

void DeleteDropItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteDropItem_descriptor_;
}

const DeleteDropItem& DeleteDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

DeleteDropItem* DeleteDropItem::default_instance_ = NULL;

DeleteDropItem* DeleteDropItem::New() const {
  return new DeleteDropItem;
}

void DeleteDropItem::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteDropItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteDropItem::ByteSize() const {
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteDropItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteDropItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteDropItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteDropItem::MergeFrom(const DeleteDropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteDropItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDropItem::CopyFrom(const DeleteDropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDropItem::IsInitialized() const {

  return true;
}

void DeleteDropItem::Swap(DeleteDropItem* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteDropItem_descriptor_;
  metadata.reflection = DeleteDropItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqMoveGoods::kStartContainerFieldNumber;
const int ClientReqMoveGoods::kStartPosFieldNumber;
const int ClientReqMoveGoods::kEndContainerFieldNumber;
const int ClientReqMoveGoods::kEndPosFieldNumber;
const int ClientReqMoveGoods::kTypeFieldNumber;
#endif  // !_MSC_VER

ClientReqMoveGoods::ClientReqMoveGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqMoveGoods::InitAsDefaultInstance() {
}

ClientReqMoveGoods::ClientReqMoveGoods(const ClientReqMoveGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqMoveGoods::SharedCtor() {
  _cached_size_ = 0;
  startcontainer_ = 0;
  startpos_ = 0;
  endcontainer_ = 0;
  endpos_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqMoveGoods::~ClientReqMoveGoods() {
  SharedDtor();
}

void ClientReqMoveGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqMoveGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqMoveGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqMoveGoods_descriptor_;
}

const ClientReqMoveGoods& ClientReqMoveGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ClientReqMoveGoods* ClientReqMoveGoods::default_instance_ = NULL;

ClientReqMoveGoods* ClientReqMoveGoods::New() const {
  return new ClientReqMoveGoods;
}

void ClientReqMoveGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startcontainer_ = 0;
    startpos_ = 0;
    endcontainer_ = 0;
    endpos_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqMoveGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 startContainer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startcontainer_)));
          set_has_startcontainer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startPos;
        break;
      }

      // required int32 startPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
          set_has_startpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endContainer;
        break;
      }

      // required int32 endContainer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endContainer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endcontainer_)));
          set_has_endcontainer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endPos;
        break;
      }

      // required int32 endPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endpos_)));
          set_has_endpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // required int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqMoveGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 startContainer = 1;
  if (has_startcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->startcontainer(), output);
  }

  // required int32 startPos = 2;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 endContainer = 3;
  if (has_endcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endcontainer(), output);
  }

  // required int32 endPos = 4;
  if (has_endpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endpos(), output);
  }

  // required int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqMoveGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 startContainer = 1;
  if (has_startcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->startcontainer(), target);
  }

  // required int32 startPos = 2;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startpos(), target);
  }

  // required int32 endContainer = 3;
  if (has_endcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endcontainer(), target);
  }

  // required int32 endPos = 4;
  if (has_endpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endpos(), target);
  }

  // required int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqMoveGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 startContainer = 1;
    if (has_startcontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startcontainer());
    }

    // required int32 startPos = 2;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startpos());
    }

    // required int32 endContainer = 3;
    if (has_endcontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endcontainer());
    }

    // required int32 endPos = 4;
    if (has_endpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endpos());
    }

    // required int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqMoveGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqMoveGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqMoveGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqMoveGoods::MergeFrom(const ClientReqMoveGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startcontainer()) {
      set_startcontainer(from.startcontainer());
    }
    if (from.has_startpos()) {
      set_startpos(from.startpos());
    }
    if (from.has_endcontainer()) {
      set_endcontainer(from.endcontainer());
    }
    if (from.has_endpos()) {
      set_endpos(from.endpos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqMoveGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqMoveGoods::CopyFrom(const ClientReqMoveGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqMoveGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientReqMoveGoods::Swap(ClientReqMoveGoods* other) {
  if (other != this) {
    std::swap(startcontainer_, other->startcontainer_);
    std::swap(startpos_, other->startpos_);
    std::swap(endcontainer_, other->endcontainer_);
    std::swap(endpos_, other->endpos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqMoveGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqMoveGoods_descriptor_;
  metadata.reflection = ClientReqMoveGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToCUpdateGoodsRet::kStatusFieldNumber;
const int GTAckToCUpdateGoodsRet::kUpdateGoodsFieldNumber;
const int GTAckToCUpdateGoodsRet::kIsAddFieldNumber;
#endif  // !_MSC_VER

GTAckToCUpdateGoodsRet::GTAckToCUpdateGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToCUpdateGoodsRet::InitAsDefaultInstance() {
}

GTAckToCUpdateGoodsRet::GTAckToCUpdateGoodsRet(const GTAckToCUpdateGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToCUpdateGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  isadd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToCUpdateGoodsRet::~GTAckToCUpdateGoodsRet() {
  SharedDtor();
}

void GTAckToCUpdateGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckToCUpdateGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToCUpdateGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToCUpdateGoodsRet_descriptor_;
}

const GTAckToCUpdateGoodsRet& GTAckToCUpdateGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTAckToCUpdateGoodsRet* GTAckToCUpdateGoodsRet::default_instance_ = NULL;

GTAckToCUpdateGoodsRet* GTAckToCUpdateGoodsRet::New() const {
  return new GTAckToCUpdateGoodsRet;
}

void GTAckToCUpdateGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    isadd_ = 0;
  }
  updategoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToCUpdateGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        break;
      }

      // repeated .Goods.UpdateGoods updateGoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updategoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        if (input->ExpectTag(24)) goto parse_IsAdd;
        break;
      }

      // optional int32 IsAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToCUpdateGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .Goods.UpdateGoods updateGoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updategoods(i), output);
  }

  // optional int32 IsAdd = 3;
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isadd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToCUpdateGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .Goods.UpdateGoods updateGoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updategoods(i), target);
  }

  // optional int32 IsAdd = 3;
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isadd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToCUpdateGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 IsAdd = 3;
    if (has_isadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isadd());
    }

  }
  // repeated .Goods.UpdateGoods updateGoods = 2;
  total_size += 1 * this->updategoods_size();
  for (int i = 0; i < this->updategoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updategoods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToCUpdateGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToCUpdateGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToCUpdateGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToCUpdateGoodsRet::MergeFrom(const GTAckToCUpdateGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  updategoods_.MergeFrom(from.updategoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToCUpdateGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToCUpdateGoodsRet::CopyFrom(const GTAckToCUpdateGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToCUpdateGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < updategoods_size(); i++) {
    if (!this->updategoods(i).IsInitialized()) return false;
  }
  return true;
}

void GTAckToCUpdateGoodsRet::Swap(GTAckToCUpdateGoodsRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    updategoods_.Swap(&other->updategoods_);
    std::swap(isadd_, other->isadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToCUpdateGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToCUpdateGoodsRet_descriptor_;
  metadata.reflection = GTAckToCUpdateGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateGoods::kContainerFieldNumber;
const int UpdateGoods::kPosFieldNumber;
const int UpdateGoods::kItemInfoFieldNumber;
#endif  // !_MSC_VER

UpdateGoods::UpdateGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateGoods::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CharLogin::ClientItemInfo*>(&::CharLogin::ClientItemInfo::default_instance());
}

UpdateGoods::UpdateGoods(const UpdateGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateGoods::SharedCtor() {
  _cached_size_ = 0;
  container_ = 0;
  pos_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateGoods::~UpdateGoods() {
  SharedDtor();
}

void UpdateGoods::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void UpdateGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateGoods_descriptor_;
}

const UpdateGoods& UpdateGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

UpdateGoods* UpdateGoods::default_instance_ = NULL;

UpdateGoods* UpdateGoods::New() const {
  return new UpdateGoods;
}

void UpdateGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_ = 0;
    pos_ = 0;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CharLogin::ClientItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemInfo;
        break;
      }

      // required .CharLogin.ClientItemInfo itemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 container = 1;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->container(), output);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // required .CharLogin.ClientItemInfo itemInfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 container = 1;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->container(), target);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // required .CharLogin.ClientItemInfo itemInfo = 3;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 container = 1;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // required int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required .CharLogin.ClientItemInfo itemInfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateGoods::MergeFrom(const UpdateGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CharLogin::ClientItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGoods::CopyFrom(const UpdateGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_iteminfo()) {
    if (!this->iteminfo().IsInitialized()) return false;
  }
  return true;
}

void UpdateGoods::Swap(UpdateGoods* other) {
  if (other != this) {
    std::swap(container_, other->container_);
    std::swap(pos_, other->pos_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateGoods_descriptor_;
  metadata.reflection = UpdateGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqArrangeGoods::kContainerFieldNumber;
#endif  // !_MSC_VER

ClientReqArrangeGoods::ClientReqArrangeGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqArrangeGoods::InitAsDefaultInstance() {
}

ClientReqArrangeGoods::ClientReqArrangeGoods(const ClientReqArrangeGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqArrangeGoods::SharedCtor() {
  _cached_size_ = 0;
  container_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqArrangeGoods::~ClientReqArrangeGoods() {
  SharedDtor();
}

void ClientReqArrangeGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqArrangeGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqArrangeGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqArrangeGoods_descriptor_;
}

const ClientReqArrangeGoods& ClientReqArrangeGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ClientReqArrangeGoods* ClientReqArrangeGoods::default_instance_ = NULL;

ClientReqArrangeGoods* ClientReqArrangeGoods::New() const {
  return new ClientReqArrangeGoods;
}

void ClientReqArrangeGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqArrangeGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqArrangeGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 container = 1;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqArrangeGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 container = 1;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqArrangeGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 container = 1;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqArrangeGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqArrangeGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqArrangeGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqArrangeGoods::MergeFrom(const ClientReqArrangeGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container()) {
      set_container(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqArrangeGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqArrangeGoods::CopyFrom(const ClientReqArrangeGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqArrangeGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqArrangeGoods::Swap(ClientReqArrangeGoods* other) {
  if (other != this) {
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqArrangeGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqArrangeGoods_descriptor_;
  metadata.reflection = ClientReqArrangeGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqUseGoods::kGoodIDFieldNumber;
const int ClientReqUseGoods::kNumFieldNumber;
const int ClientReqUseGoods::kPosFieldNumber;
#endif  // !_MSC_VER

ClientReqUseGoods::ClientReqUseGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqUseGoods::InitAsDefaultInstance() {
}

ClientReqUseGoods::ClientReqUseGoods(const ClientReqUseGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqUseGoods::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0;
  num_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqUseGoods::~ClientReqUseGoods() {
  SharedDtor();
}

void ClientReqUseGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqUseGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqUseGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqUseGoods_descriptor_;
}

const ClientReqUseGoods& ClientReqUseGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ClientReqUseGoods* ClientReqUseGoods::default_instance_ = NULL;

ClientReqUseGoods* ClientReqUseGoods::New() const {
  return new ClientReqUseGoods;
}

void ClientReqUseGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goodid_ = 0;
    num_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqUseGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 goodID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqUseGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 goodID = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->goodid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqUseGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 goodID = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->goodid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqUseGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 goodID = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqUseGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqUseGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqUseGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqUseGoods::MergeFrom(const ClientReqUseGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqUseGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqUseGoods::CopyFrom(const ClientReqUseGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqUseGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientReqUseGoods::Swap(ClientReqUseGoods* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(num_, other->num_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqUseGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqUseGoods_descriptor_;
  metadata.reflection = ClientReqUseGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToCUseGoodsRet::kStatusFieldNumber;
const int GTAckToCUseGoodsRet::kUpdategoodsFieldNumber;
#endif  // !_MSC_VER

GTAckToCUseGoodsRet::GTAckToCUseGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToCUseGoodsRet::InitAsDefaultInstance() {
}

GTAckToCUseGoodsRet::GTAckToCUseGoodsRet(const GTAckToCUseGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToCUseGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToCUseGoodsRet::~GTAckToCUseGoodsRet() {
  SharedDtor();
}

void GTAckToCUseGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckToCUseGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToCUseGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToCUseGoodsRet_descriptor_;
}

const GTAckToCUseGoodsRet& GTAckToCUseGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTAckToCUseGoodsRet* GTAckToCUseGoodsRet::default_instance_ = NULL;

GTAckToCUseGoodsRet* GTAckToCUseGoodsRet::New() const {
  return new GTAckToCUseGoodsRet;
}

void GTAckToCUseGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  updategoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToCUseGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updategoods;
        break;
      }

      // repeated .Goods.UpdateGoods updategoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updategoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updategoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updategoods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToCUseGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .Goods.UpdateGoods updategoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updategoods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToCUseGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .Goods.UpdateGoods updategoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updategoods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToCUseGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .Goods.UpdateGoods updategoods = 2;
  total_size += 1 * this->updategoods_size();
  for (int i = 0; i < this->updategoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updategoods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToCUseGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToCUseGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToCUseGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToCUseGoodsRet::MergeFrom(const GTAckToCUseGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  updategoods_.MergeFrom(from.updategoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToCUseGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToCUseGoodsRet::CopyFrom(const GTAckToCUseGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToCUseGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < updategoods_size(); i++) {
    if (!this->updategoods(i).IsInitialized()) return false;
  }
  return true;
}

void GTAckToCUseGoodsRet::Swap(GTAckToCUseGoodsRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    updategoods_.Swap(&other->updategoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToCUseGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToCUseGoodsRet_descriptor_;
  metadata.reflection = GTAckToCUseGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqRecoverGoods::kContainerFieldNumber;
const int ClientReqRecoverGoods::kPosFieldNumber;
#endif  // !_MSC_VER

ClientReqRecoverGoods::ClientReqRecoverGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqRecoverGoods::InitAsDefaultInstance() {
}

ClientReqRecoverGoods::ClientReqRecoverGoods(const ClientReqRecoverGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqRecoverGoods::SharedCtor() {
  _cached_size_ = 0;
  container_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqRecoverGoods::~ClientReqRecoverGoods() {
  SharedDtor();
}

void ClientReqRecoverGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqRecoverGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqRecoverGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqRecoverGoods_descriptor_;
}

const ClientReqRecoverGoods& ClientReqRecoverGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ClientReqRecoverGoods* ClientReqRecoverGoods::default_instance_ = NULL;

ClientReqRecoverGoods* ClientReqRecoverGoods::New() const {
  return new ClientReqRecoverGoods;
}

void ClientReqRecoverGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqRecoverGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqRecoverGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 container = 1;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->container(), output);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqRecoverGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 container = 1;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->container(), target);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqRecoverGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 container = 1;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // required int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqRecoverGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqRecoverGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqRecoverGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqRecoverGoods::MergeFrom(const ClientReqRecoverGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqRecoverGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqRecoverGoods::CopyFrom(const ClientReqRecoverGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqRecoverGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientReqRecoverGoods::Swap(ClientReqRecoverGoods* other) {
  if (other != this) {
    std::swap(container_, other->container_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqRecoverGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqRecoverGoods_descriptor_;
  metadata.reflection = ClientReqRecoverGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CReqToGTOpenGoodsRet::kContainerFieldNumber;
const int CReqToGTOpenGoodsRet::kNumFieldNumber;
#endif  // !_MSC_VER

CReqToGTOpenGoodsRet::CReqToGTOpenGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CReqToGTOpenGoodsRet::InitAsDefaultInstance() {
}

CReqToGTOpenGoodsRet::CReqToGTOpenGoodsRet(const CReqToGTOpenGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CReqToGTOpenGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  container_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CReqToGTOpenGoodsRet::~CReqToGTOpenGoodsRet() {
  SharedDtor();
}

void CReqToGTOpenGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CReqToGTOpenGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CReqToGTOpenGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CReqToGTOpenGoodsRet_descriptor_;
}

const CReqToGTOpenGoodsRet& CReqToGTOpenGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

CReqToGTOpenGoodsRet* CReqToGTOpenGoodsRet::default_instance_ = NULL;

CReqToGTOpenGoodsRet* CReqToGTOpenGoodsRet::New() const {
  return new CReqToGTOpenGoodsRet;
}

void CReqToGTOpenGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    container_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CReqToGTOpenGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 container = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CReqToGTOpenGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 container = 1;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->container(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CReqToGTOpenGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 container = 1;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->container(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CReqToGTOpenGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 container = 1;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CReqToGTOpenGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CReqToGTOpenGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CReqToGTOpenGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CReqToGTOpenGoodsRet::MergeFrom(const CReqToGTOpenGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CReqToGTOpenGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CReqToGTOpenGoodsRet::CopyFrom(const CReqToGTOpenGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CReqToGTOpenGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CReqToGTOpenGoodsRet::Swap(CReqToGTOpenGoodsRet* other) {
  if (other != this) {
    std::swap(container_, other->container_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CReqToGTOpenGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CReqToGTOpenGoodsRet_descriptor_;
  metadata.reflection = CReqToGTOpenGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToCOpenGoodsRet::kStatusFieldNumber;
const int GTAckToCOpenGoodsRet::kContainerFieldNumber;
const int GTAckToCOpenGoodsRet::kPosFieldNumber;
#endif  // !_MSC_VER

GTAckToCOpenGoodsRet::GTAckToCOpenGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToCOpenGoodsRet::InitAsDefaultInstance() {
}

GTAckToCOpenGoodsRet::GTAckToCOpenGoodsRet(const GTAckToCOpenGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToCOpenGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  container_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToCOpenGoodsRet::~GTAckToCOpenGoodsRet() {
  SharedDtor();
}

void GTAckToCOpenGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckToCOpenGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToCOpenGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToCOpenGoodsRet_descriptor_;
}

const GTAckToCOpenGoodsRet& GTAckToCOpenGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTAckToCOpenGoodsRet* GTAckToCOpenGoodsRet::default_instance_ = NULL;

GTAckToCOpenGoodsRet* GTAckToCOpenGoodsRet::New() const {
  return new GTAckToCOpenGoodsRet;
}

void GTAckToCOpenGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    container_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToCOpenGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container;
        break;
      }

      // required int32 container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // repeated int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToCOpenGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required int32 container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container(), output);
  }

  // repeated int32 pos = 3;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToCOpenGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required int32 container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container(), target);
  }

  // repeated int32 pos = 3;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToCOpenGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

  }
  // repeated int32 pos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToCOpenGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToCOpenGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToCOpenGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToCOpenGoodsRet::MergeFrom(const GTAckToCOpenGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToCOpenGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToCOpenGoodsRet::CopyFrom(const GTAckToCOpenGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToCOpenGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTAckToCOpenGoodsRet::Swap(GTAckToCOpenGoodsRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(container_, other->container_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToCOpenGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToCOpenGoodsRet_descriptor_;
  metadata.reflection = GTAckToCOpenGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToCSaveGoodsRet::kUpdategoodsFieldNumber;
#endif  // !_MSC_VER

GTAckToCSaveGoodsRet::GTAckToCSaveGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToCSaveGoodsRet::InitAsDefaultInstance() {
}

GTAckToCSaveGoodsRet::GTAckToCSaveGoodsRet(const GTAckToCSaveGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToCSaveGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToCSaveGoodsRet::~GTAckToCSaveGoodsRet() {
  SharedDtor();
}

void GTAckToCSaveGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckToCSaveGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToCSaveGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToCSaveGoodsRet_descriptor_;
}

const GTAckToCSaveGoodsRet& GTAckToCSaveGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTAckToCSaveGoodsRet* GTAckToCSaveGoodsRet::default_instance_ = NULL;

GTAckToCSaveGoodsRet* GTAckToCSaveGoodsRet::New() const {
  return new GTAckToCSaveGoodsRet;
}

void GTAckToCSaveGoodsRet::Clear() {
  updategoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToCSaveGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Goods.UpdateGoods updategoods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updategoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updategoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updategoods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToCSaveGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Goods.UpdateGoods updategoods = 1;
  for (int i = 0; i < this->updategoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updategoods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToCSaveGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Goods.UpdateGoods updategoods = 1;
  for (int i = 0; i < this->updategoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updategoods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToCSaveGoodsRet::ByteSize() const {
  int total_size = 0;

  // repeated .Goods.UpdateGoods updategoods = 1;
  total_size += 1 * this->updategoods_size();
  for (int i = 0; i < this->updategoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updategoods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToCSaveGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToCSaveGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToCSaveGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToCSaveGoodsRet::MergeFrom(const GTAckToCSaveGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  updategoods_.MergeFrom(from.updategoods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToCSaveGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToCSaveGoodsRet::CopyFrom(const GTAckToCSaveGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToCSaveGoodsRet::IsInitialized() const {

  for (int i = 0; i < updategoods_size(); i++) {
    if (!this->updategoods(i).IsInitialized()) return false;
  }
  return true;
}

void GTAckToCSaveGoodsRet::Swap(GTAckToCSaveGoodsRet* other) {
  if (other != this) {
    updategoods_.Swap(&other->updategoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToCSaveGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToCSaveGoodsRet_descriptor_;
  metadata.reflection = GTAckToCSaveGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGTAddItem::kCharidFieldNumber;
const int ToGTAddItem::kItemFieldNumber;
#endif  // !_MSC_VER

ToGTAddItem::ToGTAddItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTAddItem::InitAsDefaultInstance() {
  item_ = const_cast< ::Goods::GTAckToCUpdateGoodsRet*>(&::Goods::GTAckToCUpdateGoodsRet::default_instance());
}

ToGTAddItem::ToGTAddItem(const ToGTAddItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTAddItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTAddItem::~ToGTAddItem() {
  SharedDtor();
}

void ToGTAddItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ToGTAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTAddItem_descriptor_;
}

const ToGTAddItem& ToGTAddItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ToGTAddItem* ToGTAddItem::default_instance_ = NULL;

ToGTAddItem* ToGTAddItem::New() const {
  return new ToGTAddItem;
}

void ToGTAddItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::Goods::GTAckToCUpdateGoodsRet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .Goods.GTAckToCUpdateGoodsRet item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGTAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .Goods.GTAckToCUpdateGoodsRet item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTAddItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .Goods.GTAckToCUpdateGoodsRet item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTAddItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .Goods.GTAckToCUpdateGoodsRet item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTAddItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTAddItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTAddItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTAddItem::MergeFrom(const ToGTAddItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item()) {
      mutable_item()->::Goods::GTAckToCUpdateGoodsRet::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTAddItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTAddItem::CopyFrom(const ToGTAddItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTAddItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ToGTAddItem::Swap(ToGTAddItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTAddItem_descriptor_;
  metadata.reflection = ToGTAddItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqMoveQuickSector::kTypeFieldNumber;
const int ClientReqMoveQuickSector::kIdFieldNumber;
const int ClientReqMoveQuickSector::kPosFieldNumber;
const int ClientReqMoveQuickSector::kContainerFieldNumber;
#endif  // !_MSC_VER

ClientReqMoveQuickSector::ClientReqMoveQuickSector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqMoveQuickSector::InitAsDefaultInstance() {
}

ClientReqMoveQuickSector::ClientReqMoveQuickSector(const ClientReqMoveQuickSector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqMoveQuickSector::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  pos_ = 0;
  container_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqMoveQuickSector::~ClientReqMoveQuickSector() {
  SharedDtor();
}

void ClientReqMoveQuickSector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqMoveQuickSector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqMoveQuickSector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqMoveQuickSector_descriptor_;
}

const ClientReqMoveQuickSector& ClientReqMoveQuickSector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

ClientReqMoveQuickSector* ClientReqMoveQuickSector::default_instance_ = NULL;

ClientReqMoveQuickSector* ClientReqMoveQuickSector::New() const {
  return new ClientReqMoveQuickSector;
}

void ClientReqMoveQuickSector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    pos_ = 0;
    container_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqMoveQuickSector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_container;
        break;
      }

      // required int32 container = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqMoveQuickSector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // required int32 container = 4;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqMoveQuickSector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // required int32 container = 4;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqMoveQuickSector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 container = 4;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqMoveQuickSector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqMoveQuickSector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqMoveQuickSector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqMoveQuickSector::MergeFrom(const ClientReqMoveQuickSector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqMoveQuickSector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqMoveQuickSector::CopyFrom(const ClientReqMoveQuickSector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqMoveQuickSector::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClientReqMoveQuickSector::Swap(ClientReqMoveQuickSector* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqMoveQuickSector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqMoveQuickSector_descriptor_;
  metadata.reflection = ClientReqMoveQuickSector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToCMoveQuickSectorRet::kTypeFieldNumber;
const int GTAckToCMoveQuickSectorRet::kIdFieldNumber;
const int GTAckToCMoveQuickSectorRet::kPosFieldNumber;
const int GTAckToCMoveQuickSectorRet::kContainerFieldNumber;
const int GTAckToCMoveQuickSectorRet::kStatusFieldNumber;
#endif  // !_MSC_VER

GTAckToCMoveQuickSectorRet::GTAckToCMoveQuickSectorRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToCMoveQuickSectorRet::InitAsDefaultInstance() {
}

GTAckToCMoveQuickSectorRet::GTAckToCMoveQuickSectorRet(const GTAckToCMoveQuickSectorRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToCMoveQuickSectorRet::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  pos_ = 0;
  container_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToCMoveQuickSectorRet::~GTAckToCMoveQuickSectorRet() {
  SharedDtor();
}

void GTAckToCMoveQuickSectorRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckToCMoveQuickSectorRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToCMoveQuickSectorRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToCMoveQuickSectorRet_descriptor_;
}

const GTAckToCMoveQuickSectorRet& GTAckToCMoveQuickSectorRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTAckToCMoveQuickSectorRet* GTAckToCMoveQuickSectorRet::default_instance_ = NULL;

GTAckToCMoveQuickSectorRet* GTAckToCMoveQuickSectorRet::New() const {
  return new GTAckToCMoveQuickSectorRet;
}

void GTAckToCMoveQuickSectorRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    pos_ = 0;
    container_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToCMoveQuickSectorRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_container;
        break;
      }

      // required int32 container = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToCMoveQuickSectorRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  // required int32 container = 4;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->container(), output);
  }

  // required int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToCMoveQuickSectorRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  // required int32 container = 4;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->container(), target);
  }

  // required int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToCMoveQuickSectorRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 container = 4;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // required int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToCMoveQuickSectorRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToCMoveQuickSectorRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToCMoveQuickSectorRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToCMoveQuickSectorRet::MergeFrom(const GTAckToCMoveQuickSectorRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToCMoveQuickSectorRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToCMoveQuickSectorRet::CopyFrom(const GTAckToCMoveQuickSectorRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToCMoveQuickSectorRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GTAckToCMoveQuickSectorRet::Swap(GTAckToCMoveQuickSectorRet* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(container_, other->container_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToCMoveQuickSectorRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToCMoveQuickSectorRet_descriptor_;
  metadata.reflection = GTAckToCMoveQuickSectorRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SplitGoods::kPosFieldNumber;
const int SplitGoods::kNumFieldNumber;
#endif  // !_MSC_VER

SplitGoods::SplitGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SplitGoods::InitAsDefaultInstance() {
}

SplitGoods::SplitGoods(const SplitGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SplitGoods::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitGoods::~SplitGoods() {
  SharedDtor();
}

void SplitGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SplitGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitGoods_descriptor_;
}

const SplitGoods& SplitGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

SplitGoods* SplitGoods::default_instance_ = NULL;

SplitGoods* SplitGoods::New() const {
  return new SplitGoods;
}

void SplitGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SplitGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SplitGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SplitGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitGoods::MergeFrom(const SplitGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitGoods::CopyFrom(const SplitGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SplitGoods::Swap(SplitGoods* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitGoods_descriptor_;
  metadata.reflection = SplitGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMMoveGoods::kCharidFieldNumber;
const int GTtoGMMoveGoods::kStartContainerFieldNumber;
const int GTtoGMMoveGoods::kStartPosFieldNumber;
const int GTtoGMMoveGoods::kEndContainerFieldNumber;
const int GTtoGMMoveGoods::kEndPosFieldNumber;
const int GTtoGMMoveGoods::kTypeFieldNumber;
#endif  // !_MSC_VER

GTtoGMMoveGoods::GTtoGMMoveGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMMoveGoods::InitAsDefaultInstance() {
}

GTtoGMMoveGoods::GTtoGMMoveGoods(const GTtoGMMoveGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMMoveGoods::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  startcontainer_ = 0;
  startpos_ = 0;
  endcontainer_ = 0;
  endpos_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMMoveGoods::~GTtoGMMoveGoods() {
  SharedDtor();
}

void GTtoGMMoveGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMMoveGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMMoveGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMMoveGoods_descriptor_;
}

const GTtoGMMoveGoods& GTtoGMMoveGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTtoGMMoveGoods* GTtoGMMoveGoods::default_instance_ = NULL;

GTtoGMMoveGoods* GTtoGMMoveGoods::New() const {
  return new GTtoGMMoveGoods;
}

void GTtoGMMoveGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    startcontainer_ = 0;
    startpos_ = 0;
    endcontainer_ = 0;
    endpos_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMMoveGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startContainer;
        break;
      }

      // required int32 startContainer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startContainer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startcontainer_)));
          set_has_startcontainer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startPos;
        break;
      }

      // required int32 startPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
          set_has_startpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endContainer;
        break;
      }

      // required int32 endContainer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endContainer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endcontainer_)));
          set_has_endcontainer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endPos;
        break;
      }

      // required int32 endPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endpos_)));
          set_has_endpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required int32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMMoveGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 startContainer = 2;
  if (has_startcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startcontainer(), output);
  }

  // required int32 startPos = 3;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startpos(), output);
  }

  // required int32 endContainer = 4;
  if (has_endcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endcontainer(), output);
  }

  // required int32 endPos = 5;
  if (has_endpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->endpos(), output);
  }

  // required int32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMMoveGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 startContainer = 2;
  if (has_startcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startcontainer(), target);
  }

  // required int32 startPos = 3;
  if (has_startpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startpos(), target);
  }

  // required int32 endContainer = 4;
  if (has_endcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endcontainer(), target);
  }

  // required int32 endPos = 5;
  if (has_endpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->endpos(), target);
  }

  // required int32 type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMMoveGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 startContainer = 2;
    if (has_startcontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startcontainer());
    }

    // required int32 startPos = 3;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startpos());
    }

    // required int32 endContainer = 4;
    if (has_endcontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endcontainer());
    }

    // required int32 endPos = 5;
    if (has_endpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endpos());
    }

    // required int32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMMoveGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMMoveGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMMoveGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMMoveGoods::MergeFrom(const GTtoGMMoveGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_startcontainer()) {
      set_startcontainer(from.startcontainer());
    }
    if (from.has_startpos()) {
      set_startpos(from.startpos());
    }
    if (from.has_endcontainer()) {
      set_endcontainer(from.endcontainer());
    }
    if (from.has_endpos()) {
      set_endpos(from.endpos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMMoveGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMMoveGoods::CopyFrom(const GTtoGMMoveGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMMoveGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GTtoGMMoveGoods::Swap(GTtoGMMoveGoods* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(startcontainer_, other->startcontainer_);
    std::swap(startpos_, other->startpos_);
    std::swap(endcontainer_, other->endcontainer_);
    std::swap(endpos_, other->endpos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMMoveGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMMoveGoods_descriptor_;
  metadata.reflection = GTtoGMMoveGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMRecoverGoods::kCharidFieldNumber;
const int GTtoGMRecoverGoods::kContainerFieldNumber;
const int GTtoGMRecoverGoods::kPosFieldNumber;
#endif  // !_MSC_VER

GTtoGMRecoverGoods::GTtoGMRecoverGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMRecoverGoods::InitAsDefaultInstance() {
}

GTtoGMRecoverGoods::GTtoGMRecoverGoods(const GTtoGMRecoverGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMRecoverGoods::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  container_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMRecoverGoods::~GTtoGMRecoverGoods() {
  SharedDtor();
}

void GTtoGMRecoverGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMRecoverGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMRecoverGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMRecoverGoods_descriptor_;
}

const GTtoGMRecoverGoods& GTtoGMRecoverGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTtoGMRecoverGoods* GTtoGMRecoverGoods::default_instance_ = NULL;

GTtoGMRecoverGoods* GTtoGMRecoverGoods::New() const {
  return new GTtoGMRecoverGoods;
}

void GTtoGMRecoverGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    container_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMRecoverGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container;
        break;
      }

      // required int32 container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // required int32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMRecoverGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container(), output);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMRecoverGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container(), target);
  }

  // required int32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMRecoverGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // required int32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMRecoverGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMRecoverGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMRecoverGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMRecoverGoods::MergeFrom(const GTtoGMRecoverGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMRecoverGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMRecoverGoods::CopyFrom(const GTtoGMRecoverGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMRecoverGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GTtoGMRecoverGoods::Swap(GTtoGMRecoverGoods* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(container_, other->container_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMRecoverGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMRecoverGoods_descriptor_;
  metadata.reflection = GTtoGMRecoverGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMArrangeGoods::kCharidFieldNumber;
const int GTtoGMArrangeGoods::kContainerFieldNumber;
#endif  // !_MSC_VER

GTtoGMArrangeGoods::GTtoGMArrangeGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMArrangeGoods::InitAsDefaultInstance() {
}

GTtoGMArrangeGoods::GTtoGMArrangeGoods(const GTtoGMArrangeGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMArrangeGoods::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  container_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMArrangeGoods::~GTtoGMArrangeGoods() {
  SharedDtor();
}

void GTtoGMArrangeGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMArrangeGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMArrangeGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMArrangeGoods_descriptor_;
}

const GTtoGMArrangeGoods& GTtoGMArrangeGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTtoGMArrangeGoods* GTtoGMArrangeGoods::default_instance_ = NULL;

GTtoGMArrangeGoods* GTtoGMArrangeGoods::New() const {
  return new GTtoGMArrangeGoods;
}

void GTtoGMArrangeGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    container_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMArrangeGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container;
        break;
      }

      // required int32 container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMArrangeGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMArrangeGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMArrangeGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMArrangeGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMArrangeGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMArrangeGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMArrangeGoods::MergeFrom(const GTtoGMArrangeGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMArrangeGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMArrangeGoods::CopyFrom(const GTtoGMArrangeGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMArrangeGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTtoGMArrangeGoods::Swap(GTtoGMArrangeGoods* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMArrangeGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMArrangeGoods_descriptor_;
  metadata.reflection = GTtoGMArrangeGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAckToCTOpenGoodsRet::kCharidFieldNumber;
const int GMAckToCTOpenGoodsRet::kRetFieldNumber;
#endif  // !_MSC_VER

GMAckToCTOpenGoodsRet::GMAckToCTOpenGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAckToCTOpenGoodsRet::InitAsDefaultInstance() {
  ret_ = const_cast< ::Goods::GTAckToCOpenGoodsRet*>(&::Goods::GTAckToCOpenGoodsRet::default_instance());
}

GMAckToCTOpenGoodsRet::GMAckToCTOpenGoodsRet(const GMAckToCTOpenGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAckToCTOpenGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAckToCTOpenGoodsRet::~GMAckToCTOpenGoodsRet() {
  SharedDtor();
}

void GMAckToCTOpenGoodsRet::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void GMAckToCTOpenGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAckToCTOpenGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAckToCTOpenGoodsRet_descriptor_;
}

const GMAckToCTOpenGoodsRet& GMAckToCTOpenGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GMAckToCTOpenGoodsRet* GMAckToCTOpenGoodsRet::default_instance_ = NULL;

GMAckToCTOpenGoodsRet* GMAckToCTOpenGoodsRet::New() const {
  return new GMAckToCTOpenGoodsRet;
}

void GMAckToCTOpenGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_ret()) {
      if (ret_ != NULL) ret_->::Goods::GTAckToCOpenGoodsRet::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAckToCTOpenGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret;
        break;
      }

      // required .Goods.GTAckToCOpenGoodsRet ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAckToCTOpenGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .Goods.GTAckToCOpenGoodsRet ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAckToCTOpenGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .Goods.GTAckToCOpenGoodsRet ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAckToCTOpenGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .Goods.GTAckToCOpenGoodsRet ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAckToCTOpenGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAckToCTOpenGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAckToCTOpenGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAckToCTOpenGoodsRet::MergeFrom(const GMAckToCTOpenGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ret()) {
      mutable_ret()->::Goods::GTAckToCOpenGoodsRet::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAckToCTOpenGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAckToCTOpenGoodsRet::CopyFrom(const GMAckToCTOpenGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAckToCTOpenGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void GMAckToCTOpenGoodsRet::Swap(GMAckToCTOpenGoodsRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAckToCTOpenGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAckToCTOpenGoodsRet_descriptor_;
  metadata.reflection = GMAckToCTOpenGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTReqToCMOpenGoodsRet::kCharidFieldNumber;
const int GTReqToCMOpenGoodsRet::kContainerFieldNumber;
const int GTReqToCMOpenGoodsRet::kNumFieldNumber;
#endif  // !_MSC_VER

GTReqToCMOpenGoodsRet::GTReqToCMOpenGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTReqToCMOpenGoodsRet::InitAsDefaultInstance() {
}

GTReqToCMOpenGoodsRet::GTReqToCMOpenGoodsRet(const GTReqToCMOpenGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTReqToCMOpenGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  container_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTReqToCMOpenGoodsRet::~GTReqToCMOpenGoodsRet() {
  SharedDtor();
}

void GTReqToCMOpenGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTReqToCMOpenGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTReqToCMOpenGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTReqToCMOpenGoodsRet_descriptor_;
}

const GTReqToCMOpenGoodsRet& GTReqToCMOpenGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTReqToCMOpenGoodsRet* GTReqToCMOpenGoodsRet::default_instance_ = NULL;

GTReqToCMOpenGoodsRet* GTReqToCMOpenGoodsRet::New() const {
  return new GTReqToCMOpenGoodsRet;
}

void GTReqToCMOpenGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    container_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTReqToCMOpenGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_container;
        break;
      }

      // required int32 container = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTReqToCMOpenGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->container(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTReqToCMOpenGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->container(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTReqToCMOpenGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTReqToCMOpenGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTReqToCMOpenGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTReqToCMOpenGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTReqToCMOpenGoodsRet::MergeFrom(const GTReqToCMOpenGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTReqToCMOpenGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTReqToCMOpenGoodsRet::CopyFrom(const GTReqToCMOpenGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTReqToCMOpenGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GTReqToCMOpenGoodsRet::Swap(GTReqToCMOpenGoodsRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(container_, other->container_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTReqToCMOpenGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTReqToCMOpenGoodsRet_descriptor_;
  metadata.reflection = GTReqToCMOpenGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMUseGoods::kCharidFieldNumber;
const int GTtoGMUseGoods::kGoodIDFieldNumber;
const int GTtoGMUseGoods::kNumFieldNumber;
const int GTtoGMUseGoods::kPosFieldNumber;
#endif  // !_MSC_VER

GTtoGMUseGoods::GTtoGMUseGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMUseGoods::InitAsDefaultInstance() {
}

GTtoGMUseGoods::GTtoGMUseGoods(const GTtoGMUseGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMUseGoods::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  goodid_ = 0;
  num_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMUseGoods::~GTtoGMUseGoods() {
  SharedDtor();
}

void GTtoGMUseGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMUseGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMUseGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMUseGoods_descriptor_;
}

const GTtoGMUseGoods& GTtoGMUseGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GTtoGMUseGoods* GTtoGMUseGoods::default_instance_ = NULL;

GTtoGMUseGoods* GTtoGMUseGoods::New() const {
  return new GTtoGMUseGoods;
}

void GTtoGMUseGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    goodid_ = 0;
    num_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMUseGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodID;
        break;
      }

      // required int32 goodID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // required int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMUseGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 goodID = 2;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goodid(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMUseGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 goodID = 2;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goodid(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMUseGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 goodID = 2;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMUseGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMUseGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMUseGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMUseGoods::MergeFrom(const GTtoGMUseGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMUseGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMUseGoods::CopyFrom(const GTtoGMUseGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMUseGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GTtoGMUseGoods::Swap(GTtoGMUseGoods* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(goodid_, other->goodid_);
    std::swap(num_, other->num_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMUseGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMUseGoods_descriptor_;
  metadata.reflection = GTtoGMUseGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CTReqGMMoveQuickSector::kCharidFieldNumber;
const int CTReqGMMoveQuickSector::kTypeFieldNumber;
const int CTReqGMMoveQuickSector::kIdFieldNumber;
const int CTReqGMMoveQuickSector::kPosFieldNumber;
const int CTReqGMMoveQuickSector::kContainerFieldNumber;
#endif  // !_MSC_VER

CTReqGMMoveQuickSector::CTReqGMMoveQuickSector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CTReqGMMoveQuickSector::InitAsDefaultInstance() {
}

CTReqGMMoveQuickSector::CTReqGMMoveQuickSector(const CTReqGMMoveQuickSector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CTReqGMMoveQuickSector::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  id_ = 0;
  pos_ = 0;
  container_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTReqGMMoveQuickSector::~CTReqGMMoveQuickSector() {
  SharedDtor();
}

void CTReqGMMoveQuickSector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CTReqGMMoveQuickSector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CTReqGMMoveQuickSector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CTReqGMMoveQuickSector_descriptor_;
}

const CTReqGMMoveQuickSector& CTReqGMMoveQuickSector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

CTReqGMMoveQuickSector* CTReqGMMoveQuickSector::default_instance_ = NULL;

CTReqGMMoveQuickSector* CTReqGMMoveQuickSector::New() const {
  return new CTReqGMMoveQuickSector;
}

void CTReqGMMoveQuickSector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    id_ = 0;
    pos_ = 0;
    container_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CTReqGMMoveQuickSector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // required int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_container;
        break;
      }

      // required int32 container = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_container:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &container_)));
          set_has_container();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTReqGMMoveQuickSector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required int32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pos(), output);
  }

  // required int32 container = 5;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CTReqGMMoveQuickSector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // required int32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pos(), target);
  }

  // required int32 container = 5;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CTReqGMMoveQuickSector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 container = 5;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTReqGMMoveQuickSector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CTReqGMMoveQuickSector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CTReqGMMoveQuickSector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CTReqGMMoveQuickSector::MergeFrom(const CTReqGMMoveQuickSector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_container()) {
      set_container(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CTReqGMMoveQuickSector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CTReqGMMoveQuickSector::CopyFrom(const CTReqGMMoveQuickSector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTReqGMMoveQuickSector::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CTReqGMMoveQuickSector::Swap(CTReqGMMoveQuickSector* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CTReqGMMoveQuickSector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CTReqGMMoveQuickSector_descriptor_;
  metadata.reflection = CTReqGMMoveQuickSector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GT2GMSplitGoods::kCharidFieldNumber;
const int GT2GMSplitGoods::kSplitgoodsFieldNumber;
#endif  // !_MSC_VER

GT2GMSplitGoods::GT2GMSplitGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GT2GMSplitGoods::InitAsDefaultInstance() {
  splitgoods_ = const_cast< ::Goods::SplitGoods*>(&::Goods::SplitGoods::default_instance());
}

GT2GMSplitGoods::GT2GMSplitGoods(const GT2GMSplitGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GT2GMSplitGoods::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  splitgoods_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GT2GMSplitGoods::~GT2GMSplitGoods() {
  SharedDtor();
}

void GT2GMSplitGoods::SharedDtor() {
  if (this != default_instance_) {
    delete splitgoods_;
  }
}

void GT2GMSplitGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GT2GMSplitGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GT2GMSplitGoods_descriptor_;
}

const GT2GMSplitGoods& GT2GMSplitGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

GT2GMSplitGoods* GT2GMSplitGoods::default_instance_ = NULL;

GT2GMSplitGoods* GT2GMSplitGoods::New() const {
  return new GT2GMSplitGoods;
}

void GT2GMSplitGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_splitgoods()) {
      if (splitgoods_ != NULL) splitgoods_->::Goods::SplitGoods::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GT2GMSplitGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_splitgoods;
        break;
      }

      // required .Goods.SplitGoods splitgoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_splitgoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_splitgoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GT2GMSplitGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .Goods.SplitGoods splitgoods = 2;
  if (has_splitgoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->splitgoods(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GT2GMSplitGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .Goods.SplitGoods splitgoods = 2;
  if (has_splitgoods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->splitgoods(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GT2GMSplitGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .Goods.SplitGoods splitgoods = 2;
    if (has_splitgoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->splitgoods());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GT2GMSplitGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GT2GMSplitGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GT2GMSplitGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GT2GMSplitGoods::MergeFrom(const GT2GMSplitGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_splitgoods()) {
      mutable_splitgoods()->::Goods::SplitGoods::MergeFrom(from.splitgoods());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GT2GMSplitGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GT2GMSplitGoods::CopyFrom(const GT2GMSplitGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GT2GMSplitGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_splitgoods()) {
    if (!this->splitgoods().IsInitialized()) return false;
  }
  return true;
}

void GT2GMSplitGoods::Swap(GT2GMSplitGoods* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(splitgoods_, other->splitgoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GT2GMSplitGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GT2GMSplitGoods_descriptor_;
  metadata.reflection = GT2GMSplitGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateQuickSector::kTypeFieldNumber;
const int UpdateQuickSector::kPosFieldNumber;
const int UpdateQuickSector::kGoodIDFieldNumber;
#endif  // !_MSC_VER

UpdateQuickSector::UpdateQuickSector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateQuickSector::InitAsDefaultInstance() {
}

UpdateQuickSector::UpdateQuickSector(const UpdateQuickSector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateQuickSector::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pos_ = 0;
  goodid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateQuickSector::~UpdateQuickSector() {
  SharedDtor();
}

void UpdateQuickSector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateQuickSector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateQuickSector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateQuickSector_descriptor_;
}

const UpdateQuickSector& UpdateQuickSector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

UpdateQuickSector* UpdateQuickSector::default_instance_ = NULL;

UpdateQuickSector* UpdateQuickSector::New() const {
  return new UpdateQuickSector;
}

void UpdateQuickSector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    pos_ = 0;
    goodid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateQuickSector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // required int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodID;
        break;
      }

      // required int32 goodID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateQuickSector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // required int32 goodID = 3;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateQuickSector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // required int32 goodID = 3;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goodid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateQuickSector::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int32 goodID = 3;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateQuickSector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateQuickSector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateQuickSector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateQuickSector::MergeFrom(const UpdateQuickSector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateQuickSector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateQuickSector::CopyFrom(const UpdateQuickSector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateQuickSector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateQuickSector::Swap(UpdateQuickSector* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(goodid_, other->goodid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateQuickSector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateQuickSector_descriptor_;
  metadata.reflection = UpdateQuickSector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveUpdateGoodsRet::kStatusFieldNumber;
const int MoveUpdateGoodsRet::kUpdateGoodsFieldNumber;
#endif  // !_MSC_VER

MoveUpdateGoodsRet::MoveUpdateGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveUpdateGoodsRet::InitAsDefaultInstance() {
}

MoveUpdateGoodsRet::MoveUpdateGoodsRet(const MoveUpdateGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveUpdateGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveUpdateGoodsRet::~MoveUpdateGoodsRet() {
  SharedDtor();
}

void MoveUpdateGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveUpdateGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveUpdateGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveUpdateGoodsRet_descriptor_;
}

const MoveUpdateGoodsRet& MoveUpdateGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

MoveUpdateGoodsRet* MoveUpdateGoodsRet::default_instance_ = NULL;

MoveUpdateGoodsRet* MoveUpdateGoodsRet::New() const {
  return new MoveUpdateGoodsRet;
}

void MoveUpdateGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  updategoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveUpdateGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        break;
      }

      // repeated .Goods.UpdateGoods updateGoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updategoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveUpdateGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .Goods.UpdateGoods updateGoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updategoods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveUpdateGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .Goods.UpdateGoods updateGoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updategoods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveUpdateGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .Goods.UpdateGoods updateGoods = 2;
  total_size += 1 * this->updategoods_size();
  for (int i = 0; i < this->updategoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updategoods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveUpdateGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveUpdateGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveUpdateGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveUpdateGoodsRet::MergeFrom(const MoveUpdateGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  updategoods_.MergeFrom(from.updategoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveUpdateGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveUpdateGoodsRet::CopyFrom(const MoveUpdateGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveUpdateGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < updategoods_size(); i++) {
    if (!this->updategoods(i).IsInitialized()) return false;
  }
  return true;
}

void MoveUpdateGoodsRet::Swap(MoveUpdateGoodsRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    updategoods_.Swap(&other->updategoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveUpdateGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveUpdateGoodsRet_descriptor_;
  metadata.reflection = MoveUpdateGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscardUpdateGoodsRet::kStatusFieldNumber;
const int DiscardUpdateGoodsRet::kUpdateGoodsFieldNumber;
const int DiscardUpdateGoodsRet::kGoodsIDFieldNumber;
const int DiscardUpdateGoodsRet::kDiscardNumFieldNumber;
#endif  // !_MSC_VER

DiscardUpdateGoodsRet::DiscardUpdateGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiscardUpdateGoodsRet::InitAsDefaultInstance() {
  updategoods_ = const_cast< ::Goods::UpdateGoods*>(&::Goods::UpdateGoods::default_instance());
}

DiscardUpdateGoodsRet::DiscardUpdateGoodsRet(const DiscardUpdateGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiscardUpdateGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  updategoods_ = NULL;
  goodsid_ = 0;
  discardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscardUpdateGoodsRet::~DiscardUpdateGoodsRet() {
  SharedDtor();
}

void DiscardUpdateGoodsRet::SharedDtor() {
  if (this != default_instance_) {
    delete updategoods_;
  }
}

void DiscardUpdateGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscardUpdateGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscardUpdateGoodsRet_descriptor_;
}

const DiscardUpdateGoodsRet& DiscardUpdateGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

DiscardUpdateGoodsRet* DiscardUpdateGoodsRet::default_instance_ = NULL;

DiscardUpdateGoodsRet* DiscardUpdateGoodsRet::New() const {
  return new DiscardUpdateGoodsRet;
}

void DiscardUpdateGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_updategoods()) {
      if (updategoods_ != NULL) updategoods_->::Goods::UpdateGoods::Clear();
    }
    goodsid_ = 0;
    discardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscardUpdateGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        break;
      }

      // required .Goods.UpdateGoods updateGoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updategoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsID;
        break;
      }

      // required int32 goodsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_discardNum;
        break;
      }

      // required int32 discardNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discardnum_)));
          set_has_discardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiscardUpdateGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // required .Goods.UpdateGoods updateGoods = 2;
  if (has_updategoods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updategoods(), output);
  }

  // required int32 goodsID = 3;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goodsid(), output);
  }

  // required int32 discardNum = 4;
  if (has_discardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->discardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiscardUpdateGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // required .Goods.UpdateGoods updateGoods = 2;
  if (has_updategoods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updategoods(), target);
  }

  // required int32 goodsID = 3;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goodsid(), target);
  }

  // required int32 discardNum = 4;
  if (has_discardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->discardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiscardUpdateGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required .Goods.UpdateGoods updateGoods = 2;
    if (has_updategoods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updategoods());
    }

    // required int32 goodsID = 3;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goodsid());
    }

    // required int32 discardNum = 4;
    if (has_discardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscardUpdateGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscardUpdateGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscardUpdateGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscardUpdateGoodsRet::MergeFrom(const DiscardUpdateGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_updategoods()) {
      mutable_updategoods()->::Goods::UpdateGoods::MergeFrom(from.updategoods());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_discardnum()) {
      set_discardnum(from.discardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscardUpdateGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscardUpdateGoodsRet::CopyFrom(const DiscardUpdateGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscardUpdateGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_updategoods()) {
    if (!this->updategoods().IsInitialized()) return false;
  }
  return true;
}

void DiscardUpdateGoodsRet::Swap(DiscardUpdateGoodsRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(updategoods_, other->updategoods_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(discardnum_, other->discardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscardUpdateGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscardUpdateGoodsRet_descriptor_;
  metadata.reflection = DiscardUpdateGoodsRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropGoodsInfo::kGoodsFieldNumber;
#endif  // !_MSC_VER

DropGoodsInfo::DropGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DropGoodsInfo::InitAsDefaultInstance() {
}

DropGoodsInfo::DropGoodsInfo(const DropGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DropGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropGoodsInfo::~DropGoodsInfo() {
  SharedDtor();
}

void DropGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropGoodsInfo_descriptor_;
}

const DropGoodsInfo& DropGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

DropGoodsInfo* DropGoodsInfo::default_instance_ = NULL;

DropGoodsInfo* DropGoodsInfo::New() const {
  return new DropGoodsInfo;
}

void DropGoodsInfo::Clear() {
  goods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Goods.DiscardUpdateGoodsRet goods = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Goods.DiscardUpdateGoodsRet goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DropGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Goods.DiscardUpdateGoodsRet goods = 1;
  for (int i = 0; i < this->goods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DropGoodsInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Goods.DiscardUpdateGoodsRet goods = 1;
  total_size += 1 * this->goods_size();
  for (int i = 0; i < this->goods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropGoodsInfo::MergeFrom(const DropGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_.MergeFrom(from.goods_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropGoodsInfo::CopyFrom(const DropGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropGoodsInfo::IsInitialized() const {

  for (int i = 0; i < goods_size(); i++) {
    if (!this->goods(i).IsInitialized()) return false;
  }
  return true;
}

void DropGoodsInfo::Swap(DropGoodsInfo* other) {
  if (other != this) {
    goods_.Swap(&other->goods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropGoodsInfo_descriptor_;
  metadata.reflection = DropGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimDropSomeGoods::kErrorFieldNumber;
const int SimDropSomeGoods::kGoodsInfoFieldNumber;
#endif  // !_MSC_VER

SimDropSomeGoods::SimDropSomeGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimDropSomeGoods::InitAsDefaultInstance() {
  goodsinfo_ = const_cast< ::Goods::DropGoodsInfo*>(&::Goods::DropGoodsInfo::default_instance());
}

SimDropSomeGoods::SimDropSomeGoods(const SimDropSomeGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimDropSomeGoods::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  goodsinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimDropSomeGoods::~SimDropSomeGoods() {
  SharedDtor();
}

void SimDropSomeGoods::SharedDtor() {
  if (this != default_instance_) {
    delete goodsinfo_;
  }
}

void SimDropSomeGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimDropSomeGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimDropSomeGoods_descriptor_;
}

const SimDropSomeGoods& SimDropSomeGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

SimDropSomeGoods* SimDropSomeGoods::default_instance_ = NULL;

SimDropSomeGoods* SimDropSomeGoods::New() const {
  return new SimDropSomeGoods;
}

void SimDropSomeGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    if (has_goodsinfo()) {
      if (goodsinfo_ != NULL) goodsinfo_->::Goods::DropGoodsInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimDropSomeGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodsInfo;
        break;
      }

      // optional .Goods.DropGoodsInfo goodsInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodsInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goodsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimDropSomeGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional .Goods.DropGoodsInfo goodsInfo = 2;
  if (has_goodsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goodsinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimDropSomeGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional .Goods.DropGoodsInfo goodsInfo = 2;
  if (has_goodsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goodsinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimDropSomeGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional .Goods.DropGoodsInfo goodsInfo = 2;
    if (has_goodsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goodsinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimDropSomeGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimDropSomeGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimDropSomeGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimDropSomeGoods::MergeFrom(const SimDropSomeGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_goodsinfo()) {
      mutable_goodsinfo()->::Goods::DropGoodsInfo::MergeFrom(from.goodsinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimDropSomeGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimDropSomeGoods::CopyFrom(const SimDropSomeGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimDropSomeGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_goodsinfo()) {
    if (!this->goodsinfo().IsInitialized()) return false;
  }
  return true;
}

void SimDropSomeGoods::Swap(SimDropSomeGoods* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(goodsinfo_, other->goodsinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimDropSomeGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimDropSomeGoods_descriptor_;
  metadata.reflection = SimDropSomeGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SplitUpdateGoodsRet::kStatusFieldNumber;
const int SplitUpdateGoodsRet::kUpdateGoodsFieldNumber;
#endif  // !_MSC_VER

SplitUpdateGoodsRet::SplitUpdateGoodsRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SplitUpdateGoodsRet::InitAsDefaultInstance() {
}

SplitUpdateGoodsRet::SplitUpdateGoodsRet(const SplitUpdateGoodsRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SplitUpdateGoodsRet::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SplitUpdateGoodsRet::~SplitUpdateGoodsRet() {
  SharedDtor();
}

void SplitUpdateGoodsRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SplitUpdateGoodsRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SplitUpdateGoodsRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SplitUpdateGoodsRet_descriptor_;
}

const SplitUpdateGoodsRet& SplitUpdateGoodsRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGoodsMessage_2eproto();
  return *default_instance_;
}

SplitUpdateGoodsRet* SplitUpdateGoodsRet::default_instance_ = NULL;

SplitUpdateGoodsRet* SplitUpdateGoodsRet::New() const {
  return new SplitUpdateGoodsRet;
}

void SplitUpdateGoodsRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  updategoods_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SplitUpdateGoodsRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        break;
      }

      // repeated .Goods.UpdateGoods updateGoods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateGoods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updategoods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_updateGoods;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SplitUpdateGoodsRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // repeated .Goods.UpdateGoods updateGoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updategoods(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SplitUpdateGoodsRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // repeated .Goods.UpdateGoods updateGoods = 2;
  for (int i = 0; i < this->updategoods_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updategoods(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SplitUpdateGoodsRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .Goods.UpdateGoods updateGoods = 2;
  total_size += 1 * this->updategoods_size();
  for (int i = 0; i < this->updategoods_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updategoods(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SplitUpdateGoodsRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SplitUpdateGoodsRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SplitUpdateGoodsRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SplitUpdateGoodsRet::MergeFrom(const SplitUpdateGoodsRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  updategoods_.MergeFrom(from.updategoods_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SplitUpdateGoodsRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SplitUpdateGoodsRet::CopyFrom(const SplitUpdateGoodsRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SplitUpdateGoodsRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < updategoods_size(); i++) {
    if (!this->updategoods(i).IsInitialized()) return false;
  }
  return true;
}

void SplitUpdateGoodsRet::Swap(SplitUpdateGoodsRet* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    updategoods_.Swap(&other->updategoods_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SplitUpdateGoodsRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SplitUpdateGoodsRet_descriptor_;
  metadata.reflection = SplitUpdateGoodsRet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Goods

// @@protoc_insertion_point(global_scope)
