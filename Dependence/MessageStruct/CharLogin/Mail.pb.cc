// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Mail.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/Mail.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MailInfo {

namespace {

const ::google::protobuf::Descriptor* SpecialItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialMailItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialMailItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGoodsInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGoodsInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimDBSendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimDBSendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailItemAndName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItemAndName_reflection_ = NULL;
const ::google::protobuf::Descriptor* MSSimDBSendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MSSimDBSendMail_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fMail_2eproto() {
  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/Mail.proto");
  GOOGLE_CHECK(file != NULL);
  SpecialItem_descriptor_ = file->message_type(0);
  static const int SpecialItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, num_),
  };
  SpecialItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialItem_descriptor_,
      SpecialItem::default_instance_,
      SpecialItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialItem));
  SpecialMailItemList_descriptor_ = file->message_type(1);
  static const int SpecialMailItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMailItemList, itemlist_),
  };
  SpecialMailItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialMailItemList_descriptor_,
      SpecialMailItemList::default_instance_,
      SpecialMailItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMailItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialMailItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialMailItemList));
  MailItems_descriptor_ = file->message_type(2);
  static const int MailItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItems, info_),
  };
  MailItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItems_descriptor_,
      MailItems::default_instance_,
      MailItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItems));
  MailItemInfo_descriptor_ = file->message_type(3);
  static const int MailItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, isopened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, substance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, itemlist_),
  };
  MailItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItemInfo_descriptor_,
      MailItemInfo::default_instance_,
      MailItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItemInfo));
  ReqGoodsInfo_descriptor_ = file->message_type(4);
  static const int ReqGoodsInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGoodsInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGoodsInfo, type_),
  };
  ReqGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGoodsInfo_descriptor_,
      ReqGoodsInfo::default_instance_,
      ReqGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGoodsInfo));
  ResGoodsInfo_descriptor_ = file->message_type(5);
  static const int ResGoodsInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGoodsInfo, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGoodsInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGoodsInfo, ret_),
  };
  ResGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResGoodsInfo_descriptor_,
      ResGoodsInfo::default_instance_,
      ResGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResGoodsInfo));
  RetGoodsInfo_descriptor_ = file->message_type(6);
  static const int RetGoodsInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGoodsInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGoodsInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGoodsInfo, itemlist_),
  };
  RetGoodsInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGoodsInfo_descriptor_,
      RetGoodsInfo::default_instance_,
      RetGoodsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGoodsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGoodsInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGoodsInfo));
  SimDBSendMail_descriptor_ = file->message_type(7);
  static const int SimDBSendMail_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, endname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, substance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, itemlist_),
  };
  SimDBSendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimDBSendMail_descriptor_,
      SimDBSendMail::default_instance_,
      SimDBSendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDBSendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimDBSendMail));
  MailItemAndName_descriptor_ = file->message_type(8);
  static const int MailItemAndName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemAndName, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemAndName, item_),
  };
  MailItemAndName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItemAndName_descriptor_,
      MailItemAndName::default_instance_,
      MailItemAndName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemAndName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemAndName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItemAndName));
  MSSimDBSendMail_descriptor_ = file->message_type(9);
  static const int MSSimDBSendMail_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, endname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, theme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, substance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, itemlist_),
  };
  MSSimDBSendMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MSSimDBSendMail_descriptor_,
      MSSimDBSendMail::default_instance_,
      MSSimDBSendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MSSimDBSendMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MSSimDBSendMail));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fMail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialItem_descriptor_, &SpecialItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialMailItemList_descriptor_, &SpecialMailItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItems_descriptor_, &MailItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItemInfo_descriptor_, &MailItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGoodsInfo_descriptor_, &ReqGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResGoodsInfo_descriptor_, &ResGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGoodsInfo_descriptor_, &RetGoodsInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimDBSendMail_descriptor_, &SimDBSendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItemAndName_descriptor_, &MailItemAndName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MSSimDBSendMail_descriptor_, &MSSimDBSendMail::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fMail_2eproto() {
  delete SpecialItem::default_instance_;
  delete SpecialItem_reflection_;
  delete SpecialMailItemList::default_instance_;
  delete SpecialMailItemList_reflection_;
  delete MailItems::default_instance_;
  delete MailItems_reflection_;
  delete MailItemInfo::default_instance_;
  delete MailItemInfo_reflection_;
  delete ReqGoodsInfo::default_instance_;
  delete ReqGoodsInfo_reflection_;
  delete ResGoodsInfo::default_instance_;
  delete ResGoodsInfo_reflection_;
  delete RetGoodsInfo::default_instance_;
  delete RetGoodsInfo_reflection_;
  delete SimDBSendMail::default_instance_;
  delete SimDBSendMail_reflection_;
  delete MailItemAndName::default_instance_;
  delete MailItemAndName_reflection_;
  delete MSSimDBSendMail::default_instance_;
  delete MSSimDBSendMail_reflection_;
}

void protobuf_AddDesc_CharLogin_2fMail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CharLogin::protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024CharLogin/Mail.proto\022\010MailInfo\032\034CharLo"
    "gin/CharBaseInfo.proto\"*\n\013SpecialItem\022\016\n"
    "\006itemID\030\001 \002(\005\022\013\n\003num\030\002 \002(\005\">\n\023SpecialMai"
    "lItemList\022\'\n\010itemList\030\001 \003(\0132\025.MailInfo.S"
    "pecialItem\"1\n\tMailItems\022$\n\004info\030\001 \003(\0132\026."
    "MailInfo.MailItemInfo\"\257\001\n\014MailItemInfo\022\020"
    "\n\010isopened\030\001 \002(\010\022\014\n\004name\030\002 \002(\t\022\r\n\005theme\030"
    "\003 \002(\t\022\021\n\tsubstance\030\004 \002(\t\022\r\n\005index\030\005 \002(\003\022"
    "\020\n\010sendtime\030\006 \002(\005\022\013\n\003day\030\007 \002(\005\022/\n\010itemLi"
    "st\030\010 \001(\0132\035.MailInfo.SpecialMailItemList\""
    ",\n\014ReqGoodsInfo\022\016\n\006MailId\030\001 \002(\003\022\014\n\004type\030"
    "\002 \002(\005\"9\n\014ResGoodsInfo\022\016\n\006MailId\030\001 \002(\003\022\014\n"
    "\004type\030\002 \002(\005\022\013\n\003ret\030\003 \001(\005\"t\n\014RetGoodsInfo"
    "\022\016\n\006charid\030\001 \002(\003\022#\n\003ret\030\002 \002(\0132\026.MailInfo"
    ".ResGoodsInfo\022/\n\010itemList\030\003 \001(\0132\035.MailIn"
    "fo.SpecialMailItemList\"\225\001\n\rSimDBSendMail"
    "\022\020\n\010sendname\030\001 \002(\t\022\016\n\006charid\030\002 \002(\003\022\017\n\007en"
    "dname\030\003 \002(\t\022\r\n\005theme\030\004 \002(\t\022\021\n\tsubstance\030"
    "\005 \002(\t\022/\n\010itemList\030\006 \001(\0132\035.MailInfo.Speci"
    "alMailItemList\"E\n\017MailItemAndName\022\014\n\004nam"
    "e\030\001 \002(\t\022$\n\004item\030\002 \002(\0132\026.MailInfo.MailIte"
    "mInfo\"\207\001\n\017MSSimDBSendMail\022\020\n\010sendname\030\001 "
    "\002(\t\022\017\n\007endname\030\002 \003(\t\022\r\n\005theme\030\003 \002(\t\022\021\n\ts"
    "ubstance\030\004 \002(\t\022/\n\010itemList\030\005 \001(\0132\035.MailI"
    "nfo.SpecialMailItemList", 983);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/Mail.proto", &protobuf_RegisterTypes);
  SpecialItem::default_instance_ = new SpecialItem();
  SpecialMailItemList::default_instance_ = new SpecialMailItemList();
  MailItems::default_instance_ = new MailItems();
  MailItemInfo::default_instance_ = new MailItemInfo();
  ReqGoodsInfo::default_instance_ = new ReqGoodsInfo();
  ResGoodsInfo::default_instance_ = new ResGoodsInfo();
  RetGoodsInfo::default_instance_ = new RetGoodsInfo();
  SimDBSendMail::default_instance_ = new SimDBSendMail();
  MailItemAndName::default_instance_ = new MailItemAndName();
  MSSimDBSendMail::default_instance_ = new MSSimDBSendMail();
  SpecialItem::default_instance_->InitAsDefaultInstance();
  SpecialMailItemList::default_instance_->InitAsDefaultInstance();
  MailItems::default_instance_->InitAsDefaultInstance();
  MailItemInfo::default_instance_->InitAsDefaultInstance();
  ReqGoodsInfo::default_instance_->InitAsDefaultInstance();
  ResGoodsInfo::default_instance_->InitAsDefaultInstance();
  RetGoodsInfo::default_instance_->InitAsDefaultInstance();
  SimDBSendMail::default_instance_->InitAsDefaultInstance();
  MailItemAndName::default_instance_->InitAsDefaultInstance();
  MSSimDBSendMail::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fMail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fMail_2eproto {
  StaticDescriptorInitializer_CharLogin_2fMail_2eproto() {
    protobuf_AddDesc_CharLogin_2fMail_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fMail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpecialItem::kItemIDFieldNumber;
const int SpecialItem::kNumFieldNumber;
#endif  // !_MSC_VER

SpecialItem::SpecialItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialItem::InitAsDefaultInstance() {
}

SpecialItem::SpecialItem(const SpecialItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialItem::~SpecialItem() {
  SharedDtor();
}

void SpecialItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialItem_descriptor_;
}

const SpecialItem& SpecialItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

SpecialItem* SpecialItem::default_instance_ = NULL;

SpecialItem* SpecialItem::New() const {
  return new SpecialItem;
}

void SpecialItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialItem::MergeFrom(const SpecialItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialItem::CopyFrom(const SpecialItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SpecialItem::Swap(SpecialItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialItem_descriptor_;
  metadata.reflection = SpecialItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialMailItemList::kItemListFieldNumber;
#endif  // !_MSC_VER

SpecialMailItemList::SpecialMailItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpecialMailItemList::InitAsDefaultInstance() {
}

SpecialMailItemList::SpecialMailItemList(const SpecialMailItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpecialMailItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialMailItemList::~SpecialMailItemList() {
  SharedDtor();
}

void SpecialMailItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialMailItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialMailItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialMailItemList_descriptor_;
}

const SpecialMailItemList& SpecialMailItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

SpecialMailItemList* SpecialMailItemList::default_instance_ = NULL;

SpecialMailItemList* SpecialMailItemList::New() const {
  return new SpecialMailItemList;
}

void SpecialMailItemList::Clear() {
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialMailItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailInfo.SpecialItem itemList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpecialMailItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MailInfo.SpecialItem itemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpecialMailItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MailInfo.SpecialItem itemList = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpecialMailItemList::ByteSize() const {
  int total_size = 0;

  // repeated .MailInfo.SpecialItem itemList = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialMailItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialMailItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialMailItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialMailItemList::MergeFrom(const SpecialMailItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialMailItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialMailItemList::CopyFrom(const SpecialMailItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialMailItemList::IsInitialized() const {

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void SpecialMailItemList::Swap(SpecialMailItemList* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialMailItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialMailItemList_descriptor_;
  metadata.reflection = SpecialMailItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailItems::kInfoFieldNumber;
#endif  // !_MSC_VER

MailItems::MailItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailItems::InitAsDefaultInstance() {
}

MailItems::MailItems(const MailItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItems::~MailItems() {
  SharedDtor();
}

void MailItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItems_descriptor_;
}

const MailItems& MailItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

MailItems* MailItems::default_instance_ = NULL;

MailItems* MailItems::New() const {
  return new MailItems;
}

void MailItems::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MailInfo.MailItemInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MailInfo.MailItemInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MailInfo.MailItemInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailItems::ByteSize() const {
  int total_size = 0;

  // repeated .MailInfo.MailItemInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItems::MergeFrom(const MailItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItems::CopyFrom(const MailItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItems::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void MailItems::Swap(MailItems* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailItems_descriptor_;
  metadata.reflection = MailItems_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailItemInfo::kIsopenedFieldNumber;
const int MailItemInfo::kNameFieldNumber;
const int MailItemInfo::kThemeFieldNumber;
const int MailItemInfo::kSubstanceFieldNumber;
const int MailItemInfo::kIndexFieldNumber;
const int MailItemInfo::kSendtimeFieldNumber;
const int MailItemInfo::kDayFieldNumber;
const int MailItemInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

MailItemInfo::MailItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailItemInfo::InitAsDefaultInstance() {
  itemlist_ = const_cast< ::MailInfo::SpecialMailItemList*>(&::MailInfo::SpecialMailItemList::default_instance());
}

MailItemInfo::MailItemInfo(const MailItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailItemInfo::SharedCtor() {
  _cached_size_ = 0;
  isopened_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = GOOGLE_LONGLONG(0);
  sendtime_ = 0;
  day_ = 0;
  itemlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItemInfo::~MailItemInfo() {
  SharedDtor();
}

void MailItemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (this != default_instance_) {
    delete itemlist_;
  }
}

void MailItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItemInfo_descriptor_;
}

const MailItemInfo& MailItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

MailItemInfo* MailItemInfo::default_instance_ = NULL;

MailItemInfo* MailItemInfo::New() const {
  return new MailItemInfo;
}

void MailItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isopened_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    if (has_substance()) {
      if (substance_ != &::google::protobuf::internal::kEmptyString) {
        substance_->clear();
      }
    }
    index_ = GOOGLE_LONGLONG(0);
    sendtime_ = 0;
    day_ = 0;
    if (has_itemlist()) {
      if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isopened = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopened_)));
          set_has_isopened();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_theme;
        break;
      }

      // required string theme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_substance;
        break;
      }

      // required string substance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_substance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->substance().data(), this->substance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // required int64 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sendtime;
        break;
      }

      // required int32 sendtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_day;
        break;
      }

      // required int32 day = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        break;
      }

      // optional .MailInfo.SpecialMailItemList itemList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isopened = 1;
  if (has_isopened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isopened(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->theme(), output);
  }

  // required string substance = 4;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->substance(), output);
  }

  // required int64 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->index(), output);
  }

  // required int32 sendtime = 6;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sendtime(), output);
  }

  // required int32 day = 7;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->day(), output);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 8;
  if (has_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isopened = 1;
  if (has_isopened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isopened(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->theme(), target);
  }

  // required string substance = 4;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->substance(), target);
  }

  // required int64 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->index(), target);
  }

  // required int32 sendtime = 6;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sendtime(), target);
  }

  // required int32 day = 7;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->day(), target);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 8;
  if (has_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isopened = 1;
    if (has_isopened()) {
      total_size += 1 + 1;
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string theme = 3;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // required string substance = 4;
    if (has_substance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->substance());
    }

    // required int64 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->index());
    }

    // required int32 sendtime = 6;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendtime());
    }

    // required int32 day = 7;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional .MailInfo.SpecialMailItemList itemList = 8;
    if (has_itemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItemInfo::MergeFrom(const MailItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isopened()) {
      set_isopened(from.isopened());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_substance()) {
      set_substance(from.substance());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_itemlist()) {
      mutable_itemlist()->::MailInfo::SpecialMailItemList::MergeFrom(from.itemlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItemInfo::CopyFrom(const MailItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_itemlist()) {
    if (!this->itemlist().IsInitialized()) return false;
  }
  return true;
}

void MailItemInfo::Swap(MailItemInfo* other) {
  if (other != this) {
    std::swap(isopened_, other->isopened_);
    std::swap(name_, other->name_);
    std::swap(theme_, other->theme_);
    std::swap(substance_, other->substance_);
    std::swap(index_, other->index_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(day_, other->day_);
    std::swap(itemlist_, other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailItemInfo_descriptor_;
  metadata.reflection = MailItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGoodsInfo::kMailIdFieldNumber;
const int ReqGoodsInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqGoodsInfo::ReqGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGoodsInfo::InitAsDefaultInstance() {
}

ReqGoodsInfo::ReqGoodsInfo(const ReqGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGoodsInfo::~ReqGoodsInfo() {
  SharedDtor();
}

void ReqGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGoodsInfo_descriptor_;
}

const ReqGoodsInfo& ReqGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

ReqGoodsInfo* ReqGoodsInfo::default_instance_ = NULL;

ReqGoodsInfo* ReqGoodsInfo::New() const {
  return new ReqGoodsInfo;
}

void ReqGoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 MailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 MailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 MailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 MailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGoodsInfo::MergeFrom(const ReqGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGoodsInfo::CopyFrom(const ReqGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGoodsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqGoodsInfo::Swap(ReqGoodsInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGoodsInfo_descriptor_;
  metadata.reflection = ReqGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResGoodsInfo::kMailIdFieldNumber;
const int ResGoodsInfo::kTypeFieldNumber;
const int ResGoodsInfo::kRetFieldNumber;
#endif  // !_MSC_VER

ResGoodsInfo::ResGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResGoodsInfo::InitAsDefaultInstance() {
}

ResGoodsInfo::ResGoodsInfo(const ResGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResGoodsInfo::~ResGoodsInfo() {
  SharedDtor();
}

void ResGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResGoodsInfo_descriptor_;
}

const ResGoodsInfo& ResGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

ResGoodsInfo* ResGoodsInfo::default_instance_ = NULL;

ResGoodsInfo* ResGoodsInfo::New() const {
  return new ResGoodsInfo;
}

void ResGoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 MailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 MailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mailid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 MailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mailid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 MailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mailid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResGoodsInfo::MergeFrom(const ResGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResGoodsInfo::CopyFrom(const ResGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResGoodsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ResGoodsInfo::Swap(ResGoodsInfo* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResGoodsInfo_descriptor_;
  metadata.reflection = ResGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGoodsInfo::kCharidFieldNumber;
const int RetGoodsInfo::kRetFieldNumber;
const int RetGoodsInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

RetGoodsInfo::RetGoodsInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGoodsInfo::InitAsDefaultInstance() {
  ret_ = const_cast< ::MailInfo::ResGoodsInfo*>(&::MailInfo::ResGoodsInfo::default_instance());
  itemlist_ = const_cast< ::MailInfo::SpecialMailItemList*>(&::MailInfo::SpecialMailItemList::default_instance());
}

RetGoodsInfo::RetGoodsInfo(const RetGoodsInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGoodsInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ret_ = NULL;
  itemlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGoodsInfo::~RetGoodsInfo() {
  SharedDtor();
}

void RetGoodsInfo::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
    delete itemlist_;
  }
}

void RetGoodsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGoodsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGoodsInfo_descriptor_;
}

const RetGoodsInfo& RetGoodsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

RetGoodsInfo* RetGoodsInfo::default_instance_ = NULL;

RetGoodsInfo* RetGoodsInfo::New() const {
  return new RetGoodsInfo;
}

void RetGoodsInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_ret()) {
      if (ret_ != NULL) ret_->::MailInfo::ResGoodsInfo::Clear();
    }
    if (has_itemlist()) {
      if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGoodsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ret;
        break;
      }

      // required .MailInfo.ResGoodsInfo ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemList;
        break;
      }

      // optional .MailInfo.SpecialMailItemList itemList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGoodsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .MailInfo.ResGoodsInfo ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ret(), output);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 3;
  if (has_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGoodsInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .MailInfo.ResGoodsInfo ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ret(), target);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 3;
  if (has_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGoodsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .MailInfo.ResGoodsInfo ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

    // optional .MailInfo.SpecialMailItemList itemList = 3;
    if (has_itemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGoodsInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGoodsInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGoodsInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGoodsInfo::MergeFrom(const RetGoodsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ret()) {
      mutable_ret()->::MailInfo::ResGoodsInfo::MergeFrom(from.ret());
    }
    if (from.has_itemlist()) {
      mutable_itemlist()->::MailInfo::SpecialMailItemList::MergeFrom(from.itemlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGoodsInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGoodsInfo::CopyFrom(const RetGoodsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGoodsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  if (has_itemlist()) {
    if (!this->itemlist().IsInitialized()) return false;
  }
  return true;
}

void RetGoodsInfo::Swap(RetGoodsInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(ret_, other->ret_);
    std::swap(itemlist_, other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGoodsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGoodsInfo_descriptor_;
  metadata.reflection = RetGoodsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimDBSendMail::kSendnameFieldNumber;
const int SimDBSendMail::kCharidFieldNumber;
const int SimDBSendMail::kEndnameFieldNumber;
const int SimDBSendMail::kThemeFieldNumber;
const int SimDBSendMail::kSubstanceFieldNumber;
const int SimDBSendMail::kItemListFieldNumber;
#endif  // !_MSC_VER

SimDBSendMail::SimDBSendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimDBSendMail::InitAsDefaultInstance() {
  itemlist_ = const_cast< ::MailInfo::SpecialMailItemList*>(&::MailInfo::SpecialMailItemList::default_instance());
}

SimDBSendMail::SimDBSendMail(const SimDBSendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimDBSendMail::SharedCtor() {
  _cached_size_ = 0;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = GOOGLE_LONGLONG(0);
  endname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimDBSendMail::~SimDBSendMail() {
  SharedDtor();
}

void SimDBSendMail::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (endname_ != &::google::protobuf::internal::kEmptyString) {
    delete endname_;
  }
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (this != default_instance_) {
    delete itemlist_;
  }
}

void SimDBSendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimDBSendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimDBSendMail_descriptor_;
}

const SimDBSendMail& SimDBSendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

SimDBSendMail* SimDBSendMail::default_instance_ = NULL;

SimDBSendMail* SimDBSendMail::New() const {
  return new SimDBSendMail;
}

void SimDBSendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    charid_ = GOOGLE_LONGLONG(0);
    if (has_endname()) {
      if (endname_ != &::google::protobuf::internal::kEmptyString) {
        endname_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    if (has_substance()) {
      if (substance_ != &::google::protobuf::internal::kEmptyString) {
        substance_->clear();
      }
    }
    if (has_itemlist()) {
      if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimDBSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sendname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endname;
        break;
      }

      // required string endname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endname().data(), this->endname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_theme;
        break;
      }

      // required string theme = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_substance;
        break;
      }

      // required string substance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_substance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->substance().data(), this->substance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemList;
        break;
      }

      // optional .MailInfo.SpecialMailItemList itemList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimDBSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sendname = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendname(), output);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // required string endname = 3;
  if (has_endname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endname().data(), this->endname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->endname(), output);
  }

  // required string theme = 4;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->theme(), output);
  }

  // required string substance = 5;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->substance(), output);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 6;
  if (has_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->itemlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimDBSendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sendname = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendname(), target);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // required string endname = 3;
  if (has_endname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endname().data(), this->endname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endname(), target);
  }

  // required string theme = 4;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->theme(), target);
  }

  // required string substance = 5;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->substance(), target);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 6;
  if (has_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->itemlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimDBSendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sendname = 1;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // required int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string endname = 3;
    if (has_endname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endname());
    }

    // required string theme = 4;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // required string substance = 5;
    if (has_substance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->substance());
    }

    // optional .MailInfo.SpecialMailItemList itemList = 6;
    if (has_itemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimDBSendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimDBSendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimDBSendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimDBSendMail::MergeFrom(const SimDBSendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_endname()) {
      set_endname(from.endname());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_substance()) {
      set_substance(from.substance());
    }
    if (from.has_itemlist()) {
      mutable_itemlist()->::MailInfo::SpecialMailItemList::MergeFrom(from.itemlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimDBSendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimDBSendMail::CopyFrom(const SimDBSendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimDBSendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_itemlist()) {
    if (!this->itemlist().IsInitialized()) return false;
  }
  return true;
}

void SimDBSendMail::Swap(SimDBSendMail* other) {
  if (other != this) {
    std::swap(sendname_, other->sendname_);
    std::swap(charid_, other->charid_);
    std::swap(endname_, other->endname_);
    std::swap(theme_, other->theme_);
    std::swap(substance_, other->substance_);
    std::swap(itemlist_, other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimDBSendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimDBSendMail_descriptor_;
  metadata.reflection = SimDBSendMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailItemAndName::kNameFieldNumber;
const int MailItemAndName::kItemFieldNumber;
#endif  // !_MSC_VER

MailItemAndName::MailItemAndName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailItemAndName::InitAsDefaultInstance() {
  item_ = const_cast< ::MailInfo::MailItemInfo*>(&::MailInfo::MailItemInfo::default_instance());
}

MailItemAndName::MailItemAndName(const MailItemAndName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailItemAndName::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItemAndName::~MailItemAndName() {
  SharedDtor();
}

void MailItemAndName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete item_;
  }
}

void MailItemAndName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItemAndName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItemAndName_descriptor_;
}

const MailItemAndName& MailItemAndName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

MailItemAndName* MailItemAndName::default_instance_ = NULL;

MailItemAndName* MailItemAndName::New() const {
  return new MailItemAndName;
}

void MailItemAndName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_item()) {
      if (item_ != NULL) item_->::MailInfo::MailItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItemAndName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // required .MailInfo.MailItemInfo item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailItemAndName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required .MailInfo.MailItemInfo item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailItemAndName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .MailInfo.MailItemInfo item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailItemAndName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .MailInfo.MailItemInfo item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItemAndName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItemAndName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItemAndName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItemAndName::MergeFrom(const MailItemAndName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_item()) {
      mutable_item()->::MailInfo::MailItemInfo::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItemAndName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItemAndName::CopyFrom(const MailItemAndName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItemAndName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void MailItemAndName::Swap(MailItemAndName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailItemAndName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailItemAndName_descriptor_;
  metadata.reflection = MailItemAndName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MSSimDBSendMail::kSendnameFieldNumber;
const int MSSimDBSendMail::kEndnameFieldNumber;
const int MSSimDBSendMail::kThemeFieldNumber;
const int MSSimDBSendMail::kSubstanceFieldNumber;
const int MSSimDBSendMail::kItemListFieldNumber;
#endif  // !_MSC_VER

MSSimDBSendMail::MSSimDBSendMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MSSimDBSendMail::InitAsDefaultInstance() {
  itemlist_ = const_cast< ::MailInfo::SpecialMailItemList*>(&::MailInfo::SpecialMailItemList::default_instance());
}

MSSimDBSendMail::MSSimDBSendMail(const MSSimDBSendMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MSSimDBSendMail::SharedCtor() {
  _cached_size_ = 0;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MSSimDBSendMail::~MSSimDBSendMail() {
  SharedDtor();
}

void MSSimDBSendMail::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (this != default_instance_) {
    delete itemlist_;
  }
}

void MSSimDBSendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MSSimDBSendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSSimDBSendMail_descriptor_;
}

const MSSimDBSendMail& MSSimDBSendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMail_2eproto();
  return *default_instance_;
}

MSSimDBSendMail* MSSimDBSendMail::default_instance_ = NULL;

MSSimDBSendMail* MSSimDBSendMail::New() const {
  return new MSSimDBSendMail;
}

void MSSimDBSendMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    if (has_theme()) {
      if (theme_ != &::google::protobuf::internal::kEmptyString) {
        theme_->clear();
      }
    }
    if (has_substance()) {
      if (substance_ != &::google::protobuf::internal::kEmptyString) {
        substance_->clear();
      }
    }
    if (has_itemlist()) {
      if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
    }
  }
  endname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MSSimDBSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sendname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endname;
        break;
      }

      // repeated string endname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_endname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endname(this->endname_size() - 1).data(),
            this->endname(this->endname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_endname;
        if (input->ExpectTag(26)) goto parse_theme;
        break;
      }

      // required string theme = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_theme:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_theme()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->theme().data(), this->theme().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_substance;
        break;
      }

      // required string substance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_substance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_substance()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->substance().data(), this->substance().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemList;
        break;
      }

      // optional .MailInfo.SpecialMailItemList itemList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MSSimDBSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sendname = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendname(), output);
  }

  // repeated string endname = 2;
  for (int i = 0; i < this->endname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->endname(i).data(), this->endname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->endname(i), output);
  }

  // required string theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->theme(), output);
  }

  // required string substance = 4;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->substance(), output);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 5;
  if (has_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->itemlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MSSimDBSendMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sendname = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendname(), target);
  }

  // repeated string endname = 2;
  for (int i = 0; i < this->endname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endname(i).data(), this->endname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->endname(i), target);
  }

  // required string theme = 3;
  if (has_theme()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->theme().data(), this->theme().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->theme(), target);
  }

  // required string substance = 4;
  if (has_substance()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->substance().data(), this->substance().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->substance(), target);
  }

  // optional .MailInfo.SpecialMailItemList itemList = 5;
  if (has_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->itemlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MSSimDBSendMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sendname = 1;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // required string theme = 3;
    if (has_theme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->theme());
    }

    // required string substance = 4;
    if (has_substance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->substance());
    }

    // optional .MailInfo.SpecialMailItemList itemList = 5;
    if (has_itemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist());
    }

  }
  // repeated string endname = 2;
  total_size += 1 * this->endname_size();
  for (int i = 0; i < this->endname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->endname(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MSSimDBSendMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MSSimDBSendMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MSSimDBSendMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MSSimDBSendMail::MergeFrom(const MSSimDBSendMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  endname_.MergeFrom(from.endname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_theme()) {
      set_theme(from.theme());
    }
    if (from.has_substance()) {
      set_substance(from.substance());
    }
    if (from.has_itemlist()) {
      mutable_itemlist()->::MailInfo::SpecialMailItemList::MergeFrom(from.itemlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MSSimDBSendMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MSSimDBSendMail::CopyFrom(const MSSimDBSendMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MSSimDBSendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_itemlist()) {
    if (!this->itemlist().IsInitialized()) return false;
  }
  return true;
}

void MSSimDBSendMail::Swap(MSSimDBSendMail* other) {
  if (other != this) {
    std::swap(sendname_, other->sendname_);
    endname_.Swap(&other->endname_);
    std::swap(theme_, other->theme_);
    std::swap(substance_, other->substance_);
    std::swap(itemlist_, other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MSSimDBSendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MSSimDBSendMail_descriptor_;
  metadata.reflection = MSSimDBSendMail_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MailInfo

// @@protoc_insertion_point(global_scope)
