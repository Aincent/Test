// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/SynchPath.proto

#ifndef PROTOBUF_Map_2fSynchPath_2eproto__INCLUDED
#define PROTOBUF_Map_2fSynchPath_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PlayerSynch {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

class PathToAllPlayer;
class MonsterPathToPlayer;
class SynchMonsterPath;
class SynchBaseToGate;
class SynchSkill;
class EquipData;
class SynchPlayerBase;
class MeditationInfo;
class SynchMonsterToGate;
class SynchMonsterBase;
class SynchCompeteMonster;
class SynchBuffChar;
class PathToGate;
class SynchInfoToPath;
class SynchInfo;
class CharPosRet;
class CharPos;
class ReqFindPath;
class MapMonsterPos;
class SingleFindPos;
class AckPathPosition;
class MapMonsterPath;
class SingleMonsterPath;
class ReqInstanceMonsterPos;
class RetInstanceMonsterPos;
class InstanceMonsterPosInfo;
class GirlWarPathToPlayer;
class SynchGirlWar;
class RemotePlayerEquip;
class AlterPlayerEquip;

// ===================================================================

class PathToAllPlayer : public ::google::protobuf::Message {
 public:
  PathToAllPlayer();
  virtual ~PathToAllPlayer();

  PathToAllPlayer(const PathToAllPlayer& from);

  inline PathToAllPlayer& operator=(const PathToAllPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathToAllPlayer& default_instance();

  void Swap(PathToAllPlayer* other);

  // implements Message ----------------------------------------------

  PathToAllPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathToAllPlayer& from);
  void MergeFrom(const PathToAllPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // repeated .PlayerSynch.CharPos pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PlayerSynch::CharPos& pos(int index) const;
  inline ::PlayerSynch::CharPos* mutable_pos(int index);
  inline ::PlayerSynch::CharPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:PlayerSynch.PathToAllPlayer)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos > pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static PathToAllPlayer* default_instance_;
};
// -------------------------------------------------------------------

class MonsterPathToPlayer : public ::google::protobuf::Message {
 public:
  MonsterPathToPlayer();
  virtual ~MonsterPathToPlayer();

  MonsterPathToPlayer(const MonsterPathToPlayer& from);

  inline MonsterPathToPlayer& operator=(const MonsterPathToPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterPathToPlayer& default_instance();

  void Swap(MonsterPathToPlayer* other);

  // implements Message ----------------------------------------------

  MonsterPathToPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterPathToPlayer& from);
  void MergeFrom(const MonsterPathToPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required int32 movespeed = 2;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 2;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // required int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated .PlayerSynch.CharPos pos = 4;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::PlayerSynch::CharPos& pos(int index) const;
  inline ::PlayerSynch::CharPos* mutable_pos(int index);
  inline ::PlayerSynch::CharPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
      mutable_pos();

  // optional int32 targetkey = 5;
  inline bool has_targetkey() const;
  inline void clear_targetkey();
  static const int kTargetkeyFieldNumber = 5;
  inline ::google::protobuf::int32 targetkey() const;
  inline void set_targetkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.MonsterPathToPlayer)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_targetkey();
  inline void clear_has_targetkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 movespeed_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos > pos_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 targetkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static MonsterPathToPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SynchMonsterPath : public ::google::protobuf::Message {
 public:
  SynchMonsterPath();
  virtual ~SynchMonsterPath();

  SynchMonsterPath(const SynchMonsterPath& from);

  inline SynchMonsterPath& operator=(const SynchMonsterPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchMonsterPath& default_instance();

  void Swap(SynchMonsterPath* other);

  // implements Message ----------------------------------------------

  SynchMonsterPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchMonsterPath& from);
  void MergeFrom(const SynchMonsterPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required .PlayerSynch.MonsterPathToPlayer path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::PlayerSynch::MonsterPathToPlayer& path() const;
  inline ::PlayerSynch::MonsterPathToPlayer* mutable_path();
  inline ::PlayerSynch::MonsterPathToPlayer* release_path();
  inline void set_allocated_path(::PlayerSynch::MonsterPathToPlayer* path);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchMonsterPath)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::PlayerSynch::MonsterPathToPlayer* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchMonsterPath* default_instance_;
};
// -------------------------------------------------------------------

class SynchBaseToGate : public ::google::protobuf::Message {
 public:
  SynchBaseToGate();
  virtual ~SynchBaseToGate();

  SynchBaseToGate(const SynchBaseToGate& from);

  inline SynchBaseToGate& operator=(const SynchBaseToGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchBaseToGate& default_instance();

  void Swap(SynchBaseToGate* other);

  // implements Message ----------------------------------------------

  SynchBaseToGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchBaseToGate& from);
  void MergeFrom(const SynchBaseToGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required .PlayerSynch.SynchPlayerBase info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PlayerSynch::SynchPlayerBase& info() const;
  inline ::PlayerSynch::SynchPlayerBase* mutable_info();
  inline ::PlayerSynch::SynchPlayerBase* release_info();
  inline void set_allocated_info(::PlayerSynch::SynchPlayerBase* info);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchBaseToGate)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::PlayerSynch::SynchPlayerBase* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchBaseToGate* default_instance_;
};
// -------------------------------------------------------------------

class SynchSkill : public ::google::protobuf::Message {
 public:
  SynchSkill();
  virtual ~SynchSkill();

  SynchSkill(const SynchSkill& from);

  inline SynchSkill& operator=(const SynchSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchSkill& default_instance();

  void Swap(SynchSkill* other);

  // implements Message ----------------------------------------------

  SynchSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchSkill& from);
  void MergeFrom(const SynchSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 objectKey = 2;
  inline bool has_objectkey() const;
  inline void clear_objectkey();
  static const int kObjectKeyFieldNumber = 2;
  inline ::google::protobuf::int32 objectkey() const;
  inline void set_objectkey(::google::protobuf::int32 value);

  // optional int32 posX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 posY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional int32 surplusTime = 5;
  inline bool has_surplustime() const;
  inline void clear_surplustime();
  static const int kSurplusTimeFieldNumber = 5;
  inline ::google::protobuf::int32 surplustime() const;
  inline void set_surplustime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchSkill)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_objectkey();
  inline void clear_has_objectkey();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_surplustime();
  inline void clear_has_surplustime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 objectkey_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::int32 surplustime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchSkill* default_instance_;
};
// -------------------------------------------------------------------

class EquipData : public ::google::protobuf::Message {
 public:
  EquipData();
  virtual ~EquipData();

  EquipData(const EquipData& from);

  inline EquipData& operator=(const EquipData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipData& default_instance();

  void Swap(EquipData* other);

  // implements Message ----------------------------------------------

  EquipData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipData& from);
  void MergeFrom(const EquipData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 strenggrade = 2;
  inline bool has_strenggrade() const;
  inline void clear_strenggrade();
  static const int kStrenggradeFieldNumber = 2;
  inline ::google::protobuf::int32 strenggrade() const;
  inline void set_strenggrade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.EquipData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_strenggrade();
  inline void clear_has_strenggrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 strenggrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static EquipData* default_instance_;
};
// -------------------------------------------------------------------

class SynchPlayerBase : public ::google::protobuf::Message {
 public:
  SynchPlayerBase();
  virtual ~SynchPlayerBase();

  SynchPlayerBase(const SynchPlayerBase& from);

  inline SynchPlayerBase& operator=(const SynchPlayerBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchPlayerBase& default_instance();

  void Swap(SynchPlayerBase* other);

  // implements Message ----------------------------------------------

  SynchPlayerBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchPlayerBase& from);
  void MergeFrom(const SynchPlayerBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 hpmax = 5;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 5;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // required int32 mp = 6;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 6;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // required int32 mpmax = 7;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 7;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // required int32 xpos = 8;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 8;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 9;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 9;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // required int32 profession = 10;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 10;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 movespeed = 11;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 11;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // required int32 state = 12;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 12;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // required int32 country = 13;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 13;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // repeated .PlayerSynch.CharPos pos = 14;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 14;
  inline const ::PlayerSynch::CharPos& pos(int index) const;
  inline ::PlayerSynch::CharPos* mutable_pos(int index);
  inline ::PlayerSynch::CharPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
      mutable_pos();

  // required bool sex = 15;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 15;
  inline bool sex() const;
  inline void set_sex(bool value);

  // repeated .PlayerSynch.SynchBuffChar buf = 16;
  inline int buf_size() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 16;
  inline const ::PlayerSynch::SynchBuffChar& buf(int index) const;
  inline ::PlayerSynch::SynchBuffChar* mutable_buf(int index);
  inline ::PlayerSynch::SynchBuffChar* add_buf();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >&
      buf() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >*
      mutable_buf();

  // optional int32 horse = 17;
  inline bool has_horse() const;
  inline void clear_horse();
  static const int kHorseFieldNumber = 17;
  inline ::google::protobuf::int32 horse() const;
  inline void set_horse(::google::protobuf::int32 value);

  // optional int32 lv = 18;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 18;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 titleid = 19;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 19;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // required int32 fightpower = 20;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightpowerFieldNumber = 20;
  inline ::google::protobuf::int32 fightpower() const;
  inline void set_fightpower(::google::protobuf::int32 value);

  // optional .PlayerSynch.EquipData equip = 21;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 21;
  inline const ::PlayerSynch::EquipData& equip() const;
  inline ::PlayerSynch::EquipData* mutable_equip();
  inline ::PlayerSynch::EquipData* release_equip();
  inline void set_allocated_equip(::PlayerSynch::EquipData* equip);

  // optional int32 magicweapon = 22;
  inline bool has_magicweapon() const;
  inline void clear_magicweapon();
  static const int kMagicweaponFieldNumber = 22;
  inline ::google::protobuf::int32 magicweapon() const;
  inline void set_magicweapon(::google::protobuf::int32 value);

  // required int32 costume = 23;
  inline bool has_costume() const;
  inline void clear_costume();
  static const int kCostumeFieldNumber = 23;
  inline ::google::protobuf::int32 costume() const;
  inline void set_costume(::google::protobuf::int32 value);

  // optional string clanname = 24;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClannameFieldNumber = 24;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const char* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // optional uint32 clanid = 25;
  inline bool has_clanid() const;
  inline void clear_clanid();
  static const int kClanidFieldNumber = 25;
  inline ::google::protobuf::uint32 clanid() const;
  inline void set_clanid(::google::protobuf::uint32 value);

  // optional uint32 viplv = 26;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 26;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 clanjob = 27;
  inline bool has_clanjob() const;
  inline void clear_clanjob();
  static const int kClanjobFieldNumber = 27;
  inline ::google::protobuf::uint32 clanjob() const;
  inline void set_clanjob(::google::protobuf::uint32 value);

  // optional int32 clanicon = 28;
  inline bool has_clanicon() const;
  inline void clear_clanicon();
  static const int kClaniconFieldNumber = 28;
  inline ::google::protobuf::int32 clanicon() const;
  inline void set_clanicon(::google::protobuf::int32 value);

  // optional int32 sinvalue = 29;
  inline bool has_sinvalue() const;
  inline void clear_sinvalue();
  static const int kSinvalueFieldNumber = 29;
  inline ::google::protobuf::int32 sinvalue() const;
  inline void set_sinvalue(::google::protobuf::int32 value);

  // optional int32 fashionID = 30;
  inline bool has_fashionid() const;
  inline void clear_fashionid();
  static const int kFashionIDFieldNumber = 30;
  inline ::google::protobuf::int32 fashionid() const;
  inline void set_fashionid(::google::protobuf::int32 value);

  // optional .PlayerSynch.SynchSkill skillData = 31;
  inline bool has_skilldata() const;
  inline void clear_skilldata();
  static const int kSkillDataFieldNumber = 31;
  inline const ::PlayerSynch::SynchSkill& skilldata() const;
  inline ::PlayerSynch::SynchSkill* mutable_skilldata();
  inline ::PlayerSynch::SynchSkill* release_skilldata();
  inline void set_allocated_skilldata(::PlayerSynch::SynchSkill* skilldata);

  // optional .PlayerSynch.MeditationInfo meditation = 32;
  inline bool has_meditation() const;
  inline void clear_meditation();
  static const int kMeditationFieldNumber = 32;
  inline const ::PlayerSynch::MeditationInfo& meditation() const;
  inline ::PlayerSynch::MeditationInfo* mutable_meditation();
  inline ::PlayerSynch::MeditationInfo* release_meditation();
  inline void set_allocated_meditation(::PlayerSynch::MeditationInfo* meditation);

  // optional int32 distortion = 33;
  inline bool has_distortion() const;
  inline void clear_distortion();
  static const int kDistortionFieldNumber = 33;
  inline ::google::protobuf::int32 distortion() const;
  inline void set_distortion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchPlayerBase)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_horse();
  inline void clear_has_horse();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_magicweapon();
  inline void clear_has_magicweapon();
  inline void set_has_costume();
  inline void clear_has_costume();
  inline void set_has_clanname();
  inline void clear_has_clanname();
  inline void set_has_clanid();
  inline void clear_has_clanid();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_clanjob();
  inline void clear_has_clanjob();
  inline void set_has_clanicon();
  inline void clear_has_clanicon();
  inline void set_has_sinvalue();
  inline void clear_has_sinvalue();
  inline void set_has_fashionid();
  inline void clear_has_fashionid();
  inline void set_has_skilldata();
  inline void clear_has_skilldata();
  inline void set_has_meditation();
  inline void clear_has_meditation();
  inline void set_has_distortion();
  inline void clear_has_distortion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 movespeed_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos > pos_;
  ::google::protobuf::int32 country_;
  bool sex_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar > buf_;
  ::google::protobuf::int32 horse_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 fightpower_;
  ::PlayerSynch::EquipData* equip_;
  ::google::protobuf::int32 magicweapon_;
  ::google::protobuf::int32 costume_;
  ::std::string* clanname_;
  ::google::protobuf::uint32 clanid_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 clanjob_;
  ::google::protobuf::int32 clanicon_;
  ::google::protobuf::int32 sinvalue_;
  ::google::protobuf::int32 fashionid_;
  ::PlayerSynch::SynchSkill* skilldata_;
  ::PlayerSynch::MeditationInfo* meditation_;
  ::google::protobuf::int32 distortion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchPlayerBase* default_instance_;
};
// -------------------------------------------------------------------

class MeditationInfo : public ::google::protobuf::Message {
 public:
  MeditationInfo();
  virtual ~MeditationInfo();

  MeditationInfo(const MeditationInfo& from);

  inline MeditationInfo& operator=(const MeditationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MeditationInfo& default_instance();

  void Swap(MeditationInfo* other);

  // implements Message ----------------------------------------------

  MeditationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MeditationInfo& from);
  void MergeFrom(const MeditationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 targetkey = 1;
  inline bool has_targetkey() const;
  inline void clear_targetkey();
  static const int kTargetkeyFieldNumber = 1;
  inline ::google::protobuf::int32 targetkey() const;
  inline void set_targetkey(::google::protobuf::int32 value);

  // optional int32 xpos = 2;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 2;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // optional int32 ypos = 3;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 3;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // optional int32 targetgirlwarkey = 4;
  inline bool has_targetgirlwarkey() const;
  inline void clear_targetgirlwarkey();
  static const int kTargetgirlwarkeyFieldNumber = 4;
  inline ::google::protobuf::int32 targetgirlwarkey() const;
  inline void set_targetgirlwarkey(::google::protobuf::int32 value);

  // optional int32 selfgirlwarkey = 5;
  inline bool has_selfgirlwarkey() const;
  inline void clear_selfgirlwarkey();
  static const int kSelfgirlwarkeyFieldNumber = 5;
  inline ::google::protobuf::int32 selfgirlwarkey() const;
  inline void set_selfgirlwarkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.MeditationInfo)
 private:
  inline void set_has_targetkey();
  inline void clear_has_targetkey();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_targetgirlwarkey();
  inline void clear_has_targetgirlwarkey();
  inline void set_has_selfgirlwarkey();
  inline void clear_has_selfgirlwarkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 targetkey_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int32 targetgirlwarkey_;
  ::google::protobuf::int32 selfgirlwarkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static MeditationInfo* default_instance_;
};
// -------------------------------------------------------------------

class SynchMonsterToGate : public ::google::protobuf::Message {
 public:
  SynchMonsterToGate();
  virtual ~SynchMonsterToGate();

  SynchMonsterToGate(const SynchMonsterToGate& from);

  inline SynchMonsterToGate& operator=(const SynchMonsterToGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchMonsterToGate& default_instance();

  void Swap(SynchMonsterToGate* other);

  // implements Message ----------------------------------------------

  SynchMonsterToGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchMonsterToGate& from);
  void MergeFrom(const SynchMonsterToGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required .PlayerSynch.SynchMonsterBase info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PlayerSynch::SynchMonsterBase& info() const;
  inline ::PlayerSynch::SynchMonsterBase* mutable_info();
  inline ::PlayerSynch::SynchMonsterBase* release_info();
  inline void set_allocated_info(::PlayerSynch::SynchMonsterBase* info);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchMonsterToGate)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::PlayerSynch::SynchMonsterBase* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchMonsterToGate* default_instance_;
};
// -------------------------------------------------------------------

class SynchMonsterBase : public ::google::protobuf::Message {
 public:
  SynchMonsterBase();
  virtual ~SynchMonsterBase();

  SynchMonsterBase(const SynchMonsterBase& from);

  inline SynchMonsterBase& operator=(const SynchMonsterBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchMonsterBase& default_instance();

  void Swap(SynchMonsterBase* other);

  // implements Message ----------------------------------------------

  SynchMonsterBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchMonsterBase& from);
  void MergeFrom(const SynchMonsterBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required int32 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 mp = 4;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 4;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // required int32 xpos = 5;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 5;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 6;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 6;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // required int32 country = 7;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 7;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int32 hpmax = 8;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 8;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 mpmax = 9;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 9;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // repeated .PlayerSynch.SynchBuffChar buf = 10;
  inline int buf_size() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 10;
  inline const ::PlayerSynch::SynchBuffChar& buf(int index) const;
  inline ::PlayerSynch::SynchBuffChar* mutable_buf(int index);
  inline ::PlayerSynch::SynchBuffChar* add_buf();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >&
      buf() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >*
      mutable_buf();

  // optional string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 movespeed = 12;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 12;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // required int32 state = 13;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 13;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // repeated .PlayerSynch.CharPos pos = 14;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 14;
  inline const ::PlayerSynch::CharPos& pos(int index) const;
  inline ::PlayerSynch::CharPos* mutable_pos(int index);
  inline ::PlayerSynch::CharPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchMonsterBase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar > buf_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 movespeed_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos > pos_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchMonsterBase* default_instance_;
};
// -------------------------------------------------------------------

class SynchCompeteMonster : public ::google::protobuf::Message {
 public:
  SynchCompeteMonster();
  virtual ~SynchCompeteMonster();

  SynchCompeteMonster(const SynchCompeteMonster& from);

  inline SynchCompeteMonster& operator=(const SynchCompeteMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchCompeteMonster& default_instance();

  void Swap(SynchCompeteMonster* other);

  // implements Message ----------------------------------------------

  SynchCompeteMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchCompeteMonster& from);
  void MergeFrom(const SynchCompeteMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 hp = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 4;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 hpmax = 5;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 5;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // required int32 mp = 6;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 6;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // required int32 mpmax = 7;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 7;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // required int32 xpos = 8;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 8;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 9;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 9;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // required int32 profession = 10;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 10;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 movespeed = 11;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 11;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // required int32 country = 12;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 12;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // required bool sex = 13;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 13;
  inline bool sex() const;
  inline void set_sex(bool value);

  // repeated .PlayerSynch.SynchBuffChar buf = 14;
  inline int buf_size() const;
  inline void clear_buf();
  static const int kBufFieldNumber = 14;
  inline const ::PlayerSynch::SynchBuffChar& buf(int index) const;
  inline ::PlayerSynch::SynchBuffChar* mutable_buf(int index);
  inline ::PlayerSynch::SynchBuffChar* add_buf();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >&
      buf() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >*
      mutable_buf();

  // optional int32 lv = 15;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 15;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 titleid = 16;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 16;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // required .PlayerSynch.EquipData equip = 17;
  inline bool has_equip() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 17;
  inline const ::PlayerSynch::EquipData& equip() const;
  inline ::PlayerSynch::EquipData* mutable_equip();
  inline ::PlayerSynch::EquipData* release_equip();
  inline void set_allocated_equip(::PlayerSynch::EquipData* equip);

  // optional int32 magicweapon = 18;
  inline bool has_magicweapon() const;
  inline void clear_magicweapon();
  static const int kMagicweaponFieldNumber = 18;
  inline ::google::protobuf::int32 magicweapon() const;
  inline void set_magicweapon(::google::protobuf::int32 value);

  // required int32 costume = 19;
  inline bool has_costume() const;
  inline void clear_costume();
  static const int kCostumeFieldNumber = 19;
  inline ::google::protobuf::int32 costume() const;
  inline void set_costume(::google::protobuf::int32 value);

  // optional string clanname = 20;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClannameFieldNumber = 20;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const char* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // optional uint32 viplv = 21;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 21;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional int32 fashion = 22;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 22;
  inline ::google::protobuf::int32 fashion() const;
  inline void set_fashion(::google::protobuf::int32 value);

  // optional int32 horseid = 23;
  inline bool has_horseid() const;
  inline void clear_horseid();
  static const int kHorseidFieldNumber = 23;
  inline ::google::protobuf::int32 horseid() const;
  inline void set_horseid(::google::protobuf::int32 value);

  // optional int32 clanJob = 24;
  inline bool has_clanjob() const;
  inline void clear_clanjob();
  static const int kClanJobFieldNumber = 24;
  inline ::google::protobuf::int32 clanjob() const;
  inline void set_clanjob(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchCompeteMonster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_equip();
  inline void clear_has_equip();
  inline void set_has_magicweapon();
  inline void clear_has_magicweapon();
  inline void set_has_costume();
  inline void clear_has_costume();
  inline void set_has_clanname();
  inline void clear_has_clanname();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_fashion();
  inline void clear_has_fashion();
  inline void set_has_horseid();
  inline void clear_has_horseid();
  inline void set_has_clanjob();
  inline void clear_has_clanjob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 key_;
  ::std::string* name_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 movespeed_;
  ::google::protobuf::int32 country_;
  bool sex_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar > buf_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 titleid_;
  ::PlayerSynch::EquipData* equip_;
  ::google::protobuf::int32 magicweapon_;
  ::google::protobuf::int32 costume_;
  ::std::string* clanname_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::int32 fashion_;
  ::google::protobuf::int32 horseid_;
  ::google::protobuf::int32 clanjob_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchCompeteMonster* default_instance_;
};
// -------------------------------------------------------------------

class SynchBuffChar : public ::google::protobuf::Message {
 public:
  SynchBuffChar();
  virtual ~SynchBuffChar();

  SynchBuffChar(const SynchBuffChar& from);

  inline SynchBuffChar& operator=(const SynchBuffChar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchBuffChar& default_instance();

  void Swap(SynchBuffChar* other);

  // implements Message ----------------------------------------------

  SynchBuffChar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchBuffChar& from);
  void MergeFrom(const SynchBuffChar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required uint32 onlyid = 2;
  inline bool has_onlyid() const;
  inline void clear_onlyid();
  static const int kOnlyidFieldNumber = 2;
  inline ::google::protobuf::uint32 onlyid() const;
  inline void set_onlyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchBuffChar)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_onlyid();
  inline void clear_has_onlyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 onlyid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchBuffChar* default_instance_;
};
// -------------------------------------------------------------------

class PathToGate : public ::google::protobuf::Message {
 public:
  PathToGate();
  virtual ~PathToGate();

  PathToGate(const PathToGate& from);

  inline PathToGate& operator=(const PathToGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathToGate& default_instance();

  void Swap(PathToGate* other);

  // implements Message ----------------------------------------------

  PathToGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathToGate& from);
  void MergeFrom(const PathToGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 mycharid = 1;
  inline bool has_mycharid() const;
  inline void clear_mycharid();
  static const int kMycharidFieldNumber = 1;
  inline ::google::protobuf::int64 mycharid() const;
  inline void set_mycharid(::google::protobuf::int64 value);

  // required .PlayerSynch.PathToAllPlayer path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::PlayerSynch::PathToAllPlayer& path() const;
  inline ::PlayerSynch::PathToAllPlayer* mutable_path();
  inline ::PlayerSynch::PathToAllPlayer* release_path();
  inline void set_allocated_path(::PlayerSynch::PathToAllPlayer* path);

  // @@protoc_insertion_point(class_scope:PlayerSynch.PathToGate)
 private:
  inline void set_has_mycharid();
  inline void clear_has_mycharid();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mycharid_;
  ::PlayerSynch::PathToAllPlayer* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static PathToGate* default_instance_;
};
// -------------------------------------------------------------------

class SynchInfoToPath : public ::google::protobuf::Message {
 public:
  SynchInfoToPath();
  virtual ~SynchInfoToPath();

  SynchInfoToPath(const SynchInfoToPath& from);

  inline SynchInfoToPath& operator=(const SynchInfoToPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchInfoToPath& default_instance();

  void Swap(SynchInfoToPath* other);

  // implements Message ----------------------------------------------

  SynchInfoToPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchInfoToPath& from);
  void MergeFrom(const SynchInfoToPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required .PlayerSynch.SynchInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::PlayerSynch::SynchInfo& info() const;
  inline ::PlayerSynch::SynchInfo* mutable_info();
  inline ::PlayerSynch::SynchInfo* release_info();
  inline void set_allocated_info(::PlayerSynch::SynchInfo* info);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchInfoToPath)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::PlayerSynch::SynchInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchInfoToPath* default_instance_;
};
// -------------------------------------------------------------------

class SynchInfo : public ::google::protobuf::Message {
 public:
  SynchInfo();
  virtual ~SynchInfo();

  SynchInfo(const SynchInfo& from);

  inline SynchInfo& operator=(const SynchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchInfo& default_instance();

  void Swap(SynchInfo* other);

  // implements Message ----------------------------------------------

  SynchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchInfo& from);
  void MergeFrom(const SynchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .PlayerSynch.CharPos pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PlayerSynch::CharPos& pos(int index) const;
  inline ::PlayerSynch::CharPos* mutable_pos(int index);
  inline ::PlayerSynch::CharPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos > pos_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharPosRet : public ::google::protobuf::Message {
 public:
  CharPosRet();
  virtual ~CharPosRet();

  CharPosRet(const CharPosRet& from);

  inline CharPosRet& operator=(const CharPosRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharPosRet& default_instance();

  void Swap(CharPosRet* other);

  // implements Message ----------------------------------------------

  CharPosRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharPosRet& from);
  void MergeFrom(const CharPosRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 isvalid = 3;
  inline bool has_isvalid() const;
  inline void clear_isvalid();
  static const int kIsvalidFieldNumber = 3;
  inline ::google::protobuf::int32 isvalid() const;
  inline void set_isvalid(::google::protobuf::int32 value);

  // optional .PlayerSynch.CharPos pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::PlayerSynch::CharPos& pos() const;
  inline ::PlayerSynch::CharPos* mutable_pos();
  inline ::PlayerSynch::CharPos* release_pos();
  inline void set_allocated_pos(::PlayerSynch::CharPos* pos);

  // @@protoc_insertion_point(class_scope:PlayerSynch.CharPosRet)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isvalid();
  inline void clear_has_isvalid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 isvalid_;
  ::PlayerSynch::CharPos* pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static CharPosRet* default_instance_;
};
// -------------------------------------------------------------------

class CharPos : public ::google::protobuf::Message {
 public:
  CharPos();
  virtual ~CharPos();

  CharPos(const CharPos& from);

  inline CharPos& operator=(const CharPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharPos& default_instance();

  void Swap(CharPos* other);

  // implements Message ----------------------------------------------

  CharPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharPos& from);
  void MergeFrom(const CharPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 xpos = 1;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 1;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 2;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 2;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.CharPos)
 private:
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static CharPos* default_instance_;
};
// -------------------------------------------------------------------

class ReqFindPath : public ::google::protobuf::Message {
 public:
  ReqFindPath();
  virtual ~ReqFindPath();

  ReqFindPath(const ReqFindPath& from);

  inline ReqFindPath& operator=(const ReqFindPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqFindPath& default_instance();

  void Swap(ReqFindPath* other);

  // implements Message ----------------------------------------------

  ReqFindPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqFindPath& from);
  void MergeFrom(const ReqFindPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 mapid = 1;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int64 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::int64 value);
  inline void add_mapid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_mapid();

  // repeated .PlayerSynch.MapMonsterPos monster = 2;
  inline int monster_size() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 2;
  inline const ::PlayerSynch::MapMonsterPos& monster(int index) const;
  inline ::PlayerSynch::MapMonsterPos* mutable_monster(int index);
  inline ::PlayerSynch::MapMonsterPos* add_monster();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPos >&
      monster() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPos >*
      mutable_monster();

  // @@protoc_insertion_point(class_scope:PlayerSynch.ReqFindPath)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > mapid_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPos > monster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static ReqFindPath* default_instance_;
};
// -------------------------------------------------------------------

class MapMonsterPos : public ::google::protobuf::Message {
 public:
  MapMonsterPos();
  virtual ~MapMonsterPos();

  MapMonsterPos(const MapMonsterPos& from);

  inline MapMonsterPos& operator=(const MapMonsterPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapMonsterPos& default_instance();

  void Swap(MapMonsterPos* other);

  // implements Message ----------------------------------------------

  MapMonsterPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapMonsterPos& from);
  void MergeFrom(const MapMonsterPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerSynch.SingleFindPos monster = 1;
  inline int monster_size() const;
  inline void clear_monster();
  static const int kMonsterFieldNumber = 1;
  inline const ::PlayerSynch::SingleFindPos& monster(int index) const;
  inline ::PlayerSynch::SingleFindPos* mutable_monster(int index);
  inline ::PlayerSynch::SingleFindPos* add_monster();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleFindPos >&
      monster() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleFindPos >*
      mutable_monster();

  // @@protoc_insertion_point(class_scope:PlayerSynch.MapMonsterPos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleFindPos > monster_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static MapMonsterPos* default_instance_;
};
// -------------------------------------------------------------------

class SingleFindPos : public ::google::protobuf::Message {
 public:
  SingleFindPos();
  virtual ~SingleFindPos();

  SingleFindPos(const SingleFindPos& from);

  inline SingleFindPos& operator=(const SingleFindPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleFindPos& default_instance();

  void Swap(SingleFindPos* other);

  // implements Message ----------------------------------------------

  SingleFindPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleFindPos& from);
  void MergeFrom(const SingleFindPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional uint64 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint64 pos() const;
  inline void set_pos(::google::protobuf::uint64 value);

  // optional int32 distance = 3;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 3;
  inline ::google::protobuf::int32 distance() const;
  inline void set_distance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SingleFindPos)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_distance();
  inline void clear_has_distance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 pos_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 distance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SingleFindPos* default_instance_;
};
// -------------------------------------------------------------------

class AckPathPosition : public ::google::protobuf::Message {
 public:
  AckPathPosition();
  virtual ~AckPathPosition();

  AckPathPosition(const AckPathPosition& from);

  inline AckPathPosition& operator=(const AckPathPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPathPosition& default_instance();

  void Swap(AckPathPosition* other);

  // implements Message ----------------------------------------------

  AckPathPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPathPosition& from);
  void MergeFrom(const AckPathPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 mapid = 1;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int64 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::int64 value);
  inline void add_mapid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_mapid();

  // repeated .PlayerSynch.MapMonsterPath path = 2;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::PlayerSynch::MapMonsterPath& path(int index) const;
  inline ::PlayerSynch::MapMonsterPath* mutable_path(int index);
  inline ::PlayerSynch::MapMonsterPath* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPath >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPath >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:PlayerSynch.AckPathPosition)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > mapid_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPath > path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static AckPathPosition* default_instance_;
};
// -------------------------------------------------------------------

class MapMonsterPath : public ::google::protobuf::Message {
 public:
  MapMonsterPath();
  virtual ~MapMonsterPath();

  MapMonsterPath(const MapMonsterPath& from);

  inline MapMonsterPath& operator=(const MapMonsterPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapMonsterPath& default_instance();

  void Swap(MapMonsterPath* other);

  // implements Message ----------------------------------------------

  MapMonsterPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapMonsterPath& from);
  void MergeFrom(const MapMonsterPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerSynch.SingleMonsterPath path = 1;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::PlayerSynch::SingleMonsterPath& path(int index) const;
  inline ::PlayerSynch::SingleMonsterPath* mutable_path(int index);
  inline ::PlayerSynch::SingleMonsterPath* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleMonsterPath >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleMonsterPath >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:PlayerSynch.MapMonsterPath)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleMonsterPath > path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static MapMonsterPath* default_instance_;
};
// -------------------------------------------------------------------

class SingleMonsterPath : public ::google::protobuf::Message {
 public:
  SingleMonsterPath();
  virtual ~SingleMonsterPath();

  SingleMonsterPath(const SingleMonsterPath& from);

  inline SingleMonsterPath& operator=(const SingleMonsterPath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SingleMonsterPath& default_instance();

  void Swap(SingleMonsterPath* other);

  // implements Message ----------------------------------------------

  SingleMonsterPath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SingleMonsterPath& from);
  void MergeFrom(const SingleMonsterPath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // repeated int32 pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::int32 pos(int index) const;
  inline void set_pos(int index, ::google::protobuf::int32 value);
  inline void add_pos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      pos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:PlayerSynch.SingleMonsterPath)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > pos_;
  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SingleMonsterPath* default_instance_;
};
// -------------------------------------------------------------------

class ReqInstanceMonsterPos : public ::google::protobuf::Message {
 public:
  ReqInstanceMonsterPos();
  virtual ~ReqInstanceMonsterPos();

  ReqInstanceMonsterPos(const ReqInstanceMonsterPos& from);

  inline ReqInstanceMonsterPos& operator=(const ReqInstanceMonsterPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqInstanceMonsterPos& default_instance();

  void Swap(ReqInstanceMonsterPos* other);

  // implements Message ----------------------------------------------

  ReqInstanceMonsterPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqInstanceMonsterPos& from);
  void MergeFrom(const ReqInstanceMonsterPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PlayerSynch.ReqInstanceMonsterPos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static ReqInstanceMonsterPos* default_instance_;
};
// -------------------------------------------------------------------

class RetInstanceMonsterPos : public ::google::protobuf::Message {
 public:
  RetInstanceMonsterPos();
  virtual ~RetInstanceMonsterPos();

  RetInstanceMonsterPos(const RetInstanceMonsterPos& from);

  inline RetInstanceMonsterPos& operator=(const RetInstanceMonsterPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetInstanceMonsterPos& default_instance();

  void Swap(RetInstanceMonsterPos* other);

  // implements Message ----------------------------------------------

  RetInstanceMonsterPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetInstanceMonsterPos& from);
  void MergeFrom(const RetInstanceMonsterPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerSynch.InstanceMonsterPosInfo posInfo = 1;
  inline int posinfo_size() const;
  inline void clear_posinfo();
  static const int kPosInfoFieldNumber = 1;
  inline const ::PlayerSynch::InstanceMonsterPosInfo& posinfo(int index) const;
  inline ::PlayerSynch::InstanceMonsterPosInfo* mutable_posinfo(int index);
  inline ::PlayerSynch::InstanceMonsterPosInfo* add_posinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::InstanceMonsterPosInfo >&
      posinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::InstanceMonsterPosInfo >*
      mutable_posinfo();

  // @@protoc_insertion_point(class_scope:PlayerSynch.RetInstanceMonsterPos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::InstanceMonsterPosInfo > posinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static RetInstanceMonsterPos* default_instance_;
};
// -------------------------------------------------------------------

class InstanceMonsterPosInfo : public ::google::protobuf::Message {
 public:
  InstanceMonsterPosInfo();
  virtual ~InstanceMonsterPosInfo();

  InstanceMonsterPosInfo(const InstanceMonsterPosInfo& from);

  inline InstanceMonsterPosInfo& operator=(const InstanceMonsterPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InstanceMonsterPosInfo& default_instance();

  void Swap(InstanceMonsterPosInfo* other);

  // implements Message ----------------------------------------------

  InstanceMonsterPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstanceMonsterPosInfo& from);
  void MergeFrom(const InstanceMonsterPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 monID = 1;
  inline bool has_monid() const;
  inline void clear_monid();
  static const int kMonIDFieldNumber = 1;
  inline ::google::protobuf::int32 monid() const;
  inline void set_monid(::google::protobuf::int32 value);

  // required int32 monKey = 2;
  inline bool has_monkey() const;
  inline void clear_monkey();
  static const int kMonKeyFieldNumber = 2;
  inline ::google::protobuf::int32 monkey() const;
  inline void set_monkey(::google::protobuf::int32 value);

  // required int32 monXYpos = 3;
  inline bool has_monxypos() const;
  inline void clear_monxypos();
  static const int kMonXYposFieldNumber = 3;
  inline ::google::protobuf::int32 monxypos() const;
  inline void set_monxypos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.InstanceMonsterPosInfo)
 private:
  inline void set_has_monid();
  inline void clear_has_monid();
  inline void set_has_monkey();
  inline void clear_has_monkey();
  inline void set_has_monxypos();
  inline void clear_has_monxypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 monid_;
  ::google::protobuf::int32 monkey_;
  ::google::protobuf::int32 monxypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static InstanceMonsterPosInfo* default_instance_;
};
// -------------------------------------------------------------------

class GirlWarPathToPlayer : public ::google::protobuf::Message {
 public:
  GirlWarPathToPlayer();
  virtual ~GirlWarPathToPlayer();

  GirlWarPathToPlayer(const GirlWarPathToPlayer& from);

  inline GirlWarPathToPlayer& operator=(const GirlWarPathToPlayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GirlWarPathToPlayer& default_instance();

  void Swap(GirlWarPathToPlayer* other);

  // implements Message ----------------------------------------------

  GirlWarPathToPlayer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GirlWarPathToPlayer& from);
  void MergeFrom(const GirlWarPathToPlayer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // repeated .PlayerSynch.CharPos pos = 2;
  inline int pos_size() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::PlayerSynch::CharPos& pos(int index) const;
  inline ::PlayerSynch::CharPos* mutable_pos(int index);
  inline ::PlayerSynch::CharPos* add_pos();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
      pos() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
      mutable_pos();

  // @@protoc_insertion_point(class_scope:PlayerSynch.GirlWarPathToPlayer)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos > pos_;
  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static GirlWarPathToPlayer* default_instance_;
};
// -------------------------------------------------------------------

class SynchGirlWar : public ::google::protobuf::Message {
 public:
  SynchGirlWar();
  virtual ~SynchGirlWar();

  SynchGirlWar(const SynchGirlWar& from);

  inline SynchGirlWar& operator=(const SynchGirlWar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchGirlWar& default_instance();

  void Swap(SynchGirlWar* other);

  // implements Message ----------------------------------------------

  SynchGirlWar* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchGirlWar& from);
  void MergeFrom(const SynchGirlWar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 ownerkey = 3;
  inline bool has_ownerkey() const;
  inline void clear_ownerkey();
  static const int kOwnerkeyFieldNumber = 3;
  inline ::google::protobuf::int32 ownerkey() const;
  inline void set_ownerkey(::google::protobuf::int32 value);

  // optional int32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 hpmax = 6;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 6;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 xpos = 7;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 7;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // optional int32 ypos = 8;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 8;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // optional int32 targetplayerkey = 9;
  inline bool has_targetplayerkey() const;
  inline void clear_targetplayerkey();
  static const int kTargetplayerkeyFieldNumber = 9;
  inline ::google::protobuf::int32 targetplayerkey() const;
  inline void set_targetplayerkey(::google::protobuf::int32 value);

  // optional int32 targetgirlkey = 10;
  inline bool has_targetgirlkey() const;
  inline void clear_targetgirlkey();
  static const int kTargetgirlkeyFieldNumber = 10;
  inline ::google::protobuf::int32 targetgirlkey() const;
  inline void set_targetgirlkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.SynchGirlWar)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_ownerkey();
  inline void clear_has_ownerkey();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_targetplayerkey();
  inline void clear_has_targetplayerkey();
  inline void set_has_targetgirlkey();
  inline void clear_has_targetgirlkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 ownerkey_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int32 targetplayerkey_;
  ::google::protobuf::int32 targetgirlkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static SynchGirlWar* default_instance_;
};
// -------------------------------------------------------------------

class RemotePlayerEquip : public ::google::protobuf::Message {
 public:
  RemotePlayerEquip();
  virtual ~RemotePlayerEquip();

  RemotePlayerEquip(const RemotePlayerEquip& from);

  inline RemotePlayerEquip& operator=(const RemotePlayerEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemotePlayerEquip& default_instance();

  void Swap(RemotePlayerEquip* other);

  // implements Message ----------------------------------------------

  RemotePlayerEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemotePlayerEquip& from);
  void MergeFrom(const RemotePlayerEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 strengGrade = 3;
  inline bool has_strenggrade() const;
  inline void clear_strenggrade();
  static const int kStrengGradeFieldNumber = 3;
  inline ::google::protobuf::int32 strenggrade() const;
  inline void set_strenggrade(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerSynch.RemotePlayerEquip)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_strenggrade();
  inline void clear_has_strenggrade();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 strenggrade_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static RemotePlayerEquip* default_instance_;
};
// -------------------------------------------------------------------

class AlterPlayerEquip : public ::google::protobuf::Message {
 public:
  AlterPlayerEquip();
  virtual ~AlterPlayerEquip();

  AlterPlayerEquip(const AlterPlayerEquip& from);

  inline AlterPlayerEquip& operator=(const AlterPlayerEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlterPlayerEquip& default_instance();

  void Swap(AlterPlayerEquip* other);

  // implements Message ----------------------------------------------

  AlterPlayerEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlterPlayerEquip& from);
  void MergeFrom(const AlterPlayerEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerid = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayeridFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // repeated .PlayerSynch.RemotePlayerEquip equips = 2;
  inline int equips_size() const;
  inline void clear_equips();
  static const int kEquipsFieldNumber = 2;
  inline const ::PlayerSynch::RemotePlayerEquip& equips(int index) const;
  inline ::PlayerSynch::RemotePlayerEquip* mutable_equips(int index);
  inline ::PlayerSynch::RemotePlayerEquip* add_equips();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::RemotePlayerEquip >&
      equips() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::RemotePlayerEquip >*
      mutable_equips();

  // @@protoc_insertion_point(class_scope:PlayerSynch.AlterPlayerEquip)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::RepeatedPtrField< ::PlayerSynch::RemotePlayerEquip > equips_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_AssignDesc_Map_2fSynchPath_2eproto();
  friend void protobuf_ShutdownFile_Map_2fSynchPath_2eproto();

  void InitAsDefaultInstance();
  static AlterPlayerEquip* default_instance_;
};
// ===================================================================


// ===================================================================

// PathToAllPlayer

// required int64 charid = 1;
inline bool PathToAllPlayer::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathToAllPlayer::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathToAllPlayer::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathToAllPlayer::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 PathToAllPlayer::charid() const {
  return charid_;
}
inline void PathToAllPlayer::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .PlayerSynch.CharPos pos = 2;
inline int PathToAllPlayer::pos_size() const {
  return pos_.size();
}
inline void PathToAllPlayer::clear_pos() {
  pos_.Clear();
}
inline const ::PlayerSynch::CharPos& PathToAllPlayer::pos(int index) const {
  return pos_.Get(index);
}
inline ::PlayerSynch::CharPos* PathToAllPlayer::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::PlayerSynch::CharPos* PathToAllPlayer::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
PathToAllPlayer::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
PathToAllPlayer::mutable_pos() {
  return &pos_;
}

// -------------------------------------------------------------------

// MonsterPathToPlayer

// required int32 key = 1;
inline bool MonsterPathToPlayer::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterPathToPlayer::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterPathToPlayer::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterPathToPlayer::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 MonsterPathToPlayer::key() const {
  return key_;
}
inline void MonsterPathToPlayer::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 movespeed = 2;
inline bool MonsterPathToPlayer::has_movespeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterPathToPlayer::set_has_movespeed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterPathToPlayer::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterPathToPlayer::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 MonsterPathToPlayer::movespeed() const {
  return movespeed_;
}
inline void MonsterPathToPlayer::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 state = 3;
inline bool MonsterPathToPlayer::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterPathToPlayer::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterPathToPlayer::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterPathToPlayer::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 MonsterPathToPlayer::state() const {
  return state_;
}
inline void MonsterPathToPlayer::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// repeated .PlayerSynch.CharPos pos = 4;
inline int MonsterPathToPlayer::pos_size() const {
  return pos_.size();
}
inline void MonsterPathToPlayer::clear_pos() {
  pos_.Clear();
}
inline const ::PlayerSynch::CharPos& MonsterPathToPlayer::pos(int index) const {
  return pos_.Get(index);
}
inline ::PlayerSynch::CharPos* MonsterPathToPlayer::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::PlayerSynch::CharPos* MonsterPathToPlayer::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
MonsterPathToPlayer::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
MonsterPathToPlayer::mutable_pos() {
  return &pos_;
}

// optional int32 targetkey = 5;
inline bool MonsterPathToPlayer::has_targetkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MonsterPathToPlayer::set_has_targetkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MonsterPathToPlayer::clear_has_targetkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MonsterPathToPlayer::clear_targetkey() {
  targetkey_ = 0;
  clear_has_targetkey();
}
inline ::google::protobuf::int32 MonsterPathToPlayer::targetkey() const {
  return targetkey_;
}
inline void MonsterPathToPlayer::set_targetkey(::google::protobuf::int32 value) {
  set_has_targetkey();
  targetkey_ = value;
}

// -------------------------------------------------------------------

// SynchMonsterPath

// required int64 charid = 1;
inline bool SynchMonsterPath::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchMonsterPath::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchMonsterPath::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchMonsterPath::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SynchMonsterPath::charid() const {
  return charid_;
}
inline void SynchMonsterPath::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required .PlayerSynch.MonsterPathToPlayer path = 2;
inline bool SynchMonsterPath::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchMonsterPath::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchMonsterPath::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchMonsterPath::clear_path() {
  if (path_ != NULL) path_->::PlayerSynch::MonsterPathToPlayer::Clear();
  clear_has_path();
}
inline const ::PlayerSynch::MonsterPathToPlayer& SynchMonsterPath::path() const {
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::PlayerSynch::MonsterPathToPlayer* SynchMonsterPath::mutable_path() {
  set_has_path();
  if (path_ == NULL) path_ = new ::PlayerSynch::MonsterPathToPlayer;
  return path_;
}
inline ::PlayerSynch::MonsterPathToPlayer* SynchMonsterPath::release_path() {
  clear_has_path();
  ::PlayerSynch::MonsterPathToPlayer* temp = path_;
  path_ = NULL;
  return temp;
}
inline void SynchMonsterPath::set_allocated_path(::PlayerSynch::MonsterPathToPlayer* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
}

// -------------------------------------------------------------------

// SynchBaseToGate

// required int64 charid = 1;
inline bool SynchBaseToGate::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchBaseToGate::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchBaseToGate::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchBaseToGate::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SynchBaseToGate::charid() const {
  return charid_;
}
inline void SynchBaseToGate::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required .PlayerSynch.SynchPlayerBase info = 2;
inline bool SynchBaseToGate::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchBaseToGate::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchBaseToGate::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchBaseToGate::clear_info() {
  if (info_ != NULL) info_->::PlayerSynch::SynchPlayerBase::Clear();
  clear_has_info();
}
inline const ::PlayerSynch::SynchPlayerBase& SynchBaseToGate::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerSynch::SynchPlayerBase* SynchBaseToGate::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerSynch::SynchPlayerBase;
  return info_;
}
inline ::PlayerSynch::SynchPlayerBase* SynchBaseToGate::release_info() {
  clear_has_info();
  ::PlayerSynch::SynchPlayerBase* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SynchBaseToGate::set_allocated_info(::PlayerSynch::SynchPlayerBase* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SynchSkill

// optional int32 skillID = 1;
inline bool SynchSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchSkill::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 SynchSkill::skillid() const {
  return skillid_;
}
inline void SynchSkill::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional int32 objectKey = 2;
inline bool SynchSkill::has_objectkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchSkill::set_has_objectkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchSkill::clear_has_objectkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchSkill::clear_objectkey() {
  objectkey_ = 0;
  clear_has_objectkey();
}
inline ::google::protobuf::int32 SynchSkill::objectkey() const {
  return objectkey_;
}
inline void SynchSkill::set_objectkey(::google::protobuf::int32 value) {
  set_has_objectkey();
  objectkey_ = value;
}

// optional int32 posX = 3;
inline bool SynchSkill::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchSkill::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchSkill::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchSkill::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 SynchSkill::posx() const {
  return posx_;
}
inline void SynchSkill::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
}

// optional int32 posY = 4;
inline bool SynchSkill::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchSkill::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchSkill::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchSkill::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 SynchSkill::posy() const {
  return posy_;
}
inline void SynchSkill::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
}

// optional int32 surplusTime = 5;
inline bool SynchSkill::has_surplustime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SynchSkill::set_has_surplustime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SynchSkill::clear_has_surplustime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SynchSkill::clear_surplustime() {
  surplustime_ = 0;
  clear_has_surplustime();
}
inline ::google::protobuf::int32 SynchSkill::surplustime() const {
  return surplustime_;
}
inline void SynchSkill::set_surplustime(::google::protobuf::int32 value) {
  set_has_surplustime();
  surplustime_ = value;
}

// -------------------------------------------------------------------

// EquipData

// optional int32 id = 1;
inline bool EquipData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EquipData::id() const {
  return id_;
}
inline void EquipData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 strenggrade = 2;
inline bool EquipData::has_strenggrade() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipData::set_has_strenggrade() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipData::clear_has_strenggrade() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipData::clear_strenggrade() {
  strenggrade_ = 0;
  clear_has_strenggrade();
}
inline ::google::protobuf::int32 EquipData::strenggrade() const {
  return strenggrade_;
}
inline void EquipData::set_strenggrade(::google::protobuf::int32 value) {
  set_has_strenggrade();
  strenggrade_ = value;
}

// -------------------------------------------------------------------

// SynchPlayerBase

// required int64 charid = 1;
inline bool SynchPlayerBase::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchPlayerBase::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchPlayerBase::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchPlayerBase::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SynchPlayerBase::charid() const {
  return charid_;
}
inline void SynchPlayerBase::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 key = 2;
inline bool SynchPlayerBase::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchPlayerBase::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchPlayerBase::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchPlayerBase::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SynchPlayerBase::key() const {
  return key_;
}
inline void SynchPlayerBase::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required string name = 3;
inline bool SynchPlayerBase::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchPlayerBase::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchPlayerBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchPlayerBase::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SynchPlayerBase::name() const {
  return *name_;
}
inline void SynchPlayerBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SynchPlayerBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SynchPlayerBase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynchPlayerBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SynchPlayerBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SynchPlayerBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hp = 4;
inline bool SynchPlayerBase::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchPlayerBase::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchPlayerBase::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchPlayerBase::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 SynchPlayerBase::hp() const {
  return hp_;
}
inline void SynchPlayerBase::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 hpmax = 5;
inline bool SynchPlayerBase::has_hpmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SynchPlayerBase::set_has_hpmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SynchPlayerBase::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SynchPlayerBase::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 SynchPlayerBase::hpmax() const {
  return hpmax_;
}
inline void SynchPlayerBase::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// required int32 mp = 6;
inline bool SynchPlayerBase::has_mp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SynchPlayerBase::set_has_mp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SynchPlayerBase::clear_has_mp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SynchPlayerBase::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 SynchPlayerBase::mp() const {
  return mp_;
}
inline void SynchPlayerBase::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// required int32 mpmax = 7;
inline bool SynchPlayerBase::has_mpmax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SynchPlayerBase::set_has_mpmax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SynchPlayerBase::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SynchPlayerBase::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 SynchPlayerBase::mpmax() const {
  return mpmax_;
}
inline void SynchPlayerBase::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// required int32 xpos = 8;
inline bool SynchPlayerBase::has_xpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SynchPlayerBase::set_has_xpos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SynchPlayerBase::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SynchPlayerBase::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 SynchPlayerBase::xpos() const {
  return xpos_;
}
inline void SynchPlayerBase::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 9;
inline bool SynchPlayerBase::has_ypos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SynchPlayerBase::set_has_ypos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SynchPlayerBase::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SynchPlayerBase::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 SynchPlayerBase::ypos() const {
  return ypos_;
}
inline void SynchPlayerBase::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 profession = 10;
inline bool SynchPlayerBase::has_profession() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SynchPlayerBase::set_has_profession() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SynchPlayerBase::clear_has_profession() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SynchPlayerBase::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 SynchPlayerBase::profession() const {
  return profession_;
}
inline void SynchPlayerBase::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 movespeed = 11;
inline bool SynchPlayerBase::has_movespeed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SynchPlayerBase::set_has_movespeed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SynchPlayerBase::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SynchPlayerBase::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 SynchPlayerBase::movespeed() const {
  return movespeed_;
}
inline void SynchPlayerBase::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 state = 12;
inline bool SynchPlayerBase::has_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SynchPlayerBase::set_has_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SynchPlayerBase::clear_has_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SynchPlayerBase::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SynchPlayerBase::state() const {
  return state_;
}
inline void SynchPlayerBase::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// required int32 country = 13;
inline bool SynchPlayerBase::has_country() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SynchPlayerBase::set_has_country() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SynchPlayerBase::clear_has_country() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SynchPlayerBase::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 SynchPlayerBase::country() const {
  return country_;
}
inline void SynchPlayerBase::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// repeated .PlayerSynch.CharPos pos = 14;
inline int SynchPlayerBase::pos_size() const {
  return pos_.size();
}
inline void SynchPlayerBase::clear_pos() {
  pos_.Clear();
}
inline const ::PlayerSynch::CharPos& SynchPlayerBase::pos(int index) const {
  return pos_.Get(index);
}
inline ::PlayerSynch::CharPos* SynchPlayerBase::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::PlayerSynch::CharPos* SynchPlayerBase::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
SynchPlayerBase::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
SynchPlayerBase::mutable_pos() {
  return &pos_;
}

// required bool sex = 15;
inline bool SynchPlayerBase::has_sex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SynchPlayerBase::set_has_sex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SynchPlayerBase::clear_has_sex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SynchPlayerBase::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
inline bool SynchPlayerBase::sex() const {
  return sex_;
}
inline void SynchPlayerBase::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
}

// repeated .PlayerSynch.SynchBuffChar buf = 16;
inline int SynchPlayerBase::buf_size() const {
  return buf_.size();
}
inline void SynchPlayerBase::clear_buf() {
  buf_.Clear();
}
inline const ::PlayerSynch::SynchBuffChar& SynchPlayerBase::buf(int index) const {
  return buf_.Get(index);
}
inline ::PlayerSynch::SynchBuffChar* SynchPlayerBase::mutable_buf(int index) {
  return buf_.Mutable(index);
}
inline ::PlayerSynch::SynchBuffChar* SynchPlayerBase::add_buf() {
  return buf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >&
SynchPlayerBase::buf() const {
  return buf_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >*
SynchPlayerBase::mutable_buf() {
  return &buf_;
}

// optional int32 horse = 17;
inline bool SynchPlayerBase::has_horse() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SynchPlayerBase::set_has_horse() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SynchPlayerBase::clear_has_horse() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SynchPlayerBase::clear_horse() {
  horse_ = 0;
  clear_has_horse();
}
inline ::google::protobuf::int32 SynchPlayerBase::horse() const {
  return horse_;
}
inline void SynchPlayerBase::set_horse(::google::protobuf::int32 value) {
  set_has_horse();
  horse_ = value;
}

// optional int32 lv = 18;
inline bool SynchPlayerBase::has_lv() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SynchPlayerBase::set_has_lv() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SynchPlayerBase::clear_has_lv() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SynchPlayerBase::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 SynchPlayerBase::lv() const {
  return lv_;
}
inline void SynchPlayerBase::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 titleid = 19;
inline bool SynchPlayerBase::has_titleid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SynchPlayerBase::set_has_titleid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SynchPlayerBase::clear_has_titleid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SynchPlayerBase::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 SynchPlayerBase::titleid() const {
  return titleid_;
}
inline void SynchPlayerBase::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// required int32 fightpower = 20;
inline bool SynchPlayerBase::has_fightpower() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SynchPlayerBase::set_has_fightpower() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SynchPlayerBase::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SynchPlayerBase::clear_fightpower() {
  fightpower_ = 0;
  clear_has_fightpower();
}
inline ::google::protobuf::int32 SynchPlayerBase::fightpower() const {
  return fightpower_;
}
inline void SynchPlayerBase::set_fightpower(::google::protobuf::int32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// optional .PlayerSynch.EquipData equip = 21;
inline bool SynchPlayerBase::has_equip() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SynchPlayerBase::set_has_equip() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SynchPlayerBase::clear_has_equip() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SynchPlayerBase::clear_equip() {
  if (equip_ != NULL) equip_->::PlayerSynch::EquipData::Clear();
  clear_has_equip();
}
inline const ::PlayerSynch::EquipData& SynchPlayerBase::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::PlayerSynch::EquipData* SynchPlayerBase::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::PlayerSynch::EquipData;
  return equip_;
}
inline ::PlayerSynch::EquipData* SynchPlayerBase::release_equip() {
  clear_has_equip();
  ::PlayerSynch::EquipData* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void SynchPlayerBase::set_allocated_equip(::PlayerSynch::EquipData* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// optional int32 magicweapon = 22;
inline bool SynchPlayerBase::has_magicweapon() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SynchPlayerBase::set_has_magicweapon() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SynchPlayerBase::clear_has_magicweapon() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SynchPlayerBase::clear_magicweapon() {
  magicweapon_ = 0;
  clear_has_magicweapon();
}
inline ::google::protobuf::int32 SynchPlayerBase::magicweapon() const {
  return magicweapon_;
}
inline void SynchPlayerBase::set_magicweapon(::google::protobuf::int32 value) {
  set_has_magicweapon();
  magicweapon_ = value;
}

// required int32 costume = 23;
inline bool SynchPlayerBase::has_costume() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SynchPlayerBase::set_has_costume() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SynchPlayerBase::clear_has_costume() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SynchPlayerBase::clear_costume() {
  costume_ = 0;
  clear_has_costume();
}
inline ::google::protobuf::int32 SynchPlayerBase::costume() const {
  return costume_;
}
inline void SynchPlayerBase::set_costume(::google::protobuf::int32 value) {
  set_has_costume();
  costume_ = value;
}

// optional string clanname = 24;
inline bool SynchPlayerBase::has_clanname() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SynchPlayerBase::set_has_clanname() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SynchPlayerBase::clear_has_clanname() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SynchPlayerBase::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& SynchPlayerBase::clanname() const {
  return *clanname_;
}
inline void SynchPlayerBase::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void SynchPlayerBase::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void SynchPlayerBase::set_clanname(const char* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynchPlayerBase::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* SynchPlayerBase::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SynchPlayerBase::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 clanid = 25;
inline bool SynchPlayerBase::has_clanid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SynchPlayerBase::set_has_clanid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SynchPlayerBase::clear_has_clanid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SynchPlayerBase::clear_clanid() {
  clanid_ = 0u;
  clear_has_clanid();
}
inline ::google::protobuf::uint32 SynchPlayerBase::clanid() const {
  return clanid_;
}
inline void SynchPlayerBase::set_clanid(::google::protobuf::uint32 value) {
  set_has_clanid();
  clanid_ = value;
}

// optional uint32 viplv = 26;
inline bool SynchPlayerBase::has_viplv() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SynchPlayerBase::set_has_viplv() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SynchPlayerBase::clear_has_viplv() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SynchPlayerBase::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 SynchPlayerBase::viplv() const {
  return viplv_;
}
inline void SynchPlayerBase::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 clanjob = 27;
inline bool SynchPlayerBase::has_clanjob() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void SynchPlayerBase::set_has_clanjob() {
  _has_bits_[0] |= 0x04000000u;
}
inline void SynchPlayerBase::clear_has_clanjob() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void SynchPlayerBase::clear_clanjob() {
  clanjob_ = 0u;
  clear_has_clanjob();
}
inline ::google::protobuf::uint32 SynchPlayerBase::clanjob() const {
  return clanjob_;
}
inline void SynchPlayerBase::set_clanjob(::google::protobuf::uint32 value) {
  set_has_clanjob();
  clanjob_ = value;
}

// optional int32 clanicon = 28;
inline bool SynchPlayerBase::has_clanicon() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SynchPlayerBase::set_has_clanicon() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SynchPlayerBase::clear_has_clanicon() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SynchPlayerBase::clear_clanicon() {
  clanicon_ = 0;
  clear_has_clanicon();
}
inline ::google::protobuf::int32 SynchPlayerBase::clanicon() const {
  return clanicon_;
}
inline void SynchPlayerBase::set_clanicon(::google::protobuf::int32 value) {
  set_has_clanicon();
  clanicon_ = value;
}

// optional int32 sinvalue = 29;
inline bool SynchPlayerBase::has_sinvalue() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SynchPlayerBase::set_has_sinvalue() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SynchPlayerBase::clear_has_sinvalue() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SynchPlayerBase::clear_sinvalue() {
  sinvalue_ = 0;
  clear_has_sinvalue();
}
inline ::google::protobuf::int32 SynchPlayerBase::sinvalue() const {
  return sinvalue_;
}
inline void SynchPlayerBase::set_sinvalue(::google::protobuf::int32 value) {
  set_has_sinvalue();
  sinvalue_ = value;
}

// optional int32 fashionID = 30;
inline bool SynchPlayerBase::has_fashionid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SynchPlayerBase::set_has_fashionid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SynchPlayerBase::clear_has_fashionid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SynchPlayerBase::clear_fashionid() {
  fashionid_ = 0;
  clear_has_fashionid();
}
inline ::google::protobuf::int32 SynchPlayerBase::fashionid() const {
  return fashionid_;
}
inline void SynchPlayerBase::set_fashionid(::google::protobuf::int32 value) {
  set_has_fashionid();
  fashionid_ = value;
}

// optional .PlayerSynch.SynchSkill skillData = 31;
inline bool SynchPlayerBase::has_skilldata() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SynchPlayerBase::set_has_skilldata() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SynchPlayerBase::clear_has_skilldata() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SynchPlayerBase::clear_skilldata() {
  if (skilldata_ != NULL) skilldata_->::PlayerSynch::SynchSkill::Clear();
  clear_has_skilldata();
}
inline const ::PlayerSynch::SynchSkill& SynchPlayerBase::skilldata() const {
  return skilldata_ != NULL ? *skilldata_ : *default_instance_->skilldata_;
}
inline ::PlayerSynch::SynchSkill* SynchPlayerBase::mutable_skilldata() {
  set_has_skilldata();
  if (skilldata_ == NULL) skilldata_ = new ::PlayerSynch::SynchSkill;
  return skilldata_;
}
inline ::PlayerSynch::SynchSkill* SynchPlayerBase::release_skilldata() {
  clear_has_skilldata();
  ::PlayerSynch::SynchSkill* temp = skilldata_;
  skilldata_ = NULL;
  return temp;
}
inline void SynchPlayerBase::set_allocated_skilldata(::PlayerSynch::SynchSkill* skilldata) {
  delete skilldata_;
  skilldata_ = skilldata;
  if (skilldata) {
    set_has_skilldata();
  } else {
    clear_has_skilldata();
  }
}

// optional .PlayerSynch.MeditationInfo meditation = 32;
inline bool SynchPlayerBase::has_meditation() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SynchPlayerBase::set_has_meditation() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SynchPlayerBase::clear_has_meditation() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SynchPlayerBase::clear_meditation() {
  if (meditation_ != NULL) meditation_->::PlayerSynch::MeditationInfo::Clear();
  clear_has_meditation();
}
inline const ::PlayerSynch::MeditationInfo& SynchPlayerBase::meditation() const {
  return meditation_ != NULL ? *meditation_ : *default_instance_->meditation_;
}
inline ::PlayerSynch::MeditationInfo* SynchPlayerBase::mutable_meditation() {
  set_has_meditation();
  if (meditation_ == NULL) meditation_ = new ::PlayerSynch::MeditationInfo;
  return meditation_;
}
inline ::PlayerSynch::MeditationInfo* SynchPlayerBase::release_meditation() {
  clear_has_meditation();
  ::PlayerSynch::MeditationInfo* temp = meditation_;
  meditation_ = NULL;
  return temp;
}
inline void SynchPlayerBase::set_allocated_meditation(::PlayerSynch::MeditationInfo* meditation) {
  delete meditation_;
  meditation_ = meditation;
  if (meditation) {
    set_has_meditation();
  } else {
    clear_has_meditation();
  }
}

// optional int32 distortion = 33;
inline bool SynchPlayerBase::has_distortion() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SynchPlayerBase::set_has_distortion() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SynchPlayerBase::clear_has_distortion() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SynchPlayerBase::clear_distortion() {
  distortion_ = 0;
  clear_has_distortion();
}
inline ::google::protobuf::int32 SynchPlayerBase::distortion() const {
  return distortion_;
}
inline void SynchPlayerBase::set_distortion(::google::protobuf::int32 value) {
  set_has_distortion();
  distortion_ = value;
}

// -------------------------------------------------------------------

// MeditationInfo

// required int32 targetkey = 1;
inline bool MeditationInfo::has_targetkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeditationInfo::set_has_targetkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeditationInfo::clear_has_targetkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeditationInfo::clear_targetkey() {
  targetkey_ = 0;
  clear_has_targetkey();
}
inline ::google::protobuf::int32 MeditationInfo::targetkey() const {
  return targetkey_;
}
inline void MeditationInfo::set_targetkey(::google::protobuf::int32 value) {
  set_has_targetkey();
  targetkey_ = value;
}

// optional int32 xpos = 2;
inline bool MeditationInfo::has_xpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeditationInfo::set_has_xpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeditationInfo::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeditationInfo::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 MeditationInfo::xpos() const {
  return xpos_;
}
inline void MeditationInfo::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// optional int32 ypos = 3;
inline bool MeditationInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeditationInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeditationInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeditationInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 MeditationInfo::ypos() const {
  return ypos_;
}
inline void MeditationInfo::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// optional int32 targetgirlwarkey = 4;
inline bool MeditationInfo::has_targetgirlwarkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeditationInfo::set_has_targetgirlwarkey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeditationInfo::clear_has_targetgirlwarkey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeditationInfo::clear_targetgirlwarkey() {
  targetgirlwarkey_ = 0;
  clear_has_targetgirlwarkey();
}
inline ::google::protobuf::int32 MeditationInfo::targetgirlwarkey() const {
  return targetgirlwarkey_;
}
inline void MeditationInfo::set_targetgirlwarkey(::google::protobuf::int32 value) {
  set_has_targetgirlwarkey();
  targetgirlwarkey_ = value;
}

// optional int32 selfgirlwarkey = 5;
inline bool MeditationInfo::has_selfgirlwarkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeditationInfo::set_has_selfgirlwarkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeditationInfo::clear_has_selfgirlwarkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeditationInfo::clear_selfgirlwarkey() {
  selfgirlwarkey_ = 0;
  clear_has_selfgirlwarkey();
}
inline ::google::protobuf::int32 MeditationInfo::selfgirlwarkey() const {
  return selfgirlwarkey_;
}
inline void MeditationInfo::set_selfgirlwarkey(::google::protobuf::int32 value) {
  set_has_selfgirlwarkey();
  selfgirlwarkey_ = value;
}

// -------------------------------------------------------------------

// SynchMonsterToGate

// required int64 charid = 1;
inline bool SynchMonsterToGate::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchMonsterToGate::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchMonsterToGate::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchMonsterToGate::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SynchMonsterToGate::charid() const {
  return charid_;
}
inline void SynchMonsterToGate::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required .PlayerSynch.SynchMonsterBase info = 2;
inline bool SynchMonsterToGate::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchMonsterToGate::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchMonsterToGate::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchMonsterToGate::clear_info() {
  if (info_ != NULL) info_->::PlayerSynch::SynchMonsterBase::Clear();
  clear_has_info();
}
inline const ::PlayerSynch::SynchMonsterBase& SynchMonsterToGate::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerSynch::SynchMonsterBase* SynchMonsterToGate::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerSynch::SynchMonsterBase;
  return info_;
}
inline ::PlayerSynch::SynchMonsterBase* SynchMonsterToGate::release_info() {
  clear_has_info();
  ::PlayerSynch::SynchMonsterBase* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SynchMonsterToGate::set_allocated_info(::PlayerSynch::SynchMonsterBase* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SynchMonsterBase

// required int32 id = 1;
inline bool SynchMonsterBase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchMonsterBase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchMonsterBase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchMonsterBase::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SynchMonsterBase::id() const {
  return id_;
}
inline void SynchMonsterBase::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 key = 2;
inline bool SynchMonsterBase::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchMonsterBase::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchMonsterBase::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchMonsterBase::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SynchMonsterBase::key() const {
  return key_;
}
inline void SynchMonsterBase::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required int32 hp = 3;
inline bool SynchMonsterBase::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchMonsterBase::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchMonsterBase::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchMonsterBase::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 SynchMonsterBase::hp() const {
  return hp_;
}
inline void SynchMonsterBase::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 mp = 4;
inline bool SynchMonsterBase::has_mp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchMonsterBase::set_has_mp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchMonsterBase::clear_has_mp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchMonsterBase::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 SynchMonsterBase::mp() const {
  return mp_;
}
inline void SynchMonsterBase::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// required int32 xpos = 5;
inline bool SynchMonsterBase::has_xpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SynchMonsterBase::set_has_xpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SynchMonsterBase::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SynchMonsterBase::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 SynchMonsterBase::xpos() const {
  return xpos_;
}
inline void SynchMonsterBase::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 6;
inline bool SynchMonsterBase::has_ypos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SynchMonsterBase::set_has_ypos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SynchMonsterBase::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SynchMonsterBase::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 SynchMonsterBase::ypos() const {
  return ypos_;
}
inline void SynchMonsterBase::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 country = 7;
inline bool SynchMonsterBase::has_country() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SynchMonsterBase::set_has_country() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SynchMonsterBase::clear_has_country() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SynchMonsterBase::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 SynchMonsterBase::country() const {
  return country_;
}
inline void SynchMonsterBase::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int32 hpmax = 8;
inline bool SynchMonsterBase::has_hpmax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SynchMonsterBase::set_has_hpmax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SynchMonsterBase::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SynchMonsterBase::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 SynchMonsterBase::hpmax() const {
  return hpmax_;
}
inline void SynchMonsterBase::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 mpmax = 9;
inline bool SynchMonsterBase::has_mpmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SynchMonsterBase::set_has_mpmax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SynchMonsterBase::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SynchMonsterBase::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 SynchMonsterBase::mpmax() const {
  return mpmax_;
}
inline void SynchMonsterBase::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// repeated .PlayerSynch.SynchBuffChar buf = 10;
inline int SynchMonsterBase::buf_size() const {
  return buf_.size();
}
inline void SynchMonsterBase::clear_buf() {
  buf_.Clear();
}
inline const ::PlayerSynch::SynchBuffChar& SynchMonsterBase::buf(int index) const {
  return buf_.Get(index);
}
inline ::PlayerSynch::SynchBuffChar* SynchMonsterBase::mutable_buf(int index) {
  return buf_.Mutable(index);
}
inline ::PlayerSynch::SynchBuffChar* SynchMonsterBase::add_buf() {
  return buf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >&
SynchMonsterBase::buf() const {
  return buf_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >*
SynchMonsterBase::mutable_buf() {
  return &buf_;
}

// optional string name = 11;
inline bool SynchMonsterBase::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SynchMonsterBase::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SynchMonsterBase::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SynchMonsterBase::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SynchMonsterBase::name() const {
  return *name_;
}
inline void SynchMonsterBase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SynchMonsterBase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SynchMonsterBase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynchMonsterBase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SynchMonsterBase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SynchMonsterBase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 movespeed = 12;
inline bool SynchMonsterBase::has_movespeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SynchMonsterBase::set_has_movespeed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SynchMonsterBase::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SynchMonsterBase::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 SynchMonsterBase::movespeed() const {
  return movespeed_;
}
inline void SynchMonsterBase::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 state = 13;
inline bool SynchMonsterBase::has_state() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SynchMonsterBase::set_has_state() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SynchMonsterBase::clear_has_state() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SynchMonsterBase::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SynchMonsterBase::state() const {
  return state_;
}
inline void SynchMonsterBase::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// repeated .PlayerSynch.CharPos pos = 14;
inline int SynchMonsterBase::pos_size() const {
  return pos_.size();
}
inline void SynchMonsterBase::clear_pos() {
  pos_.Clear();
}
inline const ::PlayerSynch::CharPos& SynchMonsterBase::pos(int index) const {
  return pos_.Get(index);
}
inline ::PlayerSynch::CharPos* SynchMonsterBase::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::PlayerSynch::CharPos* SynchMonsterBase::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
SynchMonsterBase::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
SynchMonsterBase::mutable_pos() {
  return &pos_;
}

// -------------------------------------------------------------------

// SynchCompeteMonster

// required int32 id = 1;
inline bool SynchCompeteMonster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchCompeteMonster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchCompeteMonster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchCompeteMonster::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SynchCompeteMonster::id() const {
  return id_;
}
inline void SynchCompeteMonster::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 key = 2;
inline bool SynchCompeteMonster::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchCompeteMonster::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchCompeteMonster::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchCompeteMonster::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SynchCompeteMonster::key() const {
  return key_;
}
inline void SynchCompeteMonster::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required string name = 3;
inline bool SynchCompeteMonster::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchCompeteMonster::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchCompeteMonster::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchCompeteMonster::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SynchCompeteMonster::name() const {
  return *name_;
}
inline void SynchCompeteMonster::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SynchCompeteMonster::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SynchCompeteMonster::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynchCompeteMonster::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SynchCompeteMonster::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SynchCompeteMonster::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 hp = 4;
inline bool SynchCompeteMonster::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchCompeteMonster::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchCompeteMonster::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchCompeteMonster::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 SynchCompeteMonster::hp() const {
  return hp_;
}
inline void SynchCompeteMonster::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 hpmax = 5;
inline bool SynchCompeteMonster::has_hpmax() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SynchCompeteMonster::set_has_hpmax() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SynchCompeteMonster::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SynchCompeteMonster::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 SynchCompeteMonster::hpmax() const {
  return hpmax_;
}
inline void SynchCompeteMonster::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// required int32 mp = 6;
inline bool SynchCompeteMonster::has_mp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SynchCompeteMonster::set_has_mp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SynchCompeteMonster::clear_has_mp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SynchCompeteMonster::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 SynchCompeteMonster::mp() const {
  return mp_;
}
inline void SynchCompeteMonster::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// required int32 mpmax = 7;
inline bool SynchCompeteMonster::has_mpmax() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SynchCompeteMonster::set_has_mpmax() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SynchCompeteMonster::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SynchCompeteMonster::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 SynchCompeteMonster::mpmax() const {
  return mpmax_;
}
inline void SynchCompeteMonster::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// required int32 xpos = 8;
inline bool SynchCompeteMonster::has_xpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SynchCompeteMonster::set_has_xpos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SynchCompeteMonster::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SynchCompeteMonster::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 SynchCompeteMonster::xpos() const {
  return xpos_;
}
inline void SynchCompeteMonster::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 9;
inline bool SynchCompeteMonster::has_ypos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SynchCompeteMonster::set_has_ypos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SynchCompeteMonster::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SynchCompeteMonster::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 SynchCompeteMonster::ypos() const {
  return ypos_;
}
inline void SynchCompeteMonster::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 profession = 10;
inline bool SynchCompeteMonster::has_profession() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SynchCompeteMonster::set_has_profession() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SynchCompeteMonster::clear_has_profession() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SynchCompeteMonster::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 SynchCompeteMonster::profession() const {
  return profession_;
}
inline void SynchCompeteMonster::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 movespeed = 11;
inline bool SynchCompeteMonster::has_movespeed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SynchCompeteMonster::set_has_movespeed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SynchCompeteMonster::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SynchCompeteMonster::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 SynchCompeteMonster::movespeed() const {
  return movespeed_;
}
inline void SynchCompeteMonster::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// required int32 country = 12;
inline bool SynchCompeteMonster::has_country() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SynchCompeteMonster::set_has_country() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SynchCompeteMonster::clear_has_country() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SynchCompeteMonster::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 SynchCompeteMonster::country() const {
  return country_;
}
inline void SynchCompeteMonster::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// required bool sex = 13;
inline bool SynchCompeteMonster::has_sex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SynchCompeteMonster::set_has_sex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SynchCompeteMonster::clear_has_sex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SynchCompeteMonster::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
inline bool SynchCompeteMonster::sex() const {
  return sex_;
}
inline void SynchCompeteMonster::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
}

// repeated .PlayerSynch.SynchBuffChar buf = 14;
inline int SynchCompeteMonster::buf_size() const {
  return buf_.size();
}
inline void SynchCompeteMonster::clear_buf() {
  buf_.Clear();
}
inline const ::PlayerSynch::SynchBuffChar& SynchCompeteMonster::buf(int index) const {
  return buf_.Get(index);
}
inline ::PlayerSynch::SynchBuffChar* SynchCompeteMonster::mutable_buf(int index) {
  return buf_.Mutable(index);
}
inline ::PlayerSynch::SynchBuffChar* SynchCompeteMonster::add_buf() {
  return buf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >&
SynchCompeteMonster::buf() const {
  return buf_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SynchBuffChar >*
SynchCompeteMonster::mutable_buf() {
  return &buf_;
}

// optional int32 lv = 15;
inline bool SynchCompeteMonster::has_lv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SynchCompeteMonster::set_has_lv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SynchCompeteMonster::clear_has_lv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SynchCompeteMonster::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 SynchCompeteMonster::lv() const {
  return lv_;
}
inline void SynchCompeteMonster::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 titleid = 16;
inline bool SynchCompeteMonster::has_titleid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SynchCompeteMonster::set_has_titleid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SynchCompeteMonster::clear_has_titleid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SynchCompeteMonster::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 SynchCompeteMonster::titleid() const {
  return titleid_;
}
inline void SynchCompeteMonster::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// required .PlayerSynch.EquipData equip = 17;
inline bool SynchCompeteMonster::has_equip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SynchCompeteMonster::set_has_equip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SynchCompeteMonster::clear_has_equip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SynchCompeteMonster::clear_equip() {
  if (equip_ != NULL) equip_->::PlayerSynch::EquipData::Clear();
  clear_has_equip();
}
inline const ::PlayerSynch::EquipData& SynchCompeteMonster::equip() const {
  return equip_ != NULL ? *equip_ : *default_instance_->equip_;
}
inline ::PlayerSynch::EquipData* SynchCompeteMonster::mutable_equip() {
  set_has_equip();
  if (equip_ == NULL) equip_ = new ::PlayerSynch::EquipData;
  return equip_;
}
inline ::PlayerSynch::EquipData* SynchCompeteMonster::release_equip() {
  clear_has_equip();
  ::PlayerSynch::EquipData* temp = equip_;
  equip_ = NULL;
  return temp;
}
inline void SynchCompeteMonster::set_allocated_equip(::PlayerSynch::EquipData* equip) {
  delete equip_;
  equip_ = equip;
  if (equip) {
    set_has_equip();
  } else {
    clear_has_equip();
  }
}

// optional int32 magicweapon = 18;
inline bool SynchCompeteMonster::has_magicweapon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SynchCompeteMonster::set_has_magicweapon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SynchCompeteMonster::clear_has_magicweapon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SynchCompeteMonster::clear_magicweapon() {
  magicweapon_ = 0;
  clear_has_magicweapon();
}
inline ::google::protobuf::int32 SynchCompeteMonster::magicweapon() const {
  return magicweapon_;
}
inline void SynchCompeteMonster::set_magicweapon(::google::protobuf::int32 value) {
  set_has_magicweapon();
  magicweapon_ = value;
}

// required int32 costume = 19;
inline bool SynchCompeteMonster::has_costume() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SynchCompeteMonster::set_has_costume() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SynchCompeteMonster::clear_has_costume() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SynchCompeteMonster::clear_costume() {
  costume_ = 0;
  clear_has_costume();
}
inline ::google::protobuf::int32 SynchCompeteMonster::costume() const {
  return costume_;
}
inline void SynchCompeteMonster::set_costume(::google::protobuf::int32 value) {
  set_has_costume();
  costume_ = value;
}

// optional string clanname = 20;
inline bool SynchCompeteMonster::has_clanname() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SynchCompeteMonster::set_has_clanname() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SynchCompeteMonster::clear_has_clanname() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SynchCompeteMonster::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& SynchCompeteMonster::clanname() const {
  return *clanname_;
}
inline void SynchCompeteMonster::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void SynchCompeteMonster::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void SynchCompeteMonster::set_clanname(const char* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SynchCompeteMonster::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* SynchCompeteMonster::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SynchCompeteMonster::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 viplv = 21;
inline bool SynchCompeteMonster::has_viplv() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SynchCompeteMonster::set_has_viplv() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SynchCompeteMonster::clear_has_viplv() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SynchCompeteMonster::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 SynchCompeteMonster::viplv() const {
  return viplv_;
}
inline void SynchCompeteMonster::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional int32 fashion = 22;
inline bool SynchCompeteMonster::has_fashion() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SynchCompeteMonster::set_has_fashion() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SynchCompeteMonster::clear_has_fashion() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SynchCompeteMonster::clear_fashion() {
  fashion_ = 0;
  clear_has_fashion();
}
inline ::google::protobuf::int32 SynchCompeteMonster::fashion() const {
  return fashion_;
}
inline void SynchCompeteMonster::set_fashion(::google::protobuf::int32 value) {
  set_has_fashion();
  fashion_ = value;
}

// optional int32 horseid = 23;
inline bool SynchCompeteMonster::has_horseid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SynchCompeteMonster::set_has_horseid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SynchCompeteMonster::clear_has_horseid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SynchCompeteMonster::clear_horseid() {
  horseid_ = 0;
  clear_has_horseid();
}
inline ::google::protobuf::int32 SynchCompeteMonster::horseid() const {
  return horseid_;
}
inline void SynchCompeteMonster::set_horseid(::google::protobuf::int32 value) {
  set_has_horseid();
  horseid_ = value;
}

// optional int32 clanJob = 24;
inline bool SynchCompeteMonster::has_clanjob() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SynchCompeteMonster::set_has_clanjob() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SynchCompeteMonster::clear_has_clanjob() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SynchCompeteMonster::clear_clanjob() {
  clanjob_ = 0;
  clear_has_clanjob();
}
inline ::google::protobuf::int32 SynchCompeteMonster::clanjob() const {
  return clanjob_;
}
inline void SynchCompeteMonster::set_clanjob(::google::protobuf::int32 value) {
  set_has_clanjob();
  clanjob_ = value;
}

// -------------------------------------------------------------------

// SynchBuffChar

// required int32 id = 1;
inline bool SynchBuffChar::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchBuffChar::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchBuffChar::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchBuffChar::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SynchBuffChar::id() const {
  return id_;
}
inline void SynchBuffChar::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 onlyid = 2;
inline bool SynchBuffChar::has_onlyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchBuffChar::set_has_onlyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchBuffChar::clear_has_onlyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchBuffChar::clear_onlyid() {
  onlyid_ = 0u;
  clear_has_onlyid();
}
inline ::google::protobuf::uint32 SynchBuffChar::onlyid() const {
  return onlyid_;
}
inline void SynchBuffChar::set_onlyid(::google::protobuf::uint32 value) {
  set_has_onlyid();
  onlyid_ = value;
}

// -------------------------------------------------------------------

// PathToGate

// required int64 mycharid = 1;
inline bool PathToGate::has_mycharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathToGate::set_has_mycharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathToGate::clear_has_mycharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathToGate::clear_mycharid() {
  mycharid_ = GOOGLE_LONGLONG(0);
  clear_has_mycharid();
}
inline ::google::protobuf::int64 PathToGate::mycharid() const {
  return mycharid_;
}
inline void PathToGate::set_mycharid(::google::protobuf::int64 value) {
  set_has_mycharid();
  mycharid_ = value;
}

// required .PlayerSynch.PathToAllPlayer path = 2;
inline bool PathToGate::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathToGate::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathToGate::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathToGate::clear_path() {
  if (path_ != NULL) path_->::PlayerSynch::PathToAllPlayer::Clear();
  clear_has_path();
}
inline const ::PlayerSynch::PathToAllPlayer& PathToGate::path() const {
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::PlayerSynch::PathToAllPlayer* PathToGate::mutable_path() {
  set_has_path();
  if (path_ == NULL) path_ = new ::PlayerSynch::PathToAllPlayer;
  return path_;
}
inline ::PlayerSynch::PathToAllPlayer* PathToGate::release_path() {
  clear_has_path();
  ::PlayerSynch::PathToAllPlayer* temp = path_;
  path_ = NULL;
  return temp;
}
inline void PathToGate::set_allocated_path(::PlayerSynch::PathToAllPlayer* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
}

// -------------------------------------------------------------------

// SynchInfoToPath

// required int64 charid = 1;
inline bool SynchInfoToPath::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchInfoToPath::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchInfoToPath::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchInfoToPath::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SynchInfoToPath::charid() const {
  return charid_;
}
inline void SynchInfoToPath::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required .PlayerSynch.SynchInfo info = 2;
inline bool SynchInfoToPath::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchInfoToPath::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchInfoToPath::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchInfoToPath::clear_info() {
  if (info_ != NULL) info_->::PlayerSynch::SynchInfo::Clear();
  clear_has_info();
}
inline const ::PlayerSynch::SynchInfo& SynchInfoToPath::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerSynch::SynchInfo* SynchInfoToPath::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerSynch::SynchInfo;
  return info_;
}
inline ::PlayerSynch::SynchInfo* SynchInfoToPath::release_info() {
  clear_has_info();
  ::PlayerSynch::SynchInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SynchInfoToPath::set_allocated_info(::PlayerSynch::SynchInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// SynchInfo

// required int32 type = 1;
inline bool SynchInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SynchInfo::type() const {
  return type_;
}
inline void SynchInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .PlayerSynch.CharPos pos = 2;
inline int SynchInfo::pos_size() const {
  return pos_.size();
}
inline void SynchInfo::clear_pos() {
  pos_.Clear();
}
inline const ::PlayerSynch::CharPos& SynchInfo::pos(int index) const {
  return pos_.Get(index);
}
inline ::PlayerSynch::CharPos* SynchInfo::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::PlayerSynch::CharPos* SynchInfo::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
SynchInfo::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
SynchInfo::mutable_pos() {
  return &pos_;
}

// -------------------------------------------------------------------

// CharPosRet

// required int32 type = 2;
inline bool CharPosRet::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharPosRet::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharPosRet::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharPosRet::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CharPosRet::type() const {
  return type_;
}
inline void CharPosRet::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 isvalid = 3;
inline bool CharPosRet::has_isvalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharPosRet::set_has_isvalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharPosRet::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharPosRet::clear_isvalid() {
  isvalid_ = 0;
  clear_has_isvalid();
}
inline ::google::protobuf::int32 CharPosRet::isvalid() const {
  return isvalid_;
}
inline void CharPosRet::set_isvalid(::google::protobuf::int32 value) {
  set_has_isvalid();
  isvalid_ = value;
}

// optional .PlayerSynch.CharPos pos = 4;
inline bool CharPosRet::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharPosRet::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharPosRet::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharPosRet::clear_pos() {
  if (pos_ != NULL) pos_->::PlayerSynch::CharPos::Clear();
  clear_has_pos();
}
inline const ::PlayerSynch::CharPos& CharPosRet::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::PlayerSynch::CharPos* CharPosRet::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::PlayerSynch::CharPos;
  return pos_;
}
inline ::PlayerSynch::CharPos* CharPosRet::release_pos() {
  clear_has_pos();
  ::PlayerSynch::CharPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void CharPosRet::set_allocated_pos(::PlayerSynch::CharPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// -------------------------------------------------------------------

// CharPos

// required int32 xpos = 1;
inline bool CharPos::has_xpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharPos::set_has_xpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharPos::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharPos::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 CharPos::xpos() const {
  return xpos_;
}
inline void CharPos::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 2;
inline bool CharPos::has_ypos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharPos::set_has_ypos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharPos::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharPos::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 CharPos::ypos() const {
  return ypos_;
}
inline void CharPos::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// -------------------------------------------------------------------

// ReqFindPath

// repeated int64 mapid = 1;
inline int ReqFindPath::mapid_size() const {
  return mapid_.size();
}
inline void ReqFindPath::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::int64 ReqFindPath::mapid(int index) const {
  return mapid_.Get(index);
}
inline void ReqFindPath::set_mapid(int index, ::google::protobuf::int64 value) {
  mapid_.Set(index, value);
}
inline void ReqFindPath::add_mapid(::google::protobuf::int64 value) {
  mapid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ReqFindPath::mapid() const {
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ReqFindPath::mutable_mapid() {
  return &mapid_;
}

// repeated .PlayerSynch.MapMonsterPos monster = 2;
inline int ReqFindPath::monster_size() const {
  return monster_.size();
}
inline void ReqFindPath::clear_monster() {
  monster_.Clear();
}
inline const ::PlayerSynch::MapMonsterPos& ReqFindPath::monster(int index) const {
  return monster_.Get(index);
}
inline ::PlayerSynch::MapMonsterPos* ReqFindPath::mutable_monster(int index) {
  return monster_.Mutable(index);
}
inline ::PlayerSynch::MapMonsterPos* ReqFindPath::add_monster() {
  return monster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPos >&
ReqFindPath::monster() const {
  return monster_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPos >*
ReqFindPath::mutable_monster() {
  return &monster_;
}

// -------------------------------------------------------------------

// MapMonsterPos

// repeated .PlayerSynch.SingleFindPos monster = 1;
inline int MapMonsterPos::monster_size() const {
  return monster_.size();
}
inline void MapMonsterPos::clear_monster() {
  monster_.Clear();
}
inline const ::PlayerSynch::SingleFindPos& MapMonsterPos::monster(int index) const {
  return monster_.Get(index);
}
inline ::PlayerSynch::SingleFindPos* MapMonsterPos::mutable_monster(int index) {
  return monster_.Mutable(index);
}
inline ::PlayerSynch::SingleFindPos* MapMonsterPos::add_monster() {
  return monster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleFindPos >&
MapMonsterPos::monster() const {
  return monster_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleFindPos >*
MapMonsterPos::mutable_monster() {
  return &monster_;
}

// -------------------------------------------------------------------

// SingleFindPos

// required int32 key = 1;
inline bool SingleFindPos::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleFindPos::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleFindPos::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleFindPos::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SingleFindPos::key() const {
  return key_;
}
inline void SingleFindPos::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional uint64 pos = 2;
inline bool SingleFindPos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SingleFindPos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SingleFindPos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SingleFindPos::clear_pos() {
  pos_ = GOOGLE_ULONGLONG(0);
  clear_has_pos();
}
inline ::google::protobuf::uint64 SingleFindPos::pos() const {
  return pos_;
}
inline void SingleFindPos::set_pos(::google::protobuf::uint64 value) {
  set_has_pos();
  pos_ = value;
}

// optional int32 distance = 3;
inline bool SingleFindPos::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SingleFindPos::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SingleFindPos::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SingleFindPos::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google::protobuf::int32 SingleFindPos::distance() const {
  return distance_;
}
inline void SingleFindPos::set_distance(::google::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
}

// -------------------------------------------------------------------

// AckPathPosition

// repeated int64 mapid = 1;
inline int AckPathPosition::mapid_size() const {
  return mapid_.size();
}
inline void AckPathPosition::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::int64 AckPathPosition::mapid(int index) const {
  return mapid_.Get(index);
}
inline void AckPathPosition::set_mapid(int index, ::google::protobuf::int64 value) {
  mapid_.Set(index, value);
}
inline void AckPathPosition::add_mapid(::google::protobuf::int64 value) {
  mapid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AckPathPosition::mapid() const {
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AckPathPosition::mutable_mapid() {
  return &mapid_;
}

// repeated .PlayerSynch.MapMonsterPath path = 2;
inline int AckPathPosition::path_size() const {
  return path_.size();
}
inline void AckPathPosition::clear_path() {
  path_.Clear();
}
inline const ::PlayerSynch::MapMonsterPath& AckPathPosition::path(int index) const {
  return path_.Get(index);
}
inline ::PlayerSynch::MapMonsterPath* AckPathPosition::mutable_path(int index) {
  return path_.Mutable(index);
}
inline ::PlayerSynch::MapMonsterPath* AckPathPosition::add_path() {
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPath >&
AckPathPosition::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::MapMonsterPath >*
AckPathPosition::mutable_path() {
  return &path_;
}

// -------------------------------------------------------------------

// MapMonsterPath

// repeated .PlayerSynch.SingleMonsterPath path = 1;
inline int MapMonsterPath::path_size() const {
  return path_.size();
}
inline void MapMonsterPath::clear_path() {
  path_.Clear();
}
inline const ::PlayerSynch::SingleMonsterPath& MapMonsterPath::path(int index) const {
  return path_.Get(index);
}
inline ::PlayerSynch::SingleMonsterPath* MapMonsterPath::mutable_path(int index) {
  return path_.Mutable(index);
}
inline ::PlayerSynch::SingleMonsterPath* MapMonsterPath::add_path() {
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleMonsterPath >&
MapMonsterPath::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::SingleMonsterPath >*
MapMonsterPath::mutable_path() {
  return &path_;
}

// -------------------------------------------------------------------

// SingleMonsterPath

// required int32 key = 1;
inline bool SingleMonsterPath::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SingleMonsterPath::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SingleMonsterPath::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SingleMonsterPath::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SingleMonsterPath::key() const {
  return key_;
}
inline void SingleMonsterPath::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// repeated int32 pos = 2;
inline int SingleMonsterPath::pos_size() const {
  return pos_.size();
}
inline void SingleMonsterPath::clear_pos() {
  pos_.Clear();
}
inline ::google::protobuf::int32 SingleMonsterPath::pos(int index) const {
  return pos_.Get(index);
}
inline void SingleMonsterPath::set_pos(int index, ::google::protobuf::int32 value) {
  pos_.Set(index, value);
}
inline void SingleMonsterPath::add_pos(::google::protobuf::int32 value) {
  pos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SingleMonsterPath::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SingleMonsterPath::mutable_pos() {
  return &pos_;
}

// -------------------------------------------------------------------

// ReqInstanceMonsterPos

// -------------------------------------------------------------------

// RetInstanceMonsterPos

// repeated .PlayerSynch.InstanceMonsterPosInfo posInfo = 1;
inline int RetInstanceMonsterPos::posinfo_size() const {
  return posinfo_.size();
}
inline void RetInstanceMonsterPos::clear_posinfo() {
  posinfo_.Clear();
}
inline const ::PlayerSynch::InstanceMonsterPosInfo& RetInstanceMonsterPos::posinfo(int index) const {
  return posinfo_.Get(index);
}
inline ::PlayerSynch::InstanceMonsterPosInfo* RetInstanceMonsterPos::mutable_posinfo(int index) {
  return posinfo_.Mutable(index);
}
inline ::PlayerSynch::InstanceMonsterPosInfo* RetInstanceMonsterPos::add_posinfo() {
  return posinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::InstanceMonsterPosInfo >&
RetInstanceMonsterPos::posinfo() const {
  return posinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::InstanceMonsterPosInfo >*
RetInstanceMonsterPos::mutable_posinfo() {
  return &posinfo_;
}

// -------------------------------------------------------------------

// InstanceMonsterPosInfo

// required int32 monID = 1;
inline bool InstanceMonsterPosInfo::has_monid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstanceMonsterPosInfo::set_has_monid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstanceMonsterPosInfo::clear_has_monid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstanceMonsterPosInfo::clear_monid() {
  monid_ = 0;
  clear_has_monid();
}
inline ::google::protobuf::int32 InstanceMonsterPosInfo::monid() const {
  return monid_;
}
inline void InstanceMonsterPosInfo::set_monid(::google::protobuf::int32 value) {
  set_has_monid();
  monid_ = value;
}

// required int32 monKey = 2;
inline bool InstanceMonsterPosInfo::has_monkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstanceMonsterPosInfo::set_has_monkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstanceMonsterPosInfo::clear_has_monkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstanceMonsterPosInfo::clear_monkey() {
  monkey_ = 0;
  clear_has_monkey();
}
inline ::google::protobuf::int32 InstanceMonsterPosInfo::monkey() const {
  return monkey_;
}
inline void InstanceMonsterPosInfo::set_monkey(::google::protobuf::int32 value) {
  set_has_monkey();
  monkey_ = value;
}

// required int32 monXYpos = 3;
inline bool InstanceMonsterPosInfo::has_monxypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstanceMonsterPosInfo::set_has_monxypos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstanceMonsterPosInfo::clear_has_monxypos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstanceMonsterPosInfo::clear_monxypos() {
  monxypos_ = 0;
  clear_has_monxypos();
}
inline ::google::protobuf::int32 InstanceMonsterPosInfo::monxypos() const {
  return monxypos_;
}
inline void InstanceMonsterPosInfo::set_monxypos(::google::protobuf::int32 value) {
  set_has_monxypos();
  monxypos_ = value;
}

// -------------------------------------------------------------------

// GirlWarPathToPlayer

// required int32 key = 1;
inline bool GirlWarPathToPlayer::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GirlWarPathToPlayer::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GirlWarPathToPlayer::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GirlWarPathToPlayer::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 GirlWarPathToPlayer::key() const {
  return key_;
}
inline void GirlWarPathToPlayer::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// repeated .PlayerSynch.CharPos pos = 2;
inline int GirlWarPathToPlayer::pos_size() const {
  return pos_.size();
}
inline void GirlWarPathToPlayer::clear_pos() {
  pos_.Clear();
}
inline const ::PlayerSynch::CharPos& GirlWarPathToPlayer::pos(int index) const {
  return pos_.Get(index);
}
inline ::PlayerSynch::CharPos* GirlWarPathToPlayer::mutable_pos(int index) {
  return pos_.Mutable(index);
}
inline ::PlayerSynch::CharPos* GirlWarPathToPlayer::add_pos() {
  return pos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >&
GirlWarPathToPlayer::pos() const {
  return pos_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::CharPos >*
GirlWarPathToPlayer::mutable_pos() {
  return &pos_;
}

// -------------------------------------------------------------------

// SynchGirlWar

// required int32 id = 1;
inline bool SynchGirlWar::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchGirlWar::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchGirlWar::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchGirlWar::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SynchGirlWar::id() const {
  return id_;
}
inline void SynchGirlWar::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 key = 2;
inline bool SynchGirlWar::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchGirlWar::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchGirlWar::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchGirlWar::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 SynchGirlWar::key() const {
  return key_;
}
inline void SynchGirlWar::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 ownerkey = 3;
inline bool SynchGirlWar::has_ownerkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchGirlWar::set_has_ownerkey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchGirlWar::clear_has_ownerkey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchGirlWar::clear_ownerkey() {
  ownerkey_ = 0;
  clear_has_ownerkey();
}
inline ::google::protobuf::int32 SynchGirlWar::ownerkey() const {
  return ownerkey_;
}
inline void SynchGirlWar::set_ownerkey(::google::protobuf::int32 value) {
  set_has_ownerkey();
  ownerkey_ = value;
}

// optional int32 lv = 4;
inline bool SynchGirlWar::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchGirlWar::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchGirlWar::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchGirlWar::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 SynchGirlWar::lv() const {
  return lv_;
}
inline void SynchGirlWar::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 hp = 5;
inline bool SynchGirlWar::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SynchGirlWar::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SynchGirlWar::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SynchGirlWar::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 SynchGirlWar::hp() const {
  return hp_;
}
inline void SynchGirlWar::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 hpmax = 6;
inline bool SynchGirlWar::has_hpmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SynchGirlWar::set_has_hpmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SynchGirlWar::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SynchGirlWar::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 SynchGirlWar::hpmax() const {
  return hpmax_;
}
inline void SynchGirlWar::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 xpos = 7;
inline bool SynchGirlWar::has_xpos() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SynchGirlWar::set_has_xpos() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SynchGirlWar::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SynchGirlWar::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 SynchGirlWar::xpos() const {
  return xpos_;
}
inline void SynchGirlWar::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// optional int32 ypos = 8;
inline bool SynchGirlWar::has_ypos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SynchGirlWar::set_has_ypos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SynchGirlWar::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SynchGirlWar::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 SynchGirlWar::ypos() const {
  return ypos_;
}
inline void SynchGirlWar::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// optional int32 targetplayerkey = 9;
inline bool SynchGirlWar::has_targetplayerkey() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SynchGirlWar::set_has_targetplayerkey() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SynchGirlWar::clear_has_targetplayerkey() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SynchGirlWar::clear_targetplayerkey() {
  targetplayerkey_ = 0;
  clear_has_targetplayerkey();
}
inline ::google::protobuf::int32 SynchGirlWar::targetplayerkey() const {
  return targetplayerkey_;
}
inline void SynchGirlWar::set_targetplayerkey(::google::protobuf::int32 value) {
  set_has_targetplayerkey();
  targetplayerkey_ = value;
}

// optional int32 targetgirlkey = 10;
inline bool SynchGirlWar::has_targetgirlkey() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SynchGirlWar::set_has_targetgirlkey() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SynchGirlWar::clear_has_targetgirlkey() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SynchGirlWar::clear_targetgirlkey() {
  targetgirlkey_ = 0;
  clear_has_targetgirlkey();
}
inline ::google::protobuf::int32 SynchGirlWar::targetgirlkey() const {
  return targetgirlkey_;
}
inline void SynchGirlWar::set_targetgirlkey(::google::protobuf::int32 value) {
  set_has_targetgirlkey();
  targetgirlkey_ = value;
}

// -------------------------------------------------------------------

// RemotePlayerEquip

// optional int32 type = 1;
inline bool RemotePlayerEquip::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemotePlayerEquip::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemotePlayerEquip::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemotePlayerEquip::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RemotePlayerEquip::type() const {
  return type_;
}
inline void RemotePlayerEquip::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool RemotePlayerEquip::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemotePlayerEquip::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemotePlayerEquip::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemotePlayerEquip::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RemotePlayerEquip::id() const {
  return id_;
}
inline void RemotePlayerEquip::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 strengGrade = 3;
inline bool RemotePlayerEquip::has_strenggrade() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RemotePlayerEquip::set_has_strenggrade() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RemotePlayerEquip::clear_has_strenggrade() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RemotePlayerEquip::clear_strenggrade() {
  strenggrade_ = 0;
  clear_has_strenggrade();
}
inline ::google::protobuf::int32 RemotePlayerEquip::strenggrade() const {
  return strenggrade_;
}
inline void RemotePlayerEquip::set_strenggrade(::google::protobuf::int32 value) {
  set_has_strenggrade();
  strenggrade_ = value;
}

// -------------------------------------------------------------------

// AlterPlayerEquip

// optional int64 playerid = 1;
inline bool AlterPlayerEquip::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlterPlayerEquip::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlterPlayerEquip::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlterPlayerEquip::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 AlterPlayerEquip::playerid() const {
  return playerid_;
}
inline void AlterPlayerEquip::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// repeated .PlayerSynch.RemotePlayerEquip equips = 2;
inline int AlterPlayerEquip::equips_size() const {
  return equips_.size();
}
inline void AlterPlayerEquip::clear_equips() {
  equips_.Clear();
}
inline const ::PlayerSynch::RemotePlayerEquip& AlterPlayerEquip::equips(int index) const {
  return equips_.Get(index);
}
inline ::PlayerSynch::RemotePlayerEquip* AlterPlayerEquip::mutable_equips(int index) {
  return equips_.Mutable(index);
}
inline ::PlayerSynch::RemotePlayerEquip* AlterPlayerEquip::add_equips() {
  return equips_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerSynch::RemotePlayerEquip >&
AlterPlayerEquip::equips() const {
  return equips_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerSynch::RemotePlayerEquip >*
AlterPlayerEquip::mutable_equips() {
  return &equips_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerSynch

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Map_2fSynchPath_2eproto__INCLUDED
