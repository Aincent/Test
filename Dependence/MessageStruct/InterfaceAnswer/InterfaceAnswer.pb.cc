// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InterfaceAnswer/InterfaceAnswer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InterfaceAnswer/InterfaceAnswer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace InterfaceAnswer {

namespace {

const ::google::protobuf::Descriptor* AnswerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllAnswerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllAnswerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExcludeOneWrongData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExcludeOneWrongData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBuckleAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBuckleAtt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnBuckleAtt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnBuckleAtt_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerGiveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerGiveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* WS2GMAnswerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WS2GMAnswerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* WS2GMPlayerAnswerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WS2GMPlayerAnswerState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto() {
  protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InterfaceAnswer/InterfaceAnswer.proto");
  GOOGLE_CHECK(file != NULL);
  AnswerData_descriptor_ = file->message_type(0);
  static const int AnswerData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerData, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerData, reward_),
  };
  AnswerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerData_descriptor_,
      AnswerData::default_instance_,
      AnswerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerData));
  GetAllAnswerData_descriptor_ = file->message_type(1);
  static const int GetAllAnswerData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, timecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, excludetcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, countdowntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, error_),
  };
  GetAllAnswerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllAnswerData_descriptor_,
      GetAllAnswerData::default_instance_,
      GetAllAnswerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllAnswerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllAnswerData));
  ExcludeOneWrongData_descriptor_ = file->message_type(2);
  static const int ExcludeOneWrongData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExcludeOneWrongData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExcludeOneWrongData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExcludeOneWrongData, error_),
  };
  ExcludeOneWrongData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExcludeOneWrongData_descriptor_,
      ExcludeOneWrongData::default_instance_,
      ExcludeOneWrongData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExcludeOneWrongData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExcludeOneWrongData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExcludeOneWrongData));
  TitleData_descriptor_ = file->message_type(3);
  static const int TitleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, currentcounts_),
  };
  TitleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleData_descriptor_,
      TitleData::default_instance_,
      TitleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleData));
  ResultData_descriptor_ = file->message_type(4);
  static const int ResultData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, rightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, wrongcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, straightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, selfranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, selfrightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, rankinglist_),
  };
  ResultData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultData_descriptor_,
      ResultData::default_instance_,
      ResultData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultData));
  RewardData_descriptor_ = file->message_type(5);
  static const int RewardData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, answer_),
  };
  RewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardData_descriptor_,
      RewardData::default_instance_,
      RewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardData));
  RankingData_descriptor_ = file->message_type(6);
  static const int RankingData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, score_),
  };
  RankingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankingData_descriptor_,
      RankingData::default_instance_,
      RankingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankingData));
  SendBuckleAtt_descriptor_ = file->message_type(7);
  static const int SendBuckleAtt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBuckleAtt, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBuckleAtt, attid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBuckleAtt, value_),
  };
  SendBuckleAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBuckleAtt_descriptor_,
      SendBuckleAtt::default_instance_,
      SendBuckleAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBuckleAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBuckleAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBuckleAtt));
  ReturnBuckleAtt_descriptor_ = file->message_type(8);
  static const int ReturnBuckleAtt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBuckleAtt, error_),
  };
  ReturnBuckleAtt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnBuckleAtt_descriptor_,
      ReturnBuckleAtt::default_instance_,
      ReturnBuckleAtt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBuckleAtt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnBuckleAtt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnBuckleAtt));
  AnswerGiveItem_descriptor_ = file->message_type(9);
  static const int AnswerGiveItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerGiveItem, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerGiveItem, id_),
  };
  AnswerGiveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerGiveItem_descriptor_,
      AnswerGiveItem::default_instance_,
      AnswerGiveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerGiveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerGiveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerGiveItem));
  AnswerActivity_descriptor_ = file->message_type(10);
  static const int AnswerActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerActivity, playerid_),
  };
  AnswerActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerActivity_descriptor_,
      AnswerActivity::default_instance_,
      AnswerActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerActivity));
  WS2GMAnswerState_descriptor_ = file->message_type(11);
  static const int WS2GMAnswerState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMAnswerState, flag_),
  };
  WS2GMAnswerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WS2GMAnswerState_descriptor_,
      WS2GMAnswerState::default_instance_,
      WS2GMAnswerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMAnswerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMAnswerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WS2GMAnswerState));
  WS2GMPlayerAnswerState_descriptor_ = file->message_type(12);
  static const int WS2GMPlayerAnswerState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMPlayerAnswerState, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMPlayerAnswerState, flag_),
  };
  WS2GMPlayerAnswerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WS2GMPlayerAnswerState_descriptor_,
      WS2GMPlayerAnswerState::default_instance_,
      WS2GMPlayerAnswerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMPlayerAnswerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WS2GMPlayerAnswerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WS2GMPlayerAnswerState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerData_descriptor_, &AnswerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllAnswerData_descriptor_, &GetAllAnswerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExcludeOneWrongData_descriptor_, &ExcludeOneWrongData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleData_descriptor_, &TitleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultData_descriptor_, &ResultData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardData_descriptor_, &RewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankingData_descriptor_, &RankingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBuckleAtt_descriptor_, &SendBuckleAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnBuckleAtt_descriptor_, &ReturnBuckleAtt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerGiveItem_descriptor_, &AnswerGiveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerActivity_descriptor_, &AnswerActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WS2GMAnswerState_descriptor_, &WS2GMAnswerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WS2GMPlayerAnswerState_descriptor_, &WS2GMPlayerAnswerState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InterfaceAnswer_2fInterfaceAnswer_2eproto() {
  delete AnswerData::default_instance_;
  delete AnswerData_reflection_;
  delete GetAllAnswerData::default_instance_;
  delete GetAllAnswerData_reflection_;
  delete ExcludeOneWrongData::default_instance_;
  delete ExcludeOneWrongData_reflection_;
  delete TitleData::default_instance_;
  delete TitleData_reflection_;
  delete ResultData::default_instance_;
  delete ResultData_reflection_;
  delete RewardData::default_instance_;
  delete RewardData_reflection_;
  delete RankingData::default_instance_;
  delete RankingData_reflection_;
  delete SendBuckleAtt::default_instance_;
  delete SendBuckleAtt_reflection_;
  delete ReturnBuckleAtt::default_instance_;
  delete ReturnBuckleAtt_reflection_;
  delete AnswerGiveItem::default_instance_;
  delete AnswerGiveItem_reflection_;
  delete AnswerActivity::default_instance_;
  delete AnswerActivity_reflection_;
  delete WS2GMAnswerState::default_instance_;
  delete WS2GMAnswerState_reflection_;
  delete WS2GMPlayerAnswerState::default_instance_;
  delete WS2GMPlayerAnswerState_reflection_;
}

void protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%InterfaceAnswer/InterfaceAnswer.proto\022"
    "\017InterfaceAnswer\"\240\001\n\nAnswerData\022\r\n\005stage"
    "\030\001 \001(\005\022)\n\005title\030\002 \001(\0132\032.InterfaceAnswer."
    "TitleData\022+\n\006result\030\003 \001(\0132\033.InterfaceAns"
    "wer.ResultData\022+\n\006reward\030\004 \001(\0132\033.Interfa"
    "ceAnswer.RewardData\"\370\001\n\020GetAllAnswerData"
    "\022\r\n\005stage\030\001 \001(\005\022\022\n\ntimeCounts\030\002 \001(\005\022\026\n\016E"
    "xcludeTCounts\030\003 \001(\005\022)\n\005title\030\004 \001(\0132\032.Int"
    "erfaceAnswer.TitleData\022\025\n\rcountDownTime\030"
    "\005 \001(\005\022+\n\006result\030\006 \001(\0132\033.InterfaceAnswer."
    "ResultData\022+\n\006reward\030\007 \001(\0132\033.InterfaceAn"
    "swer.RewardData\022\r\n\005error\030\010 \001(\005\"A\n\023Exclud"
    "eOneWrongData\022\r\n\005index\030\001 \001(\005\022\014\n\004type\030\002 \001"
    "(\005\022\r\n\005error\030\003 \001(\005\".\n\tTitleData\022\n\n\002id\030\001 \001"
    "(\005\022\025\n\rcurrentCounts\030\002 \001(\005\"\315\001\n\nResultData"
    "\022\r\n\005index\030\001 \001(\005\022\023\n\013rightCounts\030\002 \001(\005\022\023\n\013"
    "wrongCounts\030\003 \001(\005\022\r\n\005score\030\004 \001(\005\022\026\n\016stra"
    "ightCounts\030\005 \001(\005\022\023\n\013selfRanking\030\006 \001(\005\022\027\n"
    "\017selfRightCounts\030\007 \001(\005\0221\n\013rankingList\030\010 "
    "\003(\0132\034.InterfaceAnswer.RankingData\"-\n\nRew"
    "ardData\022\017\n\007ranking\030\001 \001(\005\022\016\n\006answer\030\002 \001(\005"
    "\"<\n\013RankingData\022\020\n\010vipLevel\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\r\n\005score\030\003 \001(\005\"\?\n\rSendBuckleAtt\022"
    "\020\n\010playerID\030\001 \001(\003\022\r\n\005attID\030\002 \001(\005\022\r\n\005valu"
    "e\030\003 \001(\005\" \n\017ReturnBuckleAtt\022\r\n\005error\030\001 \001("
    "\005\".\n\016AnswerGiveItem\022\020\n\010playerID\030\001 \001(\003\022\n\n"
    "\002ID\030\002 \003(\005\"\"\n\016AnswerActivity\022\020\n\010playerID\030"
    "\001 \001(\003\" \n\020WS2GMAnswerState\022\014\n\004flag\030\001 \002(\010\""
    "6\n\026WS2GMPlayerAnswerState\022\016\n\006charID\030\001 \002("
    "\003\022\014\n\004flag\030\002 \002(\010", 1175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InterfaceAnswer/InterfaceAnswer.proto", &protobuf_RegisterTypes);
  AnswerData::default_instance_ = new AnswerData();
  GetAllAnswerData::default_instance_ = new GetAllAnswerData();
  ExcludeOneWrongData::default_instance_ = new ExcludeOneWrongData();
  TitleData::default_instance_ = new TitleData();
  ResultData::default_instance_ = new ResultData();
  RewardData::default_instance_ = new RewardData();
  RankingData::default_instance_ = new RankingData();
  SendBuckleAtt::default_instance_ = new SendBuckleAtt();
  ReturnBuckleAtt::default_instance_ = new ReturnBuckleAtt();
  AnswerGiveItem::default_instance_ = new AnswerGiveItem();
  AnswerActivity::default_instance_ = new AnswerActivity();
  WS2GMAnswerState::default_instance_ = new WS2GMAnswerState();
  WS2GMPlayerAnswerState::default_instance_ = new WS2GMPlayerAnswerState();
  AnswerData::default_instance_->InitAsDefaultInstance();
  GetAllAnswerData::default_instance_->InitAsDefaultInstance();
  ExcludeOneWrongData::default_instance_->InitAsDefaultInstance();
  TitleData::default_instance_->InitAsDefaultInstance();
  ResultData::default_instance_->InitAsDefaultInstance();
  RewardData::default_instance_->InitAsDefaultInstance();
  RankingData::default_instance_->InitAsDefaultInstance();
  SendBuckleAtt::default_instance_->InitAsDefaultInstance();
  ReturnBuckleAtt::default_instance_->InitAsDefaultInstance();
  AnswerGiveItem::default_instance_->InitAsDefaultInstance();
  AnswerActivity::default_instance_->InitAsDefaultInstance();
  WS2GMAnswerState::default_instance_->InitAsDefaultInstance();
  WS2GMPlayerAnswerState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InterfaceAnswer_2fInterfaceAnswer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InterfaceAnswer_2fInterfaceAnswer_2eproto {
  StaticDescriptorInitializer_InterfaceAnswer_2fInterfaceAnswer_2eproto() {
    protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  }
} static_descriptor_initializer_InterfaceAnswer_2fInterfaceAnswer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AnswerData::kStageFieldNumber;
const int AnswerData::kTitleFieldNumber;
const int AnswerData::kResultFieldNumber;
const int AnswerData::kRewardFieldNumber;
#endif  // !_MSC_VER

AnswerData::AnswerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerData::InitAsDefaultInstance() {
  title_ = const_cast< ::InterfaceAnswer::TitleData*>(&::InterfaceAnswer::TitleData::default_instance());
  result_ = const_cast< ::InterfaceAnswer::ResultData*>(&::InterfaceAnswer::ResultData::default_instance());
  reward_ = const_cast< ::InterfaceAnswer::RewardData*>(&::InterfaceAnswer::RewardData::default_instance());
}

AnswerData::AnswerData(const AnswerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerData::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  title_ = NULL;
  result_ = NULL;
  reward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerData::~AnswerData() {
  SharedDtor();
}

void AnswerData::SharedDtor() {
  if (this != default_instance_) {
    delete title_;
    delete result_;
    delete reward_;
  }
}

void AnswerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerData_descriptor_;
}

const AnswerData& AnswerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

AnswerData* AnswerData::default_instance_ = NULL;

AnswerData* AnswerData::New() const {
  return new AnswerData;
}

void AnswerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    if (has_title()) {
      if (title_ != NULL) title_->::InterfaceAnswer::TitleData::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::InterfaceAnswer::ResultData::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::InterfaceAnswer::RewardData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // optional .InterfaceAnswer.TitleData title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_result;
        break;
      }

      // optional .InterfaceAnswer.ResultData result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // optional .InterfaceAnswer.RewardData reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional .InterfaceAnswer.TitleData title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->title(), output);
  }

  // optional .InterfaceAnswer.ResultData result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->result(), output);
  }

  // optional .InterfaceAnswer.RewardData reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional .InterfaceAnswer.TitleData title = 2;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->title(), target);
  }

  // optional .InterfaceAnswer.ResultData result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->result(), target);
  }

  // optional .InterfaceAnswer.RewardData reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional .InterfaceAnswer.TitleData title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .InterfaceAnswer.ResultData result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .InterfaceAnswer.RewardData reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerData::MergeFrom(const AnswerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_title()) {
      mutable_title()->::InterfaceAnswer::TitleData::MergeFrom(from.title());
    }
    if (from.has_result()) {
      mutable_result()->::InterfaceAnswer::ResultData::MergeFrom(from.result());
    }
    if (from.has_reward()) {
      mutable_reward()->::InterfaceAnswer::RewardData::MergeFrom(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerData::CopyFrom(const AnswerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerData::IsInitialized() const {

  return true;
}

void AnswerData::Swap(AnswerData* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(title_, other->title_);
    std::swap(result_, other->result_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerData_descriptor_;
  metadata.reflection = AnswerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllAnswerData::kStageFieldNumber;
const int GetAllAnswerData::kTimeCountsFieldNumber;
const int GetAllAnswerData::kExcludeTCountsFieldNumber;
const int GetAllAnswerData::kTitleFieldNumber;
const int GetAllAnswerData::kCountDownTimeFieldNumber;
const int GetAllAnswerData::kResultFieldNumber;
const int GetAllAnswerData::kRewardFieldNumber;
const int GetAllAnswerData::kErrorFieldNumber;
#endif  // !_MSC_VER

GetAllAnswerData::GetAllAnswerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllAnswerData::InitAsDefaultInstance() {
  title_ = const_cast< ::InterfaceAnswer::TitleData*>(&::InterfaceAnswer::TitleData::default_instance());
  result_ = const_cast< ::InterfaceAnswer::ResultData*>(&::InterfaceAnswer::ResultData::default_instance());
  reward_ = const_cast< ::InterfaceAnswer::RewardData*>(&::InterfaceAnswer::RewardData::default_instance());
}

GetAllAnswerData::GetAllAnswerData(const GetAllAnswerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllAnswerData::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  timecounts_ = 0;
  excludetcounts_ = 0;
  title_ = NULL;
  countdowntime_ = 0;
  result_ = NULL;
  reward_ = NULL;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllAnswerData::~GetAllAnswerData() {
  SharedDtor();
}

void GetAllAnswerData::SharedDtor() {
  if (this != default_instance_) {
    delete title_;
    delete result_;
    delete reward_;
  }
}

void GetAllAnswerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllAnswerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllAnswerData_descriptor_;
}

const GetAllAnswerData& GetAllAnswerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

GetAllAnswerData* GetAllAnswerData::default_instance_ = NULL;

GetAllAnswerData* GetAllAnswerData::New() const {
  return new GetAllAnswerData;
}

void GetAllAnswerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    timecounts_ = 0;
    excludetcounts_ = 0;
    if (has_title()) {
      if (title_ != NULL) title_->::InterfaceAnswer::TitleData::Clear();
    }
    countdowntime_ = 0;
    if (has_result()) {
      if (result_ != NULL) result_->::InterfaceAnswer::ResultData::Clear();
    }
    if (has_reward()) {
      if (reward_ != NULL) reward_->::InterfaceAnswer::RewardData::Clear();
    }
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllAnswerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeCounts;
        break;
      }

      // optional int32 timeCounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timecounts_)));
          set_has_timecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ExcludeTCounts;
        break;
      }

      // optional int32 ExcludeTCounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExcludeTCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &excludetcounts_)));
          set_has_excludetcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // optional .InterfaceAnswer.TitleData title = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_countDownTime;
        break;
      }

      // optional int32 countDownTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countDownTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countdowntime_)));
          set_has_countdowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_result;
        break;
      }

      // optional .InterfaceAnswer.ResultData result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_reward;
        break;
      }

      // optional .InterfaceAnswer.RewardData reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_error;
        break;
      }

      // optional int32 error = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllAnswerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional int32 timeCounts = 2;
  if (has_timecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timecounts(), output);
  }

  // optional int32 ExcludeTCounts = 3;
  if (has_excludetcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->excludetcounts(), output);
  }

  // optional .InterfaceAnswer.TitleData title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->title(), output);
  }

  // optional int32 countDownTime = 5;
  if (has_countdowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->countdowntime(), output);
  }

  // optional .InterfaceAnswer.ResultData result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->result(), output);
  }

  // optional .InterfaceAnswer.RewardData reward = 7;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reward(), output);
  }

  // optional int32 error = 8;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllAnswerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional int32 timeCounts = 2;
  if (has_timecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timecounts(), target);
  }

  // optional int32 ExcludeTCounts = 3;
  if (has_excludetcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->excludetcounts(), target);
  }

  // optional .InterfaceAnswer.TitleData title = 4;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->title(), target);
  }

  // optional int32 countDownTime = 5;
  if (has_countdowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->countdowntime(), target);
  }

  // optional .InterfaceAnswer.ResultData result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->result(), target);
  }

  // optional .InterfaceAnswer.RewardData reward = 7;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reward(), target);
  }

  // optional int32 error = 8;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllAnswerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 timeCounts = 2;
    if (has_timecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timecounts());
    }

    // optional int32 ExcludeTCounts = 3;
    if (has_excludetcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->excludetcounts());
    }

    // optional .InterfaceAnswer.TitleData title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional int32 countDownTime = 5;
    if (has_countdowntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countdowntime());
    }

    // optional .InterfaceAnswer.ResultData result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .InterfaceAnswer.RewardData reward = 7;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional int32 error = 8;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllAnswerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllAnswerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllAnswerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllAnswerData::MergeFrom(const GetAllAnswerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_timecounts()) {
      set_timecounts(from.timecounts());
    }
    if (from.has_excludetcounts()) {
      set_excludetcounts(from.excludetcounts());
    }
    if (from.has_title()) {
      mutable_title()->::InterfaceAnswer::TitleData::MergeFrom(from.title());
    }
    if (from.has_countdowntime()) {
      set_countdowntime(from.countdowntime());
    }
    if (from.has_result()) {
      mutable_result()->::InterfaceAnswer::ResultData::MergeFrom(from.result());
    }
    if (from.has_reward()) {
      mutable_reward()->::InterfaceAnswer::RewardData::MergeFrom(from.reward());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllAnswerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllAnswerData::CopyFrom(const GetAllAnswerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllAnswerData::IsInitialized() const {

  return true;
}

void GetAllAnswerData::Swap(GetAllAnswerData* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(timecounts_, other->timecounts_);
    std::swap(excludetcounts_, other->excludetcounts_);
    std::swap(title_, other->title_);
    std::swap(countdowntime_, other->countdowntime_);
    std::swap(result_, other->result_);
    std::swap(reward_, other->reward_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllAnswerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllAnswerData_descriptor_;
  metadata.reflection = GetAllAnswerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExcludeOneWrongData::kIndexFieldNumber;
const int ExcludeOneWrongData::kTypeFieldNumber;
const int ExcludeOneWrongData::kErrorFieldNumber;
#endif  // !_MSC_VER

ExcludeOneWrongData::ExcludeOneWrongData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExcludeOneWrongData::InitAsDefaultInstance() {
}

ExcludeOneWrongData::ExcludeOneWrongData(const ExcludeOneWrongData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExcludeOneWrongData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  type_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExcludeOneWrongData::~ExcludeOneWrongData() {
  SharedDtor();
}

void ExcludeOneWrongData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExcludeOneWrongData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExcludeOneWrongData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExcludeOneWrongData_descriptor_;
}

const ExcludeOneWrongData& ExcludeOneWrongData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

ExcludeOneWrongData* ExcludeOneWrongData::default_instance_ = NULL;

ExcludeOneWrongData* ExcludeOneWrongData::New() const {
  return new ExcludeOneWrongData;
}

void ExcludeOneWrongData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    type_ = 0;
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExcludeOneWrongData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_error;
        break;
      }

      // optional int32 error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExcludeOneWrongData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExcludeOneWrongData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExcludeOneWrongData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExcludeOneWrongData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExcludeOneWrongData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExcludeOneWrongData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExcludeOneWrongData::MergeFrom(const ExcludeOneWrongData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExcludeOneWrongData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExcludeOneWrongData::CopyFrom(const ExcludeOneWrongData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExcludeOneWrongData::IsInitialized() const {

  return true;
}

void ExcludeOneWrongData::Swap(ExcludeOneWrongData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExcludeOneWrongData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExcludeOneWrongData_descriptor_;
  metadata.reflection = ExcludeOneWrongData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleData::kIdFieldNumber;
const int TitleData::kCurrentCountsFieldNumber;
#endif  // !_MSC_VER

TitleData::TitleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleData::InitAsDefaultInstance() {
}

TitleData::TitleData(const TitleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  currentcounts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleData::~TitleData() {
  SharedDtor();
}

void TitleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleData_descriptor_;
}

const TitleData& TitleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

TitleData* TitleData::default_instance_ = NULL;

TitleData* TitleData::New() const {
  return new TitleData;
}

void TitleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    currentcounts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentCounts;
        break;
      }

      // optional int32 currentCounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentcounts_)));
          set_has_currentcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 currentCounts = 2;
  if (has_currentcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentcounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 currentCounts = 2;
  if (has_currentcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentcounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 currentCounts = 2;
    if (has_currentcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentcounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleData::MergeFrom(const TitleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentcounts()) {
      set_currentcounts(from.currentcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleData::CopyFrom(const TitleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleData::IsInitialized() const {

  return true;
}

void TitleData::Swap(TitleData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(currentcounts_, other->currentcounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleData_descriptor_;
  metadata.reflection = TitleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultData::kIndexFieldNumber;
const int ResultData::kRightCountsFieldNumber;
const int ResultData::kWrongCountsFieldNumber;
const int ResultData::kScoreFieldNumber;
const int ResultData::kStraightCountsFieldNumber;
const int ResultData::kSelfRankingFieldNumber;
const int ResultData::kSelfRightCountsFieldNumber;
const int ResultData::kRankingListFieldNumber;
#endif  // !_MSC_VER

ResultData::ResultData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultData::InitAsDefaultInstance() {
}

ResultData::ResultData(const ResultData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  rightcounts_ = 0;
  wrongcounts_ = 0;
  score_ = 0;
  straightcounts_ = 0;
  selfranking_ = 0;
  selfrightcounts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultData::~ResultData() {
  SharedDtor();
}

void ResultData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultData_descriptor_;
}

const ResultData& ResultData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

ResultData* ResultData::default_instance_ = NULL;

ResultData* ResultData::New() const {
  return new ResultData;
}

void ResultData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    rightcounts_ = 0;
    wrongcounts_ = 0;
    score_ = 0;
    straightcounts_ = 0;
    selfranking_ = 0;
    selfrightcounts_ = 0;
  }
  rankinglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rightCounts;
        break;
      }

      // optional int32 rightCounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightcounts_)));
          set_has_rightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wrongCounts;
        break;
      }

      // optional int32 wrongCounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrongCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrongcounts_)));
          set_has_wrongcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_straightCounts;
        break;
      }

      // optional int32 straightCounts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_straightCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &straightcounts_)));
          set_has_straightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_selfRanking;
        break;
      }

      // optional int32 selfRanking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRanking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfranking_)));
          set_has_selfranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_selfRightCounts;
        break;
      }

      // optional int32 selfRightCounts = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfRightCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfrightcounts_)));
          set_has_selfrightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rankingList;
        break;
      }

      // repeated .InterfaceAnswer.RankingData rankingList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankingList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rankingList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 rightCounts = 2;
  if (has_rightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rightcounts(), output);
  }

  // optional int32 wrongCounts = 3;
  if (has_wrongcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wrongcounts(), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 straightCounts = 5;
  if (has_straightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->straightcounts(), output);
  }

  // optional int32 selfRanking = 6;
  if (has_selfranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->selfranking(), output);
  }

  // optional int32 selfRightCounts = 7;
  if (has_selfrightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->selfrightcounts(), output);
  }

  // repeated .InterfaceAnswer.RankingData rankingList = 8;
  for (int i = 0; i < this->rankinglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rankinglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 rightCounts = 2;
  if (has_rightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rightcounts(), target);
  }

  // optional int32 wrongCounts = 3;
  if (has_wrongcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wrongcounts(), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 straightCounts = 5;
  if (has_straightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->straightcounts(), target);
  }

  // optional int32 selfRanking = 6;
  if (has_selfranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->selfranking(), target);
  }

  // optional int32 selfRightCounts = 7;
  if (has_selfrightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->selfrightcounts(), target);
  }

  // repeated .InterfaceAnswer.RankingData rankingList = 8;
  for (int i = 0; i < this->rankinglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rankinglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 rightCounts = 2;
    if (has_rightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightcounts());
    }

    // optional int32 wrongCounts = 3;
    if (has_wrongcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrongcounts());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 straightCounts = 5;
    if (has_straightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->straightcounts());
    }

    // optional int32 selfRanking = 6;
    if (has_selfranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfranking());
    }

    // optional int32 selfRightCounts = 7;
    if (has_selfrightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfrightcounts());
    }

  }
  // repeated .InterfaceAnswer.RankingData rankingList = 8;
  total_size += 1 * this->rankinglist_size();
  for (int i = 0; i < this->rankinglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultData::MergeFrom(const ResultData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinglist_.MergeFrom(from.rankinglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rightcounts()) {
      set_rightcounts(from.rightcounts());
    }
    if (from.has_wrongcounts()) {
      set_wrongcounts(from.wrongcounts());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_straightcounts()) {
      set_straightcounts(from.straightcounts());
    }
    if (from.has_selfranking()) {
      set_selfranking(from.selfranking());
    }
    if (from.has_selfrightcounts()) {
      set_selfrightcounts(from.selfrightcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultData::CopyFrom(const ResultData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultData::IsInitialized() const {

  return true;
}

void ResultData::Swap(ResultData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(rightcounts_, other->rightcounts_);
    std::swap(wrongcounts_, other->wrongcounts_);
    std::swap(score_, other->score_);
    std::swap(straightcounts_, other->straightcounts_);
    std::swap(selfranking_, other->selfranking_);
    std::swap(selfrightcounts_, other->selfrightcounts_);
    rankinglist_.Swap(&other->rankinglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultData_descriptor_;
  metadata.reflection = ResultData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardData::kRankingFieldNumber;
const int RewardData::kAnswerFieldNumber;
#endif  // !_MSC_VER

RewardData::RewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardData::InitAsDefaultInstance() {
}

RewardData::RewardData(const RewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardData::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  answer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardData::~RewardData() {
  SharedDtor();
}

void RewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardData_descriptor_;
}

const RewardData& RewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

RewardData* RewardData::default_instance_ = NULL;

RewardData* RewardData::New() const {
  return new RewardData;
}

void RewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranking_ = 0;
    answer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ranking = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answer;
        break;
      }

      // optional int32 answer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // optional int32 answer = 2;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // optional int32 answer = 2;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 answer = 2;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardData::MergeFrom(const RewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardData::CopyFrom(const RewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardData::IsInitialized() const {

  return true;
}

void RewardData::Swap(RewardData* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardData_descriptor_;
  metadata.reflection = RewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankingData::kVipLevelFieldNumber;
const int RankingData::kNameFieldNumber;
const int RankingData::kScoreFieldNumber;
#endif  // !_MSC_VER

RankingData::RankingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankingData::InitAsDefaultInstance() {
}

RankingData::RankingData(const RankingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankingData::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingData::~RankingData() {
  SharedDtor();
}

void RankingData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RankingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankingData_descriptor_;
}

const RankingData& RankingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

RankingData* RankingData::default_instance_ = NULL;

RankingData* RankingData::New() const {
  return new RankingData;
}

void RankingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viplevel_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vipLevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viplevel(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vipLevel = 1;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viplevel(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipLevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankingData::MergeFrom(const RankingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingData::CopyFrom(const RankingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingData::IsInitialized() const {

  return true;
}

void RankingData::Swap(RankingData* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankingData_descriptor_;
  metadata.reflection = RankingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBuckleAtt::kPlayerIDFieldNumber;
const int SendBuckleAtt::kAttIDFieldNumber;
const int SendBuckleAtt::kValueFieldNumber;
#endif  // !_MSC_VER

SendBuckleAtt::SendBuckleAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendBuckleAtt::InitAsDefaultInstance() {
}

SendBuckleAtt::SendBuckleAtt(const SendBuckleAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendBuckleAtt::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  attid_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBuckleAtt::~SendBuckleAtt() {
  SharedDtor();
}

void SendBuckleAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendBuckleAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBuckleAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBuckleAtt_descriptor_;
}

const SendBuckleAtt& SendBuckleAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

SendBuckleAtt* SendBuckleAtt::default_instance_ = NULL;

SendBuckleAtt* SendBuckleAtt::New() const {
  return new SendBuckleAtt;
}

void SendBuckleAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    attid_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBuckleAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attID;
        break;
      }

      // optional int32 attID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attid_)));
          set_has_attid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendBuckleAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 attID = 2;
  if (has_attid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attid(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendBuckleAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 attID = 2;
  if (has_attid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attid(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendBuckleAtt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 attID = 2;
    if (has_attid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attid());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBuckleAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBuckleAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBuckleAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBuckleAtt::MergeFrom(const SendBuckleAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_attid()) {
      set_attid(from.attid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBuckleAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBuckleAtt::CopyFrom(const SendBuckleAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBuckleAtt::IsInitialized() const {

  return true;
}

void SendBuckleAtt::Swap(SendBuckleAtt* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(attid_, other->attid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBuckleAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBuckleAtt_descriptor_;
  metadata.reflection = SendBuckleAtt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnBuckleAtt::kErrorFieldNumber;
#endif  // !_MSC_VER

ReturnBuckleAtt::ReturnBuckleAtt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnBuckleAtt::InitAsDefaultInstance() {
}

ReturnBuckleAtt::ReturnBuckleAtt(const ReturnBuckleAtt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnBuckleAtt::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnBuckleAtt::~ReturnBuckleAtt() {
  SharedDtor();
}

void ReturnBuckleAtt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnBuckleAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnBuckleAtt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnBuckleAtt_descriptor_;
}

const ReturnBuckleAtt& ReturnBuckleAtt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

ReturnBuckleAtt* ReturnBuckleAtt::default_instance_ = NULL;

ReturnBuckleAtt* ReturnBuckleAtt::New() const {
  return new ReturnBuckleAtt;
}

void ReturnBuckleAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnBuckleAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnBuckleAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnBuckleAtt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnBuckleAtt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnBuckleAtt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnBuckleAtt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnBuckleAtt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnBuckleAtt::MergeFrom(const ReturnBuckleAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnBuckleAtt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnBuckleAtt::CopyFrom(const ReturnBuckleAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnBuckleAtt::IsInitialized() const {

  return true;
}

void ReturnBuckleAtt::Swap(ReturnBuckleAtt* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnBuckleAtt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnBuckleAtt_descriptor_;
  metadata.reflection = ReturnBuckleAtt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerGiveItem::kPlayerIDFieldNumber;
const int AnswerGiveItem::kIDFieldNumber;
#endif  // !_MSC_VER

AnswerGiveItem::AnswerGiveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerGiveItem::InitAsDefaultInstance() {
}

AnswerGiveItem::AnswerGiveItem(const AnswerGiveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerGiveItem::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerGiveItem::~AnswerGiveItem() {
  SharedDtor();
}

void AnswerGiveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerGiveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerGiveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerGiveItem_descriptor_;
}

const AnswerGiveItem& AnswerGiveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

AnswerGiveItem* AnswerGiveItem::default_instance_ = NULL;

AnswerGiveItem* AnswerGiveItem::New() const {
  return new AnswerGiveItem;
}

void AnswerGiveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerGiveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // repeated int32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerGiveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // repeated int32 ID = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerGiveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // repeated int32 ID = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerGiveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  // repeated int32 ID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerGiveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerGiveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerGiveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerGiveItem::MergeFrom(const AnswerGiveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerGiveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerGiveItem::CopyFrom(const AnswerGiveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerGiveItem::IsInitialized() const {

  return true;
}

void AnswerGiveItem::Swap(AnswerGiveItem* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerGiveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerGiveItem_descriptor_;
  metadata.reflection = AnswerGiveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerActivity::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

AnswerActivity::AnswerActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerActivity::InitAsDefaultInstance() {
}

AnswerActivity::AnswerActivity(const AnswerActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerActivity::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerActivity::~AnswerActivity() {
  SharedDtor();
}

void AnswerActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerActivity_descriptor_;
}

const AnswerActivity& AnswerActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

AnswerActivity* AnswerActivity::default_instance_ = NULL;

AnswerActivity* AnswerActivity::New() const {
  return new AnswerActivity;
}

void AnswerActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerActivity::MergeFrom(const AnswerActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerActivity::CopyFrom(const AnswerActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerActivity::IsInitialized() const {

  return true;
}

void AnswerActivity::Swap(AnswerActivity* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerActivity_descriptor_;
  metadata.reflection = AnswerActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WS2GMAnswerState::kFlagFieldNumber;
#endif  // !_MSC_VER

WS2GMAnswerState::WS2GMAnswerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WS2GMAnswerState::InitAsDefaultInstance() {
}

WS2GMAnswerState::WS2GMAnswerState(const WS2GMAnswerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WS2GMAnswerState::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WS2GMAnswerState::~WS2GMAnswerState() {
  SharedDtor();
}

void WS2GMAnswerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WS2GMAnswerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WS2GMAnswerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WS2GMAnswerState_descriptor_;
}

const WS2GMAnswerState& WS2GMAnswerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

WS2GMAnswerState* WS2GMAnswerState::default_instance_ = NULL;

WS2GMAnswerState* WS2GMAnswerState::New() const {
  return new WS2GMAnswerState;
}

void WS2GMAnswerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WS2GMAnswerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WS2GMAnswerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WS2GMAnswerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WS2GMAnswerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WS2GMAnswerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WS2GMAnswerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WS2GMAnswerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WS2GMAnswerState::MergeFrom(const WS2GMAnswerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WS2GMAnswerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WS2GMAnswerState::CopyFrom(const WS2GMAnswerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WS2GMAnswerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WS2GMAnswerState::Swap(WS2GMAnswerState* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WS2GMAnswerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WS2GMAnswerState_descriptor_;
  metadata.reflection = WS2GMAnswerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WS2GMPlayerAnswerState::kCharIDFieldNumber;
const int WS2GMPlayerAnswerState::kFlagFieldNumber;
#endif  // !_MSC_VER

WS2GMPlayerAnswerState::WS2GMPlayerAnswerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WS2GMPlayerAnswerState::InitAsDefaultInstance() {
}

WS2GMPlayerAnswerState::WS2GMPlayerAnswerState(const WS2GMPlayerAnswerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WS2GMPlayerAnswerState::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WS2GMPlayerAnswerState::~WS2GMPlayerAnswerState() {
  SharedDtor();
}

void WS2GMPlayerAnswerState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WS2GMPlayerAnswerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WS2GMPlayerAnswerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WS2GMPlayerAnswerState_descriptor_;
}

const WS2GMPlayerAnswerState& WS2GMPlayerAnswerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InterfaceAnswer_2fInterfaceAnswer_2eproto();
  return *default_instance_;
}

WS2GMPlayerAnswerState* WS2GMPlayerAnswerState::default_instance_ = NULL;

WS2GMPlayerAnswerState* WS2GMPlayerAnswerState::New() const {
  return new WS2GMPlayerAnswerState;
}

void WS2GMPlayerAnswerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WS2GMPlayerAnswerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WS2GMPlayerAnswerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WS2GMPlayerAnswerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WS2GMPlayerAnswerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WS2GMPlayerAnswerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WS2GMPlayerAnswerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WS2GMPlayerAnswerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WS2GMPlayerAnswerState::MergeFrom(const WS2GMPlayerAnswerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WS2GMPlayerAnswerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WS2GMPlayerAnswerState::CopyFrom(const WS2GMPlayerAnswerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WS2GMPlayerAnswerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WS2GMPlayerAnswerState::Swap(WS2GMPlayerAnswerState* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WS2GMPlayerAnswerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WS2GMPlayerAnswerState_descriptor_;
  metadata.reflection = WS2GMPlayerAnswerState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace InterfaceAnswer

// @@protoc_insertion_point(global_scope)
