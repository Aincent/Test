// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Escort/EscortProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Escort/EscortProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EscortProto {

namespace {

const ::google::protobuf::Descriptor* RqGetQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqGetQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtGetQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtGetQuality_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqFreshTreature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqFreshTreature_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtFreshTreature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtFreshTreature_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqStartEscort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqStartEscort_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtStartEscort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtStartEscort_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqImediaComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqImediaComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqSpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqSpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtSpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtSpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqAbandon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqAbandon_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtAbandon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtAbandon_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqGetPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqGetPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtGetPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtGetPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqOpenEscort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqOpenEscort_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtOpenEscort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtOpenEscort_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscortStateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscortStateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscortResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscortResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMDoubleEscort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMDoubleEscort_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Escort_2fEscortProto_2eproto() {
  protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Escort/EscortProto.proto");
  GOOGLE_CHECK(file != NULL);
  RqGetQuality_descriptor_ = file->message_type(0);
  static const int RqGetQuality_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqGetQuality, quality_),
  };
  RqGetQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqGetQuality_descriptor_,
      RqGetQuality::default_instance_,
      RqGetQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqGetQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqGetQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqGetQuality));
  RtGetQuality_descriptor_ = file->message_type(1);
  static const int RtGetQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtGetQuality, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtGetQuality, quality_),
  };
  RtGetQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtGetQuality_descriptor_,
      RtGetQuality::default_instance_,
      RtGetQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtGetQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtGetQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtGetQuality));
  RqFreshTreature_descriptor_ = file->message_type(2);
  static const int RqFreshTreature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqFreshTreature, escortid_),
  };
  RqFreshTreature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqFreshTreature_descriptor_,
      RqFreshTreature::default_instance_,
      RqFreshTreature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqFreshTreature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqFreshTreature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqFreshTreature));
  RtFreshTreature_descriptor_ = file->message_type(3);
  static const int RtFreshTreature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtFreshTreature, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtFreshTreature, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtFreshTreature, freshtimes_),
  };
  RtFreshTreature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtFreshTreature_descriptor_,
      RtFreshTreature::default_instance_,
      RtFreshTreature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtFreshTreature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtFreshTreature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtFreshTreature));
  RqStartEscort_descriptor_ = file->message_type(4);
  static const int RqStartEscort_offsets_[1] = {
  };
  RqStartEscort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqStartEscort_descriptor_,
      RqStartEscort::default_instance_,
      RqStartEscort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqStartEscort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqStartEscort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqStartEscort));
  RtStartEscort_descriptor_ = file->message_type(5);
  static const int RtStartEscort_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, exp_),
  };
  RtStartEscort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtStartEscort_descriptor_,
      RtStartEscort::default_instance_,
      RtStartEscort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtStartEscort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtStartEscort));
  RqImediaComplete_descriptor_ = file->message_type(6);
  static const int RqImediaComplete_offsets_[1] = {
  };
  RqImediaComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqImediaComplete_descriptor_,
      RqImediaComplete::default_instance_,
      RqImediaComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqImediaComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqImediaComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqImediaComplete));
  RqSpeedUp_descriptor_ = file->message_type(7);
  static const int RqSpeedUp_offsets_[1] = {
  };
  RqSpeedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqSpeedUp_descriptor_,
      RqSpeedUp::default_instance_,
      RqSpeedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqSpeedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqSpeedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqSpeedUp));
  RtSpeedUp_descriptor_ = file->message_type(8);
  static const int RtSpeedUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSpeedUp, error_),
  };
  RtSpeedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtSpeedUp_descriptor_,
      RtSpeedUp::default_instance_,
      RtSpeedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSpeedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtSpeedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtSpeedUp));
  RqAbandon_descriptor_ = file->message_type(9);
  static const int RqAbandon_offsets_[1] = {
  };
  RqAbandon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqAbandon_descriptor_,
      RqAbandon::default_instance_,
      RqAbandon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqAbandon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqAbandon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqAbandon));
  RtAbandon_descriptor_ = file->message_type(10);
  static const int RtAbandon_offsets_[1] = {
  };
  RtAbandon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtAbandon_descriptor_,
      RtAbandon::default_instance_,
      RtAbandon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtAbandon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtAbandon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtAbandon));
  RqGetPrize_descriptor_ = file->message_type(11);
  static const int RqGetPrize_offsets_[1] = {
  };
  RqGetPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqGetPrize_descriptor_,
      RqGetPrize::default_instance_,
      RqGetPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqGetPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqGetPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqGetPrize));
  RtGetPrize_descriptor_ = file->message_type(12);
  static const int RtGetPrize_offsets_[1] = {
  };
  RtGetPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtGetPrize_descriptor_,
      RtGetPrize::default_instance_,
      RtGetPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtGetPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtGetPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtGetPrize));
  RqOpenEscort_descriptor_ = file->message_type(13);
  static const int RqOpenEscort_offsets_[1] = {
  };
  RqOpenEscort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqOpenEscort_descriptor_,
      RqOpenEscort::default_instance_,
      RqOpenEscort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqOpenEscort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqOpenEscort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqOpenEscort));
  RtOpenEscort_descriptor_ = file->message_type(14);
  static const int RtOpenEscort_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtOpenEscort, freshtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtOpenEscort, dotimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtOpenEscort, quality_),
  };
  RtOpenEscort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtOpenEscort_descriptor_,
      RtOpenEscort::default_instance_,
      RtOpenEscort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtOpenEscort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtOpenEscort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtOpenEscort));
  EscortStateInfo_descriptor_ = file->message_type(15);
  static const int EscortStateInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, robtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, speedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, exp_),
  };
  EscortStateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EscortStateInfo_descriptor_,
      EscortStateInfo::default_instance_,
      EscortStateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortStateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EscortStateInfo));
  EscortResult_descriptor_ = file->message_type(16);
  static const int EscortResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortResult, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortResult, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortResult, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortResult, name_),
  };
  EscortResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EscortResult_descriptor_,
      EscortResult::default_instance_,
      EscortResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EscortResult));
  WSToGMDoubleEscort_descriptor_ = file->message_type(17);
  static const int WSToGMDoubleEscort_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMDoubleEscort, flag_),
  };
  WSToGMDoubleEscort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMDoubleEscort_descriptor_,
      WSToGMDoubleEscort::default_instance_,
      WSToGMDoubleEscort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMDoubleEscort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMDoubleEscort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMDoubleEscort));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Escort_2fEscortProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqGetQuality_descriptor_, &RqGetQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtGetQuality_descriptor_, &RtGetQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqFreshTreature_descriptor_, &RqFreshTreature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtFreshTreature_descriptor_, &RtFreshTreature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqStartEscort_descriptor_, &RqStartEscort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtStartEscort_descriptor_, &RtStartEscort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqImediaComplete_descriptor_, &RqImediaComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqSpeedUp_descriptor_, &RqSpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtSpeedUp_descriptor_, &RtSpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqAbandon_descriptor_, &RqAbandon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtAbandon_descriptor_, &RtAbandon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqGetPrize_descriptor_, &RqGetPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtGetPrize_descriptor_, &RtGetPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqOpenEscort_descriptor_, &RqOpenEscort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtOpenEscort_descriptor_, &RtOpenEscort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EscortStateInfo_descriptor_, &EscortStateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EscortResult_descriptor_, &EscortResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMDoubleEscort_descriptor_, &WSToGMDoubleEscort::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Escort_2fEscortProto_2eproto() {
  delete RqGetQuality::default_instance_;
  delete RqGetQuality_reflection_;
  delete RtGetQuality::default_instance_;
  delete RtGetQuality_reflection_;
  delete RqFreshTreature::default_instance_;
  delete RqFreshTreature_reflection_;
  delete RtFreshTreature::default_instance_;
  delete RtFreshTreature_reflection_;
  delete RqStartEscort::default_instance_;
  delete RqStartEscort_reflection_;
  delete RtStartEscort::default_instance_;
  delete RtStartEscort_reflection_;
  delete RqImediaComplete::default_instance_;
  delete RqImediaComplete_reflection_;
  delete RqSpeedUp::default_instance_;
  delete RqSpeedUp_reflection_;
  delete RtSpeedUp::default_instance_;
  delete RtSpeedUp_reflection_;
  delete RqAbandon::default_instance_;
  delete RqAbandon_reflection_;
  delete RtAbandon::default_instance_;
  delete RtAbandon_reflection_;
  delete RqGetPrize::default_instance_;
  delete RqGetPrize_reflection_;
  delete RtGetPrize::default_instance_;
  delete RtGetPrize_reflection_;
  delete RqOpenEscort::default_instance_;
  delete RqOpenEscort_reflection_;
  delete RtOpenEscort::default_instance_;
  delete RtOpenEscort_reflection_;
  delete EscortStateInfo::default_instance_;
  delete EscortStateInfo_reflection_;
  delete EscortResult::default_instance_;
  delete EscortResult_reflection_;
  delete WSToGMDoubleEscort::default_instance_;
  delete WSToGMDoubleEscort_reflection_;
}

void protobuf_AddDesc_Escort_2fEscortProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Escort/EscortProto.proto\022\013EscortProto\""
    "\037\n\014RqGetQuality\022\017\n\007quality\030\001 \002(\005\".\n\014RtGe"
    "tQuality\022\r\n\005error\030\001 \002(\005\022\017\n\007quality\030\002 \002(\005"
    "\"#\n\017RqFreshTreature\022\020\n\010escortId\030\001 \002(\005\"E\n"
    "\017RtFreshTreature\022\017\n\007quality\030\001 \002(\005\022\r\n\005err"
    "or\030\002 \002(\005\022\022\n\nfreshtimes\030\003 \002(\005\"\017\n\rRqStartE"
    "scort\"Y\n\rRtStartEscort\022\r\n\005error\030\001 \002(\005\022\017\n"
    "\007quality\030\002 \001(\005\022\014\n\004line\030\003 \001(\005\022\r\n\005money\030\004 "
    "\001(\005\022\013\n\003exp\030\005 \001(\005\"\022\n\020RqImediaComplete\"\013\n\t"
    "RqSpeedUp\"\032\n\tRtSpeedUp\022\r\n\005error\030\001 \002(\005\"\013\n"
    "\tRqAbandon\"\013\n\tRtAbandon\"\014\n\nRqGetPrize\"\014\n"
    "\nRtGetPrize\"\016\n\014RqOpenEscort\"D\n\014RtOpenEsc"
    "ort\022\022\n\nfreshtimes\030\001 \002(\005\022\017\n\007dotimes\030\002 \002(\005"
    "\022\017\n\007quality\030\003 \002(\005\"\252\001\n\017EscortStateInfo\022\014\n"
    "\004line\030\001 \002(\005\022\017\n\007quality\030\002 \001(\005\022\020\n\010robTimes"
    "\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\r\n\005mapid\030\005 \001(\005\022\014\n\004x"
    "pos\030\006 \001(\005\022\014\n\004ypos\030\007 \001(\005\022\021\n\tspeedtime\030\010 \001"
    "(\005\022\r\n\005money\030\t \001(\005\022\013\n\003exp\030\n \001(\005\"E\n\014Escort"
    "Result\022\013\n\003res\030\001 \002(\005\022\013\n\003exp\030\002 \001(\005\022\r\n\005mone"
    "y\030\003 \001(\005\022\014\n\004name\030\004 \001(\014\"\"\n\022WSToGMDoubleEsc"
    "ort\022\014\n\004flag\030\001 \002(\010", 817);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Escort/EscortProto.proto", &protobuf_RegisterTypes);
  RqGetQuality::default_instance_ = new RqGetQuality();
  RtGetQuality::default_instance_ = new RtGetQuality();
  RqFreshTreature::default_instance_ = new RqFreshTreature();
  RtFreshTreature::default_instance_ = new RtFreshTreature();
  RqStartEscort::default_instance_ = new RqStartEscort();
  RtStartEscort::default_instance_ = new RtStartEscort();
  RqImediaComplete::default_instance_ = new RqImediaComplete();
  RqSpeedUp::default_instance_ = new RqSpeedUp();
  RtSpeedUp::default_instance_ = new RtSpeedUp();
  RqAbandon::default_instance_ = new RqAbandon();
  RtAbandon::default_instance_ = new RtAbandon();
  RqGetPrize::default_instance_ = new RqGetPrize();
  RtGetPrize::default_instance_ = new RtGetPrize();
  RqOpenEscort::default_instance_ = new RqOpenEscort();
  RtOpenEscort::default_instance_ = new RtOpenEscort();
  EscortStateInfo::default_instance_ = new EscortStateInfo();
  EscortResult::default_instance_ = new EscortResult();
  WSToGMDoubleEscort::default_instance_ = new WSToGMDoubleEscort();
  RqGetQuality::default_instance_->InitAsDefaultInstance();
  RtGetQuality::default_instance_->InitAsDefaultInstance();
  RqFreshTreature::default_instance_->InitAsDefaultInstance();
  RtFreshTreature::default_instance_->InitAsDefaultInstance();
  RqStartEscort::default_instance_->InitAsDefaultInstance();
  RtStartEscort::default_instance_->InitAsDefaultInstance();
  RqImediaComplete::default_instance_->InitAsDefaultInstance();
  RqSpeedUp::default_instance_->InitAsDefaultInstance();
  RtSpeedUp::default_instance_->InitAsDefaultInstance();
  RqAbandon::default_instance_->InitAsDefaultInstance();
  RtAbandon::default_instance_->InitAsDefaultInstance();
  RqGetPrize::default_instance_->InitAsDefaultInstance();
  RtGetPrize::default_instance_->InitAsDefaultInstance();
  RqOpenEscort::default_instance_->InitAsDefaultInstance();
  RtOpenEscort::default_instance_->InitAsDefaultInstance();
  EscortStateInfo::default_instance_->InitAsDefaultInstance();
  EscortResult::default_instance_->InitAsDefaultInstance();
  WSToGMDoubleEscort::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Escort_2fEscortProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Escort_2fEscortProto_2eproto {
  StaticDescriptorInitializer_Escort_2fEscortProto_2eproto() {
    protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  }
} static_descriptor_initializer_Escort_2fEscortProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RqGetQuality::kQualityFieldNumber;
#endif  // !_MSC_VER

RqGetQuality::RqGetQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqGetQuality::InitAsDefaultInstance() {
}

RqGetQuality::RqGetQuality(const RqGetQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqGetQuality::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqGetQuality::~RqGetQuality() {
  SharedDtor();
}

void RqGetQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqGetQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqGetQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqGetQuality_descriptor_;
}

const RqGetQuality& RqGetQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqGetQuality* RqGetQuality::default_instance_ = NULL;

RqGetQuality* RqGetQuality::New() const {
  return new RqGetQuality;
}

void RqGetQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqGetQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RqGetQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqGetQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqGetQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqGetQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqGetQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqGetQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqGetQuality::MergeFrom(const RqGetQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqGetQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqGetQuality::CopyFrom(const RqGetQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqGetQuality::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RqGetQuality::Swap(RqGetQuality* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqGetQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqGetQuality_descriptor_;
  metadata.reflection = RqGetQuality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtGetQuality::kErrorFieldNumber;
const int RtGetQuality::kQualityFieldNumber;
#endif  // !_MSC_VER

RtGetQuality::RtGetQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtGetQuality::InitAsDefaultInstance() {
}

RtGetQuality::RtGetQuality(const RtGetQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtGetQuality::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtGetQuality::~RtGetQuality() {
  SharedDtor();
}

void RtGetQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtGetQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtGetQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtGetQuality_descriptor_;
}

const RtGetQuality& RtGetQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtGetQuality* RtGetQuality::default_instance_ = NULL;

RtGetQuality* RtGetQuality::New() const {
  return new RtGetQuality;
}

void RtGetQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtGetQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // required int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtGetQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtGetQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtGetQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtGetQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtGetQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtGetQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtGetQuality::MergeFrom(const RtGetQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtGetQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtGetQuality::CopyFrom(const RtGetQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtGetQuality::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RtGetQuality::Swap(RtGetQuality* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtGetQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtGetQuality_descriptor_;
  metadata.reflection = RtGetQuality_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RqFreshTreature::kEscortIdFieldNumber;
#endif  // !_MSC_VER

RqFreshTreature::RqFreshTreature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqFreshTreature::InitAsDefaultInstance() {
}

RqFreshTreature::RqFreshTreature(const RqFreshTreature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqFreshTreature::SharedCtor() {
  _cached_size_ = 0;
  escortid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqFreshTreature::~RqFreshTreature() {
  SharedDtor();
}

void RqFreshTreature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqFreshTreature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqFreshTreature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqFreshTreature_descriptor_;
}

const RqFreshTreature& RqFreshTreature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqFreshTreature* RqFreshTreature::default_instance_ = NULL;

RqFreshTreature* RqFreshTreature::New() const {
  return new RqFreshTreature;
}

void RqFreshTreature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    escortid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqFreshTreature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 escortId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escortid_)));
          set_has_escortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RqFreshTreature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 escortId = 1;
  if (has_escortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->escortid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqFreshTreature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 escortId = 1;
  if (has_escortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->escortid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqFreshTreature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 escortId = 1;
    if (has_escortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escortid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqFreshTreature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqFreshTreature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqFreshTreature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqFreshTreature::MergeFrom(const RqFreshTreature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_escortid()) {
      set_escortid(from.escortid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqFreshTreature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqFreshTreature::CopyFrom(const RqFreshTreature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqFreshTreature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RqFreshTreature::Swap(RqFreshTreature* other) {
  if (other != this) {
    std::swap(escortid_, other->escortid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqFreshTreature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqFreshTreature_descriptor_;
  metadata.reflection = RqFreshTreature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtFreshTreature::kQualityFieldNumber;
const int RtFreshTreature::kErrorFieldNumber;
const int RtFreshTreature::kFreshtimesFieldNumber;
#endif  // !_MSC_VER

RtFreshTreature::RtFreshTreature()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtFreshTreature::InitAsDefaultInstance() {
}

RtFreshTreature::RtFreshTreature(const RtFreshTreature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtFreshTreature::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0;
  error_ = 0;
  freshtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtFreshTreature::~RtFreshTreature() {
  SharedDtor();
}

void RtFreshTreature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtFreshTreature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtFreshTreature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtFreshTreature_descriptor_;
}

const RtFreshTreature& RtFreshTreature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtFreshTreature* RtFreshTreature::default_instance_ = NULL;

RtFreshTreature* RtFreshTreature::New() const {
  return new RtFreshTreature;
}

void RtFreshTreature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quality_ = 0;
    error_ = 0;
    freshtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtFreshTreature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // required int32 error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freshtimes;
        break;
      }

      // required int32 freshtimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshtimes_)));
          set_has_freshtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtFreshTreature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quality(), output);
  }

  // required int32 error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  // required int32 freshtimes = 3;
  if (has_freshtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freshtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtFreshTreature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quality(), target);
  }

  // required int32 error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  // required int32 freshtimes = 3;
  if (has_freshtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freshtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtFreshTreature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // required int32 freshtimes = 3;
    if (has_freshtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freshtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtFreshTreature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtFreshTreature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtFreshTreature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtFreshTreature::MergeFrom(const RtFreshTreature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_freshtimes()) {
      set_freshtimes(from.freshtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtFreshTreature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtFreshTreature::CopyFrom(const RtFreshTreature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtFreshTreature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RtFreshTreature::Swap(RtFreshTreature* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(error_, other->error_);
    std::swap(freshtimes_, other->freshtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtFreshTreature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtFreshTreature_descriptor_;
  metadata.reflection = RtFreshTreature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RqStartEscort::RqStartEscort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqStartEscort::InitAsDefaultInstance() {
}

RqStartEscort::RqStartEscort(const RqStartEscort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqStartEscort::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqStartEscort::~RqStartEscort() {
  SharedDtor();
}

void RqStartEscort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqStartEscort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqStartEscort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqStartEscort_descriptor_;
}

const RqStartEscort& RqStartEscort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqStartEscort* RqStartEscort::default_instance_ = NULL;

RqStartEscort* RqStartEscort::New() const {
  return new RqStartEscort;
}

void RqStartEscort::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqStartEscort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RqStartEscort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqStartEscort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqStartEscort::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqStartEscort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqStartEscort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqStartEscort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqStartEscort::MergeFrom(const RqStartEscort& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqStartEscort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqStartEscort::CopyFrom(const RqStartEscort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqStartEscort::IsInitialized() const {

  return true;
}

void RqStartEscort::Swap(RqStartEscort* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqStartEscort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqStartEscort_descriptor_;
  metadata.reflection = RqStartEscort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtStartEscort::kErrorFieldNumber;
const int RtStartEscort::kQualityFieldNumber;
const int RtStartEscort::kLineFieldNumber;
const int RtStartEscort::kMoneyFieldNumber;
const int RtStartEscort::kExpFieldNumber;
#endif  // !_MSC_VER

RtStartEscort::RtStartEscort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtStartEscort::InitAsDefaultInstance() {
}

RtStartEscort::RtStartEscort(const RtStartEscort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtStartEscort::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  quality_ = 0;
  line_ = 0;
  money_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtStartEscort::~RtStartEscort() {
  SharedDtor();
}

void RtStartEscort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtStartEscort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtStartEscort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtStartEscort_descriptor_;
}

const RtStartEscort& RtStartEscort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtStartEscort* RtStartEscort::default_instance_ = NULL;

RtStartEscort* RtStartEscort::New() const {
  return new RtStartEscort;
}

void RtStartEscort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    quality_ = 0;
    line_ = 0;
    money_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtStartEscort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_line;
        break;
      }

      // optional int32 line = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtStartEscort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtStartEscort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 line = 3;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtStartEscort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 line = 3;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtStartEscort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtStartEscort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtStartEscort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtStartEscort::MergeFrom(const RtStartEscort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtStartEscort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtStartEscort::CopyFrom(const RtStartEscort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtStartEscort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RtStartEscort::Swap(RtStartEscort* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(quality_, other->quality_);
    std::swap(line_, other->line_);
    std::swap(money_, other->money_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtStartEscort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtStartEscort_descriptor_;
  metadata.reflection = RtStartEscort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RqImediaComplete::RqImediaComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqImediaComplete::InitAsDefaultInstance() {
}

RqImediaComplete::RqImediaComplete(const RqImediaComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqImediaComplete::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqImediaComplete::~RqImediaComplete() {
  SharedDtor();
}

void RqImediaComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqImediaComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqImediaComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqImediaComplete_descriptor_;
}

const RqImediaComplete& RqImediaComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqImediaComplete* RqImediaComplete::default_instance_ = NULL;

RqImediaComplete* RqImediaComplete::New() const {
  return new RqImediaComplete;
}

void RqImediaComplete::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqImediaComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RqImediaComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqImediaComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqImediaComplete::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqImediaComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqImediaComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqImediaComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqImediaComplete::MergeFrom(const RqImediaComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqImediaComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqImediaComplete::CopyFrom(const RqImediaComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqImediaComplete::IsInitialized() const {

  return true;
}

void RqImediaComplete::Swap(RqImediaComplete* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqImediaComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqImediaComplete_descriptor_;
  metadata.reflection = RqImediaComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RqSpeedUp::RqSpeedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqSpeedUp::InitAsDefaultInstance() {
}

RqSpeedUp::RqSpeedUp(const RqSpeedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqSpeedUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqSpeedUp::~RqSpeedUp() {
  SharedDtor();
}

void RqSpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqSpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqSpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqSpeedUp_descriptor_;
}

const RqSpeedUp& RqSpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqSpeedUp* RqSpeedUp::default_instance_ = NULL;

RqSpeedUp* RqSpeedUp::New() const {
  return new RqSpeedUp;
}

void RqSpeedUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqSpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RqSpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqSpeedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqSpeedUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqSpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqSpeedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqSpeedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqSpeedUp::MergeFrom(const RqSpeedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqSpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqSpeedUp::CopyFrom(const RqSpeedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqSpeedUp::IsInitialized() const {

  return true;
}

void RqSpeedUp::Swap(RqSpeedUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqSpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqSpeedUp_descriptor_;
  metadata.reflection = RqSpeedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtSpeedUp::kErrorFieldNumber;
#endif  // !_MSC_VER

RtSpeedUp::RtSpeedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtSpeedUp::InitAsDefaultInstance() {
}

RtSpeedUp::RtSpeedUp(const RtSpeedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtSpeedUp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtSpeedUp::~RtSpeedUp() {
  SharedDtor();
}

void RtSpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtSpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtSpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtSpeedUp_descriptor_;
}

const RtSpeedUp& RtSpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtSpeedUp* RtSpeedUp::default_instance_ = NULL;

RtSpeedUp* RtSpeedUp::New() const {
  return new RtSpeedUp;
}

void RtSpeedUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtSpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtSpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtSpeedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtSpeedUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtSpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtSpeedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtSpeedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtSpeedUp::MergeFrom(const RtSpeedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtSpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtSpeedUp::CopyFrom(const RtSpeedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtSpeedUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RtSpeedUp::Swap(RtSpeedUp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtSpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtSpeedUp_descriptor_;
  metadata.reflection = RtSpeedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RqAbandon::RqAbandon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqAbandon::InitAsDefaultInstance() {
}

RqAbandon::RqAbandon(const RqAbandon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqAbandon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqAbandon::~RqAbandon() {
  SharedDtor();
}

void RqAbandon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqAbandon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqAbandon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqAbandon_descriptor_;
}

const RqAbandon& RqAbandon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqAbandon* RqAbandon::default_instance_ = NULL;

RqAbandon* RqAbandon::New() const {
  return new RqAbandon;
}

void RqAbandon::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqAbandon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RqAbandon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqAbandon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqAbandon::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqAbandon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqAbandon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqAbandon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqAbandon::MergeFrom(const RqAbandon& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqAbandon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqAbandon::CopyFrom(const RqAbandon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqAbandon::IsInitialized() const {

  return true;
}

void RqAbandon::Swap(RqAbandon* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqAbandon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqAbandon_descriptor_;
  metadata.reflection = RqAbandon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RtAbandon::RtAbandon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtAbandon::InitAsDefaultInstance() {
}

RtAbandon::RtAbandon(const RtAbandon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtAbandon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtAbandon::~RtAbandon() {
  SharedDtor();
}

void RtAbandon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtAbandon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtAbandon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtAbandon_descriptor_;
}

const RtAbandon& RtAbandon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtAbandon* RtAbandon::default_instance_ = NULL;

RtAbandon* RtAbandon::New() const {
  return new RtAbandon;
}

void RtAbandon::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtAbandon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RtAbandon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtAbandon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtAbandon::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtAbandon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtAbandon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtAbandon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtAbandon::MergeFrom(const RtAbandon& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtAbandon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtAbandon::CopyFrom(const RtAbandon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtAbandon::IsInitialized() const {

  return true;
}

void RtAbandon::Swap(RtAbandon* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtAbandon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtAbandon_descriptor_;
  metadata.reflection = RtAbandon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RqGetPrize::RqGetPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqGetPrize::InitAsDefaultInstance() {
}

RqGetPrize::RqGetPrize(const RqGetPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqGetPrize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqGetPrize::~RqGetPrize() {
  SharedDtor();
}

void RqGetPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqGetPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqGetPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqGetPrize_descriptor_;
}

const RqGetPrize& RqGetPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqGetPrize* RqGetPrize::default_instance_ = NULL;

RqGetPrize* RqGetPrize::New() const {
  return new RqGetPrize;
}

void RqGetPrize::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqGetPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RqGetPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqGetPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqGetPrize::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqGetPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqGetPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqGetPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqGetPrize::MergeFrom(const RqGetPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqGetPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqGetPrize::CopyFrom(const RqGetPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqGetPrize::IsInitialized() const {

  return true;
}

void RqGetPrize::Swap(RqGetPrize* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqGetPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqGetPrize_descriptor_;
  metadata.reflection = RqGetPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RtGetPrize::RtGetPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtGetPrize::InitAsDefaultInstance() {
}

RtGetPrize::RtGetPrize(const RtGetPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtGetPrize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtGetPrize::~RtGetPrize() {
  SharedDtor();
}

void RtGetPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtGetPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtGetPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtGetPrize_descriptor_;
}

const RtGetPrize& RtGetPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtGetPrize* RtGetPrize::default_instance_ = NULL;

RtGetPrize* RtGetPrize::New() const {
  return new RtGetPrize;
}

void RtGetPrize::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtGetPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RtGetPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtGetPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtGetPrize::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtGetPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtGetPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtGetPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtGetPrize::MergeFrom(const RtGetPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtGetPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtGetPrize::CopyFrom(const RtGetPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtGetPrize::IsInitialized() const {

  return true;
}

void RtGetPrize::Swap(RtGetPrize* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtGetPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtGetPrize_descriptor_;
  metadata.reflection = RtGetPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RqOpenEscort::RqOpenEscort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RqOpenEscort::InitAsDefaultInstance() {
}

RqOpenEscort::RqOpenEscort(const RqOpenEscort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RqOpenEscort::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqOpenEscort::~RqOpenEscort() {
  SharedDtor();
}

void RqOpenEscort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqOpenEscort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqOpenEscort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqOpenEscort_descriptor_;
}

const RqOpenEscort& RqOpenEscort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RqOpenEscort* RqOpenEscort::default_instance_ = NULL;

RqOpenEscort* RqOpenEscort::New() const {
  return new RqOpenEscort;
}

void RqOpenEscort::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqOpenEscort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RqOpenEscort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RqOpenEscort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RqOpenEscort::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqOpenEscort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqOpenEscort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqOpenEscort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqOpenEscort::MergeFrom(const RqOpenEscort& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqOpenEscort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqOpenEscort::CopyFrom(const RqOpenEscort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqOpenEscort::IsInitialized() const {

  return true;
}

void RqOpenEscort::Swap(RqOpenEscort* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqOpenEscort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqOpenEscort_descriptor_;
  metadata.reflection = RqOpenEscort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtOpenEscort::kFreshtimesFieldNumber;
const int RtOpenEscort::kDotimesFieldNumber;
const int RtOpenEscort::kQualityFieldNumber;
#endif  // !_MSC_VER

RtOpenEscort::RtOpenEscort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtOpenEscort::InitAsDefaultInstance() {
}

RtOpenEscort::RtOpenEscort(const RtOpenEscort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtOpenEscort::SharedCtor() {
  _cached_size_ = 0;
  freshtimes_ = 0;
  dotimes_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtOpenEscort::~RtOpenEscort() {
  SharedDtor();
}

void RtOpenEscort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtOpenEscort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtOpenEscort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtOpenEscort_descriptor_;
}

const RtOpenEscort& RtOpenEscort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

RtOpenEscort* RtOpenEscort::default_instance_ = NULL;

RtOpenEscort* RtOpenEscort::New() const {
  return new RtOpenEscort;
}

void RtOpenEscort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freshtimes_ = 0;
    dotimes_ = 0;
    quality_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtOpenEscort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 freshtimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freshtimes_)));
          set_has_freshtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dotimes;
        break;
      }

      // required int32 dotimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dotimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dotimes_)));
          set_has_dotimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtOpenEscort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 freshtimes = 1;
  if (has_freshtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->freshtimes(), output);
  }

  // required int32 dotimes = 2;
  if (has_dotimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dotimes(), output);
  }

  // required int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtOpenEscort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 freshtimes = 1;
  if (has_freshtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->freshtimes(), target);
  }

  // required int32 dotimes = 2;
  if (has_dotimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dotimes(), target);
  }

  // required int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtOpenEscort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 freshtimes = 1;
    if (has_freshtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freshtimes());
    }

    // required int32 dotimes = 2;
    if (has_dotimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dotimes());
    }

    // required int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtOpenEscort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtOpenEscort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtOpenEscort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtOpenEscort::MergeFrom(const RtOpenEscort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_freshtimes()) {
      set_freshtimes(from.freshtimes());
    }
    if (from.has_dotimes()) {
      set_dotimes(from.dotimes());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtOpenEscort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtOpenEscort::CopyFrom(const RtOpenEscort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtOpenEscort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RtOpenEscort::Swap(RtOpenEscort* other) {
  if (other != this) {
    std::swap(freshtimes_, other->freshtimes_);
    std::swap(dotimes_, other->dotimes_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtOpenEscort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtOpenEscort_descriptor_;
  metadata.reflection = RtOpenEscort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EscortStateInfo::kLineFieldNumber;
const int EscortStateInfo::kQualityFieldNumber;
const int EscortStateInfo::kRobTimesFieldNumber;
const int EscortStateInfo::kTimeFieldNumber;
const int EscortStateInfo::kMapidFieldNumber;
const int EscortStateInfo::kXposFieldNumber;
const int EscortStateInfo::kYposFieldNumber;
const int EscortStateInfo::kSpeedtimeFieldNumber;
const int EscortStateInfo::kMoneyFieldNumber;
const int EscortStateInfo::kExpFieldNumber;
#endif  // !_MSC_VER

EscortStateInfo::EscortStateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EscortStateInfo::InitAsDefaultInstance() {
}

EscortStateInfo::EscortStateInfo(const EscortStateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EscortStateInfo::SharedCtor() {
  _cached_size_ = 0;
  line_ = 0;
  quality_ = 0;
  robtimes_ = 0;
  time_ = 0;
  mapid_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  speedtime_ = 0;
  money_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscortStateInfo::~EscortStateInfo() {
  SharedDtor();
}

void EscortStateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscortStateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscortStateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscortStateInfo_descriptor_;
}

const EscortStateInfo& EscortStateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

EscortStateInfo* EscortStateInfo::default_instance_ = NULL;

EscortStateInfo* EscortStateInfo::New() const {
  return new EscortStateInfo;
}

void EscortStateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    line_ = 0;
    quality_ = 0;
    robtimes_ = 0;
    time_ = 0;
    mapid_ = 0;
    xpos_ = 0;
    ypos_ = 0;
    speedtime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    money_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EscortStateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robTimes;
        break;
      }

      // optional int32 robTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robtimes_)));
          set_has_robtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_speedtime;
        break;
      }

      // optional int32 speedtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speedtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speedtime_)));
          set_has_speedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_money;
        break;
      }

      // optional int32 money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_exp;
        break;
      }

      // optional int32 exp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EscortStateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line(), output);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 robTimes = 3;
  if (has_robtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robtimes(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapid(), output);
  }

  // optional int32 xpos = 6;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xpos(), output);
  }

  // optional int32 ypos = 7;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ypos(), output);
  }

  // optional int32 speedtime = 8;
  if (has_speedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->speedtime(), output);
  }

  // optional int32 money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->money(), output);
  }

  // optional int32 exp = 10;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EscortStateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line(), target);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 robTimes = 3;
  if (has_robtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robtimes(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapid(), target);
  }

  // optional int32 xpos = 6;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xpos(), target);
  }

  // optional int32 ypos = 7;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ypos(), target);
  }

  // optional int32 speedtime = 8;
  if (has_speedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->speedtime(), target);
  }

  // optional int32 money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->money(), target);
  }

  // optional int32 exp = 10;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EscortStateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 robTimes = 3;
    if (has_robtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robtimes());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 xpos = 6;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 7;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // optional int32 speedtime = 8;
    if (has_speedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speedtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 money = 9;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 exp = 10;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscortStateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EscortStateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EscortStateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EscortStateInfo::MergeFrom(const EscortStateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_robtimes()) {
      set_robtimes(from.robtimes());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_speedtime()) {
      set_speedtime(from.speedtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EscortStateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscortStateInfo::CopyFrom(const EscortStateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscortStateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EscortStateInfo::Swap(EscortStateInfo* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(quality_, other->quality_);
    std::swap(robtimes_, other->robtimes_);
    std::swap(time_, other->time_);
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(speedtime_, other->speedtime_);
    std::swap(money_, other->money_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EscortStateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscortStateInfo_descriptor_;
  metadata.reflection = EscortStateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EscortResult::kResFieldNumber;
const int EscortResult::kExpFieldNumber;
const int EscortResult::kMoneyFieldNumber;
const int EscortResult::kNameFieldNumber;
#endif  // !_MSC_VER

EscortResult::EscortResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EscortResult::InitAsDefaultInstance() {
}

EscortResult::EscortResult(const EscortResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EscortResult::SharedCtor() {
  _cached_size_ = 0;
  res_ = 0;
  exp_ = 0;
  money_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscortResult::~EscortResult() {
  SharedDtor();
}

void EscortResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void EscortResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscortResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscortResult_descriptor_;
}

const EscortResult& EscortResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

EscortResult* EscortResult::default_instance_ = NULL;

EscortResult* EscortResult::New() const {
  return new EscortResult;
}

void EscortResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    res_ = 0;
    exp_ = 0;
    money_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EscortResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EscortResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->res(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EscortResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 res = 1;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->res(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EscortResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscortResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EscortResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EscortResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EscortResult::MergeFrom(const EscortResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EscortResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscortResult::CopyFrom(const EscortResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscortResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EscortResult::Swap(EscortResult* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(exp_, other->exp_);
    std::swap(money_, other->money_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EscortResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscortResult_descriptor_;
  metadata.reflection = EscortResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMDoubleEscort::kFlagFieldNumber;
#endif  // !_MSC_VER

WSToGMDoubleEscort::WSToGMDoubleEscort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMDoubleEscort::InitAsDefaultInstance() {
}

WSToGMDoubleEscort::WSToGMDoubleEscort(const WSToGMDoubleEscort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMDoubleEscort::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMDoubleEscort::~WSToGMDoubleEscort() {
  SharedDtor();
}

void WSToGMDoubleEscort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMDoubleEscort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMDoubleEscort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMDoubleEscort_descriptor_;
}

const WSToGMDoubleEscort& WSToGMDoubleEscort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Escort_2fEscortProto_2eproto();
  return *default_instance_;
}

WSToGMDoubleEscort* WSToGMDoubleEscort::default_instance_ = NULL;

WSToGMDoubleEscort* WSToGMDoubleEscort::New() const {
  return new WSToGMDoubleEscort;
}

void WSToGMDoubleEscort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMDoubleEscort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMDoubleEscort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMDoubleEscort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMDoubleEscort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMDoubleEscort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMDoubleEscort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMDoubleEscort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMDoubleEscort::MergeFrom(const WSToGMDoubleEscort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMDoubleEscort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMDoubleEscort::CopyFrom(const WSToGMDoubleEscort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMDoubleEscort::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToGMDoubleEscort::Swap(WSToGMDoubleEscort* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMDoubleEscort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMDoubleEscort_descriptor_;
  metadata.reflection = WSToGMDoubleEscort_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EscortProto

// @@protoc_insertion_point(global_scope)
