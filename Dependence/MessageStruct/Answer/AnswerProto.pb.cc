// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Answer/AnswerProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Answer/AnswerProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AnswerProto {

namespace {

const ::google::protobuf::Descriptor* ReqEnterScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetEnterScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetEnterScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetLeaveScence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLeaveScence_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimSyncAnswerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimSyncAnswerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimPublishAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimPublishAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimNextQuestionStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimNextQuestionStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimSyncRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimSyncRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGenQuestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGenQuestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGenQuestion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGenQuestion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestionAnswerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestionAnswerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqActivityEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqActivityEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqAnswerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqAnswerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChoiceAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChoiceAnswer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Answer_2fAnswerProto_2eproto() {
  protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Answer/AnswerProto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqEnterScence_descriptor_ = file->message_type(0);
  static const int ReqEnterScence_offsets_[1] = {
  };
  ReqEnterScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterScence_descriptor_,
      ReqEnterScence::default_instance_,
      ReqEnterScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterScence));
  RetEnterScence_descriptor_ = file->message_type(1);
  static const int RetEnterScence_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnterScence, error_),
  };
  RetEnterScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetEnterScence_descriptor_,
      RetEnterScence::default_instance_,
      RetEnterScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnterScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnterScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetEnterScence));
  ReqLeaveScence_descriptor_ = file->message_type(2);
  static const int ReqLeaveScence_offsets_[1] = {
  };
  ReqLeaveScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLeaveScence_descriptor_,
      ReqLeaveScence::default_instance_,
      ReqLeaveScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLeaveScence));
  RetLeaveScence_descriptor_ = file->message_type(3);
  static const int RetLeaveScence_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveScence, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveScence, scenceid_),
  };
  RetLeaveScence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLeaveScence_descriptor_,
      RetLeaveScence::default_instance_,
      RetLeaveScence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveScence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveScence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLeaveScence));
  SimSyncAnswerInfo_descriptor_ = file->message_type(4);
  static const int SimSyncAnswerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, lefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, rightcount_),
  };
  SimSyncAnswerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimSyncAnswerInfo_descriptor_,
      SimSyncAnswerInfo::default_instance_,
      SimSyncAnswerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncAnswerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimSyncAnswerInfo));
  SimPublishAnswer_descriptor_ = file->message_type(5);
  static const int SimPublishAnswer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPublishAnswer, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPublishAnswer, rightcount_),
  };
  SimPublishAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimPublishAnswer_descriptor_,
      SimPublishAnswer::default_instance_,
      SimPublishAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPublishAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimPublishAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimPublishAnswer));
  SimNextQuestionStart_descriptor_ = file->message_type(6);
  static const int SimNextQuestionStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNextQuestionStart, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNextQuestionStart, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNextQuestionStart, answer_),
  };
  SimNextQuestionStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimNextQuestionStart_descriptor_,
      SimNextQuestionStart::default_instance_,
      SimNextQuestionStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNextQuestionStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimNextQuestionStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimNextQuestionStart));
  SimSyncRank_descriptor_ = file->message_type(7);
  static const int SimSyncRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncRank, rankinfo_),
  };
  SimSyncRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimSyncRank_descriptor_,
      SimSyncRank::default_instance_,
      SimSyncRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSyncRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimSyncRank));
  ReqGenQuestion_descriptor_ = file->message_type(8);
  static const int ReqGenQuestion_offsets_[1] = {
  };
  ReqGenQuestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGenQuestion_descriptor_,
      ReqGenQuestion::default_instance_,
      ReqGenQuestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGenQuestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGenQuestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGenQuestion));
  RetGenQuestion_descriptor_ = file->message_type(9);
  static const int RetGenQuestion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGenQuestion, infos_),
  };
  RetGenQuestion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGenQuestion_descriptor_,
      RetGenQuestion::default_instance_,
      RetGenQuestion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGenQuestion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGenQuestion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGenQuestion));
  QuestionAnswerInfo_descriptor_ = file->message_type(10);
  static const int QuestionAnswerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswerInfo, questions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswerInfo, answers_),
  };
  QuestionAnswerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestionAnswerInfo_descriptor_,
      QuestionAnswerInfo::default_instance_,
      QuestionAnswerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestionAnswerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestionAnswerInfo));
  ReqActivityEnd_descriptor_ = file->message_type(11);
  static const int ReqActivityEnd_offsets_[1] = {
  };
  ReqActivityEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqActivityEnd_descriptor_,
      ReqActivityEnd::default_instance_,
      ReqActivityEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqActivityEnd));
  SyncRank_descriptor_ = file->message_type(12);
  static const int SyncRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRank, rankinfo_),
  };
  SyncRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRank_descriptor_,
      SyncRank::default_instance_,
      SyncRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRank));
  AnswerRankInfo_descriptor_ = file->message_type(13);
  static const int AnswerRankInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankInfo, continueright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankInfo, scenceid_),
  };
  AnswerRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerRankInfo_descriptor_,
      AnswerRankInfo::default_instance_,
      AnswerRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerRankInfo));
  AckReqAnswerInfo_descriptor_ = file->message_type(14);
  static const int AckReqAnswerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, currentindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, currenttitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, rightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, state_),
  };
  AckReqAnswerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqAnswerInfo_descriptor_,
      AckReqAnswerInfo::default_instance_,
      AckReqAnswerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqAnswerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqAnswerInfo));
  ReqChoiceAnswer_descriptor_ = file->message_type(15);
  static const int ReqChoiceAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoiceAnswer, ret_),
  };
  ReqChoiceAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChoiceAnswer_descriptor_,
      ReqChoiceAnswer::default_instance_,
      ReqChoiceAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoiceAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChoiceAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChoiceAnswer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Answer_2fAnswerProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterScence_descriptor_, &ReqEnterScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetEnterScence_descriptor_, &RetEnterScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLeaveScence_descriptor_, &ReqLeaveScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLeaveScence_descriptor_, &RetLeaveScence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimSyncAnswerInfo_descriptor_, &SimSyncAnswerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimPublishAnswer_descriptor_, &SimPublishAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimNextQuestionStart_descriptor_, &SimNextQuestionStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimSyncRank_descriptor_, &SimSyncRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGenQuestion_descriptor_, &ReqGenQuestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGenQuestion_descriptor_, &RetGenQuestion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestionAnswerInfo_descriptor_, &QuestionAnswerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqActivityEnd_descriptor_, &ReqActivityEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRank_descriptor_, &SyncRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerRankInfo_descriptor_, &AnswerRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqAnswerInfo_descriptor_, &AckReqAnswerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChoiceAnswer_descriptor_, &ReqChoiceAnswer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Answer_2fAnswerProto_2eproto() {
  delete ReqEnterScence::default_instance_;
  delete ReqEnterScence_reflection_;
  delete RetEnterScence::default_instance_;
  delete RetEnterScence_reflection_;
  delete ReqLeaveScence::default_instance_;
  delete ReqLeaveScence_reflection_;
  delete RetLeaveScence::default_instance_;
  delete RetLeaveScence_reflection_;
  delete SimSyncAnswerInfo::default_instance_;
  delete SimSyncAnswerInfo_reflection_;
  delete SimPublishAnswer::default_instance_;
  delete SimPublishAnswer_reflection_;
  delete SimNextQuestionStart::default_instance_;
  delete SimNextQuestionStart_reflection_;
  delete SimSyncRank::default_instance_;
  delete SimSyncRank_reflection_;
  delete ReqGenQuestion::default_instance_;
  delete ReqGenQuestion_reflection_;
  delete RetGenQuestion::default_instance_;
  delete RetGenQuestion_reflection_;
  delete QuestionAnswerInfo::default_instance_;
  delete QuestionAnswerInfo_reflection_;
  delete ReqActivityEnd::default_instance_;
  delete ReqActivityEnd_reflection_;
  delete SyncRank::default_instance_;
  delete SyncRank_reflection_;
  delete AnswerRankInfo::default_instance_;
  delete AnswerRankInfo_reflection_;
  delete AckReqAnswerInfo::default_instance_;
  delete AckReqAnswerInfo_reflection_;
  delete ReqChoiceAnswer::default_instance_;
  delete ReqChoiceAnswer_reflection_;
}

void protobuf_AddDesc_Answer_2fAnswerProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Answer/AnswerProto.proto\022\013AnswerProto\""
    "\020\n\016ReqEnterScence\"\037\n\016RetEnterScence\022\r\n\005e"
    "rror\030\001 \002(\005\"\020\n\016ReqLeaveScence\"1\n\016RetLeave"
    "Scence\022\r\n\005error\030\001 \002(\005\022\020\n\010scenceId\030\002 \001(\003\""
    "h\n\021SimSyncAnswerInfo\022\016\n\006number\030\001 \002(\005\022\r\n\005"
    "index\030\002 \002(\005\022\016\n\006answer\030\003 \002(\005\022\020\n\010lefttime\030"
    "\004 \001(\005\022\022\n\nrightCount\030\005 \002(\005\"6\n\020SimPublishA"
    "nswer\022\016\n\006answer\030\001 \002(\005\022\022\n\nrightCount\030\002 \002("
    "\005\"E\n\024SimNextQuestionStart\022\016\n\006number\030\001 \002("
    "\005\022\r\n\005index\030\002 \002(\005\022\016\n\006answer\030\003 \002(\005\"<\n\013SimS"
    "yncRank\022-\n\010rankinfo\030\001 \003(\0132\033.AnswerProto."
    "AnswerRankInfo\"\020\n\016ReqGenQuestion\"@\n\016RetG"
    "enQuestion\022.\n\005infos\030\001 \002(\0132\037.AnswerProto."
    "QuestionAnswerInfo\"8\n\022QuestionAnswerInfo"
    "\022\021\n\tquestions\030\001 \003(\005\022\017\n\007answers\030\002 \003(\005\"\020\n\016"
    "ReqActivityEnd\"9\n\010SyncRank\022-\n\010rankinfo\030\001"
    " \003(\0132\033.AnswerProto.AnswerRankInfo\"\\\n\016Ans"
    "werRankInfo\022\022\n\nplayername\030\001 \002(\t\022\r\n\005score"
    "\030\002 \002(\005\022\025\n\rcontinueright\030\003 \002(\005\022\020\n\010scencei"
    "d\030\004 \001(\003\"q\n\020AckReqAnswerInfo\022\013\n\003ret\030\001 \002(\005"
    "\022\024\n\014currentIndex\030\002 \001(\005\022\026\n\016currentTitleID"
    "\030\003 \001(\005\022\023\n\013rightCounts\030\004 \001(\005\022\r\n\005state\030\005 \001"
    "(\005\"\036\n\017ReqChoiceAnswer\022\013\n\003ret\030\001 \002(\005", 914);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Answer/AnswerProto.proto", &protobuf_RegisterTypes);
  ReqEnterScence::default_instance_ = new ReqEnterScence();
  RetEnterScence::default_instance_ = new RetEnterScence();
  ReqLeaveScence::default_instance_ = new ReqLeaveScence();
  RetLeaveScence::default_instance_ = new RetLeaveScence();
  SimSyncAnswerInfo::default_instance_ = new SimSyncAnswerInfo();
  SimPublishAnswer::default_instance_ = new SimPublishAnswer();
  SimNextQuestionStart::default_instance_ = new SimNextQuestionStart();
  SimSyncRank::default_instance_ = new SimSyncRank();
  ReqGenQuestion::default_instance_ = new ReqGenQuestion();
  RetGenQuestion::default_instance_ = new RetGenQuestion();
  QuestionAnswerInfo::default_instance_ = new QuestionAnswerInfo();
  ReqActivityEnd::default_instance_ = new ReqActivityEnd();
  SyncRank::default_instance_ = new SyncRank();
  AnswerRankInfo::default_instance_ = new AnswerRankInfo();
  AckReqAnswerInfo::default_instance_ = new AckReqAnswerInfo();
  ReqChoiceAnswer::default_instance_ = new ReqChoiceAnswer();
  ReqEnterScence::default_instance_->InitAsDefaultInstance();
  RetEnterScence::default_instance_->InitAsDefaultInstance();
  ReqLeaveScence::default_instance_->InitAsDefaultInstance();
  RetLeaveScence::default_instance_->InitAsDefaultInstance();
  SimSyncAnswerInfo::default_instance_->InitAsDefaultInstance();
  SimPublishAnswer::default_instance_->InitAsDefaultInstance();
  SimNextQuestionStart::default_instance_->InitAsDefaultInstance();
  SimSyncRank::default_instance_->InitAsDefaultInstance();
  ReqGenQuestion::default_instance_->InitAsDefaultInstance();
  RetGenQuestion::default_instance_->InitAsDefaultInstance();
  QuestionAnswerInfo::default_instance_->InitAsDefaultInstance();
  ReqActivityEnd::default_instance_->InitAsDefaultInstance();
  SyncRank::default_instance_->InitAsDefaultInstance();
  AnswerRankInfo::default_instance_->InitAsDefaultInstance();
  AckReqAnswerInfo::default_instance_->InitAsDefaultInstance();
  ReqChoiceAnswer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Answer_2fAnswerProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Answer_2fAnswerProto_2eproto {
  StaticDescriptorInitializer_Answer_2fAnswerProto_2eproto() {
    protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  }
} static_descriptor_initializer_Answer_2fAnswerProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqEnterScence::ReqEnterScence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterScence::InitAsDefaultInstance() {
}

ReqEnterScence::ReqEnterScence(const ReqEnterScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterScence::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterScence::~ReqEnterScence() {
  SharedDtor();
}

void ReqEnterScence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnterScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterScence_descriptor_;
}

const ReqEnterScence& ReqEnterScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

ReqEnterScence* ReqEnterScence::default_instance_ = NULL;

ReqEnterScence* ReqEnterScence::New() const {
  return new ReqEnterScence;
}

void ReqEnterScence::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqEnterScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterScence::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterScence::MergeFrom(const ReqEnterScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterScence::CopyFrom(const ReqEnterScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterScence::IsInitialized() const {

  return true;
}

void ReqEnterScence::Swap(ReqEnterScence* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterScence_descriptor_;
  metadata.reflection = ReqEnterScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetEnterScence::kErrorFieldNumber;
#endif  // !_MSC_VER

RetEnterScence::RetEnterScence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetEnterScence::InitAsDefaultInstance() {
}

RetEnterScence::RetEnterScence(const RetEnterScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetEnterScence::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetEnterScence::~RetEnterScence() {
  SharedDtor();
}

void RetEnterScence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetEnterScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetEnterScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetEnterScence_descriptor_;
}

const RetEnterScence& RetEnterScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

RetEnterScence* RetEnterScence::default_instance_ = NULL;

RetEnterScence* RetEnterScence::New() const {
  return new RetEnterScence;
}

void RetEnterScence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetEnterScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetEnterScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetEnterScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetEnterScence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetEnterScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetEnterScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetEnterScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetEnterScence::MergeFrom(const RetEnterScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetEnterScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetEnterScence::CopyFrom(const RetEnterScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetEnterScence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetEnterScence::Swap(RetEnterScence* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetEnterScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetEnterScence_descriptor_;
  metadata.reflection = RetEnterScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqLeaveScence::ReqLeaveScence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLeaveScence::InitAsDefaultInstance() {
}

ReqLeaveScence::ReqLeaveScence(const ReqLeaveScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLeaveScence::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveScence::~ReqLeaveScence() {
  SharedDtor();
}

void ReqLeaveScence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLeaveScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveScence_descriptor_;
}

const ReqLeaveScence& ReqLeaveScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

ReqLeaveScence* ReqLeaveScence::default_instance_ = NULL;

ReqLeaveScence* ReqLeaveScence::New() const {
  return new ReqLeaveScence;
}

void ReqLeaveScence::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLeaveScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqLeaveScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLeaveScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLeaveScence::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLeaveScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLeaveScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLeaveScence::MergeFrom(const ReqLeaveScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLeaveScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveScence::CopyFrom(const ReqLeaveScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveScence::IsInitialized() const {

  return true;
}

void ReqLeaveScence::Swap(ReqLeaveScence* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLeaveScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveScence_descriptor_;
  metadata.reflection = ReqLeaveScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetLeaveScence::kErrorFieldNumber;
const int RetLeaveScence::kScenceIdFieldNumber;
#endif  // !_MSC_VER

RetLeaveScence::RetLeaveScence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLeaveScence::InitAsDefaultInstance() {
}

RetLeaveScence::RetLeaveScence(const RetLeaveScence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLeaveScence::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  scenceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLeaveScence::~RetLeaveScence() {
  SharedDtor();
}

void RetLeaveScence::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetLeaveScence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLeaveScence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLeaveScence_descriptor_;
}

const RetLeaveScence& RetLeaveScence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

RetLeaveScence* RetLeaveScence::default_instance_ = NULL;

RetLeaveScence* RetLeaveScence::New() const {
  return new RetLeaveScence;
}

void RetLeaveScence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    scenceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLeaveScence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scenceId;
        break;
      }

      // optional int64 scenceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scenceid_)));
          set_has_scenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLeaveScence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // optional int64 scenceId = 2;
  if (has_scenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->scenceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLeaveScence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // optional int64 scenceId = 2;
  if (has_scenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->scenceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLeaveScence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int64 scenceId = 2;
    if (has_scenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scenceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLeaveScence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLeaveScence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLeaveScence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLeaveScence::MergeFrom(const RetLeaveScence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_scenceid()) {
      set_scenceid(from.scenceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLeaveScence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLeaveScence::CopyFrom(const RetLeaveScence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLeaveScence::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetLeaveScence::Swap(RetLeaveScence* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(scenceid_, other->scenceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLeaveScence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLeaveScence_descriptor_;
  metadata.reflection = RetLeaveScence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimSyncAnswerInfo::kNumberFieldNumber;
const int SimSyncAnswerInfo::kIndexFieldNumber;
const int SimSyncAnswerInfo::kAnswerFieldNumber;
const int SimSyncAnswerInfo::kLefttimeFieldNumber;
const int SimSyncAnswerInfo::kRightCountFieldNumber;
#endif  // !_MSC_VER

SimSyncAnswerInfo::SimSyncAnswerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimSyncAnswerInfo::InitAsDefaultInstance() {
}

SimSyncAnswerInfo::SimSyncAnswerInfo(const SimSyncAnswerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimSyncAnswerInfo::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  index_ = 0;
  answer_ = 0;
  lefttime_ = 0;
  rightcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimSyncAnswerInfo::~SimSyncAnswerInfo() {
  SharedDtor();
}

void SimSyncAnswerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimSyncAnswerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimSyncAnswerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimSyncAnswerInfo_descriptor_;
}

const SimSyncAnswerInfo& SimSyncAnswerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

SimSyncAnswerInfo* SimSyncAnswerInfo::default_instance_ = NULL;

SimSyncAnswerInfo* SimSyncAnswerInfo::New() const {
  return new SimSyncAnswerInfo;
}

void SimSyncAnswerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    index_ = 0;
    answer_ = 0;
    lefttime_ = 0;
    rightcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimSyncAnswerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_answer;
        break;
      }

      // required int32 answer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lefttime;
        break;
      }

      // optional int32 lefttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lefttime_)));
          set_has_lefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rightCount;
        break;
      }

      // required int32 rightCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightcount_)));
          set_has_rightcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimSyncAnswerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->answer(), output);
  }

  // optional int32 lefttime = 4;
  if (has_lefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lefttime(), output);
  }

  // required int32 rightCount = 5;
  if (has_rightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rightcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimSyncAnswerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 answer = 3;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->answer(), target);
  }

  // optional int32 lefttime = 4;
  if (has_lefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lefttime(), target);
  }

  // required int32 rightCount = 5;
  if (has_rightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rightcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimSyncAnswerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 answer = 3;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer());
    }

    // optional int32 lefttime = 4;
    if (has_lefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lefttime());
    }

    // required int32 rightCount = 5;
    if (has_rightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimSyncAnswerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimSyncAnswerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimSyncAnswerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimSyncAnswerInfo::MergeFrom(const SimSyncAnswerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_lefttime()) {
      set_lefttime(from.lefttime());
    }
    if (from.has_rightcount()) {
      set_rightcount(from.rightcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimSyncAnswerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimSyncAnswerInfo::CopyFrom(const SimSyncAnswerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimSyncAnswerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void SimSyncAnswerInfo::Swap(SimSyncAnswerInfo* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(index_, other->index_);
    std::swap(answer_, other->answer_);
    std::swap(lefttime_, other->lefttime_);
    std::swap(rightcount_, other->rightcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimSyncAnswerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimSyncAnswerInfo_descriptor_;
  metadata.reflection = SimSyncAnswerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimPublishAnswer::kAnswerFieldNumber;
const int SimPublishAnswer::kRightCountFieldNumber;
#endif  // !_MSC_VER

SimPublishAnswer::SimPublishAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimPublishAnswer::InitAsDefaultInstance() {
}

SimPublishAnswer::SimPublishAnswer(const SimPublishAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimPublishAnswer::SharedCtor() {
  _cached_size_ = 0;
  answer_ = 0;
  rightcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimPublishAnswer::~SimPublishAnswer() {
  SharedDtor();
}

void SimPublishAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimPublishAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimPublishAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimPublishAnswer_descriptor_;
}

const SimPublishAnswer& SimPublishAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

SimPublishAnswer* SimPublishAnswer::default_instance_ = NULL;

SimPublishAnswer* SimPublishAnswer::New() const {
  return new SimPublishAnswer;
}

void SimPublishAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    answer_ = 0;
    rightcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimPublishAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 answer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rightCount;
        break;
      }

      // required int32 rightCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightcount_)));
          set_has_rightcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimPublishAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 answer = 1;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->answer(), output);
  }

  // required int32 rightCount = 2;
  if (has_rightcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rightcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimPublishAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 answer = 1;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->answer(), target);
  }

  // required int32 rightCount = 2;
  if (has_rightcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rightcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimPublishAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 answer = 1;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer());
    }

    // required int32 rightCount = 2;
    if (has_rightcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimPublishAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimPublishAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimPublishAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimPublishAnswer::MergeFrom(const SimPublishAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_rightcount()) {
      set_rightcount(from.rightcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimPublishAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimPublishAnswer::CopyFrom(const SimPublishAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimPublishAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SimPublishAnswer::Swap(SimPublishAnswer* other) {
  if (other != this) {
    std::swap(answer_, other->answer_);
    std::swap(rightcount_, other->rightcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimPublishAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimPublishAnswer_descriptor_;
  metadata.reflection = SimPublishAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimNextQuestionStart::kNumberFieldNumber;
const int SimNextQuestionStart::kIndexFieldNumber;
const int SimNextQuestionStart::kAnswerFieldNumber;
#endif  // !_MSC_VER

SimNextQuestionStart::SimNextQuestionStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimNextQuestionStart::InitAsDefaultInstance() {
}

SimNextQuestionStart::SimNextQuestionStart(const SimNextQuestionStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimNextQuestionStart::SharedCtor() {
  _cached_size_ = 0;
  number_ = 0;
  index_ = 0;
  answer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimNextQuestionStart::~SimNextQuestionStart() {
  SharedDtor();
}

void SimNextQuestionStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimNextQuestionStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimNextQuestionStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimNextQuestionStart_descriptor_;
}

const SimNextQuestionStart& SimNextQuestionStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

SimNextQuestionStart* SimNextQuestionStart::default_instance_ = NULL;

SimNextQuestionStart* SimNextQuestionStart::New() const {
  return new SimNextQuestionStart;
}

void SimNextQuestionStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_ = 0;
    index_ = 0;
    answer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimNextQuestionStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_answer;
        break;
      }

      // required int32 answer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimNextQuestionStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 answer = 3;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimNextQuestionStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 number = 1;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->number(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 answer = 3;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimNextQuestionStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 number = 1;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 answer = 3;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimNextQuestionStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimNextQuestionStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimNextQuestionStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimNextQuestionStart::MergeFrom(const SimNextQuestionStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimNextQuestionStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimNextQuestionStart::CopyFrom(const SimNextQuestionStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimNextQuestionStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SimNextQuestionStart::Swap(SimNextQuestionStart* other) {
  if (other != this) {
    std::swap(number_, other->number_);
    std::swap(index_, other->index_);
    std::swap(answer_, other->answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimNextQuestionStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimNextQuestionStart_descriptor_;
  metadata.reflection = SimNextQuestionStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimSyncRank::kRankinfoFieldNumber;
#endif  // !_MSC_VER

SimSyncRank::SimSyncRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimSyncRank::InitAsDefaultInstance() {
}

SimSyncRank::SimSyncRank(const SimSyncRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimSyncRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimSyncRank::~SimSyncRank() {
  SharedDtor();
}

void SimSyncRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimSyncRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimSyncRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimSyncRank_descriptor_;
}

const SimSyncRank& SimSyncRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

SimSyncRank* SimSyncRank::default_instance_ = NULL;

SimSyncRank* SimSyncRank::New() const {
  return new SimSyncRank;
}

void SimSyncRank::Clear() {
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimSyncRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimSyncRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimSyncRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimSyncRank::ByteSize() const {
  int total_size = 0;

  // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimSyncRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimSyncRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimSyncRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimSyncRank::MergeFrom(const SimSyncRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimSyncRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimSyncRank::CopyFrom(const SimSyncRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimSyncRank::IsInitialized() const {

  for (int i = 0; i < rankinfo_size(); i++) {
    if (!this->rankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SimSyncRank::Swap(SimSyncRank* other) {
  if (other != this) {
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimSyncRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimSyncRank_descriptor_;
  metadata.reflection = SimSyncRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqGenQuestion::ReqGenQuestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGenQuestion::InitAsDefaultInstance() {
}

ReqGenQuestion::ReqGenQuestion(const ReqGenQuestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGenQuestion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGenQuestion::~ReqGenQuestion() {
  SharedDtor();
}

void ReqGenQuestion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGenQuestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGenQuestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGenQuestion_descriptor_;
}

const ReqGenQuestion& ReqGenQuestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

ReqGenQuestion* ReqGenQuestion::default_instance_ = NULL;

ReqGenQuestion* ReqGenQuestion::New() const {
  return new ReqGenQuestion;
}

void ReqGenQuestion::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGenQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqGenQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGenQuestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGenQuestion::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGenQuestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGenQuestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGenQuestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGenQuestion::MergeFrom(const ReqGenQuestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGenQuestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGenQuestion::CopyFrom(const ReqGenQuestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGenQuestion::IsInitialized() const {

  return true;
}

void ReqGenQuestion::Swap(ReqGenQuestion* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGenQuestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGenQuestion_descriptor_;
  metadata.reflection = ReqGenQuestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGenQuestion::kInfosFieldNumber;
#endif  // !_MSC_VER

RetGenQuestion::RetGenQuestion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGenQuestion::InitAsDefaultInstance() {
  infos_ = const_cast< ::AnswerProto::QuestionAnswerInfo*>(&::AnswerProto::QuestionAnswerInfo::default_instance());
}

RetGenQuestion::RetGenQuestion(const RetGenQuestion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGenQuestion::SharedCtor() {
  _cached_size_ = 0;
  infos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGenQuestion::~RetGenQuestion() {
  SharedDtor();
}

void RetGenQuestion::SharedDtor() {
  if (this != default_instance_) {
    delete infos_;
  }
}

void RetGenQuestion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGenQuestion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGenQuestion_descriptor_;
}

const RetGenQuestion& RetGenQuestion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

RetGenQuestion* RetGenQuestion::default_instance_ = NULL;

RetGenQuestion* RetGenQuestion::New() const {
  return new RetGenQuestion;
}

void RetGenQuestion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infos()) {
      if (infos_ != NULL) infos_->::AnswerProto::QuestionAnswerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGenQuestion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AnswerProto.QuestionAnswerInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGenQuestion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .AnswerProto.QuestionAnswerInfo infos = 1;
  if (has_infos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGenQuestion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .AnswerProto.QuestionAnswerInfo infos = 1;
  if (has_infos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGenQuestion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .AnswerProto.QuestionAnswerInfo infos = 1;
    if (has_infos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGenQuestion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGenQuestion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGenQuestion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGenQuestion::MergeFrom(const RetGenQuestion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infos()) {
      mutable_infos()->::AnswerProto::QuestionAnswerInfo::MergeFrom(from.infos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGenQuestion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGenQuestion::CopyFrom(const RetGenQuestion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGenQuestion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetGenQuestion::Swap(RetGenQuestion* other) {
  if (other != this) {
    std::swap(infos_, other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGenQuestion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGenQuestion_descriptor_;
  metadata.reflection = RetGenQuestion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestionAnswerInfo::kQuestionsFieldNumber;
const int QuestionAnswerInfo::kAnswersFieldNumber;
#endif  // !_MSC_VER

QuestionAnswerInfo::QuestionAnswerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestionAnswerInfo::InitAsDefaultInstance() {
}

QuestionAnswerInfo::QuestionAnswerInfo(const QuestionAnswerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestionAnswerInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestionAnswerInfo::~QuestionAnswerInfo() {
  SharedDtor();
}

void QuestionAnswerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestionAnswerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestionAnswerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestionAnswerInfo_descriptor_;
}

const QuestionAnswerInfo& QuestionAnswerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

QuestionAnswerInfo* QuestionAnswerInfo::default_instance_ = NULL;

QuestionAnswerInfo* QuestionAnswerInfo::New() const {
  return new QuestionAnswerInfo;
}

void QuestionAnswerInfo::Clear() {
  questions_.Clear();
  answers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestionAnswerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 questions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_questions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_questions;
        if (input->ExpectTag(16)) goto parse_answers;
        break;
      }

      // repeated int32 answers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_answers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_answers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestionAnswerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 questions = 1;
  for (int i = 0; i < this->questions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->questions(i), output);
  }

  // repeated int32 answers = 2;
  for (int i = 0; i < this->answers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->answers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestionAnswerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 questions = 1;
  for (int i = 0; i < this->questions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->questions(i), target);
  }

  // repeated int32 answers = 2;
  for (int i = 0; i < this->answers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->answers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestionAnswerInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 questions = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->questions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questions(i));
    }
    total_size += 1 * this->questions_size() + data_size;
  }

  // repeated int32 answers = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->answers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->answers(i));
    }
    total_size += 1 * this->answers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestionAnswerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestionAnswerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestionAnswerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestionAnswerInfo::MergeFrom(const QuestionAnswerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  questions_.MergeFrom(from.questions_);
  answers_.MergeFrom(from.answers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestionAnswerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestionAnswerInfo::CopyFrom(const QuestionAnswerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestionAnswerInfo::IsInitialized() const {

  return true;
}

void QuestionAnswerInfo::Swap(QuestionAnswerInfo* other) {
  if (other != this) {
    questions_.Swap(&other->questions_);
    answers_.Swap(&other->answers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestionAnswerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestionAnswerInfo_descriptor_;
  metadata.reflection = QuestionAnswerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqActivityEnd::ReqActivityEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqActivityEnd::InitAsDefaultInstance() {
}

ReqActivityEnd::ReqActivityEnd(const ReqActivityEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqActivityEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqActivityEnd::~ReqActivityEnd() {
  SharedDtor();
}

void ReqActivityEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqActivityEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqActivityEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqActivityEnd_descriptor_;
}

const ReqActivityEnd& ReqActivityEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

ReqActivityEnd* ReqActivityEnd::default_instance_ = NULL;

ReqActivityEnd* ReqActivityEnd::New() const {
  return new ReqActivityEnd;
}

void ReqActivityEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqActivityEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqActivityEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqActivityEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqActivityEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqActivityEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqActivityEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqActivityEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqActivityEnd::MergeFrom(const ReqActivityEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqActivityEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqActivityEnd::CopyFrom(const ReqActivityEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqActivityEnd::IsInitialized() const {

  return true;
}

void ReqActivityEnd::Swap(ReqActivityEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqActivityEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqActivityEnd_descriptor_;
  metadata.reflection = ReqActivityEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRank::kRankinfoFieldNumber;
#endif  // !_MSC_VER

SyncRank::SyncRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncRank::InitAsDefaultInstance() {
}

SyncRank::SyncRank(const SyncRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRank::~SyncRank() {
  SharedDtor();
}

void SyncRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRank_descriptor_;
}

const SyncRank& SyncRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

SyncRank* SyncRank::default_instance_ = NULL;

SyncRank* SyncRank::New() const {
  return new SyncRank;
}

void SyncRank::Clear() {
  rankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
  for (int i = 0; i < this->rankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncRank::ByteSize() const {
  int total_size = 0;

  // repeated .AnswerProto.AnswerRankInfo rankinfo = 1;
  total_size += 1 * this->rankinfo_size();
  for (int i = 0; i < this->rankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRank::MergeFrom(const SyncRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfo_.MergeFrom(from.rankinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRank::CopyFrom(const SyncRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRank::IsInitialized() const {

  for (int i = 0; i < rankinfo_size(); i++) {
    if (!this->rankinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SyncRank::Swap(SyncRank* other) {
  if (other != this) {
    rankinfo_.Swap(&other->rankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRank_descriptor_;
  metadata.reflection = SyncRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerRankInfo::kPlayernameFieldNumber;
const int AnswerRankInfo::kScoreFieldNumber;
const int AnswerRankInfo::kContinuerightFieldNumber;
const int AnswerRankInfo::kScenceidFieldNumber;
#endif  // !_MSC_VER

AnswerRankInfo::AnswerRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerRankInfo::InitAsDefaultInstance() {
}

AnswerRankInfo::AnswerRankInfo(const AnswerRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerRankInfo::SharedCtor() {
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  continueright_ = 0;
  scenceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerRankInfo::~AnswerRankInfo() {
  SharedDtor();
}

void AnswerRankInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void AnswerRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerRankInfo_descriptor_;
}

const AnswerRankInfo& AnswerRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

AnswerRankInfo* AnswerRankInfo::default_instance_ = NULL;

AnswerRankInfo* AnswerRankInfo::New() const {
  return new AnswerRankInfo;
}

void AnswerRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    score_ = 0;
    continueright_ = 0;
    scenceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string playername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_continueright;
        break;
      }

      // required int32 continueright = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueright:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueright_)));
          set_has_continueright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scenceid;
        break;
      }

      // optional int64 scenceid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scenceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scenceid_)));
          set_has_scenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->playername(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // required int32 continueright = 3;
  if (has_continueright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continueright(), output);
  }

  // optional int64 scenceid = 4;
  if (has_scenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->scenceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string playername = 1;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playername(), target);
  }

  // required int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // required int32 continueright = 3;
  if (has_continueright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->continueright(), target);
  }

  // optional int64 scenceid = 4;
  if (has_scenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->scenceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string playername = 1;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 continueright = 3;
    if (has_continueright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continueright());
    }

    // optional int64 scenceid = 4;
    if (has_scenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scenceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerRankInfo::MergeFrom(const AnswerRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_continueright()) {
      set_continueright(from.continueright());
    }
    if (from.has_scenceid()) {
      set_scenceid(from.scenceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerRankInfo::CopyFrom(const AnswerRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AnswerRankInfo::Swap(AnswerRankInfo* other) {
  if (other != this) {
    std::swap(playername_, other->playername_);
    std::swap(score_, other->score_);
    std::swap(continueright_, other->continueright_);
    std::swap(scenceid_, other->scenceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerRankInfo_descriptor_;
  metadata.reflection = AnswerRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqAnswerInfo::kRetFieldNumber;
const int AckReqAnswerInfo::kCurrentIndexFieldNumber;
const int AckReqAnswerInfo::kCurrentTitleIDFieldNumber;
const int AckReqAnswerInfo::kRightCountsFieldNumber;
const int AckReqAnswerInfo::kStateFieldNumber;
#endif  // !_MSC_VER

AckReqAnswerInfo::AckReqAnswerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqAnswerInfo::InitAsDefaultInstance() {
}

AckReqAnswerInfo::AckReqAnswerInfo(const AckReqAnswerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqAnswerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  currentindex_ = 0;
  currenttitleid_ = 0;
  rightcounts_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqAnswerInfo::~AckReqAnswerInfo() {
  SharedDtor();
}

void AckReqAnswerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqAnswerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqAnswerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqAnswerInfo_descriptor_;
}

const AckReqAnswerInfo& AckReqAnswerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

AckReqAnswerInfo* AckReqAnswerInfo::default_instance_ = NULL;

AckReqAnswerInfo* AckReqAnswerInfo::New() const {
  return new AckReqAnswerInfo;
}

void AckReqAnswerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    currentindex_ = 0;
    currenttitleid_ = 0;
    rightcounts_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqAnswerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentIndex;
        break;
      }

      // optional int32 currentIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentindex_)));
          set_has_currentindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentTitleID;
        break;
      }

      // optional int32 currentTitleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTitleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttitleid_)));
          set_has_currenttitleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rightCounts;
        break;
      }

      // optional int32 rightCounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightcounts_)));
          set_has_rightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqAnswerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 currentIndex = 2;
  if (has_currentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentindex(), output);
  }

  // optional int32 currentTitleID = 3;
  if (has_currenttitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currenttitleid(), output);
  }

  // optional int32 rightCounts = 4;
  if (has_rightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rightcounts(), output);
  }

  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqAnswerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 currentIndex = 2;
  if (has_currentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentindex(), target);
  }

  // optional int32 currentTitleID = 3;
  if (has_currenttitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currenttitleid(), target);
  }

  // optional int32 rightCounts = 4;
  if (has_rightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rightcounts(), target);
  }

  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqAnswerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 currentIndex = 2;
    if (has_currentindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentindex());
    }

    // optional int32 currentTitleID = 3;
    if (has_currenttitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttitleid());
    }

    // optional int32 rightCounts = 4;
    if (has_rightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightcounts());
    }

    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqAnswerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqAnswerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqAnswerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqAnswerInfo::MergeFrom(const AckReqAnswerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_currentindex()) {
      set_currentindex(from.currentindex());
    }
    if (from.has_currenttitleid()) {
      set_currenttitleid(from.currenttitleid());
    }
    if (from.has_rightcounts()) {
      set_rightcounts(from.rightcounts());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqAnswerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqAnswerInfo::CopyFrom(const AckReqAnswerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqAnswerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqAnswerInfo::Swap(AckReqAnswerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(currentindex_, other->currentindex_);
    std::swap(currenttitleid_, other->currenttitleid_);
    std::swap(rightcounts_, other->rightcounts_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqAnswerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqAnswerInfo_descriptor_;
  metadata.reflection = AckReqAnswerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChoiceAnswer::kRetFieldNumber;
#endif  // !_MSC_VER

ReqChoiceAnswer::ReqChoiceAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChoiceAnswer::InitAsDefaultInstance() {
}

ReqChoiceAnswer::ReqChoiceAnswer(const ReqChoiceAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChoiceAnswer::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChoiceAnswer::~ReqChoiceAnswer() {
  SharedDtor();
}

void ReqChoiceAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqChoiceAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChoiceAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChoiceAnswer_descriptor_;
}

const ReqChoiceAnswer& ReqChoiceAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Answer_2fAnswerProto_2eproto();
  return *default_instance_;
}

ReqChoiceAnswer* ReqChoiceAnswer::default_instance_ = NULL;

ReqChoiceAnswer* ReqChoiceAnswer::New() const {
  return new ReqChoiceAnswer;
}

void ReqChoiceAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChoiceAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChoiceAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChoiceAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChoiceAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChoiceAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChoiceAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChoiceAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChoiceAnswer::MergeFrom(const ReqChoiceAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChoiceAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChoiceAnswer::CopyFrom(const ReqChoiceAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChoiceAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqChoiceAnswer::Swap(ReqChoiceAnswer* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChoiceAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChoiceAnswer_descriptor_;
  metadata.reflection = ReqChoiceAnswer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AnswerProto

// @@protoc_insertion_point(global_scope)
