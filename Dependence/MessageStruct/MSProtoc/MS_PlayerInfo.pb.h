// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_PlayerInfo.proto

#ifndef PROTOBUF_MSProtoc_2fMS_5fPlayerInfo_2eproto__INCLUDED
#define PROTOBUF_MSProtoc_2fMS_5fPlayerInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "MSProtoc/MS_Mail.pb.h"
// @@protoc_insertion_point(includes)

namespace PlayerInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

class WantPlayerInfo;
class AdminWantPlayerInfo;
class Admin_BaseInfo;
class Admin_BattleInfo;
class Admin_DanLuInfo;
class Admin_MagicWeapon;
class Admin_HorseInfo;
class Admin_RankingInfo;
class Admin_OutPutLinePlayerInfo;
class Admin_ReqRoleInfoByOpenID;
class Admin_RoleInfoByOpenID;
class Admin_RetRoleInfoByOpenID;
class Admin_ReqRoleInfoByOpenIDQzoneID;
class Admin_ReqContainerInfo;
class Admin_RetContainerInfo;

// ===================================================================

class WantPlayerInfo : public ::google::protobuf::Message {
 public:
  WantPlayerInfo();
  virtual ~WantPlayerInfo();

  WantPlayerInfo(const WantPlayerInfo& from);

  inline WantPlayerInfo& operator=(const WantPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WantPlayerInfo& default_instance();

  void Swap(WantPlayerInfo* other);

  // implements Message ----------------------------------------------

  WantPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WantPlayerInfo& from);
  void MergeFrom(const WantPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:PlayerInfo.WantPlayerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static WantPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdminWantPlayerInfo : public ::google::protobuf::Message {
 public:
  AdminWantPlayerInfo();
  virtual ~AdminWantPlayerInfo();

  AdminWantPlayerInfo(const AdminWantPlayerInfo& from);

  inline AdminWantPlayerInfo& operator=(const AdminWantPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdminWantPlayerInfo& default_instance();

  void Swap(AdminWantPlayerInfo* other);

  // implements Message ----------------------------------------------

  AdminWantPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdminWantPlayerInfo& from);
  void MergeFrom(const AdminWantPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .PlayerInfo.Admin_BaseInfo baseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::PlayerInfo::Admin_BaseInfo& baseinfo() const;
  inline ::PlayerInfo::Admin_BaseInfo* mutable_baseinfo();
  inline ::PlayerInfo::Admin_BaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::PlayerInfo::Admin_BaseInfo* baseinfo);

  // optional .PlayerInfo.Admin_BattleInfo battleInfo = 3;
  inline bool has_battleinfo() const;
  inline void clear_battleinfo();
  static const int kBattleInfoFieldNumber = 3;
  inline const ::PlayerInfo::Admin_BattleInfo& battleinfo() const;
  inline ::PlayerInfo::Admin_BattleInfo* mutable_battleinfo();
  inline ::PlayerInfo::Admin_BattleInfo* release_battleinfo();
  inline void set_allocated_battleinfo(::PlayerInfo::Admin_BattleInfo* battleinfo);

  // optional .PlayerInfo.Admin_DanLuInfo danluInfo = 4;
  inline bool has_danluinfo() const;
  inline void clear_danluinfo();
  static const int kDanluInfoFieldNumber = 4;
  inline const ::PlayerInfo::Admin_DanLuInfo& danluinfo() const;
  inline ::PlayerInfo::Admin_DanLuInfo* mutable_danluinfo();
  inline ::PlayerInfo::Admin_DanLuInfo* release_danluinfo();
  inline void set_allocated_danluinfo(::PlayerInfo::Admin_DanLuInfo* danluinfo);

  // optional .PlayerInfo.Admin_MagicWeapon magicInfo = 5;
  inline bool has_magicinfo() const;
  inline void clear_magicinfo();
  static const int kMagicInfoFieldNumber = 5;
  inline const ::PlayerInfo::Admin_MagicWeapon& magicinfo() const;
  inline ::PlayerInfo::Admin_MagicWeapon* mutable_magicinfo();
  inline ::PlayerInfo::Admin_MagicWeapon* release_magicinfo();
  inline void set_allocated_magicinfo(::PlayerInfo::Admin_MagicWeapon* magicinfo);

  // optional .PlayerInfo.Admin_HorseInfo horseInfo = 6;
  inline bool has_horseinfo() const;
  inline void clear_horseinfo();
  static const int kHorseInfoFieldNumber = 6;
  inline const ::PlayerInfo::Admin_HorseInfo& horseinfo() const;
  inline ::PlayerInfo::Admin_HorseInfo* mutable_horseinfo();
  inline ::PlayerInfo::Admin_HorseInfo* release_horseinfo();
  inline void set_allocated_horseinfo(::PlayerInfo::Admin_HorseInfo* horseinfo);

  // optional int32 fight = 7;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 7;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.AdminWantPlayerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_battleinfo();
  inline void clear_has_battleinfo();
  inline void set_has_danluinfo();
  inline void clear_has_danluinfo();
  inline void set_has_magicinfo();
  inline void clear_has_magicinfo();
  inline void set_has_horseinfo();
  inline void clear_has_horseinfo();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PlayerInfo::Admin_BaseInfo* baseinfo_;
  ::PlayerInfo::Admin_BattleInfo* battleinfo_;
  ::PlayerInfo::Admin_DanLuInfo* danluinfo_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 fight_;
  ::PlayerInfo::Admin_MagicWeapon* magicinfo_;
  ::PlayerInfo::Admin_HorseInfo* horseinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static AdminWantPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BaseInfo : public ::google::protobuf::Message {
 public:
  Admin_BaseInfo();
  virtual ~Admin_BaseInfo();

  Admin_BaseInfo(const Admin_BaseInfo& from);

  inline Admin_BaseInfo& operator=(const Admin_BaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BaseInfo& default_instance();

  void Swap(Admin_BaseInfo* other);

  // implements Message ----------------------------------------------

  Admin_BaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BaseInfo& from);
  void MergeFrom(const Admin_BaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required int64 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // required int32 golden = 6;
  inline bool has_golden() const;
  inline void clear_golden();
  static const int kGoldenFieldNumber = 6;
  inline ::google::protobuf::int32 golden() const;
  inline void set_golden(::google::protobuf::int32 value);

  // required int32 bindgolden = 7;
  inline bool has_bindgolden() const;
  inline void clear_bindgolden();
  static const int kBindgoldenFieldNumber = 7;
  inline ::google::protobuf::int32 bindgolden() const;
  inline void set_bindgolden(::google::protobuf::int32 value);

  // required int64 deadtime = 8;
  inline bool has_deadtime() const;
  inline void clear_deadtime();
  static const int kDeadtimeFieldNumber = 8;
  inline ::google::protobuf::int64 deadtime() const;
  inline void set_deadtime(::google::protobuf::int64 value);

  // required bool sex = 9;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 9;
  inline bool sex() const;
  inline void set_sex(bool value);

  // required int32 profession = 10;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 10;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 xpos = 11;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 11;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 12;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 12;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // required int32 horse = 13;
  inline bool has_horse() const;
  inline void clear_horse();
  static const int kHorseFieldNumber = 13;
  inline ::google::protobuf::int32 horse() const;
  inline void set_horse(::google::protobuf::int32 value);

  // required int64 mapid = 14;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 14;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // required int32 country = 15;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 15;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // required int32 charhead = 16;
  inline bool has_charhead() const;
  inline void clear_charhead();
  static const int kCharheadFieldNumber = 16;
  inline ::google::protobuf::int32 charhead() const;
  inline void set_charhead(::google::protobuf::int32 value);

  // required int32 facontribution = 17;
  inline bool has_facontribution() const;
  inline void clear_facontribution();
  static const int kFacontributionFieldNumber = 17;
  inline ::google::protobuf::int32 facontribution() const;
  inline void set_facontribution(::google::protobuf::int32 value);

  // required int32 expration = 18;
  inline bool has_expration() const;
  inline void clear_expration();
  static const int kExprationFieldNumber = 18;
  inline ::google::protobuf::int32 expration() const;
  inline void set_expration(::google::protobuf::int32 value);

  // required int32 faction = 19;
  inline bool has_faction() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 19;
  inline ::google::protobuf::int32 faction() const;
  inline void set_faction(::google::protobuf::int32 value);

  // required int32 fajob = 20;
  inline bool has_fajob() const;
  inline void clear_fajob();
  static const int kFajobFieldNumber = 20;
  inline ::google::protobuf::int32 fajob() const;
  inline void set_fajob(::google::protobuf::int32 value);

  // required int64 mate = 21;
  inline bool has_mate() const;
  inline void clear_mate();
  static const int kMateFieldNumber = 21;
  inline ::google::protobuf::int64 mate() const;
  inline void set_mate(::google::protobuf::int64 value);

  // required int32 countryjob = 22;
  inline bool has_countryjob() const;
  inline void clear_countryjob();
  static const int kCountryjobFieldNumber = 22;
  inline ::google::protobuf::int32 countryjob() const;
  inline void set_countryjob(::google::protobuf::int32 value);

  // required int32 battlecontri = 23;
  inline bool has_battlecontri() const;
  inline void clear_battlecontri();
  static const int kBattlecontriFieldNumber = 23;
  inline ::google::protobuf::int32 battlecontri() const;
  inline void set_battlecontri(::google::protobuf::int32 value);

  // required int32 armyjob = 24;
  inline bool has_armyjob() const;
  inline void clear_armyjob();
  static const int kArmyjobFieldNumber = 24;
  inline ::google::protobuf::int32 armyjob() const;
  inline void set_armyjob(::google::protobuf::int32 value);

  // optional int32 countrycontri = 25;
  inline bool has_countrycontri() const;
  inline void clear_countrycontri();
  static const int kCountrycontriFieldNumber = 25;
  inline ::google::protobuf::int32 countrycontri() const;
  inline void set_countrycontri(::google::protobuf::int32 value);

  // optional int32 titleid = 26;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 26;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // required int32 accounttype = 27;
  inline bool has_accounttype() const;
  inline void clear_accounttype();
  static const int kAccounttypeFieldNumber = 27;
  inline ::google::protobuf::int32 accounttype() const;
  inline void set_accounttype(::google::protobuf::int32 value);

  // required string openid = 28;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 28;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required int32 serverid = 29;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 29;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required int32 sinvalue = 30;
  inline bool has_sinvalue() const;
  inline void clear_sinvalue();
  static const int kSinvalueFieldNumber = 30;
  inline ::google::protobuf::int32 sinvalue() const;
  inline void set_sinvalue(::google::protobuf::int32 value);

  // required int32 acupoint = 31;
  inline bool has_acupoint() const;
  inline void clear_acupoint();
  static const int kAcupointFieldNumber = 31;
  inline ::google::protobuf::int32 acupoint() const;
  inline void set_acupoint(::google::protobuf::int32 value);

  // required int32 settings = 32;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 32;
  inline ::google::protobuf::int32 settings() const;
  inline void set_settings(::google::protobuf::int32 value);

  // required int64 havetodo = 33;
  inline bool has_havetodo() const;
  inline void clear_havetodo();
  static const int kHavetodoFieldNumber = 33;
  inline ::google::protobuf::int64 havetodo() const;
  inline void set_havetodo(::google::protobuf::int64 value);

  // required int32 havetodoaward = 34;
  inline bool has_havetodoaward() const;
  inline void clear_havetodoaward();
  static const int kHavetodoawardFieldNumber = 34;
  inline ::google::protobuf::int32 havetodoaward() const;
  inline void set_havetodoaward(::google::protobuf::int32 value);

  // required int32 activites = 35;
  inline bool has_activites() const;
  inline void clear_activites();
  static const int kActivitesFieldNumber = 35;
  inline ::google::protobuf::int32 activites() const;
  inline void set_activites(::google::protobuf::int32 value);

  // required int32 activitesaward = 36;
  inline bool has_activitesaward() const;
  inline void clear_activitesaward();
  static const int kActivitesawardFieldNumber = 36;
  inline ::google::protobuf::int32 activitesaward() const;
  inline void set_activitesaward(::google::protobuf::int32 value);

  // required int64 offlineTime = 37;
  inline bool has_offlinetime() const;
  inline void clear_offlinetime();
  static const int kOfflineTimeFieldNumber = 37;
  inline ::google::protobuf::int64 offlinetime() const;
  inline void set_offlinetime(::google::protobuf::int64 value);

  // required int32 onlineReward = 38;
  inline bool has_onlinereward() const;
  inline void clear_onlinereward();
  static const int kOnlineRewardFieldNumber = 38;
  inline ::google::protobuf::int32 onlinereward() const;
  inline void set_onlinereward(::google::protobuf::int32 value);

  // required int64 onlineTime = 39;
  inline bool has_onlinetime() const;
  inline void clear_onlinetime();
  static const int kOnlineTimeFieldNumber = 39;
  inline ::google::protobuf::int64 onlinetime() const;
  inline void set_onlinetime(::google::protobuf::int64 value);

  // required int32 levelReward = 40;
  inline bool has_levelreward() const;
  inline void clear_levelreward();
  static const int kLevelRewardFieldNumber = 40;
  inline ::google::protobuf::int32 levelreward() const;
  inline void set_levelreward(::google::protobuf::int32 value);

  // required int32 prestige = 41;
  inline bool has_prestige() const;
  inline void clear_prestige();
  static const int kPrestigeFieldNumber = 41;
  inline ::google::protobuf::int32 prestige() const;
  inline void set_prestige(::google::protobuf::int32 value);

  // required int32 challegeid = 42;
  inline bool has_challegeid() const;
  inline void clear_challegeid();
  static const int kChallegeidFieldNumber = 42;
  inline ::google::protobuf::int32 challegeid() const;
  inline void set_challegeid(::google::protobuf::int32 value);

  // required int32 historyReward = 43;
  inline bool has_historyreward() const;
  inline void clear_historyreward();
  static const int kHistoryRewardFieldNumber = 43;
  inline ::google::protobuf::int32 historyreward() const;
  inline void set_historyreward(::google::protobuf::int32 value);

  // required int32 viplv = 44;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 44;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // required int32 continueanswer = 45;
  inline bool has_continueanswer() const;
  inline void clear_continueanswer();
  static const int kContinueanswerFieldNumber = 45;
  inline ::google::protobuf::int32 continueanswer() const;
  inline void set_continueanswer(::google::protobuf::int32 value);

  // required int32 rightanswer = 46;
  inline bool has_rightanswer() const;
  inline void clear_rightanswer();
  static const int kRightanswerFieldNumber = 46;
  inline ::google::protobuf::int32 rightanswer() const;
  inline void set_rightanswer(::google::protobuf::int32 value);

  // required int32 addupgolde = 47;
  inline bool has_addupgolde() const;
  inline void clear_addupgolde();
  static const int kAddupgoldeFieldNumber = 47;
  inline ::google::protobuf::int32 addupgolde() const;
  inline void set_addupgolde(::google::protobuf::int32 value);

  // optional string clanname = 48;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClannameFieldNumber = 48;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const char* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // optional int32 ranking = 49;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 49;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // optional int32 awardranking = 50;
  inline bool has_awardranking() const;
  inline void clear_awardranking();
  static const int kAwardrankingFieldNumber = 50;
  inline ::google::protobuf::int32 awardranking() const;
  inline void set_awardranking(::google::protobuf::int32 value);

  // optional int64 totalOnlineTime = 52;
  inline bool has_totalonlinetime() const;
  inline void clear_totalonlinetime();
  static const int kTotalOnlineTimeFieldNumber = 52;
  inline ::google::protobuf::int64 totalonlinetime() const;
  inline void set_totalonlinetime(::google::protobuf::int64 value);

  // optional int32 antiAddictionState = 53;
  inline bool has_antiaddictionstate() const;
  inline void clear_antiaddictionstate();
  static const int kAntiAddictionStateFieldNumber = 53;
  inline ::google::protobuf::int32 antiaddictionstate() const;
  inline void set_antiaddictionstate(::google::protobuf::int32 value);

  // optional int64 antiAddictionOnLineTime = 54;
  inline bool has_antiaddictiononlinetime() const;
  inline void clear_antiaddictiononlinetime();
  static const int kAntiAddictionOnLineTimeFieldNumber = 54;
  inline ::google::protobuf::int64 antiaddictiononlinetime() const;
  inline void set_antiaddictiononlinetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_BaseInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_golden();
  inline void clear_has_golden();
  inline void set_has_bindgolden();
  inline void clear_has_bindgolden();
  inline void set_has_deadtime();
  inline void clear_has_deadtime();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_horse();
  inline void clear_has_horse();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_charhead();
  inline void clear_has_charhead();
  inline void set_has_facontribution();
  inline void clear_has_facontribution();
  inline void set_has_expration();
  inline void clear_has_expration();
  inline void set_has_faction();
  inline void clear_has_faction();
  inline void set_has_fajob();
  inline void clear_has_fajob();
  inline void set_has_mate();
  inline void clear_has_mate();
  inline void set_has_countryjob();
  inline void clear_has_countryjob();
  inline void set_has_battlecontri();
  inline void clear_has_battlecontri();
  inline void set_has_armyjob();
  inline void clear_has_armyjob();
  inline void set_has_countrycontri();
  inline void clear_has_countrycontri();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_accounttype();
  inline void clear_has_accounttype();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sinvalue();
  inline void clear_has_sinvalue();
  inline void set_has_acupoint();
  inline void clear_has_acupoint();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_havetodo();
  inline void clear_has_havetodo();
  inline void set_has_havetodoaward();
  inline void clear_has_havetodoaward();
  inline void set_has_activites();
  inline void clear_has_activites();
  inline void set_has_activitesaward();
  inline void clear_has_activitesaward();
  inline void set_has_offlinetime();
  inline void clear_has_offlinetime();
  inline void set_has_onlinereward();
  inline void clear_has_onlinereward();
  inline void set_has_onlinetime();
  inline void clear_has_onlinetime();
  inline void set_has_levelreward();
  inline void clear_has_levelreward();
  inline void set_has_prestige();
  inline void clear_has_prestige();
  inline void set_has_challegeid();
  inline void clear_has_challegeid();
  inline void set_has_historyreward();
  inline void clear_has_historyreward();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_continueanswer();
  inline void clear_has_continueanswer();
  inline void set_has_rightanswer();
  inline void clear_has_rightanswer();
  inline void set_has_addupgolde();
  inline void clear_has_addupgolde();
  inline void set_has_clanname();
  inline void clear_has_clanname();
  inline void set_has_ranking();
  inline void clear_has_ranking();
  inline void set_has_awardranking();
  inline void clear_has_awardranking();
  inline void set_has_totalonlinetime();
  inline void clear_has_totalonlinetime();
  inline void set_has_antiaddictionstate();
  inline void clear_has_antiaddictionstate();
  inline void set_has_antiaddictiononlinetime();
  inline void clear_has_antiaddictiononlinetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 golden_;
  ::google::protobuf::int32 bindgolden_;
  ::google::protobuf::int64 deadtime_;
  bool sex_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 horse_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 charhead_;
  ::google::protobuf::int32 facontribution_;
  ::google::protobuf::int32 expration_;
  ::google::protobuf::int32 faction_;
  ::google::protobuf::int64 mate_;
  ::google::protobuf::int32 fajob_;
  ::google::protobuf::int32 countryjob_;
  ::google::protobuf::int32 battlecontri_;
  ::google::protobuf::int32 armyjob_;
  ::google::protobuf::int32 countrycontri_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 accounttype_;
  ::google::protobuf::int32 serverid_;
  ::std::string* openid_;
  ::google::protobuf::int32 sinvalue_;
  ::google::protobuf::int32 acupoint_;
  ::google::protobuf::int32 settings_;
  ::google::protobuf::int32 havetodoaward_;
  ::google::protobuf::int64 havetodo_;
  ::google::protobuf::int32 activites_;
  ::google::protobuf::int32 activitesaward_;
  ::google::protobuf::int64 offlinetime_;
  ::google::protobuf::int64 onlinetime_;
  ::google::protobuf::int32 onlinereward_;
  ::google::protobuf::int32 levelreward_;
  ::google::protobuf::int32 prestige_;
  ::google::protobuf::int32 challegeid_;
  ::google::protobuf::int32 historyreward_;
  ::google::protobuf::int32 viplv_;
  ::google::protobuf::int32 continueanswer_;
  ::google::protobuf::int32 rightanswer_;
  ::std::string* clanname_;
  ::google::protobuf::int32 addupgolde_;
  ::google::protobuf::int32 ranking_;
  ::google::protobuf::int64 totalonlinetime_;
  ::google::protobuf::int32 awardranking_;
  ::google::protobuf::int32 antiaddictionstate_;
  ::google::protobuf::int64 antiaddictiononlinetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(53 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_BaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_BattleInfo : public ::google::protobuf::Message {
 public:
  Admin_BattleInfo();
  virtual ~Admin_BattleInfo();

  Admin_BattleInfo(const Admin_BattleInfo& from);

  inline Admin_BattleInfo& operator=(const Admin_BattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_BattleInfo& default_instance();

  void Swap(Admin_BattleInfo* other);

  // implements Message ----------------------------------------------

  Admin_BattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_BattleInfo& from);
  void MergeFrom(const Admin_BattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hp = 1;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 1;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 hpmax = 2;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 2;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // required int32 mp = 3;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 3;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // required int32 mpmax = 4;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 4;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // required int32 force = 5;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 5;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);

  // required int32 forcemax = 6;
  inline bool has_forcemax() const;
  inline void clear_forcemax();
  static const int kForcemaxFieldNumber = 6;
  inline ::google::protobuf::int32 forcemax() const;
  inline void set_forcemax(::google::protobuf::int32 value);

  // required int32 strength = 7;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 7;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // required int32 cleverpower = 8;
  inline bool has_cleverpower() const;
  inline void clear_cleverpower();
  static const int kCleverpowerFieldNumber = 8;
  inline ::google::protobuf::int32 cleverpower() const;
  inline void set_cleverpower(::google::protobuf::int32 value);

  // optional int32 cleverair = 9;
  inline bool has_cleverair() const;
  inline void clear_cleverair();
  static const int kCleverairFieldNumber = 9;
  inline ::google::protobuf::int32 cleverair() const;
  inline void set_cleverair(::google::protobuf::int32 value);

  // required int32 physicalpower = 10;
  inline bool has_physicalpower() const;
  inline void clear_physicalpower();
  static const int kPhysicalpowerFieldNumber = 10;
  inline ::google::protobuf::int32 physicalpower() const;
  inline void set_physicalpower(::google::protobuf::int32 value);

  // required int32 patience = 11;
  inline bool has_patience() const;
  inline void clear_patience();
  static const int kPatienceFieldNumber = 11;
  inline ::google::protobuf::int32 patience() const;
  inline void set_patience(::google::protobuf::int32 value);

  // required int32 agility = 12;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 12;
  inline ::google::protobuf::int32 agility() const;
  inline void set_agility(::google::protobuf::int32 value);

  // required int32 pkcount = 13;
  inline bool has_pkcount() const;
  inline void clear_pkcount();
  static const int kPkcountFieldNumber = 13;
  inline ::google::protobuf::int32 pkcount() const;
  inline void set_pkcount(::google::protobuf::int32 value);

  // optional int32 power = 14;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 14;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 powermax = 15;
  inline bool has_powermax() const;
  inline void clear_powermax();
  static const int kPowermaxFieldNumber = 15;
  inline ::google::protobuf::int32 powermax() const;
  inline void set_powermax(::google::protobuf::int32 value);

  // required int32 phyattack = 16;
  inline bool has_phyattack() const;
  inline void clear_phyattack();
  static const int kPhyattackFieldNumber = 16;
  inline ::google::protobuf::int32 phyattack() const;
  inline void set_phyattack(::google::protobuf::int32 value);

  // required int32 phyattackmax = 17;
  inline bool has_phyattackmax() const;
  inline void clear_phyattackmax();
  static const int kPhyattackmaxFieldNumber = 17;
  inline ::google::protobuf::int32 phyattackmax() const;
  inline void set_phyattackmax(::google::protobuf::int32 value);

  // required int32 phydefence = 18;
  inline bool has_phydefence() const;
  inline void clear_phydefence();
  static const int kPhydefenceFieldNumber = 18;
  inline ::google::protobuf::int32 phydefence() const;
  inline void set_phydefence(::google::protobuf::int32 value);

  // required int32 magicattack = 19;
  inline bool has_magicattack() const;
  inline void clear_magicattack();
  static const int kMagicattackFieldNumber = 19;
  inline ::google::protobuf::int32 magicattack() const;
  inline void set_magicattack(::google::protobuf::int32 value);

  // required int32 magicattackmax = 20;
  inline bool has_magicattackmax() const;
  inline void clear_magicattackmax();
  static const int kMagicattackmaxFieldNumber = 20;
  inline ::google::protobuf::int32 magicattackmax() const;
  inline void set_magicattackmax(::google::protobuf::int32 value);

  // required int32 magicdefence = 21;
  inline bool has_magicdefence() const;
  inline void clear_magicdefence();
  static const int kMagicdefenceFieldNumber = 21;
  inline ::google::protobuf::int32 magicdefence() const;
  inline void set_magicdefence(::google::protobuf::int32 value);

  // required int32 hitrate = 22;
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitrateFieldNumber = 22;
  inline ::google::protobuf::int32 hitrate() const;
  inline void set_hitrate(::google::protobuf::int32 value);

  // required int32 avoidrate = 23;
  inline bool has_avoidrate() const;
  inline void clear_avoidrate();
  static const int kAvoidrateFieldNumber = 23;
  inline ::google::protobuf::int32 avoidrate() const;
  inline void set_avoidrate(::google::protobuf::int32 value);

  // required int32 baselucky = 24;
  inline bool has_baselucky() const;
  inline void clear_baselucky();
  static const int kBaseluckyFieldNumber = 24;
  inline ::google::protobuf::int32 baselucky() const;
  inline void set_baselucky(::google::protobuf::int32 value);

  // required int32 crackdownrate = 25;
  inline bool has_crackdownrate() const;
  inline void clear_crackdownrate();
  static const int kCrackdownrateFieldNumber = 25;
  inline ::google::protobuf::int32 crackdownrate() const;
  inline void set_crackdownrate(::google::protobuf::int32 value);

  // required int32 baserte = 26;
  inline bool has_baserte() const;
  inline void clear_baserte();
  static const int kBaserteFieldNumber = 26;
  inline ::google::protobuf::int32 baserte() const;
  inline void set_baserte(::google::protobuf::int32 value);

  // required int32 movespeed = 27;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 27;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_BattleInfo)
 private:
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_forcemax();
  inline void clear_has_forcemax();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_cleverpower();
  inline void clear_has_cleverpower();
  inline void set_has_cleverair();
  inline void clear_has_cleverair();
  inline void set_has_physicalpower();
  inline void clear_has_physicalpower();
  inline void set_has_patience();
  inline void clear_has_patience();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_pkcount();
  inline void clear_has_pkcount();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_powermax();
  inline void clear_has_powermax();
  inline void set_has_phyattack();
  inline void clear_has_phyattack();
  inline void set_has_phyattackmax();
  inline void clear_has_phyattackmax();
  inline void set_has_phydefence();
  inline void clear_has_phydefence();
  inline void set_has_magicattack();
  inline void clear_has_magicattack();
  inline void set_has_magicattackmax();
  inline void clear_has_magicattackmax();
  inline void set_has_magicdefence();
  inline void clear_has_magicdefence();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_avoidrate();
  inline void clear_has_avoidrate();
  inline void set_has_baselucky();
  inline void clear_has_baselucky();
  inline void set_has_crackdownrate();
  inline void clear_has_crackdownrate();
  inline void set_has_baserte();
  inline void clear_has_baserte();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 forcemax_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 cleverpower_;
  ::google::protobuf::int32 cleverair_;
  ::google::protobuf::int32 physicalpower_;
  ::google::protobuf::int32 patience_;
  ::google::protobuf::int32 agility_;
  ::google::protobuf::int32 pkcount_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 powermax_;
  ::google::protobuf::int32 phyattack_;
  ::google::protobuf::int32 phyattackmax_;
  ::google::protobuf::int32 phydefence_;
  ::google::protobuf::int32 magicattack_;
  ::google::protobuf::int32 magicattackmax_;
  ::google::protobuf::int32 magicdefence_;
  ::google::protobuf::int32 hitrate_;
  ::google::protobuf::int32 avoidrate_;
  ::google::protobuf::int32 baselucky_;
  ::google::protobuf::int32 crackdownrate_;
  ::google::protobuf::int32 baserte_;
  ::google::protobuf::int32 movespeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_BattleInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_DanLuInfo : public ::google::protobuf::Message {
 public:
  Admin_DanLuInfo();
  virtual ~Admin_DanLuInfo();

  Admin_DanLuInfo(const Admin_DanLuInfo& from);

  inline Admin_DanLuInfo& operator=(const Admin_DanLuInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_DanLuInfo& default_instance();

  void Swap(Admin_DanLuInfo* other);

  // implements Message ----------------------------------------------

  Admin_DanLuInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_DanLuInfo& from);
  void MergeFrom(const Admin_DanLuInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 danluId = 1;
  inline bool has_danluid() const;
  inline void clear_danluid();
  static const int kDanluIdFieldNumber = 1;
  inline ::google::protobuf::int32 danluid() const;
  inline void set_danluid(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_DanLuInfo)
 private:
  inline void set_has_danluid();
  inline void clear_has_danluid();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 danluid_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_DanLuInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_MagicWeapon : public ::google::protobuf::Message {
 public:
  Admin_MagicWeapon();
  virtual ~Admin_MagicWeapon();

  Admin_MagicWeapon(const Admin_MagicWeapon& from);

  inline Admin_MagicWeapon& operator=(const Admin_MagicWeapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_MagicWeapon& default_instance();

  void Swap(Admin_MagicWeapon* other);

  // implements Message ----------------------------------------------

  Admin_MagicWeapon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_MagicWeapon& from);
  void MergeFrom(const Admin_MagicWeapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // repeated int32 skillid = 3;
  inline int skillid_size() const;
  inline void clear_skillid();
  static const int kSkillidFieldNumber = 3;
  inline ::google::protobuf::int32 skillid(int index) const;
  inline void set_skillid(int index, ::google::protobuf::int32 value);
  inline void add_skillid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skillid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skillid();

  // optional int64 advancetime = 4;
  inline bool has_advancetime() const;
  inline void clear_advancetime();
  static const int kAdvancetimeFieldNumber = 4;
  inline ::google::protobuf::int64 advancetime() const;
  inline void set_advancetime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_MagicWeapon)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_advancetime();
  inline void clear_has_advancetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skillid_;
  ::google::protobuf::int64 advancetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_MagicWeapon* default_instance_;
};
// -------------------------------------------------------------------

class Admin_HorseInfo : public ::google::protobuf::Message {
 public:
  Admin_HorseInfo();
  virtual ~Admin_HorseInfo();

  Admin_HorseInfo(const Admin_HorseInfo& from);

  inline Admin_HorseInfo& operator=(const Admin_HorseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_HorseInfo& default_instance();

  void Swap(Admin_HorseInfo* other);

  // implements Message ----------------------------------------------

  Admin_HorseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_HorseInfo& from);
  void MergeFrom(const Admin_HorseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  inline ::google::protobuf::int32 mid() const;
  inline void set_mid(::google::protobuf::int32 value);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional bool isauto = 4;
  inline bool has_isauto() const;
  inline void clear_isauto();
  static const int kIsautoFieldNumber = 4;
  inline bool isauto() const;
  inline void set_isauto(bool value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_HorseInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_isauto();
  inline void clear_has_isauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 mid_;
  ::google::protobuf::int32 exp_;
  bool isauto_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_HorseInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RankingInfo : public ::google::protobuf::Message {
 public:
  Admin_RankingInfo();
  virtual ~Admin_RankingInfo();

  Admin_RankingInfo(const Admin_RankingInfo& from);

  inline Admin_RankingInfo& operator=(const Admin_RankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RankingInfo& default_instance();

  void Swap(Admin_RankingInfo* other);

  // implements Message ----------------------------------------------

  Admin_RankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RankingInfo& from);
  void MergeFrom(const Admin_RankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional bool onlineFlag = 2;
  inline bool has_onlineflag() const;
  inline void clear_onlineflag();
  static const int kOnlineFlagFieldNumber = 2;
  inline bool onlineflag() const;
  inline void set_onlineflag(bool value);

  // repeated int32 rankArry = 3;
  inline int rankarry_size() const;
  inline void clear_rankarry();
  static const int kRankArryFieldNumber = 3;
  inline ::google::protobuf::int32 rankarry(int index) const;
  inline void set_rankarry(int index, ::google::protobuf::int32 value);
  inline void add_rankarry(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      rankarry() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_rankarry();

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_RankingInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_onlineflag();
  inline void clear_has_onlineflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  bool onlineflag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > rankarry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_RankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_OutPutLinePlayerInfo : public ::google::protobuf::Message {
 public:
  Admin_OutPutLinePlayerInfo();
  virtual ~Admin_OutPutLinePlayerInfo();

  Admin_OutPutLinePlayerInfo(const Admin_OutPutLinePlayerInfo& from);

  inline Admin_OutPutLinePlayerInfo& operator=(const Admin_OutPutLinePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_OutPutLinePlayerInfo& default_instance();

  void Swap(Admin_OutPutLinePlayerInfo* other);

  // implements Message ----------------------------------------------

  Admin_OutPutLinePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_OutPutLinePlayerInfo& from);
  void MergeFrom(const Admin_OutPutLinePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool accountState = 4;
  inline bool has_accountstate() const;
  inline void clear_accountstate();
  static const int kAccountStateFieldNumber = 4;
  inline bool accountstate() const;
  inline void set_accountstate(bool value);

  // optional bool talkingState = 5;
  inline bool has_talkingstate() const;
  inline void clear_talkingstate();
  static const int kTalkingStateFieldNumber = 5;
  inline bool talkingstate() const;
  inline void set_talkingstate(bool value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_OutPutLinePlayerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_accountstate();
  inline void clear_has_accountstate();
  inline void set_has_talkingstate();
  inline void clear_has_talkingstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 ret_;
  bool accountstate_;
  bool talkingstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_OutPutLinePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_ReqRoleInfoByOpenID : public ::google::protobuf::Message {
 public:
  Admin_ReqRoleInfoByOpenID();
  virtual ~Admin_ReqRoleInfoByOpenID();

  Admin_ReqRoleInfoByOpenID(const Admin_ReqRoleInfoByOpenID& from);

  inline Admin_ReqRoleInfoByOpenID& operator=(const Admin_ReqRoleInfoByOpenID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_ReqRoleInfoByOpenID& default_instance();

  void Swap(Admin_ReqRoleInfoByOpenID* other);

  // implements Message ----------------------------------------------

  Admin_ReqRoleInfoByOpenID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_ReqRoleInfoByOpenID& from);
  void MergeFrom(const Admin_ReqRoleInfoByOpenID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openID = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIDFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_ReqRoleInfoByOpenID)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_ReqRoleInfoByOpenID* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RoleInfoByOpenID : public ::google::protobuf::Message {
 public:
  Admin_RoleInfoByOpenID();
  virtual ~Admin_RoleInfoByOpenID();

  Admin_RoleInfoByOpenID(const Admin_RoleInfoByOpenID& from);

  inline Admin_RoleInfoByOpenID& operator=(const Admin_RoleInfoByOpenID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RoleInfoByOpenID& default_instance();

  void Swap(Admin_RoleInfoByOpenID* other);

  // implements Message ----------------------------------------------

  Admin_RoleInfoByOpenID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RoleInfoByOpenID& from);
  void MergeFrom(const Admin_RoleInfoByOpenID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string charName = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharNameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 lv = 3;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 3;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 serverID = 4;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 4;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional int64 createTime = 5;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::int64 createtime() const;
  inline void set_createtime(::google::protobuf::int64 value);

  // optional int32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int64 lastlogin = 7;
  inline bool has_lastlogin() const;
  inline void clear_lastlogin();
  static const int kLastloginFieldNumber = 7;
  inline ::google::protobuf::int64 lastlogin() const;
  inline void set_lastlogin(::google::protobuf::int64 value);

  // optional int64 loginlong = 8;
  inline bool has_loginlong() const;
  inline void clear_loginlong();
  static const int kLoginlongFieldNumber = 8;
  inline ::google::protobuf::int64 loginlong() const;
  inline void set_loginlong(::google::protobuf::int64 value);

  // optional int32 group = 9;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 9;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int32 occupation = 10;
  inline bool has_occupation() const;
  inline void clear_occupation();
  static const int kOccupationFieldNumber = 10;
  inline ::google::protobuf::int32 occupation() const;
  inline void set_occupation(::google::protobuf::int32 value);

  // optional int32 isvalid = 11;
  inline bool has_isvalid() const;
  inline void clear_isvalid();
  static const int kIsvalidFieldNumber = 11;
  inline ::google::protobuf::int32 isvalid() const;
  inline void set_isvalid(::google::protobuf::int32 value);

  // optional int64 exp = 12;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 12;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional string openid = 13;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 13;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_RoleInfoByOpenID)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_lastlogin();
  inline void clear_has_lastlogin();
  inline void set_has_loginlong();
  inline void clear_has_loginlong();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_occupation();
  inline void clear_has_occupation();
  inline void set_has_isvalid();
  inline void clear_has_isvalid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int64 createtime_;
  ::google::protobuf::int64 lastlogin_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int64 loginlong_;
  ::google::protobuf::int32 occupation_;
  ::google::protobuf::int32 isvalid_;
  ::google::protobuf::int64 exp_;
  ::std::string* openid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_RoleInfoByOpenID* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RetRoleInfoByOpenID : public ::google::protobuf::Message {
 public:
  Admin_RetRoleInfoByOpenID();
  virtual ~Admin_RetRoleInfoByOpenID();

  Admin_RetRoleInfoByOpenID(const Admin_RetRoleInfoByOpenID& from);

  inline Admin_RetRoleInfoByOpenID& operator=(const Admin_RetRoleInfoByOpenID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RetRoleInfoByOpenID& default_instance();

  void Swap(Admin_RetRoleInfoByOpenID* other);

  // implements Message ----------------------------------------------

  Admin_RetRoleInfoByOpenID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RetRoleInfoByOpenID& from);
  void MergeFrom(const Admin_RetRoleInfoByOpenID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .PlayerInfo.Admin_RoleInfoByOpenID roleInfoList = 2;
  inline int roleinfolist_size() const;
  inline void clear_roleinfolist();
  static const int kRoleInfoListFieldNumber = 2;
  inline const ::PlayerInfo::Admin_RoleInfoByOpenID& roleinfolist(int index) const;
  inline ::PlayerInfo::Admin_RoleInfoByOpenID* mutable_roleinfolist(int index);
  inline ::PlayerInfo::Admin_RoleInfoByOpenID* add_roleinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::Admin_RoleInfoByOpenID >&
      roleinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::Admin_RoleInfoByOpenID >*
      mutable_roleinfolist();

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_RetRoleInfoByOpenID)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::Admin_RoleInfoByOpenID > roleinfolist_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_RetRoleInfoByOpenID* default_instance_;
};
// -------------------------------------------------------------------

class Admin_ReqRoleInfoByOpenIDQzoneID : public ::google::protobuf::Message {
 public:
  Admin_ReqRoleInfoByOpenIDQzoneID();
  virtual ~Admin_ReqRoleInfoByOpenIDQzoneID();

  Admin_ReqRoleInfoByOpenIDQzoneID(const Admin_ReqRoleInfoByOpenIDQzoneID& from);

  inline Admin_ReqRoleInfoByOpenIDQzoneID& operator=(const Admin_ReqRoleInfoByOpenIDQzoneID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_ReqRoleInfoByOpenIDQzoneID& default_instance();

  void Swap(Admin_ReqRoleInfoByOpenIDQzoneID* other);

  // implements Message ----------------------------------------------

  Admin_ReqRoleInfoByOpenIDQzoneID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_ReqRoleInfoByOpenIDQzoneID& from);
  void MergeFrom(const Admin_ReqRoleInfoByOpenIDQzoneID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openID = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIDFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required int32 qzoneID = 2;
  inline bool has_qzoneid() const;
  inline void clear_qzoneid();
  static const int kQzoneIDFieldNumber = 2;
  inline ::google::protobuf::int32 qzoneid() const;
  inline void set_qzoneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_ReqRoleInfoByOpenIDQzoneID)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_qzoneid();
  inline void clear_has_qzoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::google::protobuf::int32 qzoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_ReqRoleInfoByOpenIDQzoneID* default_instance_;
};
// -------------------------------------------------------------------

class Admin_ReqContainerInfo : public ::google::protobuf::Message {
 public:
  Admin_ReqContainerInfo();
  virtual ~Admin_ReqContainerInfo();

  Admin_ReqContainerInfo(const Admin_ReqContainerInfo& from);

  inline Admin_ReqContainerInfo& operator=(const Admin_ReqContainerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_ReqContainerInfo& default_instance();

  void Swap(Admin_ReqContainerInfo* other);

  // implements Message ----------------------------------------------

  Admin_ReqContainerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_ReqContainerInfo& from);
  void MergeFrom(const Admin_ReqContainerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_ReqContainerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_ReqContainerInfo* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RetContainerInfo : public ::google::protobuf::Message {
 public:
  Admin_RetContainerInfo();
  virtual ~Admin_RetContainerInfo();

  Admin_RetContainerInfo(const Admin_RetContainerInfo& from);

  inline Admin_RetContainerInfo& operator=(const Admin_RetContainerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RetContainerInfo& default_instance();

  void Swap(Admin_RetContainerInfo* other);

  // implements Message ----------------------------------------------

  Admin_RetContainerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RetContainerInfo& from);
  void MergeFrom(const Admin_RetContainerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .MS_MailInfo.ClientItemInfo items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::MS_MailInfo::ClientItemInfo& items(int index) const;
  inline ::MS_MailInfo::ClientItemInfo* mutable_items(int index);
  inline ::MS_MailInfo::ClientItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::MS_MailInfo::ClientItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::MS_MailInfo::ClientItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:PlayerInfo.Admin_RetContainerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::MS_MailInfo::ClientItemInfo > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto();

  void InitAsDefaultInstance();
  static Admin_RetContainerInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// WantPlayerInfo

// optional int64 charid = 1;
inline bool WantPlayerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WantPlayerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WantPlayerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WantPlayerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 WantPlayerInfo::charid() const {
  return charid_;
}
inline void WantPlayerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string charname = 2;
inline bool WantPlayerInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WantPlayerInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WantPlayerInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WantPlayerInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& WantPlayerInfo::charname() const {
  return *charname_;
}
inline void WantPlayerInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void WantPlayerInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void WantPlayerInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WantPlayerInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* WantPlayerInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WantPlayerInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdminWantPlayerInfo

// required int32 ret = 1;
inline bool AdminWantPlayerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdminWantPlayerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdminWantPlayerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdminWantPlayerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AdminWantPlayerInfo::ret() const {
  return ret_;
}
inline void AdminWantPlayerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .PlayerInfo.Admin_BaseInfo baseInfo = 2;
inline bool AdminWantPlayerInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdminWantPlayerInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdminWantPlayerInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdminWantPlayerInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::PlayerInfo::Admin_BaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::PlayerInfo::Admin_BaseInfo& AdminWantPlayerInfo::baseinfo() const {
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::PlayerInfo::Admin_BaseInfo* AdminWantPlayerInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::PlayerInfo::Admin_BaseInfo;
  return baseinfo_;
}
inline ::PlayerInfo::Admin_BaseInfo* AdminWantPlayerInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::PlayerInfo::Admin_BaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void AdminWantPlayerInfo::set_allocated_baseinfo(::PlayerInfo::Admin_BaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
}

// optional .PlayerInfo.Admin_BattleInfo battleInfo = 3;
inline bool AdminWantPlayerInfo::has_battleinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdminWantPlayerInfo::set_has_battleinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdminWantPlayerInfo::clear_has_battleinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdminWantPlayerInfo::clear_battleinfo() {
  if (battleinfo_ != NULL) battleinfo_->::PlayerInfo::Admin_BattleInfo::Clear();
  clear_has_battleinfo();
}
inline const ::PlayerInfo::Admin_BattleInfo& AdminWantPlayerInfo::battleinfo() const {
  return battleinfo_ != NULL ? *battleinfo_ : *default_instance_->battleinfo_;
}
inline ::PlayerInfo::Admin_BattleInfo* AdminWantPlayerInfo::mutable_battleinfo() {
  set_has_battleinfo();
  if (battleinfo_ == NULL) battleinfo_ = new ::PlayerInfo::Admin_BattleInfo;
  return battleinfo_;
}
inline ::PlayerInfo::Admin_BattleInfo* AdminWantPlayerInfo::release_battleinfo() {
  clear_has_battleinfo();
  ::PlayerInfo::Admin_BattleInfo* temp = battleinfo_;
  battleinfo_ = NULL;
  return temp;
}
inline void AdminWantPlayerInfo::set_allocated_battleinfo(::PlayerInfo::Admin_BattleInfo* battleinfo) {
  delete battleinfo_;
  battleinfo_ = battleinfo;
  if (battleinfo) {
    set_has_battleinfo();
  } else {
    clear_has_battleinfo();
  }
}

// optional .PlayerInfo.Admin_DanLuInfo danluInfo = 4;
inline bool AdminWantPlayerInfo::has_danluinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdminWantPlayerInfo::set_has_danluinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdminWantPlayerInfo::clear_has_danluinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdminWantPlayerInfo::clear_danluinfo() {
  if (danluinfo_ != NULL) danluinfo_->::PlayerInfo::Admin_DanLuInfo::Clear();
  clear_has_danluinfo();
}
inline const ::PlayerInfo::Admin_DanLuInfo& AdminWantPlayerInfo::danluinfo() const {
  return danluinfo_ != NULL ? *danluinfo_ : *default_instance_->danluinfo_;
}
inline ::PlayerInfo::Admin_DanLuInfo* AdminWantPlayerInfo::mutable_danluinfo() {
  set_has_danluinfo();
  if (danluinfo_ == NULL) danluinfo_ = new ::PlayerInfo::Admin_DanLuInfo;
  return danluinfo_;
}
inline ::PlayerInfo::Admin_DanLuInfo* AdminWantPlayerInfo::release_danluinfo() {
  clear_has_danluinfo();
  ::PlayerInfo::Admin_DanLuInfo* temp = danluinfo_;
  danluinfo_ = NULL;
  return temp;
}
inline void AdminWantPlayerInfo::set_allocated_danluinfo(::PlayerInfo::Admin_DanLuInfo* danluinfo) {
  delete danluinfo_;
  danluinfo_ = danluinfo;
  if (danluinfo) {
    set_has_danluinfo();
  } else {
    clear_has_danluinfo();
  }
}

// optional .PlayerInfo.Admin_MagicWeapon magicInfo = 5;
inline bool AdminWantPlayerInfo::has_magicinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdminWantPlayerInfo::set_has_magicinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdminWantPlayerInfo::clear_has_magicinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdminWantPlayerInfo::clear_magicinfo() {
  if (magicinfo_ != NULL) magicinfo_->::PlayerInfo::Admin_MagicWeapon::Clear();
  clear_has_magicinfo();
}
inline const ::PlayerInfo::Admin_MagicWeapon& AdminWantPlayerInfo::magicinfo() const {
  return magicinfo_ != NULL ? *magicinfo_ : *default_instance_->magicinfo_;
}
inline ::PlayerInfo::Admin_MagicWeapon* AdminWantPlayerInfo::mutable_magicinfo() {
  set_has_magicinfo();
  if (magicinfo_ == NULL) magicinfo_ = new ::PlayerInfo::Admin_MagicWeapon;
  return magicinfo_;
}
inline ::PlayerInfo::Admin_MagicWeapon* AdminWantPlayerInfo::release_magicinfo() {
  clear_has_magicinfo();
  ::PlayerInfo::Admin_MagicWeapon* temp = magicinfo_;
  magicinfo_ = NULL;
  return temp;
}
inline void AdminWantPlayerInfo::set_allocated_magicinfo(::PlayerInfo::Admin_MagicWeapon* magicinfo) {
  delete magicinfo_;
  magicinfo_ = magicinfo;
  if (magicinfo) {
    set_has_magicinfo();
  } else {
    clear_has_magicinfo();
  }
}

// optional .PlayerInfo.Admin_HorseInfo horseInfo = 6;
inline bool AdminWantPlayerInfo::has_horseinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdminWantPlayerInfo::set_has_horseinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdminWantPlayerInfo::clear_has_horseinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdminWantPlayerInfo::clear_horseinfo() {
  if (horseinfo_ != NULL) horseinfo_->::PlayerInfo::Admin_HorseInfo::Clear();
  clear_has_horseinfo();
}
inline const ::PlayerInfo::Admin_HorseInfo& AdminWantPlayerInfo::horseinfo() const {
  return horseinfo_ != NULL ? *horseinfo_ : *default_instance_->horseinfo_;
}
inline ::PlayerInfo::Admin_HorseInfo* AdminWantPlayerInfo::mutable_horseinfo() {
  set_has_horseinfo();
  if (horseinfo_ == NULL) horseinfo_ = new ::PlayerInfo::Admin_HorseInfo;
  return horseinfo_;
}
inline ::PlayerInfo::Admin_HorseInfo* AdminWantPlayerInfo::release_horseinfo() {
  clear_has_horseinfo();
  ::PlayerInfo::Admin_HorseInfo* temp = horseinfo_;
  horseinfo_ = NULL;
  return temp;
}
inline void AdminWantPlayerInfo::set_allocated_horseinfo(::PlayerInfo::Admin_HorseInfo* horseinfo) {
  delete horseinfo_;
  horseinfo_ = horseinfo;
  if (horseinfo) {
    set_has_horseinfo();
  } else {
    clear_has_horseinfo();
  }
}

// optional int32 fight = 7;
inline bool AdminWantPlayerInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdminWantPlayerInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdminWantPlayerInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdminWantPlayerInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 AdminWantPlayerInfo::fight() const {
  return fight_;
}
inline void AdminWantPlayerInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// Admin_BaseInfo

// required int64 charid = 1;
inline bool Admin_BaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_BaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_BaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_BaseInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_BaseInfo::charid() const {
  return charid_;
}
inline void Admin_BaseInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string charname = 2;
inline bool Admin_BaseInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_BaseInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_BaseInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_BaseInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Admin_BaseInfo::charname() const {
  return *charname_;
}
inline void Admin_BaseInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Admin_BaseInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Admin_BaseInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BaseInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Admin_BaseInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_BaseInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 exp = 3;
inline bool Admin_BaseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_BaseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_BaseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_BaseInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 Admin_BaseInfo::exp() const {
  return exp_;
}
inline void Admin_BaseInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 level = 4;
inline bool Admin_BaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_BaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_BaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_BaseInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Admin_BaseInfo::level() const {
  return level_;
}
inline void Admin_BaseInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 money = 5;
inline bool Admin_BaseInfo::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_BaseInfo::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_BaseInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_BaseInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 Admin_BaseInfo::money() const {
  return money_;
}
inline void Admin_BaseInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// required int32 golden = 6;
inline bool Admin_BaseInfo::has_golden() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_BaseInfo::set_has_golden() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_BaseInfo::clear_has_golden() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_BaseInfo::clear_golden() {
  golden_ = 0;
  clear_has_golden();
}
inline ::google::protobuf::int32 Admin_BaseInfo::golden() const {
  return golden_;
}
inline void Admin_BaseInfo::set_golden(::google::protobuf::int32 value) {
  set_has_golden();
  golden_ = value;
}

// required int32 bindgolden = 7;
inline bool Admin_BaseInfo::has_bindgolden() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Admin_BaseInfo::set_has_bindgolden() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Admin_BaseInfo::clear_has_bindgolden() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Admin_BaseInfo::clear_bindgolden() {
  bindgolden_ = 0;
  clear_has_bindgolden();
}
inline ::google::protobuf::int32 Admin_BaseInfo::bindgolden() const {
  return bindgolden_;
}
inline void Admin_BaseInfo::set_bindgolden(::google::protobuf::int32 value) {
  set_has_bindgolden();
  bindgolden_ = value;
}

// required int64 deadtime = 8;
inline bool Admin_BaseInfo::has_deadtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Admin_BaseInfo::set_has_deadtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Admin_BaseInfo::clear_has_deadtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Admin_BaseInfo::clear_deadtime() {
  deadtime_ = GOOGLE_LONGLONG(0);
  clear_has_deadtime();
}
inline ::google::protobuf::int64 Admin_BaseInfo::deadtime() const {
  return deadtime_;
}
inline void Admin_BaseInfo::set_deadtime(::google::protobuf::int64 value) {
  set_has_deadtime();
  deadtime_ = value;
}

// required bool sex = 9;
inline bool Admin_BaseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Admin_BaseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Admin_BaseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Admin_BaseInfo::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
inline bool Admin_BaseInfo::sex() const {
  return sex_;
}
inline void Admin_BaseInfo::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
}

// required int32 profession = 10;
inline bool Admin_BaseInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Admin_BaseInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Admin_BaseInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Admin_BaseInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 Admin_BaseInfo::profession() const {
  return profession_;
}
inline void Admin_BaseInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 xpos = 11;
inline bool Admin_BaseInfo::has_xpos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Admin_BaseInfo::set_has_xpos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Admin_BaseInfo::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Admin_BaseInfo::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 Admin_BaseInfo::xpos() const {
  return xpos_;
}
inline void Admin_BaseInfo::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 12;
inline bool Admin_BaseInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Admin_BaseInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Admin_BaseInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Admin_BaseInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 Admin_BaseInfo::ypos() const {
  return ypos_;
}
inline void Admin_BaseInfo::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required int32 horse = 13;
inline bool Admin_BaseInfo::has_horse() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Admin_BaseInfo::set_has_horse() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Admin_BaseInfo::clear_has_horse() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Admin_BaseInfo::clear_horse() {
  horse_ = 0;
  clear_has_horse();
}
inline ::google::protobuf::int32 Admin_BaseInfo::horse() const {
  return horse_;
}
inline void Admin_BaseInfo::set_horse(::google::protobuf::int32 value) {
  set_has_horse();
  horse_ = value;
}

// required int64 mapid = 14;
inline bool Admin_BaseInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Admin_BaseInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Admin_BaseInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Admin_BaseInfo::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 Admin_BaseInfo::mapid() const {
  return mapid_;
}
inline void Admin_BaseInfo::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// required int32 country = 15;
inline bool Admin_BaseInfo::has_country() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Admin_BaseInfo::set_has_country() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Admin_BaseInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Admin_BaseInfo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 Admin_BaseInfo::country() const {
  return country_;
}
inline void Admin_BaseInfo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// required int32 charhead = 16;
inline bool Admin_BaseInfo::has_charhead() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Admin_BaseInfo::set_has_charhead() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Admin_BaseInfo::clear_has_charhead() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Admin_BaseInfo::clear_charhead() {
  charhead_ = 0;
  clear_has_charhead();
}
inline ::google::protobuf::int32 Admin_BaseInfo::charhead() const {
  return charhead_;
}
inline void Admin_BaseInfo::set_charhead(::google::protobuf::int32 value) {
  set_has_charhead();
  charhead_ = value;
}

// required int32 facontribution = 17;
inline bool Admin_BaseInfo::has_facontribution() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Admin_BaseInfo::set_has_facontribution() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Admin_BaseInfo::clear_has_facontribution() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Admin_BaseInfo::clear_facontribution() {
  facontribution_ = 0;
  clear_has_facontribution();
}
inline ::google::protobuf::int32 Admin_BaseInfo::facontribution() const {
  return facontribution_;
}
inline void Admin_BaseInfo::set_facontribution(::google::protobuf::int32 value) {
  set_has_facontribution();
  facontribution_ = value;
}

// required int32 expration = 18;
inline bool Admin_BaseInfo::has_expration() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Admin_BaseInfo::set_has_expration() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Admin_BaseInfo::clear_has_expration() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Admin_BaseInfo::clear_expration() {
  expration_ = 0;
  clear_has_expration();
}
inline ::google::protobuf::int32 Admin_BaseInfo::expration() const {
  return expration_;
}
inline void Admin_BaseInfo::set_expration(::google::protobuf::int32 value) {
  set_has_expration();
  expration_ = value;
}

// required int32 faction = 19;
inline bool Admin_BaseInfo::has_faction() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Admin_BaseInfo::set_has_faction() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Admin_BaseInfo::clear_has_faction() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Admin_BaseInfo::clear_faction() {
  faction_ = 0;
  clear_has_faction();
}
inline ::google::protobuf::int32 Admin_BaseInfo::faction() const {
  return faction_;
}
inline void Admin_BaseInfo::set_faction(::google::protobuf::int32 value) {
  set_has_faction();
  faction_ = value;
}

// required int32 fajob = 20;
inline bool Admin_BaseInfo::has_fajob() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Admin_BaseInfo::set_has_fajob() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Admin_BaseInfo::clear_has_fajob() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Admin_BaseInfo::clear_fajob() {
  fajob_ = 0;
  clear_has_fajob();
}
inline ::google::protobuf::int32 Admin_BaseInfo::fajob() const {
  return fajob_;
}
inline void Admin_BaseInfo::set_fajob(::google::protobuf::int32 value) {
  set_has_fajob();
  fajob_ = value;
}

// required int64 mate = 21;
inline bool Admin_BaseInfo::has_mate() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Admin_BaseInfo::set_has_mate() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Admin_BaseInfo::clear_has_mate() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Admin_BaseInfo::clear_mate() {
  mate_ = GOOGLE_LONGLONG(0);
  clear_has_mate();
}
inline ::google::protobuf::int64 Admin_BaseInfo::mate() const {
  return mate_;
}
inline void Admin_BaseInfo::set_mate(::google::protobuf::int64 value) {
  set_has_mate();
  mate_ = value;
}

// required int32 countryjob = 22;
inline bool Admin_BaseInfo::has_countryjob() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Admin_BaseInfo::set_has_countryjob() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Admin_BaseInfo::clear_has_countryjob() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Admin_BaseInfo::clear_countryjob() {
  countryjob_ = 0;
  clear_has_countryjob();
}
inline ::google::protobuf::int32 Admin_BaseInfo::countryjob() const {
  return countryjob_;
}
inline void Admin_BaseInfo::set_countryjob(::google::protobuf::int32 value) {
  set_has_countryjob();
  countryjob_ = value;
}

// required int32 battlecontri = 23;
inline bool Admin_BaseInfo::has_battlecontri() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Admin_BaseInfo::set_has_battlecontri() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Admin_BaseInfo::clear_has_battlecontri() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Admin_BaseInfo::clear_battlecontri() {
  battlecontri_ = 0;
  clear_has_battlecontri();
}
inline ::google::protobuf::int32 Admin_BaseInfo::battlecontri() const {
  return battlecontri_;
}
inline void Admin_BaseInfo::set_battlecontri(::google::protobuf::int32 value) {
  set_has_battlecontri();
  battlecontri_ = value;
}

// required int32 armyjob = 24;
inline bool Admin_BaseInfo::has_armyjob() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Admin_BaseInfo::set_has_armyjob() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Admin_BaseInfo::clear_has_armyjob() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Admin_BaseInfo::clear_armyjob() {
  armyjob_ = 0;
  clear_has_armyjob();
}
inline ::google::protobuf::int32 Admin_BaseInfo::armyjob() const {
  return armyjob_;
}
inline void Admin_BaseInfo::set_armyjob(::google::protobuf::int32 value) {
  set_has_armyjob();
  armyjob_ = value;
}

// optional int32 countrycontri = 25;
inline bool Admin_BaseInfo::has_countrycontri() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Admin_BaseInfo::set_has_countrycontri() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Admin_BaseInfo::clear_has_countrycontri() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Admin_BaseInfo::clear_countrycontri() {
  countrycontri_ = 0;
  clear_has_countrycontri();
}
inline ::google::protobuf::int32 Admin_BaseInfo::countrycontri() const {
  return countrycontri_;
}
inline void Admin_BaseInfo::set_countrycontri(::google::protobuf::int32 value) {
  set_has_countrycontri();
  countrycontri_ = value;
}

// optional int32 titleid = 26;
inline bool Admin_BaseInfo::has_titleid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Admin_BaseInfo::set_has_titleid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Admin_BaseInfo::clear_has_titleid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Admin_BaseInfo::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 Admin_BaseInfo::titleid() const {
  return titleid_;
}
inline void Admin_BaseInfo::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// required int32 accounttype = 27;
inline bool Admin_BaseInfo::has_accounttype() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Admin_BaseInfo::set_has_accounttype() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Admin_BaseInfo::clear_has_accounttype() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Admin_BaseInfo::clear_accounttype() {
  accounttype_ = 0;
  clear_has_accounttype();
}
inline ::google::protobuf::int32 Admin_BaseInfo::accounttype() const {
  return accounttype_;
}
inline void Admin_BaseInfo::set_accounttype(::google::protobuf::int32 value) {
  set_has_accounttype();
  accounttype_ = value;
}

// required string openid = 28;
inline bool Admin_BaseInfo::has_openid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Admin_BaseInfo::set_has_openid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Admin_BaseInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Admin_BaseInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Admin_BaseInfo::openid() const {
  return *openid_;
}
inline void Admin_BaseInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_BaseInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_BaseInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BaseInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Admin_BaseInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_BaseInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 serverid = 29;
inline bool Admin_BaseInfo::has_serverid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Admin_BaseInfo::set_has_serverid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Admin_BaseInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Admin_BaseInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 Admin_BaseInfo::serverid() const {
  return serverid_;
}
inline void Admin_BaseInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required int32 sinvalue = 30;
inline bool Admin_BaseInfo::has_sinvalue() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Admin_BaseInfo::set_has_sinvalue() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Admin_BaseInfo::clear_has_sinvalue() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Admin_BaseInfo::clear_sinvalue() {
  sinvalue_ = 0;
  clear_has_sinvalue();
}
inline ::google::protobuf::int32 Admin_BaseInfo::sinvalue() const {
  return sinvalue_;
}
inline void Admin_BaseInfo::set_sinvalue(::google::protobuf::int32 value) {
  set_has_sinvalue();
  sinvalue_ = value;
}

// required int32 acupoint = 31;
inline bool Admin_BaseInfo::has_acupoint() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Admin_BaseInfo::set_has_acupoint() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Admin_BaseInfo::clear_has_acupoint() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Admin_BaseInfo::clear_acupoint() {
  acupoint_ = 0;
  clear_has_acupoint();
}
inline ::google::protobuf::int32 Admin_BaseInfo::acupoint() const {
  return acupoint_;
}
inline void Admin_BaseInfo::set_acupoint(::google::protobuf::int32 value) {
  set_has_acupoint();
  acupoint_ = value;
}

// required int32 settings = 32;
inline bool Admin_BaseInfo::has_settings() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Admin_BaseInfo::set_has_settings() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Admin_BaseInfo::clear_has_settings() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Admin_BaseInfo::clear_settings() {
  settings_ = 0;
  clear_has_settings();
}
inline ::google::protobuf::int32 Admin_BaseInfo::settings() const {
  return settings_;
}
inline void Admin_BaseInfo::set_settings(::google::protobuf::int32 value) {
  set_has_settings();
  settings_ = value;
}

// required int64 havetodo = 33;
inline bool Admin_BaseInfo::has_havetodo() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Admin_BaseInfo::set_has_havetodo() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Admin_BaseInfo::clear_has_havetodo() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Admin_BaseInfo::clear_havetodo() {
  havetodo_ = GOOGLE_LONGLONG(0);
  clear_has_havetodo();
}
inline ::google::protobuf::int64 Admin_BaseInfo::havetodo() const {
  return havetodo_;
}
inline void Admin_BaseInfo::set_havetodo(::google::protobuf::int64 value) {
  set_has_havetodo();
  havetodo_ = value;
}

// required int32 havetodoaward = 34;
inline bool Admin_BaseInfo::has_havetodoaward() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Admin_BaseInfo::set_has_havetodoaward() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Admin_BaseInfo::clear_has_havetodoaward() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Admin_BaseInfo::clear_havetodoaward() {
  havetodoaward_ = 0;
  clear_has_havetodoaward();
}
inline ::google::protobuf::int32 Admin_BaseInfo::havetodoaward() const {
  return havetodoaward_;
}
inline void Admin_BaseInfo::set_havetodoaward(::google::protobuf::int32 value) {
  set_has_havetodoaward();
  havetodoaward_ = value;
}

// required int32 activites = 35;
inline bool Admin_BaseInfo::has_activites() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Admin_BaseInfo::set_has_activites() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Admin_BaseInfo::clear_has_activites() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Admin_BaseInfo::clear_activites() {
  activites_ = 0;
  clear_has_activites();
}
inline ::google::protobuf::int32 Admin_BaseInfo::activites() const {
  return activites_;
}
inline void Admin_BaseInfo::set_activites(::google::protobuf::int32 value) {
  set_has_activites();
  activites_ = value;
}

// required int32 activitesaward = 36;
inline bool Admin_BaseInfo::has_activitesaward() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Admin_BaseInfo::set_has_activitesaward() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Admin_BaseInfo::clear_has_activitesaward() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Admin_BaseInfo::clear_activitesaward() {
  activitesaward_ = 0;
  clear_has_activitesaward();
}
inline ::google::protobuf::int32 Admin_BaseInfo::activitesaward() const {
  return activitesaward_;
}
inline void Admin_BaseInfo::set_activitesaward(::google::protobuf::int32 value) {
  set_has_activitesaward();
  activitesaward_ = value;
}

// required int64 offlineTime = 37;
inline bool Admin_BaseInfo::has_offlinetime() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Admin_BaseInfo::set_has_offlinetime() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Admin_BaseInfo::clear_has_offlinetime() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Admin_BaseInfo::clear_offlinetime() {
  offlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_offlinetime();
}
inline ::google::protobuf::int64 Admin_BaseInfo::offlinetime() const {
  return offlinetime_;
}
inline void Admin_BaseInfo::set_offlinetime(::google::protobuf::int64 value) {
  set_has_offlinetime();
  offlinetime_ = value;
}

// required int32 onlineReward = 38;
inline bool Admin_BaseInfo::has_onlinereward() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Admin_BaseInfo::set_has_onlinereward() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Admin_BaseInfo::clear_has_onlinereward() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Admin_BaseInfo::clear_onlinereward() {
  onlinereward_ = 0;
  clear_has_onlinereward();
}
inline ::google::protobuf::int32 Admin_BaseInfo::onlinereward() const {
  return onlinereward_;
}
inline void Admin_BaseInfo::set_onlinereward(::google::protobuf::int32 value) {
  set_has_onlinereward();
  onlinereward_ = value;
}

// required int64 onlineTime = 39;
inline bool Admin_BaseInfo::has_onlinetime() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Admin_BaseInfo::set_has_onlinetime() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Admin_BaseInfo::clear_has_onlinetime() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Admin_BaseInfo::clear_onlinetime() {
  onlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_onlinetime();
}
inline ::google::protobuf::int64 Admin_BaseInfo::onlinetime() const {
  return onlinetime_;
}
inline void Admin_BaseInfo::set_onlinetime(::google::protobuf::int64 value) {
  set_has_onlinetime();
  onlinetime_ = value;
}

// required int32 levelReward = 40;
inline bool Admin_BaseInfo::has_levelreward() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Admin_BaseInfo::set_has_levelreward() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Admin_BaseInfo::clear_has_levelreward() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Admin_BaseInfo::clear_levelreward() {
  levelreward_ = 0;
  clear_has_levelreward();
}
inline ::google::protobuf::int32 Admin_BaseInfo::levelreward() const {
  return levelreward_;
}
inline void Admin_BaseInfo::set_levelreward(::google::protobuf::int32 value) {
  set_has_levelreward();
  levelreward_ = value;
}

// required int32 prestige = 41;
inline bool Admin_BaseInfo::has_prestige() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Admin_BaseInfo::set_has_prestige() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Admin_BaseInfo::clear_has_prestige() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Admin_BaseInfo::clear_prestige() {
  prestige_ = 0;
  clear_has_prestige();
}
inline ::google::protobuf::int32 Admin_BaseInfo::prestige() const {
  return prestige_;
}
inline void Admin_BaseInfo::set_prestige(::google::protobuf::int32 value) {
  set_has_prestige();
  prestige_ = value;
}

// required int32 challegeid = 42;
inline bool Admin_BaseInfo::has_challegeid() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Admin_BaseInfo::set_has_challegeid() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Admin_BaseInfo::clear_has_challegeid() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Admin_BaseInfo::clear_challegeid() {
  challegeid_ = 0;
  clear_has_challegeid();
}
inline ::google::protobuf::int32 Admin_BaseInfo::challegeid() const {
  return challegeid_;
}
inline void Admin_BaseInfo::set_challegeid(::google::protobuf::int32 value) {
  set_has_challegeid();
  challegeid_ = value;
}

// required int32 historyReward = 43;
inline bool Admin_BaseInfo::has_historyreward() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Admin_BaseInfo::set_has_historyreward() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Admin_BaseInfo::clear_has_historyreward() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Admin_BaseInfo::clear_historyreward() {
  historyreward_ = 0;
  clear_has_historyreward();
}
inline ::google::protobuf::int32 Admin_BaseInfo::historyreward() const {
  return historyreward_;
}
inline void Admin_BaseInfo::set_historyreward(::google::protobuf::int32 value) {
  set_has_historyreward();
  historyreward_ = value;
}

// required int32 viplv = 44;
inline bool Admin_BaseInfo::has_viplv() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Admin_BaseInfo::set_has_viplv() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Admin_BaseInfo::clear_has_viplv() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Admin_BaseInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 Admin_BaseInfo::viplv() const {
  return viplv_;
}
inline void Admin_BaseInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// required int32 continueanswer = 45;
inline bool Admin_BaseInfo::has_continueanswer() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Admin_BaseInfo::set_has_continueanswer() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Admin_BaseInfo::clear_has_continueanswer() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Admin_BaseInfo::clear_continueanswer() {
  continueanswer_ = 0;
  clear_has_continueanswer();
}
inline ::google::protobuf::int32 Admin_BaseInfo::continueanswer() const {
  return continueanswer_;
}
inline void Admin_BaseInfo::set_continueanswer(::google::protobuf::int32 value) {
  set_has_continueanswer();
  continueanswer_ = value;
}

// required int32 rightanswer = 46;
inline bool Admin_BaseInfo::has_rightanswer() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Admin_BaseInfo::set_has_rightanswer() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Admin_BaseInfo::clear_has_rightanswer() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Admin_BaseInfo::clear_rightanswer() {
  rightanswer_ = 0;
  clear_has_rightanswer();
}
inline ::google::protobuf::int32 Admin_BaseInfo::rightanswer() const {
  return rightanswer_;
}
inline void Admin_BaseInfo::set_rightanswer(::google::protobuf::int32 value) {
  set_has_rightanswer();
  rightanswer_ = value;
}

// required int32 addupgolde = 47;
inline bool Admin_BaseInfo::has_addupgolde() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Admin_BaseInfo::set_has_addupgolde() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Admin_BaseInfo::clear_has_addupgolde() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Admin_BaseInfo::clear_addupgolde() {
  addupgolde_ = 0;
  clear_has_addupgolde();
}
inline ::google::protobuf::int32 Admin_BaseInfo::addupgolde() const {
  return addupgolde_;
}
inline void Admin_BaseInfo::set_addupgolde(::google::protobuf::int32 value) {
  set_has_addupgolde();
  addupgolde_ = value;
}

// optional string clanname = 48;
inline bool Admin_BaseInfo::has_clanname() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Admin_BaseInfo::set_has_clanname() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Admin_BaseInfo::clear_has_clanname() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Admin_BaseInfo::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& Admin_BaseInfo::clanname() const {
  return *clanname_;
}
inline void Admin_BaseInfo::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void Admin_BaseInfo::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void Admin_BaseInfo::set_clanname(const char* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_BaseInfo::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* Admin_BaseInfo::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_BaseInfo::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ranking = 49;
inline bool Admin_BaseInfo::has_ranking() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Admin_BaseInfo::set_has_ranking() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Admin_BaseInfo::clear_has_ranking() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Admin_BaseInfo::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 Admin_BaseInfo::ranking() const {
  return ranking_;
}
inline void Admin_BaseInfo::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// optional int32 awardranking = 50;
inline bool Admin_BaseInfo::has_awardranking() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Admin_BaseInfo::set_has_awardranking() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Admin_BaseInfo::clear_has_awardranking() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Admin_BaseInfo::clear_awardranking() {
  awardranking_ = 0;
  clear_has_awardranking();
}
inline ::google::protobuf::int32 Admin_BaseInfo::awardranking() const {
  return awardranking_;
}
inline void Admin_BaseInfo::set_awardranking(::google::protobuf::int32 value) {
  set_has_awardranking();
  awardranking_ = value;
}

// optional int64 totalOnlineTime = 52;
inline bool Admin_BaseInfo::has_totalonlinetime() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Admin_BaseInfo::set_has_totalonlinetime() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Admin_BaseInfo::clear_has_totalonlinetime() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Admin_BaseInfo::clear_totalonlinetime() {
  totalonlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_totalonlinetime();
}
inline ::google::protobuf::int64 Admin_BaseInfo::totalonlinetime() const {
  return totalonlinetime_;
}
inline void Admin_BaseInfo::set_totalonlinetime(::google::protobuf::int64 value) {
  set_has_totalonlinetime();
  totalonlinetime_ = value;
}

// optional int32 antiAddictionState = 53;
inline bool Admin_BaseInfo::has_antiaddictionstate() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Admin_BaseInfo::set_has_antiaddictionstate() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Admin_BaseInfo::clear_has_antiaddictionstate() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Admin_BaseInfo::clear_antiaddictionstate() {
  antiaddictionstate_ = 0;
  clear_has_antiaddictionstate();
}
inline ::google::protobuf::int32 Admin_BaseInfo::antiaddictionstate() const {
  return antiaddictionstate_;
}
inline void Admin_BaseInfo::set_antiaddictionstate(::google::protobuf::int32 value) {
  set_has_antiaddictionstate();
  antiaddictionstate_ = value;
}

// optional int64 antiAddictionOnLineTime = 54;
inline bool Admin_BaseInfo::has_antiaddictiononlinetime() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Admin_BaseInfo::set_has_antiaddictiononlinetime() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Admin_BaseInfo::clear_has_antiaddictiononlinetime() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Admin_BaseInfo::clear_antiaddictiononlinetime() {
  antiaddictiononlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_antiaddictiononlinetime();
}
inline ::google::protobuf::int64 Admin_BaseInfo::antiaddictiononlinetime() const {
  return antiaddictiononlinetime_;
}
inline void Admin_BaseInfo::set_antiaddictiononlinetime(::google::protobuf::int64 value) {
  set_has_antiaddictiononlinetime();
  antiaddictiononlinetime_ = value;
}

// -------------------------------------------------------------------

// Admin_BattleInfo

// required int32 hp = 1;
inline bool Admin_BattleInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_BattleInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_BattleInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_BattleInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 Admin_BattleInfo::hp() const {
  return hp_;
}
inline void Admin_BattleInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 hpmax = 2;
inline bool Admin_BattleInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_BattleInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_BattleInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_BattleInfo::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 Admin_BattleInfo::hpmax() const {
  return hpmax_;
}
inline void Admin_BattleInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// required int32 mp = 3;
inline bool Admin_BattleInfo::has_mp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_BattleInfo::set_has_mp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_BattleInfo::clear_has_mp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_BattleInfo::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 Admin_BattleInfo::mp() const {
  return mp_;
}
inline void Admin_BattleInfo::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// required int32 mpmax = 4;
inline bool Admin_BattleInfo::has_mpmax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_BattleInfo::set_has_mpmax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_BattleInfo::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_BattleInfo::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 Admin_BattleInfo::mpmax() const {
  return mpmax_;
}
inline void Admin_BattleInfo::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// required int32 force = 5;
inline bool Admin_BattleInfo::has_force() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_BattleInfo::set_has_force() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_BattleInfo::clear_has_force() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_BattleInfo::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 Admin_BattleInfo::force() const {
  return force_;
}
inline void Admin_BattleInfo::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// required int32 forcemax = 6;
inline bool Admin_BattleInfo::has_forcemax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_BattleInfo::set_has_forcemax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_BattleInfo::clear_has_forcemax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_BattleInfo::clear_forcemax() {
  forcemax_ = 0;
  clear_has_forcemax();
}
inline ::google::protobuf::int32 Admin_BattleInfo::forcemax() const {
  return forcemax_;
}
inline void Admin_BattleInfo::set_forcemax(::google::protobuf::int32 value) {
  set_has_forcemax();
  forcemax_ = value;
}

// required int32 strength = 7;
inline bool Admin_BattleInfo::has_strength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Admin_BattleInfo::set_has_strength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Admin_BattleInfo::clear_has_strength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Admin_BattleInfo::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 Admin_BattleInfo::strength() const {
  return strength_;
}
inline void Admin_BattleInfo::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// required int32 cleverpower = 8;
inline bool Admin_BattleInfo::has_cleverpower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Admin_BattleInfo::set_has_cleverpower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Admin_BattleInfo::clear_has_cleverpower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Admin_BattleInfo::clear_cleverpower() {
  cleverpower_ = 0;
  clear_has_cleverpower();
}
inline ::google::protobuf::int32 Admin_BattleInfo::cleverpower() const {
  return cleverpower_;
}
inline void Admin_BattleInfo::set_cleverpower(::google::protobuf::int32 value) {
  set_has_cleverpower();
  cleverpower_ = value;
}

// optional int32 cleverair = 9;
inline bool Admin_BattleInfo::has_cleverair() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Admin_BattleInfo::set_has_cleverair() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Admin_BattleInfo::clear_has_cleverair() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Admin_BattleInfo::clear_cleverair() {
  cleverair_ = 0;
  clear_has_cleverair();
}
inline ::google::protobuf::int32 Admin_BattleInfo::cleverair() const {
  return cleverair_;
}
inline void Admin_BattleInfo::set_cleverair(::google::protobuf::int32 value) {
  set_has_cleverair();
  cleverair_ = value;
}

// required int32 physicalpower = 10;
inline bool Admin_BattleInfo::has_physicalpower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Admin_BattleInfo::set_has_physicalpower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Admin_BattleInfo::clear_has_physicalpower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Admin_BattleInfo::clear_physicalpower() {
  physicalpower_ = 0;
  clear_has_physicalpower();
}
inline ::google::protobuf::int32 Admin_BattleInfo::physicalpower() const {
  return physicalpower_;
}
inline void Admin_BattleInfo::set_physicalpower(::google::protobuf::int32 value) {
  set_has_physicalpower();
  physicalpower_ = value;
}

// required int32 patience = 11;
inline bool Admin_BattleInfo::has_patience() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Admin_BattleInfo::set_has_patience() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Admin_BattleInfo::clear_has_patience() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Admin_BattleInfo::clear_patience() {
  patience_ = 0;
  clear_has_patience();
}
inline ::google::protobuf::int32 Admin_BattleInfo::patience() const {
  return patience_;
}
inline void Admin_BattleInfo::set_patience(::google::protobuf::int32 value) {
  set_has_patience();
  patience_ = value;
}

// required int32 agility = 12;
inline bool Admin_BattleInfo::has_agility() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Admin_BattleInfo::set_has_agility() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Admin_BattleInfo::clear_has_agility() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Admin_BattleInfo::clear_agility() {
  agility_ = 0;
  clear_has_agility();
}
inline ::google::protobuf::int32 Admin_BattleInfo::agility() const {
  return agility_;
}
inline void Admin_BattleInfo::set_agility(::google::protobuf::int32 value) {
  set_has_agility();
  agility_ = value;
}

// required int32 pkcount = 13;
inline bool Admin_BattleInfo::has_pkcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Admin_BattleInfo::set_has_pkcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Admin_BattleInfo::clear_has_pkcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Admin_BattleInfo::clear_pkcount() {
  pkcount_ = 0;
  clear_has_pkcount();
}
inline ::google::protobuf::int32 Admin_BattleInfo::pkcount() const {
  return pkcount_;
}
inline void Admin_BattleInfo::set_pkcount(::google::protobuf::int32 value) {
  set_has_pkcount();
  pkcount_ = value;
}

// optional int32 power = 14;
inline bool Admin_BattleInfo::has_power() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Admin_BattleInfo::set_has_power() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Admin_BattleInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Admin_BattleInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 Admin_BattleInfo::power() const {
  return power_;
}
inline void Admin_BattleInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 powermax = 15;
inline bool Admin_BattleInfo::has_powermax() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Admin_BattleInfo::set_has_powermax() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Admin_BattleInfo::clear_has_powermax() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Admin_BattleInfo::clear_powermax() {
  powermax_ = 0;
  clear_has_powermax();
}
inline ::google::protobuf::int32 Admin_BattleInfo::powermax() const {
  return powermax_;
}
inline void Admin_BattleInfo::set_powermax(::google::protobuf::int32 value) {
  set_has_powermax();
  powermax_ = value;
}

// required int32 phyattack = 16;
inline bool Admin_BattleInfo::has_phyattack() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Admin_BattleInfo::set_has_phyattack() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Admin_BattleInfo::clear_has_phyattack() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Admin_BattleInfo::clear_phyattack() {
  phyattack_ = 0;
  clear_has_phyattack();
}
inline ::google::protobuf::int32 Admin_BattleInfo::phyattack() const {
  return phyattack_;
}
inline void Admin_BattleInfo::set_phyattack(::google::protobuf::int32 value) {
  set_has_phyattack();
  phyattack_ = value;
}

// required int32 phyattackmax = 17;
inline bool Admin_BattleInfo::has_phyattackmax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Admin_BattleInfo::set_has_phyattackmax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Admin_BattleInfo::clear_has_phyattackmax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Admin_BattleInfo::clear_phyattackmax() {
  phyattackmax_ = 0;
  clear_has_phyattackmax();
}
inline ::google::protobuf::int32 Admin_BattleInfo::phyattackmax() const {
  return phyattackmax_;
}
inline void Admin_BattleInfo::set_phyattackmax(::google::protobuf::int32 value) {
  set_has_phyattackmax();
  phyattackmax_ = value;
}

// required int32 phydefence = 18;
inline bool Admin_BattleInfo::has_phydefence() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Admin_BattleInfo::set_has_phydefence() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Admin_BattleInfo::clear_has_phydefence() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Admin_BattleInfo::clear_phydefence() {
  phydefence_ = 0;
  clear_has_phydefence();
}
inline ::google::protobuf::int32 Admin_BattleInfo::phydefence() const {
  return phydefence_;
}
inline void Admin_BattleInfo::set_phydefence(::google::protobuf::int32 value) {
  set_has_phydefence();
  phydefence_ = value;
}

// required int32 magicattack = 19;
inline bool Admin_BattleInfo::has_magicattack() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Admin_BattleInfo::set_has_magicattack() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Admin_BattleInfo::clear_has_magicattack() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Admin_BattleInfo::clear_magicattack() {
  magicattack_ = 0;
  clear_has_magicattack();
}
inline ::google::protobuf::int32 Admin_BattleInfo::magicattack() const {
  return magicattack_;
}
inline void Admin_BattleInfo::set_magicattack(::google::protobuf::int32 value) {
  set_has_magicattack();
  magicattack_ = value;
}

// required int32 magicattackmax = 20;
inline bool Admin_BattleInfo::has_magicattackmax() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Admin_BattleInfo::set_has_magicattackmax() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Admin_BattleInfo::clear_has_magicattackmax() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Admin_BattleInfo::clear_magicattackmax() {
  magicattackmax_ = 0;
  clear_has_magicattackmax();
}
inline ::google::protobuf::int32 Admin_BattleInfo::magicattackmax() const {
  return magicattackmax_;
}
inline void Admin_BattleInfo::set_magicattackmax(::google::protobuf::int32 value) {
  set_has_magicattackmax();
  magicattackmax_ = value;
}

// required int32 magicdefence = 21;
inline bool Admin_BattleInfo::has_magicdefence() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Admin_BattleInfo::set_has_magicdefence() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Admin_BattleInfo::clear_has_magicdefence() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Admin_BattleInfo::clear_magicdefence() {
  magicdefence_ = 0;
  clear_has_magicdefence();
}
inline ::google::protobuf::int32 Admin_BattleInfo::magicdefence() const {
  return magicdefence_;
}
inline void Admin_BattleInfo::set_magicdefence(::google::protobuf::int32 value) {
  set_has_magicdefence();
  magicdefence_ = value;
}

// required int32 hitrate = 22;
inline bool Admin_BattleInfo::has_hitrate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Admin_BattleInfo::set_has_hitrate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Admin_BattleInfo::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Admin_BattleInfo::clear_hitrate() {
  hitrate_ = 0;
  clear_has_hitrate();
}
inline ::google::protobuf::int32 Admin_BattleInfo::hitrate() const {
  return hitrate_;
}
inline void Admin_BattleInfo::set_hitrate(::google::protobuf::int32 value) {
  set_has_hitrate();
  hitrate_ = value;
}

// required int32 avoidrate = 23;
inline bool Admin_BattleInfo::has_avoidrate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Admin_BattleInfo::set_has_avoidrate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Admin_BattleInfo::clear_has_avoidrate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Admin_BattleInfo::clear_avoidrate() {
  avoidrate_ = 0;
  clear_has_avoidrate();
}
inline ::google::protobuf::int32 Admin_BattleInfo::avoidrate() const {
  return avoidrate_;
}
inline void Admin_BattleInfo::set_avoidrate(::google::protobuf::int32 value) {
  set_has_avoidrate();
  avoidrate_ = value;
}

// required int32 baselucky = 24;
inline bool Admin_BattleInfo::has_baselucky() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Admin_BattleInfo::set_has_baselucky() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Admin_BattleInfo::clear_has_baselucky() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Admin_BattleInfo::clear_baselucky() {
  baselucky_ = 0;
  clear_has_baselucky();
}
inline ::google::protobuf::int32 Admin_BattleInfo::baselucky() const {
  return baselucky_;
}
inline void Admin_BattleInfo::set_baselucky(::google::protobuf::int32 value) {
  set_has_baselucky();
  baselucky_ = value;
}

// required int32 crackdownrate = 25;
inline bool Admin_BattleInfo::has_crackdownrate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Admin_BattleInfo::set_has_crackdownrate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Admin_BattleInfo::clear_has_crackdownrate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Admin_BattleInfo::clear_crackdownrate() {
  crackdownrate_ = 0;
  clear_has_crackdownrate();
}
inline ::google::protobuf::int32 Admin_BattleInfo::crackdownrate() const {
  return crackdownrate_;
}
inline void Admin_BattleInfo::set_crackdownrate(::google::protobuf::int32 value) {
  set_has_crackdownrate();
  crackdownrate_ = value;
}

// required int32 baserte = 26;
inline bool Admin_BattleInfo::has_baserte() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Admin_BattleInfo::set_has_baserte() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Admin_BattleInfo::clear_has_baserte() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Admin_BattleInfo::clear_baserte() {
  baserte_ = 0;
  clear_has_baserte();
}
inline ::google::protobuf::int32 Admin_BattleInfo::baserte() const {
  return baserte_;
}
inline void Admin_BattleInfo::set_baserte(::google::protobuf::int32 value) {
  set_has_baserte();
  baserte_ = value;
}

// required int32 movespeed = 27;
inline bool Admin_BattleInfo::has_movespeed() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Admin_BattleInfo::set_has_movespeed() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Admin_BattleInfo::clear_has_movespeed() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Admin_BattleInfo::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 Admin_BattleInfo::movespeed() const {
  return movespeed_;
}
inline void Admin_BattleInfo::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// -------------------------------------------------------------------

// Admin_DanLuInfo

// optional int32 danluId = 1;
inline bool Admin_DanLuInfo::has_danluid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_DanLuInfo::set_has_danluid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_DanLuInfo::clear_has_danluid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_DanLuInfo::clear_danluid() {
  danluid_ = 0;
  clear_has_danluid();
}
inline ::google::protobuf::int32 Admin_DanLuInfo::danluid() const {
  return danluid_;
}
inline void Admin_DanLuInfo::set_danluid(::google::protobuf::int32 value) {
  set_has_danluid();
  danluid_ = value;
}

// optional int32 exp = 2;
inline bool Admin_DanLuInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_DanLuInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_DanLuInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_DanLuInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Admin_DanLuInfo::exp() const {
  return exp_;
}
inline void Admin_DanLuInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// Admin_MagicWeapon

// optional int32 id = 1 [default = 0];
inline bool Admin_MagicWeapon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_MagicWeapon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_MagicWeapon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_MagicWeapon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Admin_MagicWeapon::id() const {
  return id_;
}
inline void Admin_MagicWeapon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 exp = 2;
inline bool Admin_MagicWeapon::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_MagicWeapon::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_MagicWeapon::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_MagicWeapon::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Admin_MagicWeapon::exp() const {
  return exp_;
}
inline void Admin_MagicWeapon::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// repeated int32 skillid = 3;
inline int Admin_MagicWeapon::skillid_size() const {
  return skillid_.size();
}
inline void Admin_MagicWeapon::clear_skillid() {
  skillid_.Clear();
}
inline ::google::protobuf::int32 Admin_MagicWeapon::skillid(int index) const {
  return skillid_.Get(index);
}
inline void Admin_MagicWeapon::set_skillid(int index, ::google::protobuf::int32 value) {
  skillid_.Set(index, value);
}
inline void Admin_MagicWeapon::add_skillid(::google::protobuf::int32 value) {
  skillid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Admin_MagicWeapon::skillid() const {
  return skillid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Admin_MagicWeapon::mutable_skillid() {
  return &skillid_;
}

// optional int64 advancetime = 4;
inline bool Admin_MagicWeapon::has_advancetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_MagicWeapon::set_has_advancetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_MagicWeapon::clear_has_advancetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_MagicWeapon::clear_advancetime() {
  advancetime_ = GOOGLE_LONGLONG(0);
  clear_has_advancetime();
}
inline ::google::protobuf::int64 Admin_MagicWeapon::advancetime() const {
  return advancetime_;
}
inline void Admin_MagicWeapon::set_advancetime(::google::protobuf::int64 value) {
  set_has_advancetime();
  advancetime_ = value;
}

// -------------------------------------------------------------------

// Admin_HorseInfo

// required int32 id = 1;
inline bool Admin_HorseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_HorseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_HorseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_HorseInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Admin_HorseInfo::id() const {
  return id_;
}
inline void Admin_HorseInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 mid = 2;
inline bool Admin_HorseInfo::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_HorseInfo::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_HorseInfo::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_HorseInfo::clear_mid() {
  mid_ = 0;
  clear_has_mid();
}
inline ::google::protobuf::int32 Admin_HorseInfo::mid() const {
  return mid_;
}
inline void Admin_HorseInfo::set_mid(::google::protobuf::int32 value) {
  set_has_mid();
  mid_ = value;
}

// optional int32 exp = 3;
inline bool Admin_HorseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_HorseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_HorseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_HorseInfo::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Admin_HorseInfo::exp() const {
  return exp_;
}
inline void Admin_HorseInfo::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional bool isauto = 4;
inline bool Admin_HorseInfo::has_isauto() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_HorseInfo::set_has_isauto() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_HorseInfo::clear_has_isauto() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_HorseInfo::clear_isauto() {
  isauto_ = false;
  clear_has_isauto();
}
inline bool Admin_HorseInfo::isauto() const {
  return isauto_;
}
inline void Admin_HorseInfo::set_isauto(bool value) {
  set_has_isauto();
  isauto_ = value;
}

// -------------------------------------------------------------------

// Admin_RankingInfo

// required int32 ret = 1;
inline bool Admin_RankingInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RankingInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RankingInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RankingInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_RankingInfo::ret() const {
  return ret_;
}
inline void Admin_RankingInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bool onlineFlag = 2;
inline bool Admin_RankingInfo::has_onlineflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_RankingInfo::set_has_onlineflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_RankingInfo::clear_has_onlineflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_RankingInfo::clear_onlineflag() {
  onlineflag_ = false;
  clear_has_onlineflag();
}
inline bool Admin_RankingInfo::onlineflag() const {
  return onlineflag_;
}
inline void Admin_RankingInfo::set_onlineflag(bool value) {
  set_has_onlineflag();
  onlineflag_ = value;
}

// repeated int32 rankArry = 3;
inline int Admin_RankingInfo::rankarry_size() const {
  return rankarry_.size();
}
inline void Admin_RankingInfo::clear_rankarry() {
  rankarry_.Clear();
}
inline ::google::protobuf::int32 Admin_RankingInfo::rankarry(int index) const {
  return rankarry_.Get(index);
}
inline void Admin_RankingInfo::set_rankarry(int index, ::google::protobuf::int32 value) {
  rankarry_.Set(index, value);
}
inline void Admin_RankingInfo::add_rankarry(::google::protobuf::int32 value) {
  rankarry_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Admin_RankingInfo::rankarry() const {
  return rankarry_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Admin_RankingInfo::mutable_rankarry() {
  return &rankarry_;
}

// -------------------------------------------------------------------

// Admin_OutPutLinePlayerInfo

// required int32 ret = 1;
inline bool Admin_OutPutLinePlayerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_OutPutLinePlayerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_OutPutLinePlayerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_OutPutLinePlayerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_OutPutLinePlayerInfo::ret() const {
  return ret_;
}
inline void Admin_OutPutLinePlayerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int64 charid = 2;
inline bool Admin_OutPutLinePlayerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_OutPutLinePlayerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_OutPutLinePlayerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_OutPutLinePlayerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_OutPutLinePlayerInfo::charid() const {
  return charid_;
}
inline void Admin_OutPutLinePlayerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool Admin_OutPutLinePlayerInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_OutPutLinePlayerInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_OutPutLinePlayerInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_OutPutLinePlayerInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Admin_OutPutLinePlayerInfo::name() const {
  return *name_;
}
inline void Admin_OutPutLinePlayerInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Admin_OutPutLinePlayerInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Admin_OutPutLinePlayerInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_OutPutLinePlayerInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Admin_OutPutLinePlayerInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_OutPutLinePlayerInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool accountState = 4;
inline bool Admin_OutPutLinePlayerInfo::has_accountstate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_OutPutLinePlayerInfo::set_has_accountstate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_OutPutLinePlayerInfo::clear_has_accountstate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_OutPutLinePlayerInfo::clear_accountstate() {
  accountstate_ = false;
  clear_has_accountstate();
}
inline bool Admin_OutPutLinePlayerInfo::accountstate() const {
  return accountstate_;
}
inline void Admin_OutPutLinePlayerInfo::set_accountstate(bool value) {
  set_has_accountstate();
  accountstate_ = value;
}

// optional bool talkingState = 5;
inline bool Admin_OutPutLinePlayerInfo::has_talkingstate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_OutPutLinePlayerInfo::set_has_talkingstate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_OutPutLinePlayerInfo::clear_has_talkingstate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_OutPutLinePlayerInfo::clear_talkingstate() {
  talkingstate_ = false;
  clear_has_talkingstate();
}
inline bool Admin_OutPutLinePlayerInfo::talkingstate() const {
  return talkingstate_;
}
inline void Admin_OutPutLinePlayerInfo::set_talkingstate(bool value) {
  set_has_talkingstate();
  talkingstate_ = value;
}

// -------------------------------------------------------------------

// Admin_ReqRoleInfoByOpenID

// required string openID = 1;
inline bool Admin_ReqRoleInfoByOpenID::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_ReqRoleInfoByOpenID::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_ReqRoleInfoByOpenID::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_ReqRoleInfoByOpenID::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Admin_ReqRoleInfoByOpenID::openid() const {
  return *openid_;
}
inline void Admin_ReqRoleInfoByOpenID::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_ReqRoleInfoByOpenID::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_ReqRoleInfoByOpenID::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_ReqRoleInfoByOpenID::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Admin_ReqRoleInfoByOpenID::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_ReqRoleInfoByOpenID::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_RoleInfoByOpenID

// required int64 charID = 1;
inline bool Admin_RoleInfoByOpenID::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RoleInfoByOpenID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RoleInfoByOpenID::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_RoleInfoByOpenID::charid() const {
  return charid_;
}
inline void Admin_RoleInfoByOpenID::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string charName = 2;
inline bool Admin_RoleInfoByOpenID::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_RoleInfoByOpenID::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_RoleInfoByOpenID::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Admin_RoleInfoByOpenID::charname() const {
  return *charname_;
}
inline void Admin_RoleInfoByOpenID::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Admin_RoleInfoByOpenID::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Admin_RoleInfoByOpenID::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_RoleInfoByOpenID::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Admin_RoleInfoByOpenID::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_RoleInfoByOpenID::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 lv = 3;
inline bool Admin_RoleInfoByOpenID::has_lv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_lv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_RoleInfoByOpenID::clear_has_lv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_RoleInfoByOpenID::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 Admin_RoleInfoByOpenID::lv() const {
  return lv_;
}
inline void Admin_RoleInfoByOpenID::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 serverID = 4;
inline bool Admin_RoleInfoByOpenID::has_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_RoleInfoByOpenID::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_RoleInfoByOpenID::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 Admin_RoleInfoByOpenID::serverid() const {
  return serverid_;
}
inline void Admin_RoleInfoByOpenID::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int64 createTime = 5;
inline bool Admin_RoleInfoByOpenID::has_createtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_createtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_RoleInfoByOpenID::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_RoleInfoByOpenID::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::int64 Admin_RoleInfoByOpenID::createtime() const {
  return createtime_;
}
inline void Admin_RoleInfoByOpenID::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
}

// optional int32 sex = 6;
inline bool Admin_RoleInfoByOpenID::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_RoleInfoByOpenID::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_RoleInfoByOpenID::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 Admin_RoleInfoByOpenID::sex() const {
  return sex_;
}
inline void Admin_RoleInfoByOpenID::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int64 lastlogin = 7;
inline bool Admin_RoleInfoByOpenID::has_lastlogin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_lastlogin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Admin_RoleInfoByOpenID::clear_has_lastlogin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Admin_RoleInfoByOpenID::clear_lastlogin() {
  lastlogin_ = GOOGLE_LONGLONG(0);
  clear_has_lastlogin();
}
inline ::google::protobuf::int64 Admin_RoleInfoByOpenID::lastlogin() const {
  return lastlogin_;
}
inline void Admin_RoleInfoByOpenID::set_lastlogin(::google::protobuf::int64 value) {
  set_has_lastlogin();
  lastlogin_ = value;
}

// optional int64 loginlong = 8;
inline bool Admin_RoleInfoByOpenID::has_loginlong() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_loginlong() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Admin_RoleInfoByOpenID::clear_has_loginlong() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Admin_RoleInfoByOpenID::clear_loginlong() {
  loginlong_ = GOOGLE_LONGLONG(0);
  clear_has_loginlong();
}
inline ::google::protobuf::int64 Admin_RoleInfoByOpenID::loginlong() const {
  return loginlong_;
}
inline void Admin_RoleInfoByOpenID::set_loginlong(::google::protobuf::int64 value) {
  set_has_loginlong();
  loginlong_ = value;
}

// optional int32 group = 9;
inline bool Admin_RoleInfoByOpenID::has_group() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_group() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Admin_RoleInfoByOpenID::clear_has_group() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Admin_RoleInfoByOpenID::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 Admin_RoleInfoByOpenID::group() const {
  return group_;
}
inline void Admin_RoleInfoByOpenID::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int32 occupation = 10;
inline bool Admin_RoleInfoByOpenID::has_occupation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_occupation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Admin_RoleInfoByOpenID::clear_has_occupation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Admin_RoleInfoByOpenID::clear_occupation() {
  occupation_ = 0;
  clear_has_occupation();
}
inline ::google::protobuf::int32 Admin_RoleInfoByOpenID::occupation() const {
  return occupation_;
}
inline void Admin_RoleInfoByOpenID::set_occupation(::google::protobuf::int32 value) {
  set_has_occupation();
  occupation_ = value;
}

// optional int32 isvalid = 11;
inline bool Admin_RoleInfoByOpenID::has_isvalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_isvalid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Admin_RoleInfoByOpenID::clear_has_isvalid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Admin_RoleInfoByOpenID::clear_isvalid() {
  isvalid_ = 0;
  clear_has_isvalid();
}
inline ::google::protobuf::int32 Admin_RoleInfoByOpenID::isvalid() const {
  return isvalid_;
}
inline void Admin_RoleInfoByOpenID::set_isvalid(::google::protobuf::int32 value) {
  set_has_isvalid();
  isvalid_ = value;
}

// optional int64 exp = 12;
inline bool Admin_RoleInfoByOpenID::has_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Admin_RoleInfoByOpenID::clear_has_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Admin_RoleInfoByOpenID::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 Admin_RoleInfoByOpenID::exp() const {
  return exp_;
}
inline void Admin_RoleInfoByOpenID::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional string openid = 13;
inline bool Admin_RoleInfoByOpenID::has_openid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Admin_RoleInfoByOpenID::set_has_openid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Admin_RoleInfoByOpenID::clear_has_openid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Admin_RoleInfoByOpenID::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Admin_RoleInfoByOpenID::openid() const {
  return *openid_;
}
inline void Admin_RoleInfoByOpenID::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_RoleInfoByOpenID::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_RoleInfoByOpenID::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_RoleInfoByOpenID::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Admin_RoleInfoByOpenID::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_RoleInfoByOpenID::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_RetRoleInfoByOpenID

// required int32 ret = 1;
inline bool Admin_RetRoleInfoByOpenID::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RetRoleInfoByOpenID::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RetRoleInfoByOpenID::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RetRoleInfoByOpenID::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_RetRoleInfoByOpenID::ret() const {
  return ret_;
}
inline void Admin_RetRoleInfoByOpenID::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .PlayerInfo.Admin_RoleInfoByOpenID roleInfoList = 2;
inline int Admin_RetRoleInfoByOpenID::roleinfolist_size() const {
  return roleinfolist_.size();
}
inline void Admin_RetRoleInfoByOpenID::clear_roleinfolist() {
  roleinfolist_.Clear();
}
inline const ::PlayerInfo::Admin_RoleInfoByOpenID& Admin_RetRoleInfoByOpenID::roleinfolist(int index) const {
  return roleinfolist_.Get(index);
}
inline ::PlayerInfo::Admin_RoleInfoByOpenID* Admin_RetRoleInfoByOpenID::mutable_roleinfolist(int index) {
  return roleinfolist_.Mutable(index);
}
inline ::PlayerInfo::Admin_RoleInfoByOpenID* Admin_RetRoleInfoByOpenID::add_roleinfolist() {
  return roleinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::Admin_RoleInfoByOpenID >&
Admin_RetRoleInfoByOpenID::roleinfolist() const {
  return roleinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::Admin_RoleInfoByOpenID >*
Admin_RetRoleInfoByOpenID::mutable_roleinfolist() {
  return &roleinfolist_;
}

// -------------------------------------------------------------------

// Admin_ReqRoleInfoByOpenIDQzoneID

// required string openID = 1;
inline bool Admin_ReqRoleInfoByOpenIDQzoneID::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Admin_ReqRoleInfoByOpenIDQzoneID::openid() const {
  return *openid_;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_ReqRoleInfoByOpenIDQzoneID::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Admin_ReqRoleInfoByOpenIDQzoneID::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 qzoneID = 2;
inline bool Admin_ReqRoleInfoByOpenIDQzoneID::has_qzoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_has_qzoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::clear_has_qzoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::clear_qzoneid() {
  qzoneid_ = 0;
  clear_has_qzoneid();
}
inline ::google::protobuf::int32 Admin_ReqRoleInfoByOpenIDQzoneID::qzoneid() const {
  return qzoneid_;
}
inline void Admin_ReqRoleInfoByOpenIDQzoneID::set_qzoneid(::google::protobuf::int32 value) {
  set_has_qzoneid();
  qzoneid_ = value;
}

// -------------------------------------------------------------------

// Admin_ReqContainerInfo

// required int64 charID = 1;
inline bool Admin_ReqContainerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_ReqContainerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_ReqContainerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_ReqContainerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_ReqContainerInfo::charid() const {
  return charid_;
}
inline void Admin_ReqContainerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 type = 2;
inline bool Admin_ReqContainerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_ReqContainerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_ReqContainerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_ReqContainerInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_ReqContainerInfo::type() const {
  return type_;
}
inline void Admin_ReqContainerInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Admin_RetContainerInfo

// required int32 ret = 1;
inline bool Admin_RetContainerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RetContainerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RetContainerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RetContainerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_RetContainerInfo::ret() const {
  return ret_;
}
inline void Admin_RetContainerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 type = 2;
inline bool Admin_RetContainerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_RetContainerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_RetContainerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_RetContainerInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_RetContainerInfo::type() const {
  return type_;
}
inline void Admin_RetContainerInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .MS_MailInfo.ClientItemInfo items = 3;
inline int Admin_RetContainerInfo::items_size() const {
  return items_.size();
}
inline void Admin_RetContainerInfo::clear_items() {
  items_.Clear();
}
inline const ::MS_MailInfo::ClientItemInfo& Admin_RetContainerInfo::items(int index) const {
  return items_.Get(index);
}
inline ::MS_MailInfo::ClientItemInfo* Admin_RetContainerInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::MS_MailInfo::ClientItemInfo* Admin_RetContainerInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MS_MailInfo::ClientItemInfo >&
Admin_RetContainerInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::MS_MailInfo::ClientItemInfo >*
Admin_RetContainerInfo::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSProtoc_2fMS_5fPlayerInfo_2eproto__INCLUDED
