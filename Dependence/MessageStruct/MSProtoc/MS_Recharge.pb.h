// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_Recharge.proto

#ifndef PROTOBUF_MSProtoc_2fMS_5fRecharge_2eproto__INCLUDED
#define PROTOBUF_MSProtoc_2fMS_5fRecharge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MS_Recharge {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSProtoc_2fMS_5fRecharge_2eproto();
void protobuf_AssignDesc_MSProtoc_2fMS_5fRecharge_2eproto();
void protobuf_ShutdownFile_MSProtoc_2fMS_5fRecharge_2eproto();

class Admin_Recharge;
class Admin_RetRecharge;

// ===================================================================

class Admin_Recharge : public ::google::protobuf::Message {
 public:
  Admin_Recharge();
  virtual ~Admin_Recharge();

  Admin_Recharge(const Admin_Recharge& from);

  inline Admin_Recharge& operator=(const Admin_Recharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_Recharge& default_instance();

  void Swap(Admin_Recharge* other);

  // implements Message ----------------------------------------------

  Admin_Recharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_Recharge& from);
  void MergeFrom(const Admin_Recharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string orderID = 1;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderIDFieldNumber = 1;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 payname = 3;
  inline bool has_payname() const;
  inline void clear_payname();
  static const int kPaynameFieldNumber = 3;
  inline ::google::protobuf::int32 payname() const;
  inline void set_payname(::google::protobuf::int32 value);

  // required string openID = 4;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenIDFieldNumber = 4;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required int64 money = 5;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 5;
  inline ::google::protobuf::int64 money() const;
  inline void set_money(::google::protobuf::int64 value);

  // required int32 gold = 6;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 6;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int64 charID = 7;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 7;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 isFirstRecharge = 8;
  inline bool has_isfirstrecharge() const;
  inline void clear_isfirstrecharge();
  static const int kIsFirstRechargeFieldNumber = 8;
  inline ::google::protobuf::int32 isfirstrecharge() const;
  inline void set_isfirstrecharge(::google::protobuf::int32 value);

  // optional string source = 9;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 9;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:MS_Recharge.Admin_Recharge)
 private:
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_payname();
  inline void clear_has_payname();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_isfirstrecharge();
  inline void clear_has_isfirstrecharge();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* orderid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 payname_;
  ::std::string* openid_;
  ::google::protobuf::int64 money_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 isfirstrecharge_;
  ::std::string* source_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static Admin_Recharge* default_instance_;
};
// -------------------------------------------------------------------

class Admin_RetRecharge : public ::google::protobuf::Message {
 public:
  Admin_RetRecharge();
  virtual ~Admin_RetRecharge();

  Admin_RetRecharge(const Admin_RetRecharge& from);

  inline Admin_RetRecharge& operator=(const Admin_RetRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_RetRecharge& default_instance();

  void Swap(Admin_RetRecharge* other);

  // implements Message ----------------------------------------------

  Admin_RetRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_RetRecharge& from);
  void MergeFrom(const Admin_RetRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .MS_Recharge.Admin_Recharge rechargeInfo = 2;
  inline bool has_rechargeinfo() const;
  inline void clear_rechargeinfo();
  static const int kRechargeInfoFieldNumber = 2;
  inline const ::MS_Recharge::Admin_Recharge& rechargeinfo() const;
  inline ::MS_Recharge::Admin_Recharge* mutable_rechargeinfo();
  inline ::MS_Recharge::Admin_Recharge* release_rechargeinfo();
  inline void set_allocated_rechargeinfo(::MS_Recharge::Admin_Recharge* rechargeinfo);

  // @@protoc_insertion_point(class_scope:MS_Recharge.Admin_RetRecharge)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_rechargeinfo();
  inline void clear_has_rechargeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MS_Recharge::Admin_Recharge* rechargeinfo_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fRecharge_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fRecharge_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fRecharge_2eproto();

  void InitAsDefaultInstance();
  static Admin_RetRecharge* default_instance_;
};
// ===================================================================


// ===================================================================

// Admin_Recharge

// required string orderID = 1;
inline bool Admin_Recharge::has_orderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_Recharge::set_has_orderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_Recharge::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_Recharge::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& Admin_Recharge::orderid() const {
  return *orderid_;
}
inline void Admin_Recharge::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Admin_Recharge::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Admin_Recharge::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_Recharge::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* Admin_Recharge::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_Recharge::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type = 2;
inline bool Admin_Recharge::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_Recharge::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_Recharge::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_Recharge::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_Recharge::type() const {
  return type_;
}
inline void Admin_Recharge::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 payname = 3;
inline bool Admin_Recharge::has_payname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_Recharge::set_has_payname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_Recharge::clear_has_payname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_Recharge::clear_payname() {
  payname_ = 0;
  clear_has_payname();
}
inline ::google::protobuf::int32 Admin_Recharge::payname() const {
  return payname_;
}
inline void Admin_Recharge::set_payname(::google::protobuf::int32 value) {
  set_has_payname();
  payname_ = value;
}

// required string openID = 4;
inline bool Admin_Recharge::has_openid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_Recharge::set_has_openid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_Recharge::clear_has_openid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_Recharge::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Admin_Recharge::openid() const {
  return *openid_;
}
inline void Admin_Recharge::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_Recharge::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Admin_Recharge::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_Recharge::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Admin_Recharge::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_Recharge::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 money = 5;
inline bool Admin_Recharge::has_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Admin_Recharge::set_has_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Admin_Recharge::clear_has_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Admin_Recharge::clear_money() {
  money_ = GOOGLE_LONGLONG(0);
  clear_has_money();
}
inline ::google::protobuf::int64 Admin_Recharge::money() const {
  return money_;
}
inline void Admin_Recharge::set_money(::google::protobuf::int64 value) {
  set_has_money();
  money_ = value;
}

// required int32 gold = 6;
inline bool Admin_Recharge::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Admin_Recharge::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Admin_Recharge::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Admin_Recharge::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 Admin_Recharge::gold() const {
  return gold_;
}
inline void Admin_Recharge::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// required int64 charID = 7;
inline bool Admin_Recharge::has_charid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Admin_Recharge::set_has_charid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Admin_Recharge::clear_has_charid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Admin_Recharge::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_Recharge::charid() const {
  return charid_;
}
inline void Admin_Recharge::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 isFirstRecharge = 8;
inline bool Admin_Recharge::has_isfirstrecharge() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Admin_Recharge::set_has_isfirstrecharge() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Admin_Recharge::clear_has_isfirstrecharge() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Admin_Recharge::clear_isfirstrecharge() {
  isfirstrecharge_ = 0;
  clear_has_isfirstrecharge();
}
inline ::google::protobuf::int32 Admin_Recharge::isfirstrecharge() const {
  return isfirstrecharge_;
}
inline void Admin_Recharge::set_isfirstrecharge(::google::protobuf::int32 value) {
  set_has_isfirstrecharge();
  isfirstrecharge_ = value;
}

// optional string source = 9;
inline bool Admin_Recharge::has_source() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Admin_Recharge::set_has_source() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Admin_Recharge::clear_has_source() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Admin_Recharge::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& Admin_Recharge::source() const {
  return *source_;
}
inline void Admin_Recharge::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Admin_Recharge::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void Admin_Recharge::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_Recharge::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* Admin_Recharge::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_Recharge::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Admin_RetRecharge

// required int32 ret = 1;
inline bool Admin_RetRecharge::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_RetRecharge::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_RetRecharge::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_RetRecharge::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Admin_RetRecharge::ret() const {
  return ret_;
}
inline void Admin_RetRecharge::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .MS_Recharge.Admin_Recharge rechargeInfo = 2;
inline bool Admin_RetRecharge::has_rechargeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_RetRecharge::set_has_rechargeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_RetRecharge::clear_has_rechargeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_RetRecharge::clear_rechargeinfo() {
  if (rechargeinfo_ != NULL) rechargeinfo_->::MS_Recharge::Admin_Recharge::Clear();
  clear_has_rechargeinfo();
}
inline const ::MS_Recharge::Admin_Recharge& Admin_RetRecharge::rechargeinfo() const {
  return rechargeinfo_ != NULL ? *rechargeinfo_ : *default_instance_->rechargeinfo_;
}
inline ::MS_Recharge::Admin_Recharge* Admin_RetRecharge::mutable_rechargeinfo() {
  set_has_rechargeinfo();
  if (rechargeinfo_ == NULL) rechargeinfo_ = new ::MS_Recharge::Admin_Recharge;
  return rechargeinfo_;
}
inline ::MS_Recharge::Admin_Recharge* Admin_RetRecharge::release_rechargeinfo() {
  clear_has_rechargeinfo();
  ::MS_Recharge::Admin_Recharge* temp = rechargeinfo_;
  rechargeinfo_ = NULL;
  return temp;
}
inline void Admin_RetRecharge::set_allocated_rechargeinfo(::MS_Recharge::Admin_Recharge* rechargeinfo) {
  delete rechargeinfo_;
  rechargeinfo_ = rechargeinfo;
  if (rechargeinfo) {
    set_has_rechargeinfo();
  } else {
    clear_has_rechargeinfo();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_Recharge

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSProtoc_2fMS_5fRecharge_2eproto__INCLUDED
