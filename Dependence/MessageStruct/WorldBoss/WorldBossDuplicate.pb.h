// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBoss/WorldBossDuplicate.proto

#ifndef PROTOBUF_WorldBoss_2fWorldBossDuplicate_2eproto__INCLUDED
#define PROTOBUF_WorldBoss_2fWorldBossDuplicate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace WorldBossDuplicate {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

class ReqWorldBossInfo;
class AckWorldBossInfo;
class BossData;
class ReqDuplicateID;
class AckReqDuplicateID;
class AckReqFitPrize;
class BossDamage;
class PrizeInfo;
class TimeLimit;
class GS2WSEnterOrLeave;
class GS2WSBossDead;
class WS2GMBossUIHLState;
class OneBossUpdateData;
class ClientReqBossDamage;
class AckReqBossDamage;
class DamageData;
class WorldBossUpdate;

// ===================================================================

class ReqWorldBossInfo : public ::google::protobuf::Message {
 public:
  ReqWorldBossInfo();
  virtual ~ReqWorldBossInfo();

  ReqWorldBossInfo(const ReqWorldBossInfo& from);

  inline ReqWorldBossInfo& operator=(const ReqWorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWorldBossInfo& default_instance();

  void Swap(ReqWorldBossInfo* other);

  // implements Message ----------------------------------------------

  ReqWorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqWorldBossInfo& from);
  void MergeFrom(const ReqWorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.ReqWorldBossInfo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static ReqWorldBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class AckWorldBossInfo : public ::google::protobuf::Message {
 public:
  AckWorldBossInfo();
  virtual ~AckWorldBossInfo();

  AckWorldBossInfo(const AckWorldBossInfo& from);

  inline AckWorldBossInfo& operator=(const AckWorldBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckWorldBossInfo& default_instance();

  void Swap(AckWorldBossInfo* other);

  // implements Message ----------------------------------------------

  AckWorldBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckWorldBossInfo& from);
  void MergeFrom(const AckWorldBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WorldBossDuplicate.BossData info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::WorldBossDuplicate::BossData& info(int index) const;
  inline ::WorldBossDuplicate::BossData* mutable_info(int index);
  inline ::WorldBossDuplicate::BossData* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::BossData >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::BossData >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.AckWorldBossInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::BossData > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static AckWorldBossInfo* default_instance_;
};
// -------------------------------------------------------------------

class BossData : public ::google::protobuf::Message {
 public:
  BossData();
  virtual ~BossData();

  BossData(const BossData& from);

  inline BossData& operator=(const BossData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossData& default_instance();

  void Swap(BossData* other);

  // implements Message ----------------------------------------------

  BossData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossData& from);
  void MergeFrom(const BossData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int64 cooltime = 4;
  inline bool has_cooltime() const;
  inline void clear_cooltime();
  static const int kCooltimeFieldNumber = 4;
  inline ::google::protobuf::int64 cooltime() const;
  inline void set_cooltime(::google::protobuf::int64 value);

  // optional int64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional bytes charname = 6;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 6;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const void* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 viplevel = 7;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 7;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int64 time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.BossData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_cooltime();
  inline void clear_has_cooltime();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;
  ::google::protobuf::int64 cooltime_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 viplevel_;
  ::std::string* charname_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static BossData* default_instance_;
};
// -------------------------------------------------------------------

class ReqDuplicateID : public ::google::protobuf::Message {
 public:
  ReqDuplicateID();
  virtual ~ReqDuplicateID();

  ReqDuplicateID(const ReqDuplicateID& from);

  inline ReqDuplicateID& operator=(const ReqDuplicateID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDuplicateID& default_instance();

  void Swap(ReqDuplicateID* other);

  // implements Message ----------------------------------------------

  ReqDuplicateID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDuplicateID& from);
  void MergeFrom(const ReqDuplicateID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.ReqDuplicateID)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static ReqDuplicateID* default_instance_;
};
// -------------------------------------------------------------------

class AckReqDuplicateID : public ::google::protobuf::Message {
 public:
  AckReqDuplicateID();
  virtual ~AckReqDuplicateID();

  AckReqDuplicateID(const AckReqDuplicateID& from);

  inline AckReqDuplicateID& operator=(const AckReqDuplicateID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqDuplicateID& default_instance();

  void Swap(AckReqDuplicateID* other);

  // implements Message ----------------------------------------------

  AckReqDuplicateID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqDuplicateID& from);
  void MergeFrom(const AckReqDuplicateID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int64 duplicateid = 3;
  inline bool has_duplicateid() const;
  inline void clear_duplicateid();
  static const int kDuplicateidFieldNumber = 3;
  inline ::google::protobuf::int64 duplicateid() const;
  inline void set_duplicateid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.AckReqDuplicateID)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_duplicateid();
  inline void clear_has_duplicateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int64 duplicateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static AckReqDuplicateID* default_instance_;
};
// -------------------------------------------------------------------

class AckReqFitPrize : public ::google::protobuf::Message {
 public:
  AckReqFitPrize();
  virtual ~AckReqFitPrize();

  AckReqFitPrize(const AckReqFitPrize& from);

  inline AckReqFitPrize& operator=(const AckReqFitPrize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqFitPrize& default_instance();

  void Swap(AckReqFitPrize* other);

  // implements Message ----------------------------------------------

  AckReqFitPrize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqFitPrize& from);
  void MergeFrom(const AckReqFitPrize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.AckReqFitPrize)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static AckReqFitPrize* default_instance_;
};
// -------------------------------------------------------------------

class BossDamage : public ::google::protobuf::Message {
 public:
  BossDamage();
  virtual ~BossDamage();

  BossDamage(const BossDamage& from);

  inline BossDamage& operator=(const BossDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDamage& default_instance();

  void Swap(BossDamage* other);

  // implements Message ----------------------------------------------

  BossDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDamage& from);
  void MergeFrom(const BossDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bossId = 1;
  inline int bossid_size() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  inline ::google::protobuf::int32 bossid(int index) const;
  inline void set_bossid(int index, ::google::protobuf::int32 value);
  inline void add_bossid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bossid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bossid();

  // repeated int32 bood = 2;
  inline int bood_size() const;
  inline void clear_bood();
  static const int kBoodFieldNumber = 2;
  inline ::google::protobuf::int32 bood(int index) const;
  inline void set_bood(int index, ::google::protobuf::int32 value);
  inline void add_bood(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bood() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bood();

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.BossDamage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bossid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bood_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static BossDamage* default_instance_;
};
// -------------------------------------------------------------------

class PrizeInfo : public ::google::protobuf::Message {
 public:
  PrizeInfo();
  virtual ~PrizeInfo();

  PrizeInfo(const PrizeInfo& from);

  inline PrizeInfo& operator=(const PrizeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrizeInfo& default_instance();

  void Swap(PrizeInfo* other);

  // implements Message ----------------------------------------------

  PrizeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrizeInfo& from);
  void MergeFrom(const PrizeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes charname = 1;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 1;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const void* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 viplevel = 2;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 2;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 damagesort = 3;
  inline bool has_damagesort() const;
  inline void clear_damagesort();
  static const int kDamagesortFieldNumber = 3;
  inline ::google::protobuf::int32 damagesort() const;
  inline void set_damagesort(::google::protobuf::int32 value);

  // optional int64 lastattackid = 4;
  inline bool has_lastattackid() const;
  inline void clear_lastattackid();
  static const int kLastattackidFieldNumber = 4;
  inline ::google::protobuf::int64 lastattackid() const;
  inline void set_lastattackid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.PrizeInfo)
 private:
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_damagesort();
  inline void clear_has_damagesort();
  inline void set_has_lastattackid();
  inline void clear_has_lastattackid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* charname_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 damagesort_;
  ::google::protobuf::int64 lastattackid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static PrizeInfo* default_instance_;
};
// -------------------------------------------------------------------

class TimeLimit : public ::google::protobuf::Message {
 public:
  TimeLimit();
  virtual ~TimeLimit();

  TimeLimit(const TimeLimit& from);

  inline TimeLimit& operator=(const TimeLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TimeLimit& default_instance();

  void Swap(TimeLimit* other);

  // implements Message ----------------------------------------------

  TimeLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TimeLimit& from);
  void MergeFrom(const TimeLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.TimeLimit)
 private:
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static TimeLimit* default_instance_;
};
// -------------------------------------------------------------------

class GS2WSEnterOrLeave : public ::google::protobuf::Message {
 public:
  GS2WSEnterOrLeave();
  virtual ~GS2WSEnterOrLeave();

  GS2WSEnterOrLeave(const GS2WSEnterOrLeave& from);

  inline GS2WSEnterOrLeave& operator=(const GS2WSEnterOrLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2WSEnterOrLeave& default_instance();

  void Swap(GS2WSEnterOrLeave* other);

  // implements Message ----------------------------------------------

  GS2WSEnterOrLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2WSEnterOrLeave& from);
  void MergeFrom(const GS2WSEnterOrLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional bool flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline bool flag() const;
  inline void set_flag(bool value);

  // optional int64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.GS2WSEnterOrLeave)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 mapid_;
  bool flag_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static GS2WSEnterOrLeave* default_instance_;
};
// -------------------------------------------------------------------

class GS2WSBossDead : public ::google::protobuf::Message {
 public:
  GS2WSBossDead();
  virtual ~GS2WSBossDead();

  GS2WSBossDead(const GS2WSBossDead& from);

  inline GS2WSBossDead& operator=(const GS2WSBossDead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GS2WSBossDead& default_instance();

  void Swap(GS2WSBossDead* other);

  // implements Message ----------------------------------------------

  GS2WSBossDead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GS2WSBossDead& from);
  void MergeFrom(const GS2WSBossDead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 viplevel = 3;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 3;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional bytes charname = 4;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 4;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const void* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.GS2WSBossDead)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 viplevel_;
  ::std::string* charname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static GS2WSBossDead* default_instance_;
};
// -------------------------------------------------------------------

class WS2GMBossUIHLState : public ::google::protobuf::Message {
 public:
  WS2GMBossUIHLState();
  virtual ~WS2GMBossUIHLState();

  WS2GMBossUIHLState(const WS2GMBossUIHLState& from);

  inline WS2GMBossUIHLState& operator=(const WS2GMBossUIHLState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WS2GMBossUIHLState& default_instance();

  void Swap(WS2GMBossUIHLState* other);

  // implements Message ----------------------------------------------

  WS2GMBossUIHLState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WS2GMBossUIHLState& from);
  void MergeFrom(const WS2GMBossUIHLState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline bool flag() const;
  inline void set_flag(bool value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 mapID = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 3;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.WS2GMBossUIHLState)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool flag_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static WS2GMBossUIHLState* default_instance_;
};
// -------------------------------------------------------------------

class OneBossUpdateData : public ::google::protobuf::Message {
 public:
  OneBossUpdateData();
  virtual ~OneBossUpdateData();

  OneBossUpdateData(const OneBossUpdateData& from);

  inline OneBossUpdateData& operator=(const OneBossUpdateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneBossUpdateData& default_instance();

  void Swap(OneBossUpdateData* other);

  // implements Message ----------------------------------------------

  OneBossUpdateData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneBossUpdateData& from);
  void MergeFrom(const OneBossUpdateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bossid = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossidFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.OneBossUpdateData)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 time_;
  ::google::protobuf::int32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static OneBossUpdateData* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqBossDamage : public ::google::protobuf::Message {
 public:
  ClientReqBossDamage();
  virtual ~ClientReqBossDamage();

  ClientReqBossDamage(const ClientReqBossDamage& from);

  inline ClientReqBossDamage& operator=(const ClientReqBossDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqBossDamage& default_instance();

  void Swap(ClientReqBossDamage* other);

  // implements Message ----------------------------------------------

  ClientReqBossDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqBossDamage& from);
  void MergeFrom(const ClientReqBossDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 bossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  inline ::google::protobuf::int32 bossid() const;
  inline void set_bossid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.ClientReqBossDamage)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bossid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static ClientReqBossDamage* default_instance_;
};
// -------------------------------------------------------------------

class AckReqBossDamage : public ::google::protobuf::Message {
 public:
  AckReqBossDamage();
  virtual ~AckReqBossDamage();

  AckReqBossDamage(const AckReqBossDamage& from);

  inline AckReqBossDamage& operator=(const AckReqBossDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqBossDamage& default_instance();

  void Swap(AckReqBossDamage* other);

  // implements Message ----------------------------------------------

  AckReqBossDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqBossDamage& from);
  void MergeFrom(const AckReqBossDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WorldBossDuplicate.DamageData infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::WorldBossDuplicate::DamageData& infos(int index) const;
  inline ::WorldBossDuplicate::DamageData* mutable_infos(int index);
  inline ::WorldBossDuplicate::DamageData* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::DamageData >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::DamageData >*
      mutable_infos();

  // optional int32 selfsort = 2;
  inline bool has_selfsort() const;
  inline void clear_selfsort();
  static const int kSelfsortFieldNumber = 2;
  inline ::google::protobuf::int32 selfsort() const;
  inline void set_selfsort(::google::protobuf::int32 value);

  // optional float selfdamage = 3;
  inline bool has_selfdamage() const;
  inline void clear_selfdamage();
  static const int kSelfdamageFieldNumber = 3;
  inline float selfdamage() const;
  inline void set_selfdamage(float value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.AckReqBossDamage)
 private:
  inline void set_has_selfsort();
  inline void clear_has_selfsort();
  inline void set_has_selfdamage();
  inline void clear_has_selfdamage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::DamageData > infos_;
  ::google::protobuf::int32 selfsort_;
  float selfdamage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static AckReqBossDamage* default_instance_;
};
// -------------------------------------------------------------------

class DamageData : public ::google::protobuf::Message {
 public:
  DamageData();
  virtual ~DamageData();

  DamageData(const DamageData& from);

  inline DamageData& operator=(const DamageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DamageData& default_instance();

  void Swap(DamageData* other);

  // implements Message ----------------------------------------------

  DamageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DamageData& from);
  void MergeFrom(const DamageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes charname = 1;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 1;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const void* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 viplevel = 2;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 2;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional float damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline float damage() const;
  inline void set_damage(float value);

  // optional int64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.DamageData)
 private:
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* charname_;
  ::google::protobuf::int32 viplevel_;
  float damage_;
  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static DamageData* default_instance_;
};
// -------------------------------------------------------------------

class WorldBossUpdate : public ::google::protobuf::Message {
 public:
  WorldBossUpdate();
  virtual ~WorldBossUpdate();

  WorldBossUpdate(const WorldBossUpdate& from);

  inline WorldBossUpdate& operator=(const WorldBossUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldBossUpdate& default_instance();

  void Swap(WorldBossUpdate* other);

  // implements Message ----------------------------------------------

  WorldBossUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldBossUpdate& from);
  void MergeFrom(const WorldBossUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .WorldBossDuplicate.OneBossUpdateData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::WorldBossDuplicate::OneBossUpdateData& datas(int index) const;
  inline ::WorldBossDuplicate::OneBossUpdateData* mutable_datas(int index);
  inline ::WorldBossDuplicate::OneBossUpdateData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::OneBossUpdateData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::OneBossUpdateData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:WorldBossDuplicate.WorldBossUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::OneBossUpdateData > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_AssignDesc_WorldBoss_2fWorldBossDuplicate_2eproto();
  friend void protobuf_ShutdownFile_WorldBoss_2fWorldBossDuplicate_2eproto();

  void InitAsDefaultInstance();
  static WorldBossUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

// ReqWorldBossInfo

// required int32 flag = 1;
inline bool ReqWorldBossInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqWorldBossInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqWorldBossInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqWorldBossInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ReqWorldBossInfo::flag() const {
  return flag_;
}
inline void ReqWorldBossInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// AckWorldBossInfo

// repeated .WorldBossDuplicate.BossData info = 1;
inline int AckWorldBossInfo::info_size() const {
  return info_.size();
}
inline void AckWorldBossInfo::clear_info() {
  info_.Clear();
}
inline const ::WorldBossDuplicate::BossData& AckWorldBossInfo::info(int index) const {
  return info_.Get(index);
}
inline ::WorldBossDuplicate::BossData* AckWorldBossInfo::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::WorldBossDuplicate::BossData* AckWorldBossInfo::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::BossData >&
AckWorldBossInfo::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::BossData >*
AckWorldBossInfo::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// BossData

// required int32 id = 1;
inline bool BossData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BossData::id() const {
  return id_;
}
inline void BossData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 state = 2;
inline bool BossData::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossData::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossData::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossData::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 BossData::state() const {
  return state_;
}
inline void BossData::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 num = 3;
inline bool BossData::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossData::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossData::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 BossData::num() const {
  return num_;
}
inline void BossData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 cooltime = 4;
inline bool BossData::has_cooltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossData::set_has_cooltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossData::clear_has_cooltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossData::clear_cooltime() {
  cooltime_ = GOOGLE_LONGLONG(0);
  clear_has_cooltime();
}
inline ::google::protobuf::int64 BossData::cooltime() const {
  return cooltime_;
}
inline void BossData::set_cooltime(::google::protobuf::int64 value) {
  set_has_cooltime();
  cooltime_ = value;
}

// optional int64 charid = 5;
inline bool BossData::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossData::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BossData::charid() const {
  return charid_;
}
inline void BossData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional bytes charname = 6;
inline bool BossData::has_charname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossData::set_has_charname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossData::clear_has_charname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossData::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& BossData::charname() const {
  return *charname_;
}
inline void BossData::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void BossData::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void BossData::set_charname(const void* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossData::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* BossData::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossData::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplevel = 7;
inline bool BossData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 BossData::viplevel() const {
  return viplevel_;
}
inline void BossData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int64 time = 8;
inline bool BossData::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossData::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossData::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossData::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 BossData::time() const {
  return time_;
}
inline void BossData::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ReqDuplicateID

// required int32 id = 1;
inline bool ReqDuplicateID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDuplicateID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDuplicateID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDuplicateID::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqDuplicateID::id() const {
  return id_;
}
inline void ReqDuplicateID::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckReqDuplicateID

// required int32 id = 1;
inline bool AckReqDuplicateID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckReqDuplicateID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckReqDuplicateID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckReqDuplicateID::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AckReqDuplicateID::id() const {
  return id_;
}
inline void AckReqDuplicateID::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 code = 2;
inline bool AckReqDuplicateID::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckReqDuplicateID::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckReqDuplicateID::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckReqDuplicateID::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckReqDuplicateID::code() const {
  return code_;
}
inline void AckReqDuplicateID::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int64 duplicateid = 3;
inline bool AckReqDuplicateID::has_duplicateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckReqDuplicateID::set_has_duplicateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckReqDuplicateID::clear_has_duplicateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckReqDuplicateID::clear_duplicateid() {
  duplicateid_ = GOOGLE_LONGLONG(0);
  clear_has_duplicateid();
}
inline ::google::protobuf::int64 AckReqDuplicateID::duplicateid() const {
  return duplicateid_;
}
inline void AckReqDuplicateID::set_duplicateid(::google::protobuf::int64 value) {
  set_has_duplicateid();
  duplicateid_ = value;
}

// -------------------------------------------------------------------

// AckReqFitPrize

// required int32 ret = 1;
inline bool AckReqFitPrize::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckReqFitPrize::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckReqFitPrize::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckReqFitPrize::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckReqFitPrize::ret() const {
  return ret_;
}
inline void AckReqFitPrize::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// BossDamage

// repeated int32 bossId = 1;
inline int BossDamage::bossid_size() const {
  return bossid_.size();
}
inline void BossDamage::clear_bossid() {
  bossid_.Clear();
}
inline ::google::protobuf::int32 BossDamage::bossid(int index) const {
  return bossid_.Get(index);
}
inline void BossDamage::set_bossid(int index, ::google::protobuf::int32 value) {
  bossid_.Set(index, value);
}
inline void BossDamage::add_bossid(::google::protobuf::int32 value) {
  bossid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BossDamage::bossid() const {
  return bossid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BossDamage::mutable_bossid() {
  return &bossid_;
}

// repeated int32 bood = 2;
inline int BossDamage::bood_size() const {
  return bood_.size();
}
inline void BossDamage::clear_bood() {
  bood_.Clear();
}
inline ::google::protobuf::int32 BossDamage::bood(int index) const {
  return bood_.Get(index);
}
inline void BossDamage::set_bood(int index, ::google::protobuf::int32 value) {
  bood_.Set(index, value);
}
inline void BossDamage::add_bood(::google::protobuf::int32 value) {
  bood_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BossDamage::bood() const {
  return bood_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BossDamage::mutable_bood() {
  return &bood_;
}

// -------------------------------------------------------------------

// PrizeInfo

// required bytes charname = 1;
inline bool PrizeInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrizeInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrizeInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrizeInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& PrizeInfo::charname() const {
  return *charname_;
}
inline void PrizeInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void PrizeInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void PrizeInfo::set_charname(const void* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrizeInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* PrizeInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrizeInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplevel = 2;
inline bool PrizeInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrizeInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrizeInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrizeInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 PrizeInfo::viplevel() const {
  return viplevel_;
}
inline void PrizeInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 damagesort = 3;
inline bool PrizeInfo::has_damagesort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrizeInfo::set_has_damagesort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrizeInfo::clear_has_damagesort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrizeInfo::clear_damagesort() {
  damagesort_ = 0;
  clear_has_damagesort();
}
inline ::google::protobuf::int32 PrizeInfo::damagesort() const {
  return damagesort_;
}
inline void PrizeInfo::set_damagesort(::google::protobuf::int32 value) {
  set_has_damagesort();
  damagesort_ = value;
}

// optional int64 lastattackid = 4;
inline bool PrizeInfo::has_lastattackid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrizeInfo::set_has_lastattackid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrizeInfo::clear_has_lastattackid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrizeInfo::clear_lastattackid() {
  lastattackid_ = GOOGLE_LONGLONG(0);
  clear_has_lastattackid();
}
inline ::google::protobuf::int64 PrizeInfo::lastattackid() const {
  return lastattackid_;
}
inline void PrizeInfo::set_lastattackid(::google::protobuf::int64 value) {
  set_has_lastattackid();
  lastattackid_ = value;
}

// -------------------------------------------------------------------

// TimeLimit

// required int64 time = 1;
inline bool TimeLimit::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeLimit::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeLimit::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeLimit::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 TimeLimit::time() const {
  return time_;
}
inline void TimeLimit::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GS2WSEnterOrLeave

// required int64 charid = 1;
inline bool GS2WSEnterOrLeave::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2WSEnterOrLeave::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2WSEnterOrLeave::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2WSEnterOrLeave::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 GS2WSEnterOrLeave::charid() const {
  return charid_;
}
inline void GS2WSEnterOrLeave::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 mapid = 2;
inline bool GS2WSEnterOrLeave::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2WSEnterOrLeave::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2WSEnterOrLeave::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2WSEnterOrLeave::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 GS2WSEnterOrLeave::mapid() const {
  return mapid_;
}
inline void GS2WSEnterOrLeave::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional bool flag = 3;
inline bool GS2WSEnterOrLeave::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2WSEnterOrLeave::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2WSEnterOrLeave::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2WSEnterOrLeave::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool GS2WSEnterOrLeave::flag() const {
  return flag_;
}
inline void GS2WSEnterOrLeave::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// optional int64 time = 4;
inline bool GS2WSEnterOrLeave::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2WSEnterOrLeave::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2WSEnterOrLeave::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2WSEnterOrLeave::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 GS2WSEnterOrLeave::time() const {
  return time_;
}
inline void GS2WSEnterOrLeave::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GS2WSBossDead

// required int32 mapid = 1;
inline bool GS2WSBossDead::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GS2WSBossDead::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GS2WSBossDead::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GS2WSBossDead::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 GS2WSBossDead::mapid() const {
  return mapid_;
}
inline void GS2WSBossDead::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int64 charid = 2;
inline bool GS2WSBossDead::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GS2WSBossDead::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GS2WSBossDead::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GS2WSBossDead::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 GS2WSBossDead::charid() const {
  return charid_;
}
inline void GS2WSBossDead::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 viplevel = 3;
inline bool GS2WSBossDead::has_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GS2WSBossDead::set_has_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GS2WSBossDead::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GS2WSBossDead::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 GS2WSBossDead::viplevel() const {
  return viplevel_;
}
inline void GS2WSBossDead::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional bytes charname = 4;
inline bool GS2WSBossDead::has_charname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GS2WSBossDead::set_has_charname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GS2WSBossDead::clear_has_charname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GS2WSBossDead::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& GS2WSBossDead::charname() const {
  return *charname_;
}
inline void GS2WSBossDead::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void GS2WSBossDead::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void GS2WSBossDead::set_charname(const void* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GS2WSBossDead::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* GS2WSBossDead::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GS2WSBossDead::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WS2GMBossUIHLState

// required bool flag = 1;
inline bool WS2GMBossUIHLState::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WS2GMBossUIHLState::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WS2GMBossUIHLState::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WS2GMBossUIHLState::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool WS2GMBossUIHLState::flag() const {
  return flag_;
}
inline void WS2GMBossUIHLState::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// required int32 num = 2;
inline bool WS2GMBossUIHLState::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WS2GMBossUIHLState::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WS2GMBossUIHLState::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WS2GMBossUIHLState::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 WS2GMBossUIHLState::num() const {
  return num_;
}
inline void WS2GMBossUIHLState::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 mapID = 3;
inline bool WS2GMBossUIHLState::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WS2GMBossUIHLState::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WS2GMBossUIHLState::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WS2GMBossUIHLState::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 WS2GMBossUIHLState::mapid() const {
  return mapid_;
}
inline void WS2GMBossUIHLState::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// OneBossUpdateData

// optional int32 bossid = 1;
inline bool OneBossUpdateData::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneBossUpdateData::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneBossUpdateData::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneBossUpdateData::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 OneBossUpdateData::bossid() const {
  return bossid_;
}
inline void OneBossUpdateData::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// optional uint64 time = 2;
inline bool OneBossUpdateData::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneBossUpdateData::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneBossUpdateData::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneBossUpdateData::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 OneBossUpdateData::time() const {
  return time_;
}
inline void OneBossUpdateData::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ClientReqBossDamage

// required int32 bossId = 1;
inline bool ClientReqBossDamage::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqBossDamage::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqBossDamage::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqBossDamage::clear_bossid() {
  bossid_ = 0;
  clear_has_bossid();
}
inline ::google::protobuf::int32 ClientReqBossDamage::bossid() const {
  return bossid_;
}
inline void ClientReqBossDamage::set_bossid(::google::protobuf::int32 value) {
  set_has_bossid();
  bossid_ = value;
}

// -------------------------------------------------------------------

// AckReqBossDamage

// repeated .WorldBossDuplicate.DamageData infos = 1;
inline int AckReqBossDamage::infos_size() const {
  return infos_.size();
}
inline void AckReqBossDamage::clear_infos() {
  infos_.Clear();
}
inline const ::WorldBossDuplicate::DamageData& AckReqBossDamage::infos(int index) const {
  return infos_.Get(index);
}
inline ::WorldBossDuplicate::DamageData* AckReqBossDamage::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::WorldBossDuplicate::DamageData* AckReqBossDamage::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::DamageData >&
AckReqBossDamage::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::DamageData >*
AckReqBossDamage::mutable_infos() {
  return &infos_;
}

// optional int32 selfsort = 2;
inline bool AckReqBossDamage::has_selfsort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckReqBossDamage::set_has_selfsort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckReqBossDamage::clear_has_selfsort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckReqBossDamage::clear_selfsort() {
  selfsort_ = 0;
  clear_has_selfsort();
}
inline ::google::protobuf::int32 AckReqBossDamage::selfsort() const {
  return selfsort_;
}
inline void AckReqBossDamage::set_selfsort(::google::protobuf::int32 value) {
  set_has_selfsort();
  selfsort_ = value;
}

// optional float selfdamage = 3;
inline bool AckReqBossDamage::has_selfdamage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckReqBossDamage::set_has_selfdamage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckReqBossDamage::clear_has_selfdamage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckReqBossDamage::clear_selfdamage() {
  selfdamage_ = 0;
  clear_has_selfdamage();
}
inline float AckReqBossDamage::selfdamage() const {
  return selfdamage_;
}
inline void AckReqBossDamage::set_selfdamage(float value) {
  set_has_selfdamage();
  selfdamage_ = value;
}

// -------------------------------------------------------------------

// DamageData

// required bytes charname = 1;
inline bool DamageData::has_charname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DamageData::set_has_charname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DamageData::clear_has_charname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DamageData::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& DamageData::charname() const {
  return *charname_;
}
inline void DamageData::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void DamageData::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void DamageData::set_charname(const void* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DamageData::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* DamageData::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DamageData::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplevel = 2;
inline bool DamageData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DamageData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DamageData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DamageData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 DamageData::viplevel() const {
  return viplevel_;
}
inline void DamageData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional float damage = 3;
inline bool DamageData::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DamageData::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DamageData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DamageData::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline float DamageData::damage() const {
  return damage_;
}
inline void DamageData::set_damage(float value) {
  set_has_damage();
  damage_ = value;
}

// optional int64 charid = 4;
inline bool DamageData::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DamageData::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DamageData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DamageData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 DamageData::charid() const {
  return charid_;
}
inline void DamageData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// WorldBossUpdate

// repeated .WorldBossDuplicate.OneBossUpdateData datas = 1;
inline int WorldBossUpdate::datas_size() const {
  return datas_.size();
}
inline void WorldBossUpdate::clear_datas() {
  datas_.Clear();
}
inline const ::WorldBossDuplicate::OneBossUpdateData& WorldBossUpdate::datas(int index) const {
  return datas_.Get(index);
}
inline ::WorldBossDuplicate::OneBossUpdateData* WorldBossUpdate::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::WorldBossDuplicate::OneBossUpdateData* WorldBossUpdate::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::OneBossUpdateData >&
WorldBossUpdate::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::WorldBossDuplicate::OneBossUpdateData >*
WorldBossUpdate::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace WorldBossDuplicate

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WorldBoss_2fWorldBossDuplicate_2eproto__INCLUDED
