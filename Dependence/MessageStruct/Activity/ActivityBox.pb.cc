// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity/ActivityBox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity/ActivityBox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ActivityBoxInfo {

namespace {

const ::google::protobuf::Descriptor* ReqActivityBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqActivityBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientActivityBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientActivityBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientActivityBoxTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientActivityBoxTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMActivityBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMActivityBox_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2fActivityBox_2eproto() {
  protobuf_AddDesc_Activity_2fActivityBox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity/ActivityBox.proto");
  GOOGLE_CHECK(file != NULL);
  ReqActivityBox_descriptor_ = file->message_type(0);
  static const int ReqActivityBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityBox, nkey_),
  };
  ReqActivityBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqActivityBox_descriptor_,
      ReqActivityBox::default_instance_,
      ReqActivityBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqActivityBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqActivityBox));
  ToClientActivityBox_descriptor_ = file->message_type(1);
  static const int ToClientActivityBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBox, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBox, nkey_),
  };
  ToClientActivityBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientActivityBox_descriptor_,
      ToClientActivityBox::default_instance_,
      ToClientActivityBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientActivityBox));
  ToClientActivityBoxTimes_descriptor_ = file->message_type(2);
  static const int ToClientActivityBoxTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBoxTimes, ntimes_),
  };
  ToClientActivityBoxTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientActivityBoxTimes_descriptor_,
      ToClientActivityBoxTimes::default_instance_,
      ToClientActivityBoxTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBoxTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientActivityBoxTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientActivityBoxTimes));
  WSToGMActivityBox_descriptor_ = file->message_type(3);
  static const int WSToGMActivityBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMActivityBox, flag_),
  };
  WSToGMActivityBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMActivityBox_descriptor_,
      WSToGMActivityBox::default_instance_,
      WSToGMActivityBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMActivityBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMActivityBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMActivityBox));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2fActivityBox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqActivityBox_descriptor_, &ReqActivityBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientActivityBox_descriptor_, &ToClientActivityBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientActivityBoxTimes_descriptor_, &ToClientActivityBoxTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMActivityBox_descriptor_, &WSToGMActivityBox::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2fActivityBox_2eproto() {
  delete ReqActivityBox::default_instance_;
  delete ReqActivityBox_reflection_;
  delete ToClientActivityBox::default_instance_;
  delete ToClientActivityBox_reflection_;
  delete ToClientActivityBoxTimes::default_instance_;
  delete ToClientActivityBoxTimes_reflection_;
  delete WSToGMActivityBox::default_instance_;
  delete WSToGMActivityBox_reflection_;
}

void protobuf_AddDesc_Activity_2fActivityBox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Activity/ActivityBox.proto\022\017ActivityBo"
    "xInfo\"\036\n\016ReqActivityBox\022\014\n\004nkey\030\001 \002(\005\"0\n"
    "\023ToClientActivityBox\022\013\n\003ret\030\001 \002(\005\022\014\n\004nke"
    "y\030\002 \001(\005\"*\n\030ToClientActivityBoxTimes\022\016\n\006n"
    "times\030\001 \002(\005\"!\n\021WSToGMActivityBox\022\014\n\004flag"
    "\030\001 \002(\010", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity/ActivityBox.proto", &protobuf_RegisterTypes);
  ReqActivityBox::default_instance_ = new ReqActivityBox();
  ToClientActivityBox::default_instance_ = new ToClientActivityBox();
  ToClientActivityBoxTimes::default_instance_ = new ToClientActivityBoxTimes();
  WSToGMActivityBox::default_instance_ = new WSToGMActivityBox();
  ReqActivityBox::default_instance_->InitAsDefaultInstance();
  ToClientActivityBox::default_instance_->InitAsDefaultInstance();
  ToClientActivityBoxTimes::default_instance_->InitAsDefaultInstance();
  WSToGMActivityBox::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2fActivityBox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2fActivityBox_2eproto {
  StaticDescriptorInitializer_Activity_2fActivityBox_2eproto() {
    protobuf_AddDesc_Activity_2fActivityBox_2eproto();
  }
} static_descriptor_initializer_Activity_2fActivityBox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqActivityBox::kNkeyFieldNumber;
#endif  // !_MSC_VER

ReqActivityBox::ReqActivityBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqActivityBox::InitAsDefaultInstance() {
}

ReqActivityBox::ReqActivityBox(const ReqActivityBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqActivityBox::SharedCtor() {
  _cached_size_ = 0;
  nkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqActivityBox::~ReqActivityBox() {
  SharedDtor();
}

void ReqActivityBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqActivityBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqActivityBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqActivityBox_descriptor_;
}

const ReqActivityBox& ReqActivityBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fActivityBox_2eproto();
  return *default_instance_;
}

ReqActivityBox* ReqActivityBox::default_instance_ = NULL;

ReqActivityBox* ReqActivityBox::New() const {
  return new ReqActivityBox;
}

void ReqActivityBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqActivityBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nkey_)));
          set_has_nkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqActivityBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 nkey = 1;
  if (has_nkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqActivityBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nkey = 1;
  if (has_nkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqActivityBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nkey = 1;
    if (has_nkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqActivityBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqActivityBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqActivityBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqActivityBox::MergeFrom(const ReqActivityBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nkey()) {
      set_nkey(from.nkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqActivityBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqActivityBox::CopyFrom(const ReqActivityBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqActivityBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqActivityBox::Swap(ReqActivityBox* other) {
  if (other != this) {
    std::swap(nkey_, other->nkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqActivityBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqActivityBox_descriptor_;
  metadata.reflection = ReqActivityBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientActivityBox::kRetFieldNumber;
const int ToClientActivityBox::kNkeyFieldNumber;
#endif  // !_MSC_VER

ToClientActivityBox::ToClientActivityBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientActivityBox::InitAsDefaultInstance() {
}

ToClientActivityBox::ToClientActivityBox(const ToClientActivityBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientActivityBox::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  nkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientActivityBox::~ToClientActivityBox() {
  SharedDtor();
}

void ToClientActivityBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientActivityBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientActivityBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientActivityBox_descriptor_;
}

const ToClientActivityBox& ToClientActivityBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fActivityBox_2eproto();
  return *default_instance_;
}

ToClientActivityBox* ToClientActivityBox::default_instance_ = NULL;

ToClientActivityBox* ToClientActivityBox::New() const {
  return new ToClientActivityBox;
}

void ToClientActivityBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    nkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientActivityBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nkey;
        break;
      }

      // optional int32 nkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nkey_)));
          set_has_nkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientActivityBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 nkey = 2;
  if (has_nkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientActivityBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 nkey = 2;
  if (has_nkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientActivityBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 nkey = 2;
    if (has_nkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientActivityBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientActivityBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientActivityBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientActivityBox::MergeFrom(const ToClientActivityBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_nkey()) {
      set_nkey(from.nkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientActivityBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientActivityBox::CopyFrom(const ToClientActivityBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientActivityBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientActivityBox::Swap(ToClientActivityBox* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(nkey_, other->nkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientActivityBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientActivityBox_descriptor_;
  metadata.reflection = ToClientActivityBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientActivityBoxTimes::kNtimesFieldNumber;
#endif  // !_MSC_VER

ToClientActivityBoxTimes::ToClientActivityBoxTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientActivityBoxTimes::InitAsDefaultInstance() {
}

ToClientActivityBoxTimes::ToClientActivityBoxTimes(const ToClientActivityBoxTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientActivityBoxTimes::SharedCtor() {
  _cached_size_ = 0;
  ntimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientActivityBoxTimes::~ToClientActivityBoxTimes() {
  SharedDtor();
}

void ToClientActivityBoxTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientActivityBoxTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientActivityBoxTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientActivityBoxTimes_descriptor_;
}

const ToClientActivityBoxTimes& ToClientActivityBoxTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fActivityBox_2eproto();
  return *default_instance_;
}

ToClientActivityBoxTimes* ToClientActivityBoxTimes::default_instance_ = NULL;

ToClientActivityBoxTimes* ToClientActivityBoxTimes::New() const {
  return new ToClientActivityBoxTimes;
}

void ToClientActivityBoxTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientActivityBoxTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ntimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntimes_)));
          set_has_ntimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientActivityBoxTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ntimes = 1;
  if (has_ntimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientActivityBoxTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ntimes = 1;
  if (has_ntimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientActivityBoxTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ntimes = 1;
    if (has_ntimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientActivityBoxTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientActivityBoxTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientActivityBoxTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientActivityBoxTimes::MergeFrom(const ToClientActivityBoxTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntimes()) {
      set_ntimes(from.ntimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientActivityBoxTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientActivityBoxTimes::CopyFrom(const ToClientActivityBoxTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientActivityBoxTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientActivityBoxTimes::Swap(ToClientActivityBoxTimes* other) {
  if (other != this) {
    std::swap(ntimes_, other->ntimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientActivityBoxTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientActivityBoxTimes_descriptor_;
  metadata.reflection = ToClientActivityBoxTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMActivityBox::kFlagFieldNumber;
#endif  // !_MSC_VER

WSToGMActivityBox::WSToGMActivityBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMActivityBox::InitAsDefaultInstance() {
}

WSToGMActivityBox::WSToGMActivityBox(const WSToGMActivityBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMActivityBox::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMActivityBox::~WSToGMActivityBox() {
  SharedDtor();
}

void WSToGMActivityBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMActivityBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMActivityBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMActivityBox_descriptor_;
}

const WSToGMActivityBox& WSToGMActivityBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fActivityBox_2eproto();
  return *default_instance_;
}

WSToGMActivityBox* WSToGMActivityBox::default_instance_ = NULL;

WSToGMActivityBox* WSToGMActivityBox::New() const {
  return new WSToGMActivityBox;
}

void WSToGMActivityBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMActivityBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMActivityBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMActivityBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMActivityBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMActivityBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMActivityBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMActivityBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMActivityBox::MergeFrom(const WSToGMActivityBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMActivityBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMActivityBox::CopyFrom(const WSToGMActivityBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMActivityBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToGMActivityBox::Swap(WSToGMActivityBox* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMActivityBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMActivityBox_descriptor_;
  metadata.reflection = WSToGMActivityBox_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivityBoxInfo

// @@protoc_insertion_point(global_scope)
