// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/Tencent.proto

#ifndef PROTOBUF_Pay_2fTencent_2eproto__INCLUDED
#define PROTOBUF_Pay_2fTencent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TencentInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pay_2fTencent_2eproto();
void protobuf_AssignDesc_Pay_2fTencent_2eproto();
void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

class ClientReqAskPayInfo;
class GSToClientAskPayInfo;
class CallBackInfo;
class ToTencentCallBackInfo;
class SysPayInfo;
class ClientToGameTencentmarket;
class MaketCallBackInfo;
class ToTencentMaketCallBackInfo;
class SysMarketInfo;
class MarketTaskInfo;
class TaskInfo;

// ===================================================================

class ClientReqAskPayInfo : public ::google::protobuf::Message {
 public:
  ClientReqAskPayInfo();
  virtual ~ClientReqAskPayInfo();

  ClientReqAskPayInfo(const ClientReqAskPayInfo& from);

  inline ClientReqAskPayInfo& operator=(const ClientReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqAskPayInfo& default_instance();

  void Swap(ClientReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  ClientReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqAskPayInfo& from);
  void MergeFrom(const ClientReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TencentInfo.ClientReqAskPayInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static ClientReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class GSToClientAskPayInfo : public ::google::protobuf::Message {
 public:
  GSToClientAskPayInfo();
  virtual ~GSToClientAskPayInfo();

  GSToClientAskPayInfo(const GSToClientAskPayInfo& from);

  inline GSToClientAskPayInfo& operator=(const GSToClientAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GSToClientAskPayInfo& default_instance();

  void Swap(GSToClientAskPayInfo* other);

  // implements Message ----------------------------------------------

  GSToClientAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GSToClientAskPayInfo& from);
  void MergeFrom(const GSToClientAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required string url_params = 2;
  inline bool has_url_params() const;
  inline void clear_url_params();
  static const int kUrlParamsFieldNumber = 2;
  inline const ::std::string& url_params() const;
  inline void set_url_params(const ::std::string& value);
  inline void set_url_params(const char* value);
  inline void set_url_params(const char* value, size_t size);
  inline ::std::string* mutable_url_params();
  inline ::std::string* release_url_params();
  inline void set_allocated_url_params(::std::string* url_params);

  // @@protoc_insertion_point(class_scope:TencentInfo.GSToClientAskPayInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_url_params();
  inline void clear_has_url_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_params_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static GSToClientAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class CallBackInfo : public ::google::protobuf::Message {
 public:
  CallBackInfo();
  virtual ~CallBackInfo();

  CallBackInfo(const CallBackInfo& from);

  inline CallBackInfo& operator=(const CallBackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallBackInfo& default_instance();

  void Swap(CallBackInfo* other);

  // implements Message ----------------------------------------------

  CallBackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallBackInfo& from);
  void MergeFrom(const CallBackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string params = 1;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 1;
  inline const ::std::string& params() const;
  inline void set_params(const ::std::string& value);
  inline void set_params(const char* value);
  inline void set_params(const char* value, size_t size);
  inline ::std::string* mutable_params();
  inline ::std::string* release_params();
  inline void set_allocated_params(::std::string* params);

  // @@protoc_insertion_point(class_scope:TencentInfo.CallBackInfo)
 private:
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* params_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static CallBackInfo* default_instance_;
};
// -------------------------------------------------------------------

class ToTencentCallBackInfo : public ::google::protobuf::Message {
 public:
  ToTencentCallBackInfo();
  virtual ~ToTencentCallBackInfo();

  ToTencentCallBackInfo(const ToTencentCallBackInfo& from);

  inline ToTencentCallBackInfo& operator=(const ToTencentCallBackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTencentCallBackInfo& default_instance();

  void Swap(ToTencentCallBackInfo* other);

  // implements Message ----------------------------------------------

  ToTencentCallBackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToTencentCallBackInfo& from);
  void MergeFrom(const ToTencentCallBackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline const ::std::string& ret() const;
  inline void set_ret(const ::std::string& value);
  inline void set_ret(const char* value);
  inline void set_ret(const char* value, size_t size);
  inline ::std::string* mutable_ret();
  inline ::std::string* release_ret();
  inline void set_allocated_ret(::std::string* ret);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:TencentInfo.ToTencentCallBackInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static ToTencentCallBackInfo* default_instance_;
};
// -------------------------------------------------------------------

class SysPayInfo : public ::google::protobuf::Message {
 public:
  SysPayInfo();
  virtual ~SysPayInfo();

  SysPayInfo(const SysPayInfo& from);

  inline SysPayInfo& operator=(const SysPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SysPayInfo& default_instance();

  void Swap(SysPayInfo* other);

  // implements Message ----------------------------------------------

  SysPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SysPayInfo& from);
  void MergeFrom(const SysPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 realMoney = 4;
  inline bool has_realmoney() const;
  inline void clear_realmoney();
  static const int kRealMoneyFieldNumber = 4;
  inline ::google::protobuf::int32 realmoney() const;
  inline void set_realmoney(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TencentInfo.SysPayInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_realmoney();
  inline void clear_has_realmoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 realmoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static SysPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientToGameTencentmarket : public ::google::protobuf::Message {
 public:
  ClientToGameTencentmarket();
  virtual ~ClientToGameTencentmarket();

  ClientToGameTencentmarket(const ClientToGameTencentmarket& from);

  inline ClientToGameTencentmarket& operator=(const ClientToGameTencentmarket& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientToGameTencentmarket& default_instance();

  void Swap(ClientToGameTencentmarket* other);

  // implements Message ----------------------------------------------

  ClientToGameTencentmarket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientToGameTencentmarket& from);
  void MergeFrom(const ClientToGameTencentmarket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string app_user_source = 1;
  inline bool has_app_user_source() const;
  inline void clear_app_user_source();
  static const int kAppUserSourceFieldNumber = 1;
  inline const ::std::string& app_user_source() const;
  inline void set_app_user_source(const ::std::string& value);
  inline void set_app_user_source(const char* value);
  inline void set_app_user_source(const char* value, size_t size);
  inline ::std::string* mutable_app_user_source();
  inline ::std::string* release_app_user_source();
  inline void set_allocated_app_user_source(::std::string* app_user_source);

  // required string app_contract_id = 2;
  inline bool has_app_contract_id() const;
  inline void clear_app_contract_id();
  static const int kAppContractIdFieldNumber = 2;
  inline const ::std::string& app_contract_id() const;
  inline void set_app_contract_id(const ::std::string& value);
  inline void set_app_contract_id(const char* value);
  inline void set_app_contract_id(const char* value, size_t size);
  inline ::std::string* mutable_app_contract_id();
  inline ::std::string* release_app_contract_id();
  inline void set_allocated_app_contract_id(::std::string* app_contract_id);

  // required string app_custom = 3;
  inline bool has_app_custom() const;
  inline void clear_app_custom();
  static const int kAppCustomFieldNumber = 3;
  inline const ::std::string& app_custom() const;
  inline void set_app_custom(const ::std::string& value);
  inline void set_app_custom(const char* value);
  inline void set_app_custom(const char* value, size_t size);
  inline ::std::string* mutable_app_custom();
  inline ::std::string* release_app_custom();
  inline void set_allocated_app_custom(::std::string* app_custom);

  // @@protoc_insertion_point(class_scope:TencentInfo.ClientToGameTencentmarket)
 private:
  inline void set_has_app_user_source();
  inline void clear_has_app_user_source();
  inline void set_has_app_contract_id();
  inline void clear_has_app_contract_id();
  inline void set_has_app_custom();
  inline void clear_has_app_custom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* app_user_source_;
  ::std::string* app_contract_id_;
  ::std::string* app_custom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static ClientToGameTencentmarket* default_instance_;
};
// -------------------------------------------------------------------

class MaketCallBackInfo : public ::google::protobuf::Message {
 public:
  MaketCallBackInfo();
  virtual ~MaketCallBackInfo();

  MaketCallBackInfo(const MaketCallBackInfo& from);

  inline MaketCallBackInfo& operator=(const MaketCallBackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MaketCallBackInfo& default_instance();

  void Swap(MaketCallBackInfo* other);

  // implements Message ----------------------------------------------

  MaketCallBackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MaketCallBackInfo& from);
  void MergeFrom(const MaketCallBackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  inline void set_allocated_cmd(::std::string* cmd);

  // required string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required string appid = 3;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 3;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // required string pf = 4;
  inline bool has_pf() const;
  inline void clear_pf();
  static const int kPfFieldNumber = 4;
  inline const ::std::string& pf() const;
  inline void set_pf(const ::std::string& value);
  inline void set_pf(const char* value);
  inline void set_pf(const char* value, size_t size);
  inline ::std::string* mutable_pf();
  inline ::std::string* release_pf();
  inline void set_allocated_pf(::std::string* pf);

  // required string ts = 5;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 5;
  inline const ::std::string& ts() const;
  inline void set_ts(const ::std::string& value);
  inline void set_ts(const char* value);
  inline void set_ts(const char* value, size_t size);
  inline ::std::string* mutable_ts();
  inline ::std::string* release_ts();
  inline void set_allocated_ts(::std::string* ts);

  // required string version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required string contractid = 7;
  inline bool has_contractid() const;
  inline void clear_contractid();
  static const int kContractidFieldNumber = 7;
  inline const ::std::string& contractid() const;
  inline void set_contractid(const ::std::string& value);
  inline void set_contractid(const char* value);
  inline void set_contractid(const char* value, size_t size);
  inline ::std::string* mutable_contractid();
  inline ::std::string* release_contractid();
  inline void set_allocated_contractid(::std::string* contractid);

  // required string step = 8;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 8;
  inline const ::std::string& step() const;
  inline void set_step(const ::std::string& value);
  inline void set_step(const char* value);
  inline void set_step(const char* value, size_t size);
  inline ::std::string* mutable_step();
  inline ::std::string* release_step();
  inline void set_allocated_step(::std::string* step);

  // required string payitem = 9;
  inline bool has_payitem() const;
  inline void clear_payitem();
  static const int kPayitemFieldNumber = 9;
  inline const ::std::string& payitem() const;
  inline void set_payitem(const ::std::string& value);
  inline void set_payitem(const char* value);
  inline void set_payitem(const char* value, size_t size);
  inline ::std::string* mutable_payitem();
  inline ::std::string* release_payitem();
  inline void set_allocated_payitem(::std::string* payitem);

  // required string billno = 10;
  inline bool has_billno() const;
  inline void clear_billno();
  static const int kBillnoFieldNumber = 10;
  inline const ::std::string& billno() const;
  inline void set_billno(const ::std::string& value);
  inline void set_billno(const char* value);
  inline void set_billno(const char* value, size_t size);
  inline ::std::string* mutable_billno();
  inline ::std::string* release_billno();
  inline void set_allocated_billno(::std::string* billno);

  // required string providetype = 11;
  inline bool has_providetype() const;
  inline void clear_providetype();
  static const int kProvidetypeFieldNumber = 11;
  inline const ::std::string& providetype() const;
  inline void set_providetype(const ::std::string& value);
  inline void set_providetype(const char* value);
  inline void set_providetype(const char* value, size_t size);
  inline ::std::string* mutable_providetype();
  inline ::std::string* release_providetype();
  inline void set_allocated_providetype(::std::string* providetype);

  // required string sig = 12;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 12;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:TencentInfo.MaketCallBackInfo)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_pf();
  inline void clear_has_pf();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_contractid();
  inline void clear_has_contractid();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_payitem();
  inline void clear_has_payitem();
  inline void set_has_billno();
  inline void clear_has_billno();
  inline void set_has_providetype();
  inline void clear_has_providetype();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cmd_;
  ::std::string* openid_;
  ::std::string* appid_;
  ::std::string* pf_;
  ::std::string* ts_;
  ::std::string* version_;
  ::std::string* contractid_;
  ::std::string* step_;
  ::std::string* payitem_;
  ::std::string* billno_;
  ::std::string* providetype_;
  ::std::string* sig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static MaketCallBackInfo* default_instance_;
};
// -------------------------------------------------------------------

class ToTencentMaketCallBackInfo : public ::google::protobuf::Message {
 public:
  ToTencentMaketCallBackInfo();
  virtual ~ToTencentMaketCallBackInfo();

  ToTencentMaketCallBackInfo(const ToTencentMaketCallBackInfo& from);

  inline ToTencentMaketCallBackInfo& operator=(const ToTencentMaketCallBackInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToTencentMaketCallBackInfo& default_instance();

  void Swap(ToTencentMaketCallBackInfo* other);

  // implements Message ----------------------------------------------

  ToTencentMaketCallBackInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToTencentMaketCallBackInfo& from);
  void MergeFrom(const ToTencentMaketCallBackInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline const ::std::string& ret() const;
  inline void set_ret(const ::std::string& value);
  inline void set_ret(const char* value);
  inline void set_ret(const char* value, size_t size);
  inline ::std::string* mutable_ret();
  inline ::std::string* release_ret();
  inline void set_allocated_ret(::std::string* ret);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required string zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline const ::std::string& zoneid() const;
  inline void set_zoneid(const ::std::string& value);
  inline void set_zoneid(const char* value);
  inline void set_zoneid(const char* value, size_t size);
  inline ::std::string* mutable_zoneid();
  inline ::std::string* release_zoneid();
  inline void set_allocated_zoneid(::std::string* zoneid);

  // @@protoc_insertion_point(class_scope:TencentInfo.ToTencentMaketCallBackInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ret_;
  ::std::string* msg_;
  ::std::string* zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static ToTencentMaketCallBackInfo* default_instance_;
};
// -------------------------------------------------------------------

class SysMarketInfo : public ::google::protobuf::Message {
 public:
  SysMarketInfo();
  virtual ~SysMarketInfo();

  SysMarketInfo(const SysMarketInfo& from);

  inline SysMarketInfo& operator=(const SysMarketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SysMarketInfo& default_instance();

  void Swap(SysMarketInfo* other);

  // implements Message ----------------------------------------------

  SysMarketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SysMarketInfo& from);
  void MergeFrom(const SysMarketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TencentInfo.SysMarketInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static SysMarketInfo* default_instance_;
};
// -------------------------------------------------------------------

class MarketTaskInfo : public ::google::protobuf::Message {
 public:
  MarketTaskInfo();
  virtual ~MarketTaskInfo();

  MarketTaskInfo(const MarketTaskInfo& from);

  inline MarketTaskInfo& operator=(const MarketTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketTaskInfo& default_instance();

  void Swap(MarketTaskInfo* other);

  // implements Message ----------------------------------------------

  MarketTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarketTaskInfo& from);
  void MergeFrom(const MarketTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // repeated .TencentInfo.TaskInfo taskinfo = 2;
  inline int taskinfo_size() const;
  inline void clear_taskinfo();
  static const int kTaskinfoFieldNumber = 2;
  inline const ::TencentInfo::TaskInfo& taskinfo(int index) const;
  inline ::TencentInfo::TaskInfo* mutable_taskinfo(int index);
  inline ::TencentInfo::TaskInfo* add_taskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::TencentInfo::TaskInfo >&
      taskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::TencentInfo::TaskInfo >*
      mutable_taskinfo();

  // @@protoc_insertion_point(class_scope:TencentInfo.MarketTaskInfo)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::google::protobuf::RepeatedPtrField< ::TencentInfo::TaskInfo > taskinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static MarketTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class TaskInfo : public ::google::protobuf::Message {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskInfo& default_instance();

  void Swap(TaskInfo* other);

  // implements Message ----------------------------------------------

  TaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline const ::std::string& taskid() const;
  inline void set_taskid(const ::std::string& value);
  inline void set_taskid(const char* value);
  inline void set_taskid(const char* value, size_t size);
  inline ::std::string* mutable_taskid();
  inline ::std::string* release_taskid();
  inline void set_allocated_taskid(::std::string* taskid);

  // optional bool step1 = 2;
  inline bool has_step1() const;
  inline void clear_step1();
  static const int kStep1FieldNumber = 2;
  inline bool step1() const;
  inline void set_step1(bool value);

  // optional bool step2 = 3;
  inline bool has_step2() const;
  inline void clear_step2();
  static const int kStep2FieldNumber = 3;
  inline bool step2() const;
  inline void set_step2(bool value);

  // optional bool step3 = 4;
  inline bool has_step3() const;
  inline void clear_step3();
  static const int kStep3FieldNumber = 4;
  inline bool step3() const;
  inline void set_step3(bool value);

  // optional bool step4 = 5;
  inline bool has_step4() const;
  inline void clear_step4();
  static const int kStep4FieldNumber = 5;
  inline bool step4() const;
  inline void set_step4(bool value);

  // @@protoc_insertion_point(class_scope:TencentInfo.TaskInfo)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_step1();
  inline void clear_has_step1();
  inline void set_has_step2();
  inline void clear_has_step2();
  inline void set_has_step3();
  inline void clear_has_step3();
  inline void set_has_step4();
  inline void clear_has_step4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* taskid_;
  bool step1_;
  bool step2_;
  bool step3_;
  bool step4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fTencent_2eproto();
  friend void protobuf_AssignDesc_Pay_2fTencent_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fTencent_2eproto();

  void InitAsDefaultInstance();
  static TaskInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientReqAskPayInfo

// required int32 itemId = 1;
inline bool ClientReqAskPayInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqAskPayInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqAskPayInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqAskPayInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 ClientReqAskPayInfo::itemid() const {
  return itemid_;
}
inline void ClientReqAskPayInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 num = 2;
inline bool ClientReqAskPayInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientReqAskPayInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientReqAskPayInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientReqAskPayInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ClientReqAskPayInfo::num() const {
  return num_;
}
inline void ClientReqAskPayInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// GSToClientAskPayInfo

// required int32 ret = 1;
inline bool GSToClientAskPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GSToClientAskPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GSToClientAskPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GSToClientAskPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 GSToClientAskPayInfo::ret() const {
  return ret_;
}
inline void GSToClientAskPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required string url_params = 2;
inline bool GSToClientAskPayInfo::has_url_params() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GSToClientAskPayInfo::set_has_url_params() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GSToClientAskPayInfo::clear_has_url_params() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GSToClientAskPayInfo::clear_url_params() {
  if (url_params_ != &::google::protobuf::internal::kEmptyString) {
    url_params_->clear();
  }
  clear_has_url_params();
}
inline const ::std::string& GSToClientAskPayInfo::url_params() const {
  return *url_params_;
}
inline void GSToClientAskPayInfo::set_url_params(const ::std::string& value) {
  set_has_url_params();
  if (url_params_ == &::google::protobuf::internal::kEmptyString) {
    url_params_ = new ::std::string;
  }
  url_params_->assign(value);
}
inline void GSToClientAskPayInfo::set_url_params(const char* value) {
  set_has_url_params();
  if (url_params_ == &::google::protobuf::internal::kEmptyString) {
    url_params_ = new ::std::string;
  }
  url_params_->assign(value);
}
inline void GSToClientAskPayInfo::set_url_params(const char* value, size_t size) {
  set_has_url_params();
  if (url_params_ == &::google::protobuf::internal::kEmptyString) {
    url_params_ = new ::std::string;
  }
  url_params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GSToClientAskPayInfo::mutable_url_params() {
  set_has_url_params();
  if (url_params_ == &::google::protobuf::internal::kEmptyString) {
    url_params_ = new ::std::string;
  }
  return url_params_;
}
inline ::std::string* GSToClientAskPayInfo::release_url_params() {
  clear_has_url_params();
  if (url_params_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_params_;
    url_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GSToClientAskPayInfo::set_allocated_url_params(::std::string* url_params) {
  if (url_params_ != &::google::protobuf::internal::kEmptyString) {
    delete url_params_;
  }
  if (url_params) {
    set_has_url_params();
    url_params_ = url_params;
  } else {
    clear_has_url_params();
    url_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CallBackInfo

// required string params = 1;
inline bool CallBackInfo::has_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallBackInfo::set_has_params() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallBackInfo::clear_has_params() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallBackInfo::clear_params() {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    params_->clear();
  }
  clear_has_params();
}
inline const ::std::string& CallBackInfo::params() const {
  return *params_;
}
inline void CallBackInfo::set_params(const ::std::string& value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(value);
}
inline void CallBackInfo::set_params(const char* value) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(value);
}
inline void CallBackInfo::set_params(const char* value, size_t size) {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  params_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CallBackInfo::mutable_params() {
  set_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    params_ = new ::std::string;
  }
  return params_;
}
inline ::std::string* CallBackInfo::release_params() {
  clear_has_params();
  if (params_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = params_;
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CallBackInfo::set_allocated_params(::std::string* params) {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (params) {
    set_has_params();
    params_ = params;
  } else {
    clear_has_params();
    params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ToTencentCallBackInfo

// required string ret = 1;
inline bool ToTencentCallBackInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTencentCallBackInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTencentCallBackInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTencentCallBackInfo::clear_ret() {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    ret_->clear();
  }
  clear_has_ret();
}
inline const ::std::string& ToTencentCallBackInfo::ret() const {
  return *ret_;
}
inline void ToTencentCallBackInfo::set_ret(const ::std::string& value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
}
inline void ToTencentCallBackInfo::set_ret(const char* value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
}
inline void ToTencentCallBackInfo::set_ret(const char* value, size_t size) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  ret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTencentCallBackInfo::mutable_ret() {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  return ret_;
}
inline ::std::string* ToTencentCallBackInfo::release_ret() {
  clear_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ret_;
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTencentCallBackInfo::set_allocated_ret(::std::string* ret) {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_;
  }
  if (ret) {
    set_has_ret();
    ret_ = ret;
  } else {
    clear_has_ret();
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg = 2;
inline bool ToTencentCallBackInfo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToTencentCallBackInfo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToTencentCallBackInfo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToTencentCallBackInfo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ToTencentCallBackInfo::msg() const {
  return *msg_;
}
inline void ToTencentCallBackInfo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ToTencentCallBackInfo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ToTencentCallBackInfo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTencentCallBackInfo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ToTencentCallBackInfo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTencentCallBackInfo::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SysPayInfo

// required int64 charId = 1;
inline bool SysPayInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysPayInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysPayInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysPayInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SysPayInfo::charid() const {
  return charid_;
}
inline void SysPayInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 itemId = 2;
inline bool SysPayInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysPayInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysPayInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysPayInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 SysPayInfo::itemid() const {
  return itemid_;
}
inline void SysPayInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 num = 3;
inline bool SysPayInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysPayInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysPayInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysPayInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SysPayInfo::num() const {
  return num_;
}
inline void SysPayInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 realMoney = 4;
inline bool SysPayInfo::has_realmoney() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysPayInfo::set_has_realmoney() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SysPayInfo::clear_has_realmoney() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SysPayInfo::clear_realmoney() {
  realmoney_ = 0;
  clear_has_realmoney();
}
inline ::google::protobuf::int32 SysPayInfo::realmoney() const {
  return realmoney_;
}
inline void SysPayInfo::set_realmoney(::google::protobuf::int32 value) {
  set_has_realmoney();
  realmoney_ = value;
}

// -------------------------------------------------------------------

// ClientToGameTencentmarket

// required string app_user_source = 1;
inline bool ClientToGameTencentmarket::has_app_user_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientToGameTencentmarket::set_has_app_user_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientToGameTencentmarket::clear_has_app_user_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientToGameTencentmarket::clear_app_user_source() {
  if (app_user_source_ != &::google::protobuf::internal::kEmptyString) {
    app_user_source_->clear();
  }
  clear_has_app_user_source();
}
inline const ::std::string& ClientToGameTencentmarket::app_user_source() const {
  return *app_user_source_;
}
inline void ClientToGameTencentmarket::set_app_user_source(const ::std::string& value) {
  set_has_app_user_source();
  if (app_user_source_ == &::google::protobuf::internal::kEmptyString) {
    app_user_source_ = new ::std::string;
  }
  app_user_source_->assign(value);
}
inline void ClientToGameTencentmarket::set_app_user_source(const char* value) {
  set_has_app_user_source();
  if (app_user_source_ == &::google::protobuf::internal::kEmptyString) {
    app_user_source_ = new ::std::string;
  }
  app_user_source_->assign(value);
}
inline void ClientToGameTencentmarket::set_app_user_source(const char* value, size_t size) {
  set_has_app_user_source();
  if (app_user_source_ == &::google::protobuf::internal::kEmptyString) {
    app_user_source_ = new ::std::string;
  }
  app_user_source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientToGameTencentmarket::mutable_app_user_source() {
  set_has_app_user_source();
  if (app_user_source_ == &::google::protobuf::internal::kEmptyString) {
    app_user_source_ = new ::std::string;
  }
  return app_user_source_;
}
inline ::std::string* ClientToGameTencentmarket::release_app_user_source() {
  clear_has_app_user_source();
  if (app_user_source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_user_source_;
    app_user_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientToGameTencentmarket::set_allocated_app_user_source(::std::string* app_user_source) {
  if (app_user_source_ != &::google::protobuf::internal::kEmptyString) {
    delete app_user_source_;
  }
  if (app_user_source) {
    set_has_app_user_source();
    app_user_source_ = app_user_source;
  } else {
    clear_has_app_user_source();
    app_user_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string app_contract_id = 2;
inline bool ClientToGameTencentmarket::has_app_contract_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientToGameTencentmarket::set_has_app_contract_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientToGameTencentmarket::clear_has_app_contract_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientToGameTencentmarket::clear_app_contract_id() {
  if (app_contract_id_ != &::google::protobuf::internal::kEmptyString) {
    app_contract_id_->clear();
  }
  clear_has_app_contract_id();
}
inline const ::std::string& ClientToGameTencentmarket::app_contract_id() const {
  return *app_contract_id_;
}
inline void ClientToGameTencentmarket::set_app_contract_id(const ::std::string& value) {
  set_has_app_contract_id();
  if (app_contract_id_ == &::google::protobuf::internal::kEmptyString) {
    app_contract_id_ = new ::std::string;
  }
  app_contract_id_->assign(value);
}
inline void ClientToGameTencentmarket::set_app_contract_id(const char* value) {
  set_has_app_contract_id();
  if (app_contract_id_ == &::google::protobuf::internal::kEmptyString) {
    app_contract_id_ = new ::std::string;
  }
  app_contract_id_->assign(value);
}
inline void ClientToGameTencentmarket::set_app_contract_id(const char* value, size_t size) {
  set_has_app_contract_id();
  if (app_contract_id_ == &::google::protobuf::internal::kEmptyString) {
    app_contract_id_ = new ::std::string;
  }
  app_contract_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientToGameTencentmarket::mutable_app_contract_id() {
  set_has_app_contract_id();
  if (app_contract_id_ == &::google::protobuf::internal::kEmptyString) {
    app_contract_id_ = new ::std::string;
  }
  return app_contract_id_;
}
inline ::std::string* ClientToGameTencentmarket::release_app_contract_id() {
  clear_has_app_contract_id();
  if (app_contract_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_contract_id_;
    app_contract_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientToGameTencentmarket::set_allocated_app_contract_id(::std::string* app_contract_id) {
  if (app_contract_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_contract_id_;
  }
  if (app_contract_id) {
    set_has_app_contract_id();
    app_contract_id_ = app_contract_id;
  } else {
    clear_has_app_contract_id();
    app_contract_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string app_custom = 3;
inline bool ClientToGameTencentmarket::has_app_custom() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientToGameTencentmarket::set_has_app_custom() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientToGameTencentmarket::clear_has_app_custom() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientToGameTencentmarket::clear_app_custom() {
  if (app_custom_ != &::google::protobuf::internal::kEmptyString) {
    app_custom_->clear();
  }
  clear_has_app_custom();
}
inline const ::std::string& ClientToGameTencentmarket::app_custom() const {
  return *app_custom_;
}
inline void ClientToGameTencentmarket::set_app_custom(const ::std::string& value) {
  set_has_app_custom();
  if (app_custom_ == &::google::protobuf::internal::kEmptyString) {
    app_custom_ = new ::std::string;
  }
  app_custom_->assign(value);
}
inline void ClientToGameTencentmarket::set_app_custom(const char* value) {
  set_has_app_custom();
  if (app_custom_ == &::google::protobuf::internal::kEmptyString) {
    app_custom_ = new ::std::string;
  }
  app_custom_->assign(value);
}
inline void ClientToGameTencentmarket::set_app_custom(const char* value, size_t size) {
  set_has_app_custom();
  if (app_custom_ == &::google::protobuf::internal::kEmptyString) {
    app_custom_ = new ::std::string;
  }
  app_custom_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientToGameTencentmarket::mutable_app_custom() {
  set_has_app_custom();
  if (app_custom_ == &::google::protobuf::internal::kEmptyString) {
    app_custom_ = new ::std::string;
  }
  return app_custom_;
}
inline ::std::string* ClientToGameTencentmarket::release_app_custom() {
  clear_has_app_custom();
  if (app_custom_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_custom_;
    app_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientToGameTencentmarket::set_allocated_app_custom(::std::string* app_custom) {
  if (app_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete app_custom_;
  }
  if (app_custom) {
    set_has_app_custom();
    app_custom_ = app_custom;
  } else {
    clear_has_app_custom();
    app_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MaketCallBackInfo

// required string cmd = 1;
inline bool MaketCallBackInfo::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MaketCallBackInfo::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MaketCallBackInfo::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MaketCallBackInfo::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& MaketCallBackInfo::cmd() const {
  return *cmd_;
}
inline void MaketCallBackInfo::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void MaketCallBackInfo::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void MaketCallBackInfo::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* MaketCallBackInfo::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_cmd(::std::string* cmd) {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (cmd) {
    set_has_cmd();
    cmd_ = cmd;
  } else {
    clear_has_cmd();
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string openid = 2;
inline bool MaketCallBackInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MaketCallBackInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MaketCallBackInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MaketCallBackInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& MaketCallBackInfo::openid() const {
  return *openid_;
}
inline void MaketCallBackInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void MaketCallBackInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void MaketCallBackInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* MaketCallBackInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string appid = 3;
inline bool MaketCallBackInfo::has_appid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MaketCallBackInfo::set_has_appid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MaketCallBackInfo::clear_has_appid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MaketCallBackInfo::clear_appid() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& MaketCallBackInfo::appid() const {
  return *appid_;
}
inline void MaketCallBackInfo::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void MaketCallBackInfo::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void MaketCallBackInfo::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  return appid_;
}
inline ::std::string* MaketCallBackInfo::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string pf = 4;
inline bool MaketCallBackInfo::has_pf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MaketCallBackInfo::set_has_pf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MaketCallBackInfo::clear_has_pf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MaketCallBackInfo::clear_pf() {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    pf_->clear();
  }
  clear_has_pf();
}
inline const ::std::string& MaketCallBackInfo::pf() const {
  return *pf_;
}
inline void MaketCallBackInfo::set_pf(const ::std::string& value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void MaketCallBackInfo::set_pf(const char* value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void MaketCallBackInfo::set_pf(const char* value, size_t size) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_pf() {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  return pf_;
}
inline ::std::string* MaketCallBackInfo::release_pf() {
  clear_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pf_;
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_pf(::std::string* pf) {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pf) {
    set_has_pf();
    pf_ = pf;
  } else {
    clear_has_pf();
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ts = 5;
inline bool MaketCallBackInfo::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MaketCallBackInfo::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MaketCallBackInfo::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MaketCallBackInfo::clear_ts() {
  if (ts_ != &::google::protobuf::internal::kEmptyString) {
    ts_->clear();
  }
  clear_has_ts();
}
inline const ::std::string& MaketCallBackInfo::ts() const {
  return *ts_;
}
inline void MaketCallBackInfo::set_ts(const ::std::string& value) {
  set_has_ts();
  if (ts_ == &::google::protobuf::internal::kEmptyString) {
    ts_ = new ::std::string;
  }
  ts_->assign(value);
}
inline void MaketCallBackInfo::set_ts(const char* value) {
  set_has_ts();
  if (ts_ == &::google::protobuf::internal::kEmptyString) {
    ts_ = new ::std::string;
  }
  ts_->assign(value);
}
inline void MaketCallBackInfo::set_ts(const char* value, size_t size) {
  set_has_ts();
  if (ts_ == &::google::protobuf::internal::kEmptyString) {
    ts_ = new ::std::string;
  }
  ts_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_ts() {
  set_has_ts();
  if (ts_ == &::google::protobuf::internal::kEmptyString) {
    ts_ = new ::std::string;
  }
  return ts_;
}
inline ::std::string* MaketCallBackInfo::release_ts() {
  clear_has_ts();
  if (ts_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ts_;
    ts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_ts(::std::string* ts) {
  if (ts_ != &::google::protobuf::internal::kEmptyString) {
    delete ts_;
  }
  if (ts) {
    set_has_ts();
    ts_ = ts;
  } else {
    clear_has_ts();
    ts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string version = 6;
inline bool MaketCallBackInfo::has_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MaketCallBackInfo::set_has_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MaketCallBackInfo::clear_has_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MaketCallBackInfo::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& MaketCallBackInfo::version() const {
  return *version_;
}
inline void MaketCallBackInfo::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void MaketCallBackInfo::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void MaketCallBackInfo::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* MaketCallBackInfo::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string contractid = 7;
inline bool MaketCallBackInfo::has_contractid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MaketCallBackInfo::set_has_contractid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MaketCallBackInfo::clear_has_contractid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MaketCallBackInfo::clear_contractid() {
  if (contractid_ != &::google::protobuf::internal::kEmptyString) {
    contractid_->clear();
  }
  clear_has_contractid();
}
inline const ::std::string& MaketCallBackInfo::contractid() const {
  return *contractid_;
}
inline void MaketCallBackInfo::set_contractid(const ::std::string& value) {
  set_has_contractid();
  if (contractid_ == &::google::protobuf::internal::kEmptyString) {
    contractid_ = new ::std::string;
  }
  contractid_->assign(value);
}
inline void MaketCallBackInfo::set_contractid(const char* value) {
  set_has_contractid();
  if (contractid_ == &::google::protobuf::internal::kEmptyString) {
    contractid_ = new ::std::string;
  }
  contractid_->assign(value);
}
inline void MaketCallBackInfo::set_contractid(const char* value, size_t size) {
  set_has_contractid();
  if (contractid_ == &::google::protobuf::internal::kEmptyString) {
    contractid_ = new ::std::string;
  }
  contractid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_contractid() {
  set_has_contractid();
  if (contractid_ == &::google::protobuf::internal::kEmptyString) {
    contractid_ = new ::std::string;
  }
  return contractid_;
}
inline ::std::string* MaketCallBackInfo::release_contractid() {
  clear_has_contractid();
  if (contractid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contractid_;
    contractid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_contractid(::std::string* contractid) {
  if (contractid_ != &::google::protobuf::internal::kEmptyString) {
    delete contractid_;
  }
  if (contractid) {
    set_has_contractid();
    contractid_ = contractid;
  } else {
    clear_has_contractid();
    contractid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string step = 8;
inline bool MaketCallBackInfo::has_step() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MaketCallBackInfo::set_has_step() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MaketCallBackInfo::clear_has_step() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MaketCallBackInfo::clear_step() {
  if (step_ != &::google::protobuf::internal::kEmptyString) {
    step_->clear();
  }
  clear_has_step();
}
inline const ::std::string& MaketCallBackInfo::step() const {
  return *step_;
}
inline void MaketCallBackInfo::set_step(const ::std::string& value) {
  set_has_step();
  if (step_ == &::google::protobuf::internal::kEmptyString) {
    step_ = new ::std::string;
  }
  step_->assign(value);
}
inline void MaketCallBackInfo::set_step(const char* value) {
  set_has_step();
  if (step_ == &::google::protobuf::internal::kEmptyString) {
    step_ = new ::std::string;
  }
  step_->assign(value);
}
inline void MaketCallBackInfo::set_step(const char* value, size_t size) {
  set_has_step();
  if (step_ == &::google::protobuf::internal::kEmptyString) {
    step_ = new ::std::string;
  }
  step_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_step() {
  set_has_step();
  if (step_ == &::google::protobuf::internal::kEmptyString) {
    step_ = new ::std::string;
  }
  return step_;
}
inline ::std::string* MaketCallBackInfo::release_step() {
  clear_has_step();
  if (step_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = step_;
    step_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_step(::std::string* step) {
  if (step_ != &::google::protobuf::internal::kEmptyString) {
    delete step_;
  }
  if (step) {
    set_has_step();
    step_ = step;
  } else {
    clear_has_step();
    step_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string payitem = 9;
inline bool MaketCallBackInfo::has_payitem() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MaketCallBackInfo::set_has_payitem() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MaketCallBackInfo::clear_has_payitem() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MaketCallBackInfo::clear_payitem() {
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    payitem_->clear();
  }
  clear_has_payitem();
}
inline const ::std::string& MaketCallBackInfo::payitem() const {
  return *payitem_;
}
inline void MaketCallBackInfo::set_payitem(const ::std::string& value) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(value);
}
inline void MaketCallBackInfo::set_payitem(const char* value) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(value);
}
inline void MaketCallBackInfo::set_payitem(const char* value, size_t size) {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  payitem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_payitem() {
  set_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    payitem_ = new ::std::string;
  }
  return payitem_;
}
inline ::std::string* MaketCallBackInfo::release_payitem() {
  clear_has_payitem();
  if (payitem_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payitem_;
    payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_payitem(::std::string* payitem) {
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    delete payitem_;
  }
  if (payitem) {
    set_has_payitem();
    payitem_ = payitem;
  } else {
    clear_has_payitem();
    payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string billno = 10;
inline bool MaketCallBackInfo::has_billno() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MaketCallBackInfo::set_has_billno() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MaketCallBackInfo::clear_has_billno() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MaketCallBackInfo::clear_billno() {
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    billno_->clear();
  }
  clear_has_billno();
}
inline const ::std::string& MaketCallBackInfo::billno() const {
  return *billno_;
}
inline void MaketCallBackInfo::set_billno(const ::std::string& value) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(value);
}
inline void MaketCallBackInfo::set_billno(const char* value) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(value);
}
inline void MaketCallBackInfo::set_billno(const char* value, size_t size) {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  billno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_billno() {
  set_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    billno_ = new ::std::string;
  }
  return billno_;
}
inline ::std::string* MaketCallBackInfo::release_billno() {
  clear_has_billno();
  if (billno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = billno_;
    billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_billno(::std::string* billno) {
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    delete billno_;
  }
  if (billno) {
    set_has_billno();
    billno_ = billno;
  } else {
    clear_has_billno();
    billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string providetype = 11;
inline bool MaketCallBackInfo::has_providetype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MaketCallBackInfo::set_has_providetype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MaketCallBackInfo::clear_has_providetype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MaketCallBackInfo::clear_providetype() {
  if (providetype_ != &::google::protobuf::internal::kEmptyString) {
    providetype_->clear();
  }
  clear_has_providetype();
}
inline const ::std::string& MaketCallBackInfo::providetype() const {
  return *providetype_;
}
inline void MaketCallBackInfo::set_providetype(const ::std::string& value) {
  set_has_providetype();
  if (providetype_ == &::google::protobuf::internal::kEmptyString) {
    providetype_ = new ::std::string;
  }
  providetype_->assign(value);
}
inline void MaketCallBackInfo::set_providetype(const char* value) {
  set_has_providetype();
  if (providetype_ == &::google::protobuf::internal::kEmptyString) {
    providetype_ = new ::std::string;
  }
  providetype_->assign(value);
}
inline void MaketCallBackInfo::set_providetype(const char* value, size_t size) {
  set_has_providetype();
  if (providetype_ == &::google::protobuf::internal::kEmptyString) {
    providetype_ = new ::std::string;
  }
  providetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_providetype() {
  set_has_providetype();
  if (providetype_ == &::google::protobuf::internal::kEmptyString) {
    providetype_ = new ::std::string;
  }
  return providetype_;
}
inline ::std::string* MaketCallBackInfo::release_providetype() {
  clear_has_providetype();
  if (providetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = providetype_;
    providetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_providetype(::std::string* providetype) {
  if (providetype_ != &::google::protobuf::internal::kEmptyString) {
    delete providetype_;
  }
  if (providetype) {
    set_has_providetype();
    providetype_ = providetype;
  } else {
    clear_has_providetype();
    providetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sig = 12;
inline bool MaketCallBackInfo::has_sig() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MaketCallBackInfo::set_has_sig() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MaketCallBackInfo::clear_has_sig() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MaketCallBackInfo::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& MaketCallBackInfo::sig() const {
  return *sig_;
}
inline void MaketCallBackInfo::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void MaketCallBackInfo::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void MaketCallBackInfo::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MaketCallBackInfo::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* MaketCallBackInfo::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MaketCallBackInfo::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ToTencentMaketCallBackInfo

// required string ret = 1;
inline bool ToTencentMaketCallBackInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToTencentMaketCallBackInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToTencentMaketCallBackInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToTencentMaketCallBackInfo::clear_ret() {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    ret_->clear();
  }
  clear_has_ret();
}
inline const ::std::string& ToTencentMaketCallBackInfo::ret() const {
  return *ret_;
}
inline void ToTencentMaketCallBackInfo::set_ret(const ::std::string& value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
}
inline void ToTencentMaketCallBackInfo::set_ret(const char* value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
}
inline void ToTencentMaketCallBackInfo::set_ret(const char* value, size_t size) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  ret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTencentMaketCallBackInfo::mutable_ret() {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    ret_ = new ::std::string;
  }
  return ret_;
}
inline ::std::string* ToTencentMaketCallBackInfo::release_ret() {
  clear_has_ret();
  if (ret_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ret_;
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTencentMaketCallBackInfo::set_allocated_ret(::std::string* ret) {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_;
  }
  if (ret) {
    set_has_ret();
    ret_ = ret;
  } else {
    clear_has_ret();
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg = 2;
inline bool ToTencentMaketCallBackInfo::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToTencentMaketCallBackInfo::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToTencentMaketCallBackInfo::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToTencentMaketCallBackInfo::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ToTencentMaketCallBackInfo::msg() const {
  return *msg_;
}
inline void ToTencentMaketCallBackInfo::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ToTencentMaketCallBackInfo::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ToTencentMaketCallBackInfo::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTencentMaketCallBackInfo::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ToTencentMaketCallBackInfo::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTencentMaketCallBackInfo::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string zoneid = 3;
inline bool ToTencentMaketCallBackInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToTencentMaketCallBackInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToTencentMaketCallBackInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToTencentMaketCallBackInfo::clear_zoneid() {
  if (zoneid_ != &::google::protobuf::internal::kEmptyString) {
    zoneid_->clear();
  }
  clear_has_zoneid();
}
inline const ::std::string& ToTencentMaketCallBackInfo::zoneid() const {
  return *zoneid_;
}
inline void ToTencentMaketCallBackInfo::set_zoneid(const ::std::string& value) {
  set_has_zoneid();
  if (zoneid_ == &::google::protobuf::internal::kEmptyString) {
    zoneid_ = new ::std::string;
  }
  zoneid_->assign(value);
}
inline void ToTencentMaketCallBackInfo::set_zoneid(const char* value) {
  set_has_zoneid();
  if (zoneid_ == &::google::protobuf::internal::kEmptyString) {
    zoneid_ = new ::std::string;
  }
  zoneid_->assign(value);
}
inline void ToTencentMaketCallBackInfo::set_zoneid(const char* value, size_t size) {
  set_has_zoneid();
  if (zoneid_ == &::google::protobuf::internal::kEmptyString) {
    zoneid_ = new ::std::string;
  }
  zoneid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToTencentMaketCallBackInfo::mutable_zoneid() {
  set_has_zoneid();
  if (zoneid_ == &::google::protobuf::internal::kEmptyString) {
    zoneid_ = new ::std::string;
  }
  return zoneid_;
}
inline ::std::string* ToTencentMaketCallBackInfo::release_zoneid() {
  clear_has_zoneid();
  if (zoneid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zoneid_;
    zoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToTencentMaketCallBackInfo::set_allocated_zoneid(::std::string* zoneid) {
  if (zoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete zoneid_;
  }
  if (zoneid) {
    set_has_zoneid();
    zoneid_ = zoneid;
  } else {
    clear_has_zoneid();
    zoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SysMarketInfo

// required int64 charId = 1;
inline bool SysMarketInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysMarketInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysMarketInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysMarketInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SysMarketInfo::charid() const {
  return charid_;
}
inline void SysMarketInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 itemId = 2;
inline bool SysMarketInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysMarketInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysMarketInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysMarketInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 SysMarketInfo::itemid() const {
  return itemid_;
}
inline void SysMarketInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 num = 3;
inline bool SysMarketInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysMarketInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysMarketInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysMarketInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SysMarketInfo::num() const {
  return num_;
}
inline void SysMarketInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// MarketTaskInfo

// required string openid = 1;
inline bool MarketTaskInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarketTaskInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarketTaskInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarketTaskInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& MarketTaskInfo::openid() const {
  return *openid_;
}
inline void MarketTaskInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void MarketTaskInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void MarketTaskInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarketTaskInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* MarketTaskInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarketTaskInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .TencentInfo.TaskInfo taskinfo = 2;
inline int MarketTaskInfo::taskinfo_size() const {
  return taskinfo_.size();
}
inline void MarketTaskInfo::clear_taskinfo() {
  taskinfo_.Clear();
}
inline const ::TencentInfo::TaskInfo& MarketTaskInfo::taskinfo(int index) const {
  return taskinfo_.Get(index);
}
inline ::TencentInfo::TaskInfo* MarketTaskInfo::mutable_taskinfo(int index) {
  return taskinfo_.Mutable(index);
}
inline ::TencentInfo::TaskInfo* MarketTaskInfo::add_taskinfo() {
  return taskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TencentInfo::TaskInfo >&
MarketTaskInfo::taskinfo() const {
  return taskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::TencentInfo::TaskInfo >*
MarketTaskInfo::mutable_taskinfo() {
  return &taskinfo_;
}

// -------------------------------------------------------------------

// TaskInfo

// required string taskId = 1;
inline bool TaskInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskInfo::clear_taskid() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    taskid_->clear();
  }
  clear_has_taskid();
}
inline const ::std::string& TaskInfo::taskid() const {
  return *taskid_;
}
inline void TaskInfo::set_taskid(const ::std::string& value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void TaskInfo::set_taskid(const char* value) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(value);
}
inline void TaskInfo::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  taskid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskInfo::mutable_taskid() {
  set_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    taskid_ = new ::std::string;
  }
  return taskid_;
}
inline ::std::string* TaskInfo::release_taskid() {
  clear_has_taskid();
  if (taskid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskid_;
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskInfo::set_allocated_taskid(::std::string* taskid) {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (taskid) {
    set_has_taskid();
    taskid_ = taskid;
  } else {
    clear_has_taskid();
    taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool step1 = 2;
inline bool TaskInfo::has_step1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskInfo::set_has_step1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskInfo::clear_has_step1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskInfo::clear_step1() {
  step1_ = false;
  clear_has_step1();
}
inline bool TaskInfo::step1() const {
  return step1_;
}
inline void TaskInfo::set_step1(bool value) {
  set_has_step1();
  step1_ = value;
}

// optional bool step2 = 3;
inline bool TaskInfo::has_step2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskInfo::set_has_step2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskInfo::clear_has_step2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskInfo::clear_step2() {
  step2_ = false;
  clear_has_step2();
}
inline bool TaskInfo::step2() const {
  return step2_;
}
inline void TaskInfo::set_step2(bool value) {
  set_has_step2();
  step2_ = value;
}

// optional bool step3 = 4;
inline bool TaskInfo::has_step3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskInfo::set_has_step3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskInfo::clear_has_step3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskInfo::clear_step3() {
  step3_ = false;
  clear_has_step3();
}
inline bool TaskInfo::step3() const {
  return step3_;
}
inline void TaskInfo::set_step3(bool value) {
  set_has_step3();
  step3_ = value;
}

// optional bool step4 = 5;
inline bool TaskInfo::has_step4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskInfo::set_has_step4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskInfo::clear_has_step4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskInfo::clear_step4() {
  step4_ = false;
  clear_has_step4();
}
inline bool TaskInfo::step4() const {
  return step4_;
}
inline void TaskInfo::set_step4(bool value) {
  set_has_step4();
  step4_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TencentInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pay_2fTencent_2eproto__INCLUDED
