// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity/YellowVip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity/YellowVip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace YellowVipInfo {

namespace {

const ::google::protobuf::Descriptor* ToClentYellowVipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentYellowVipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NovicePacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NovicePacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* YearVipPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YearVipPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* GirlWarPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GirlWarPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClentNovicePacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentNovicePacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGrowPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGrowPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClentReqGrowPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentReqGrowPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDailyPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDailyPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClentReqDailyPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentReqDailyPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClentYearVipPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentYearVipPacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClentGirlWarPacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentGirlWarPacks_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2fYellowVip_2eproto() {
  protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity/YellowVip.proto");
  GOOGLE_CHECK(file != NULL);
  ToClentYellowVipInfo_descriptor_ = file->message_type(0);
  static const int ToClentYellowVipInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, is_yellow_high_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, novicepacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, growpacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, dailypacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, yearvippacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, girlwarpacks_),
  };
  ToClentYellowVipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentYellowVipInfo_descriptor_,
      ToClentYellowVipInfo::default_instance_,
      ToClentYellowVipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYellowVipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentYellowVipInfo));
  NovicePacks_descriptor_ = file->message_type(1);
  static const int NovicePacks_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePacks, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePacks, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePacks, itemnum_),
  };
  NovicePacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NovicePacks_descriptor_,
      NovicePacks::default_instance_,
      NovicePacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NovicePacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NovicePacks));
  GrowPacks_descriptor_ = file->message_type(2);
  static const int GrowPacks_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPacks, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPacks, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPacks, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPacks, value_),
  };
  GrowPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPacks_descriptor_,
      GrowPacks::default_instance_,
      GrowPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPacks));
  DailyPacks_descriptor_ = file->message_type(3);
  static const int DailyPacks_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPacks, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPacks, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPacks, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPacks, value_),
  };
  DailyPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyPacks_descriptor_,
      DailyPacks::default_instance_,
      DailyPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyPacks));
  YearVipPacks_descriptor_ = file->message_type(4);
  static const int YearVipPacks_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearVipPacks, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearVipPacks, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearVipPacks, itemnum_),
  };
  YearVipPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YearVipPacks_descriptor_,
      YearVipPacks::default_instance_,
      YearVipPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearVipPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YearVipPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YearVipPacks));
  GirlWarPacks_descriptor_ = file->message_type(5);
  static const int GirlWarPacks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPacks, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPacks, id_),
  };
  GirlWarPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GirlWarPacks_descriptor_,
      GirlWarPacks::default_instance_,
      GirlWarPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GirlWarPacks));
  ToClentNovicePacks_descriptor_ = file->message_type(6);
  static const int ToClentNovicePacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentNovicePacks, ret_),
  };
  ToClentNovicePacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentNovicePacks_descriptor_,
      ToClentNovicePacks::default_instance_,
      ToClentNovicePacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentNovicePacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentNovicePacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentNovicePacks));
  ReqGrowPacks_descriptor_ = file->message_type(7);
  static const int ReqGrowPacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGrowPacks, value_),
  };
  ReqGrowPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGrowPacks_descriptor_,
      ReqGrowPacks::default_instance_,
      ReqGrowPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGrowPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGrowPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGrowPacks));
  ToClentReqGrowPacks_descriptor_ = file->message_type(8);
  static const int ToClentReqGrowPacks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqGrowPacks, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqGrowPacks, value_),
  };
  ToClentReqGrowPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentReqGrowPacks_descriptor_,
      ToClentReqGrowPacks::default_instance_,
      ToClentReqGrowPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqGrowPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqGrowPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentReqGrowPacks));
  ReqDailyPacks_descriptor_ = file->message_type(9);
  static const int ReqDailyPacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDailyPacks, value_),
  };
  ReqDailyPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDailyPacks_descriptor_,
      ReqDailyPacks::default_instance_,
      ReqDailyPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDailyPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDailyPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDailyPacks));
  ToClentReqDailyPacks_descriptor_ = file->message_type(10);
  static const int ToClentReqDailyPacks_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqDailyPacks, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqDailyPacks, value_),
  };
  ToClentReqDailyPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentReqDailyPacks_descriptor_,
      ToClentReqDailyPacks::default_instance_,
      ToClentReqDailyPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqDailyPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentReqDailyPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentReqDailyPacks));
  ToClentYearVipPacks_descriptor_ = file->message_type(11);
  static const int ToClentYearVipPacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYearVipPacks, ret_),
  };
  ToClentYearVipPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentYearVipPacks_descriptor_,
      ToClentYearVipPacks::default_instance_,
      ToClentYearVipPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYearVipPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentYearVipPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentYearVipPacks));
  ToClentGirlWarPacks_descriptor_ = file->message_type(12);
  static const int ToClentGirlWarPacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentGirlWarPacks, ret_),
  };
  ToClentGirlWarPacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentGirlWarPacks_descriptor_,
      ToClentGirlWarPacks::default_instance_,
      ToClentGirlWarPacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentGirlWarPacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentGirlWarPacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentGirlWarPacks));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2fYellowVip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentYellowVipInfo_descriptor_, &ToClentYellowVipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NovicePacks_descriptor_, &NovicePacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPacks_descriptor_, &GrowPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyPacks_descriptor_, &DailyPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YearVipPacks_descriptor_, &YearVipPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GirlWarPacks_descriptor_, &GirlWarPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentNovicePacks_descriptor_, &ToClentNovicePacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGrowPacks_descriptor_, &ReqGrowPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentReqGrowPacks_descriptor_, &ToClentReqGrowPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDailyPacks_descriptor_, &ReqDailyPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentReqDailyPacks_descriptor_, &ToClentReqDailyPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentYearVipPacks_descriptor_, &ToClentYearVipPacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentGirlWarPacks_descriptor_, &ToClentGirlWarPacks::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2fYellowVip_2eproto() {
  delete ToClentYellowVipInfo::default_instance_;
  delete ToClentYellowVipInfo_reflection_;
  delete NovicePacks::default_instance_;
  delete NovicePacks_reflection_;
  delete GrowPacks::default_instance_;
  delete GrowPacks_reflection_;
  delete DailyPacks::default_instance_;
  delete DailyPacks_reflection_;
  delete YearVipPacks::default_instance_;
  delete YearVipPacks_reflection_;
  delete GirlWarPacks::default_instance_;
  delete GirlWarPacks_reflection_;
  delete ToClentNovicePacks::default_instance_;
  delete ToClentNovicePacks_reflection_;
  delete ReqGrowPacks::default_instance_;
  delete ReqGrowPacks_reflection_;
  delete ToClentReqGrowPacks::default_instance_;
  delete ToClentReqGrowPacks_reflection_;
  delete ReqDailyPacks::default_instance_;
  delete ReqDailyPacks_reflection_;
  delete ToClentReqDailyPacks::default_instance_;
  delete ToClentReqDailyPacks_reflection_;
  delete ToClentYearVipPacks::default_instance_;
  delete ToClentYearVipPacks_reflection_;
  delete ToClentGirlWarPacks::default_instance_;
  delete ToClentGirlWarPacks_reflection_;
}

void protobuf_AddDesc_Activity_2fYellowVip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Activity/YellowVip.proto\022\rYellowVipInf"
    "o\"\377\002\n\024ToClentYellowVipInfo\022\013\n\003ret\030\001 \002(\005\022"
    "\025\n\ris_yellow_vip\030\002 \001(\005\022\032\n\022is_yellow_year"
    "_vip\030\003 \001(\005\022\030\n\020yellow_vip_level\030\004 \001(\005\022\032\n\022"
    "is_yellow_high_vip\030\005 \001(\005\022/\n\013novicepacks\030"
    "\006 \001(\0132\032.YellowVipInfo.NovicePacks\022+\n\tgro"
    "wpacks\030\007 \003(\0132\030.YellowVipInfo.GrowPacks\022-"
    "\n\ndailypacks\030\010 \003(\0132\031.YellowVipInfo.Daily"
    "Packs\0221\n\014yearvippacks\030\t \001(\0132\033.YellowVipI"
    "nfo.YearVipPacks\0221\n\014girlwarpacks\030\n \001(\0132\033"
    ".YellowVipInfo.GirlWarPacks\"=\n\013NovicePac"
    "ks\022\r\n\005state\030\001 \001(\005\022\016\n\006itemId\030\002 \003(\005\022\017\n\007ite"
    "mNum\030\003 \003(\005\"J\n\tGrowPacks\022\r\n\005state\030\001 \001(\005\022\016"
    "\n\006itemId\030\002 \003(\005\022\017\n\007itemNum\030\003 \003(\005\022\r\n\005value"
    "\030\004 \001(\005\"K\n\nDailyPacks\022\r\n\005state\030\001 \001(\005\022\016\n\006i"
    "temId\030\002 \003(\005\022\017\n\007itemNum\030\003 \003(\005\022\r\n\005value\030\004 "
    "\001(\005\">\n\014YearVipPacks\022\r\n\005state\030\001 \001(\005\022\016\n\006it"
    "emId\030\002 \003(\005\022\017\n\007itemNum\030\003 \003(\005\")\n\014GirlWarPa"
    "cks\022\r\n\005state\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"!\n\022ToClen"
    "tNovicePacks\022\013\n\003ret\030\001 \002(\005\"\035\n\014ReqGrowPack"
    "s\022\r\n\005value\030\001 \002(\005\"1\n\023ToClentReqGrowPacks\022"
    "\013\n\003ret\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"\036\n\rReqDailyP"
    "acks\022\r\n\005value\030\001 \002(\005\"2\n\024ToClentReqDailyPa"
    "cks\022\013\n\003ret\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"\"\n\023ToCle"
    "ntYearVipPacks\022\013\n\003ret\030\001 \002(\005\"\"\n\023ToClentGi"
    "rlWarPacks\022\013\n\003ret\030\001 \002(\005", 1023);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity/YellowVip.proto", &protobuf_RegisterTypes);
  ToClentYellowVipInfo::default_instance_ = new ToClentYellowVipInfo();
  NovicePacks::default_instance_ = new NovicePacks();
  GrowPacks::default_instance_ = new GrowPacks();
  DailyPacks::default_instance_ = new DailyPacks();
  YearVipPacks::default_instance_ = new YearVipPacks();
  GirlWarPacks::default_instance_ = new GirlWarPacks();
  ToClentNovicePacks::default_instance_ = new ToClentNovicePacks();
  ReqGrowPacks::default_instance_ = new ReqGrowPacks();
  ToClentReqGrowPacks::default_instance_ = new ToClentReqGrowPacks();
  ReqDailyPacks::default_instance_ = new ReqDailyPacks();
  ToClentReqDailyPacks::default_instance_ = new ToClentReqDailyPacks();
  ToClentYearVipPacks::default_instance_ = new ToClentYearVipPacks();
  ToClentGirlWarPacks::default_instance_ = new ToClentGirlWarPacks();
  ToClentYellowVipInfo::default_instance_->InitAsDefaultInstance();
  NovicePacks::default_instance_->InitAsDefaultInstance();
  GrowPacks::default_instance_->InitAsDefaultInstance();
  DailyPacks::default_instance_->InitAsDefaultInstance();
  YearVipPacks::default_instance_->InitAsDefaultInstance();
  GirlWarPacks::default_instance_->InitAsDefaultInstance();
  ToClentNovicePacks::default_instance_->InitAsDefaultInstance();
  ReqGrowPacks::default_instance_->InitAsDefaultInstance();
  ToClentReqGrowPacks::default_instance_->InitAsDefaultInstance();
  ReqDailyPacks::default_instance_->InitAsDefaultInstance();
  ToClentReqDailyPacks::default_instance_->InitAsDefaultInstance();
  ToClentYearVipPacks::default_instance_->InitAsDefaultInstance();
  ToClentGirlWarPacks::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2fYellowVip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2fYellowVip_2eproto {
  StaticDescriptorInitializer_Activity_2fYellowVip_2eproto() {
    protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  }
} static_descriptor_initializer_Activity_2fYellowVip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ToClentYellowVipInfo::kRetFieldNumber;
const int ToClentYellowVipInfo::kIsYellowVipFieldNumber;
const int ToClentYellowVipInfo::kIsYellowYearVipFieldNumber;
const int ToClentYellowVipInfo::kYellowVipLevelFieldNumber;
const int ToClentYellowVipInfo::kIsYellowHighVipFieldNumber;
const int ToClentYellowVipInfo::kNovicepacksFieldNumber;
const int ToClentYellowVipInfo::kGrowpacksFieldNumber;
const int ToClentYellowVipInfo::kDailypacksFieldNumber;
const int ToClentYellowVipInfo::kYearvippacksFieldNumber;
const int ToClentYellowVipInfo::kGirlwarpacksFieldNumber;
#endif  // !_MSC_VER

ToClentYellowVipInfo::ToClentYellowVipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentYellowVipInfo::InitAsDefaultInstance() {
  novicepacks_ = const_cast< ::YellowVipInfo::NovicePacks*>(&::YellowVipInfo::NovicePacks::default_instance());
  yearvippacks_ = const_cast< ::YellowVipInfo::YearVipPacks*>(&::YellowVipInfo::YearVipPacks::default_instance());
  girlwarpacks_ = const_cast< ::YellowVipInfo::GirlWarPacks*>(&::YellowVipInfo::GirlWarPacks::default_instance());
}

ToClentYellowVipInfo::ToClentYellowVipInfo(const ToClentYellowVipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentYellowVipInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  is_yellow_vip_ = 0;
  is_yellow_year_vip_ = 0;
  yellow_vip_level_ = 0;
  is_yellow_high_vip_ = 0;
  novicepacks_ = NULL;
  yearvippacks_ = NULL;
  girlwarpacks_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentYellowVipInfo::~ToClentYellowVipInfo() {
  SharedDtor();
}

void ToClentYellowVipInfo::SharedDtor() {
  if (this != default_instance_) {
    delete novicepacks_;
    delete yearvippacks_;
    delete girlwarpacks_;
  }
}

void ToClentYellowVipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentYellowVipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentYellowVipInfo_descriptor_;
}

const ToClentYellowVipInfo& ToClentYellowVipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ToClentYellowVipInfo* ToClentYellowVipInfo::default_instance_ = NULL;

ToClentYellowVipInfo* ToClentYellowVipInfo::New() const {
  return new ToClentYellowVipInfo;
}

void ToClentYellowVipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    is_yellow_vip_ = 0;
    is_yellow_year_vip_ = 0;
    yellow_vip_level_ = 0;
    is_yellow_high_vip_ = 0;
    if (has_novicepacks()) {
      if (novicepacks_ != NULL) novicepacks_->::YellowVipInfo::NovicePacks::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_yearvippacks()) {
      if (yearvippacks_ != NULL) yearvippacks_->::YellowVipInfo::YearVipPacks::Clear();
    }
    if (has_girlwarpacks()) {
      if (girlwarpacks_ != NULL) girlwarpacks_->::YellowVipInfo::GirlWarPacks::Clear();
    }
  }
  growpacks_.Clear();
  dailypacks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentYellowVipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_yellow_vip;
        break;
      }

      // optional int32 is_yellow_vip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_yellow_year_vip;
        break;
      }

      // optional int32 is_yellow_year_vip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_yellow_vip_level;
        break;
      }

      // optional int32 yellow_vip_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_yellow_high_vip;
        break;
      }

      // optional int32 is_yellow_high_vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_high_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_high_vip_)));
          set_has_is_yellow_high_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_novicepacks;
        break;
      }

      // optional .YellowVipInfo.NovicePacks novicepacks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_novicepacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novicepacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_growpacks;
        break;
      }

      // repeated .YellowVipInfo.GrowPacks growpacks = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growpacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growpacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_growpacks;
        if (input->ExpectTag(66)) goto parse_dailypacks;
        break;
      }

      // repeated .YellowVipInfo.DailyPacks dailypacks = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailypacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailypacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dailypacks;
        if (input->ExpectTag(74)) goto parse_yearvippacks;
        break;
      }

      // optional .YellowVipInfo.YearVipPacks yearvippacks = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yearvippacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yearvippacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_girlwarpacks;
        break;
      }

      // optional .YellowVipInfo.GirlWarPacks girlwarpacks = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_girlwarpacks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_girlwarpacks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentYellowVipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 is_yellow_vip = 2;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_yellow_vip(), output);
  }

  // optional int32 is_yellow_year_vip = 3;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_yellow_year_vip(), output);
  }

  // optional int32 yellow_vip_level = 4;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->yellow_vip_level(), output);
  }

  // optional int32 is_yellow_high_vip = 5;
  if (has_is_yellow_high_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->is_yellow_high_vip(), output);
  }

  // optional .YellowVipInfo.NovicePacks novicepacks = 6;
  if (has_novicepacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->novicepacks(), output);
  }

  // repeated .YellowVipInfo.GrowPacks growpacks = 7;
  for (int i = 0; i < this->growpacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->growpacks(i), output);
  }

  // repeated .YellowVipInfo.DailyPacks dailypacks = 8;
  for (int i = 0; i < this->dailypacks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dailypacks(i), output);
  }

  // optional .YellowVipInfo.YearVipPacks yearvippacks = 9;
  if (has_yearvippacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->yearvippacks(), output);
  }

  // optional .YellowVipInfo.GirlWarPacks girlwarpacks = 10;
  if (has_girlwarpacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->girlwarpacks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentYellowVipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 is_yellow_vip = 2;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_yellow_vip(), target);
  }

  // optional int32 is_yellow_year_vip = 3;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_yellow_year_vip(), target);
  }

  // optional int32 yellow_vip_level = 4;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->yellow_vip_level(), target);
  }

  // optional int32 is_yellow_high_vip = 5;
  if (has_is_yellow_high_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->is_yellow_high_vip(), target);
  }

  // optional .YellowVipInfo.NovicePacks novicepacks = 6;
  if (has_novicepacks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->novicepacks(), target);
  }

  // repeated .YellowVipInfo.GrowPacks growpacks = 7;
  for (int i = 0; i < this->growpacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->growpacks(i), target);
  }

  // repeated .YellowVipInfo.DailyPacks dailypacks = 8;
  for (int i = 0; i < this->dailypacks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dailypacks(i), target);
  }

  // optional .YellowVipInfo.YearVipPacks yearvippacks = 9;
  if (has_yearvippacks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->yearvippacks(), target);
  }

  // optional .YellowVipInfo.GirlWarPacks girlwarpacks = 10;
  if (has_girlwarpacks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->girlwarpacks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentYellowVipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 is_yellow_vip = 2;
    if (has_is_yellow_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow_vip());
    }

    // optional int32 is_yellow_year_vip = 3;
    if (has_is_yellow_year_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow_year_vip());
    }

    // optional int32 yellow_vip_level = 4;
    if (has_yellow_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_vip_level());
    }

    // optional int32 is_yellow_high_vip = 5;
    if (has_is_yellow_high_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow_high_vip());
    }

    // optional .YellowVipInfo.NovicePacks novicepacks = 6;
    if (has_novicepacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novicepacks());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .YellowVipInfo.YearVipPacks yearvippacks = 9;
    if (has_yearvippacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yearvippacks());
    }

    // optional .YellowVipInfo.GirlWarPacks girlwarpacks = 10;
    if (has_girlwarpacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->girlwarpacks());
    }

  }
  // repeated .YellowVipInfo.GrowPacks growpacks = 7;
  total_size += 1 * this->growpacks_size();
  for (int i = 0; i < this->growpacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growpacks(i));
  }

  // repeated .YellowVipInfo.DailyPacks dailypacks = 8;
  total_size += 1 * this->dailypacks_size();
  for (int i = 0; i < this->dailypacks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailypacks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentYellowVipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentYellowVipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentYellowVipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentYellowVipInfo::MergeFrom(const ToClentYellowVipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  growpacks_.MergeFrom(from.growpacks_);
  dailypacks_.MergeFrom(from.dailypacks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_is_yellow_high_vip()) {
      set_is_yellow_high_vip(from.is_yellow_high_vip());
    }
    if (from.has_novicepacks()) {
      mutable_novicepacks()->::YellowVipInfo::NovicePacks::MergeFrom(from.novicepacks());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yearvippacks()) {
      mutable_yearvippacks()->::YellowVipInfo::YearVipPacks::MergeFrom(from.yearvippacks());
    }
    if (from.has_girlwarpacks()) {
      mutable_girlwarpacks()->::YellowVipInfo::GirlWarPacks::MergeFrom(from.girlwarpacks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentYellowVipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentYellowVipInfo::CopyFrom(const ToClentYellowVipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentYellowVipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentYellowVipInfo::Swap(ToClentYellowVipInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(is_yellow_high_vip_, other->is_yellow_high_vip_);
    std::swap(novicepacks_, other->novicepacks_);
    growpacks_.Swap(&other->growpacks_);
    dailypacks_.Swap(&other->dailypacks_);
    std::swap(yearvippacks_, other->yearvippacks_);
    std::swap(girlwarpacks_, other->girlwarpacks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentYellowVipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentYellowVipInfo_descriptor_;
  metadata.reflection = ToClentYellowVipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NovicePacks::kStateFieldNumber;
const int NovicePacks::kItemIdFieldNumber;
const int NovicePacks::kItemNumFieldNumber;
#endif  // !_MSC_VER

NovicePacks::NovicePacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NovicePacks::InitAsDefaultInstance() {
}

NovicePacks::NovicePacks(const NovicePacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NovicePacks::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NovicePacks::~NovicePacks() {
  SharedDtor();
}

void NovicePacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NovicePacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NovicePacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NovicePacks_descriptor_;
}

const NovicePacks& NovicePacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

NovicePacks* NovicePacks::default_instance_ = NULL;

NovicePacks* NovicePacks::New() const {
  return new NovicePacks;
}

void NovicePacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NovicePacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NovicePacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NovicePacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NovicePacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated int32 itemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NovicePacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NovicePacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NovicePacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NovicePacks::MergeFrom(const NovicePacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NovicePacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NovicePacks::CopyFrom(const NovicePacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NovicePacks::IsInitialized() const {

  return true;
}

void NovicePacks::Swap(NovicePacks* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NovicePacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NovicePacks_descriptor_;
  metadata.reflection = NovicePacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPacks::kStateFieldNumber;
const int GrowPacks::kItemIdFieldNumber;
const int GrowPacks::kItemNumFieldNumber;
const int GrowPacks::kValueFieldNumber;
#endif  // !_MSC_VER

GrowPacks::GrowPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPacks::InitAsDefaultInstance() {
}

GrowPacks::GrowPacks(const GrowPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPacks::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPacks::~GrowPacks() {
  SharedDtor();
}

void GrowPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPacks_descriptor_;
}

const GrowPacks& GrowPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

GrowPacks* GrowPacks::default_instance_ = NULL;

GrowPacks* GrowPacks::New() const {
  return new GrowPacks;
}

void GrowPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    value_ = 0;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemnum(i), output);
  }

  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemnum(i), target);
  }

  // optional int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  // repeated int32 itemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPacks::MergeFrom(const GrowPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPacks::CopyFrom(const GrowPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPacks::IsInitialized() const {

  return true;
}

void GrowPacks::Swap(GrowPacks* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPacks_descriptor_;
  metadata.reflection = GrowPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyPacks::kStateFieldNumber;
const int DailyPacks::kItemIdFieldNumber;
const int DailyPacks::kItemNumFieldNumber;
const int DailyPacks::kValueFieldNumber;
#endif  // !_MSC_VER

DailyPacks::DailyPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyPacks::InitAsDefaultInstance() {
}

DailyPacks::DailyPacks(const DailyPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyPacks::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyPacks::~DailyPacks() {
  SharedDtor();
}

void DailyPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyPacks_descriptor_;
}

const DailyPacks& DailyPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

DailyPacks* DailyPacks::default_instance_ = NULL;

DailyPacks* DailyPacks::New() const {
  return new DailyPacks;
}

void DailyPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    value_ = 0;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional int32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemnum(i), output);
  }

  // optional int32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemnum(i), target);
  }

  // optional int32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  // repeated int32 itemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyPacks::MergeFrom(const DailyPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyPacks::CopyFrom(const DailyPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyPacks::IsInitialized() const {

  return true;
}

void DailyPacks::Swap(DailyPacks* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyPacks_descriptor_;
  metadata.reflection = DailyPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YearVipPacks::kStateFieldNumber;
const int YearVipPacks::kItemIdFieldNumber;
const int YearVipPacks::kItemNumFieldNumber;
#endif  // !_MSC_VER

YearVipPacks::YearVipPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YearVipPacks::InitAsDefaultInstance() {
}

YearVipPacks::YearVipPacks(const YearVipPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YearVipPacks::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YearVipPacks::~YearVipPacks() {
  SharedDtor();
}

void YearVipPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YearVipPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YearVipPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YearVipPacks_descriptor_;
}

const YearVipPacks& YearVipPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

YearVipPacks* YearVipPacks::default_instance_ = NULL;

YearVipPacks* YearVipPacks::New() const {
  return new YearVipPacks;
}

void YearVipPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YearVipPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YearVipPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YearVipPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YearVipPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated int32 itemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YearVipPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YearVipPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YearVipPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YearVipPacks::MergeFrom(const YearVipPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YearVipPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YearVipPacks::CopyFrom(const YearVipPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YearVipPacks::IsInitialized() const {

  return true;
}

void YearVipPacks::Swap(YearVipPacks* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YearVipPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YearVipPacks_descriptor_;
  metadata.reflection = YearVipPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GirlWarPacks::kStateFieldNumber;
const int GirlWarPacks::kIdFieldNumber;
#endif  // !_MSC_VER

GirlWarPacks::GirlWarPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GirlWarPacks::InitAsDefaultInstance() {
}

GirlWarPacks::GirlWarPacks(const GirlWarPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GirlWarPacks::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GirlWarPacks::~GirlWarPacks() {
  SharedDtor();
}

void GirlWarPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GirlWarPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GirlWarPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GirlWarPacks_descriptor_;
}

const GirlWarPacks& GirlWarPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

GirlWarPacks* GirlWarPacks::default_instance_ = NULL;

GirlWarPacks* GirlWarPacks::New() const {
  return new GirlWarPacks;
}

void GirlWarPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GirlWarPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GirlWarPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GirlWarPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GirlWarPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GirlWarPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GirlWarPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GirlWarPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GirlWarPacks::MergeFrom(const GirlWarPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GirlWarPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GirlWarPacks::CopyFrom(const GirlWarPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GirlWarPacks::IsInitialized() const {

  return true;
}

void GirlWarPacks::Swap(GirlWarPacks* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GirlWarPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GirlWarPacks_descriptor_;
  metadata.reflection = GirlWarPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClentNovicePacks::kRetFieldNumber;
#endif  // !_MSC_VER

ToClentNovicePacks::ToClentNovicePacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentNovicePacks::InitAsDefaultInstance() {
}

ToClentNovicePacks::ToClentNovicePacks(const ToClentNovicePacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentNovicePacks::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentNovicePacks::~ToClentNovicePacks() {
  SharedDtor();
}

void ToClentNovicePacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClentNovicePacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentNovicePacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentNovicePacks_descriptor_;
}

const ToClentNovicePacks& ToClentNovicePacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ToClentNovicePacks* ToClentNovicePacks::default_instance_ = NULL;

ToClentNovicePacks* ToClentNovicePacks::New() const {
  return new ToClentNovicePacks;
}

void ToClentNovicePacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentNovicePacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentNovicePacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentNovicePacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentNovicePacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentNovicePacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentNovicePacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentNovicePacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentNovicePacks::MergeFrom(const ToClentNovicePacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentNovicePacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentNovicePacks::CopyFrom(const ToClentNovicePacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentNovicePacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentNovicePacks::Swap(ToClentNovicePacks* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentNovicePacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentNovicePacks_descriptor_;
  metadata.reflection = ToClentNovicePacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGrowPacks::kValueFieldNumber;
#endif  // !_MSC_VER

ReqGrowPacks::ReqGrowPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGrowPacks::InitAsDefaultInstance() {
}

ReqGrowPacks::ReqGrowPacks(const ReqGrowPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGrowPacks::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGrowPacks::~ReqGrowPacks() {
  SharedDtor();
}

void ReqGrowPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGrowPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGrowPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGrowPacks_descriptor_;
}

const ReqGrowPacks& ReqGrowPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ReqGrowPacks* ReqGrowPacks::default_instance_ = NULL;

ReqGrowPacks* ReqGrowPacks::New() const {
  return new ReqGrowPacks;
}

void ReqGrowPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGrowPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGrowPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGrowPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGrowPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGrowPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGrowPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGrowPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGrowPacks::MergeFrom(const ReqGrowPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGrowPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGrowPacks::CopyFrom(const ReqGrowPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGrowPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGrowPacks::Swap(ReqGrowPacks* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGrowPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGrowPacks_descriptor_;
  metadata.reflection = ReqGrowPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClentReqGrowPacks::kRetFieldNumber;
const int ToClentReqGrowPacks::kValueFieldNumber;
#endif  // !_MSC_VER

ToClentReqGrowPacks::ToClentReqGrowPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentReqGrowPacks::InitAsDefaultInstance() {
}

ToClentReqGrowPacks::ToClentReqGrowPacks(const ToClentReqGrowPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentReqGrowPacks::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentReqGrowPacks::~ToClentReqGrowPacks() {
  SharedDtor();
}

void ToClentReqGrowPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClentReqGrowPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentReqGrowPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentReqGrowPacks_descriptor_;
}

const ToClentReqGrowPacks& ToClentReqGrowPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ToClentReqGrowPacks* ToClentReqGrowPacks::default_instance_ = NULL;

ToClentReqGrowPacks* ToClentReqGrowPacks::New() const {
  return new ToClentReqGrowPacks;
}

void ToClentReqGrowPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentReqGrowPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentReqGrowPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentReqGrowPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentReqGrowPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentReqGrowPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentReqGrowPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentReqGrowPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentReqGrowPacks::MergeFrom(const ToClentReqGrowPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentReqGrowPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentReqGrowPacks::CopyFrom(const ToClentReqGrowPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentReqGrowPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentReqGrowPacks::Swap(ToClentReqGrowPacks* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentReqGrowPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentReqGrowPacks_descriptor_;
  metadata.reflection = ToClentReqGrowPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDailyPacks::kValueFieldNumber;
#endif  // !_MSC_VER

ReqDailyPacks::ReqDailyPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDailyPacks::InitAsDefaultInstance() {
}

ReqDailyPacks::ReqDailyPacks(const ReqDailyPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDailyPacks::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDailyPacks::~ReqDailyPacks() {
  SharedDtor();
}

void ReqDailyPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDailyPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDailyPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDailyPacks_descriptor_;
}

const ReqDailyPacks& ReqDailyPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ReqDailyPacks* ReqDailyPacks::default_instance_ = NULL;

ReqDailyPacks* ReqDailyPacks::New() const {
  return new ReqDailyPacks;
}

void ReqDailyPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDailyPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDailyPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDailyPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDailyPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDailyPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDailyPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDailyPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDailyPacks::MergeFrom(const ReqDailyPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDailyPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDailyPacks::CopyFrom(const ReqDailyPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDailyPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDailyPacks::Swap(ReqDailyPacks* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDailyPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDailyPacks_descriptor_;
  metadata.reflection = ReqDailyPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClentReqDailyPacks::kRetFieldNumber;
const int ToClentReqDailyPacks::kValueFieldNumber;
#endif  // !_MSC_VER

ToClentReqDailyPacks::ToClentReqDailyPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentReqDailyPacks::InitAsDefaultInstance() {
}

ToClentReqDailyPacks::ToClentReqDailyPacks(const ToClentReqDailyPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentReqDailyPacks::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentReqDailyPacks::~ToClentReqDailyPacks() {
  SharedDtor();
}

void ToClentReqDailyPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClentReqDailyPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentReqDailyPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentReqDailyPacks_descriptor_;
}

const ToClentReqDailyPacks& ToClentReqDailyPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ToClentReqDailyPacks* ToClentReqDailyPacks::default_instance_ = NULL;

ToClentReqDailyPacks* ToClentReqDailyPacks::New() const {
  return new ToClentReqDailyPacks;
}

void ToClentReqDailyPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentReqDailyPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentReqDailyPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentReqDailyPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentReqDailyPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentReqDailyPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentReqDailyPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentReqDailyPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentReqDailyPacks::MergeFrom(const ToClentReqDailyPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentReqDailyPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentReqDailyPacks::CopyFrom(const ToClentReqDailyPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentReqDailyPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentReqDailyPacks::Swap(ToClentReqDailyPacks* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentReqDailyPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentReqDailyPacks_descriptor_;
  metadata.reflection = ToClentReqDailyPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClentYearVipPacks::kRetFieldNumber;
#endif  // !_MSC_VER

ToClentYearVipPacks::ToClentYearVipPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentYearVipPacks::InitAsDefaultInstance() {
}

ToClentYearVipPacks::ToClentYearVipPacks(const ToClentYearVipPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentYearVipPacks::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentYearVipPacks::~ToClentYearVipPacks() {
  SharedDtor();
}

void ToClentYearVipPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClentYearVipPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentYearVipPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentYearVipPacks_descriptor_;
}

const ToClentYearVipPacks& ToClentYearVipPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ToClentYearVipPacks* ToClentYearVipPacks::default_instance_ = NULL;

ToClentYearVipPacks* ToClentYearVipPacks::New() const {
  return new ToClentYearVipPacks;
}

void ToClentYearVipPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentYearVipPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentYearVipPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentYearVipPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentYearVipPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentYearVipPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentYearVipPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentYearVipPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentYearVipPacks::MergeFrom(const ToClentYearVipPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentYearVipPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentYearVipPacks::CopyFrom(const ToClentYearVipPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentYearVipPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentYearVipPacks::Swap(ToClentYearVipPacks* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentYearVipPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentYearVipPacks_descriptor_;
  metadata.reflection = ToClentYearVipPacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClentGirlWarPacks::kRetFieldNumber;
#endif  // !_MSC_VER

ToClentGirlWarPacks::ToClentGirlWarPacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentGirlWarPacks::InitAsDefaultInstance() {
}

ToClentGirlWarPacks::ToClentGirlWarPacks(const ToClentGirlWarPacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentGirlWarPacks::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentGirlWarPacks::~ToClentGirlWarPacks() {
  SharedDtor();
}

void ToClentGirlWarPacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClentGirlWarPacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentGirlWarPacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentGirlWarPacks_descriptor_;
}

const ToClentGirlWarPacks& ToClentGirlWarPacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fYellowVip_2eproto();
  return *default_instance_;
}

ToClentGirlWarPacks* ToClentGirlWarPacks::default_instance_ = NULL;

ToClentGirlWarPacks* ToClentGirlWarPacks::New() const {
  return new ToClentGirlWarPacks;
}

void ToClentGirlWarPacks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentGirlWarPacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentGirlWarPacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentGirlWarPacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentGirlWarPacks::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentGirlWarPacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentGirlWarPacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentGirlWarPacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentGirlWarPacks::MergeFrom(const ToClentGirlWarPacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentGirlWarPacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentGirlWarPacks::CopyFrom(const ToClentGirlWarPacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentGirlWarPacks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentGirlWarPacks::Swap(ToClentGirlWarPacks* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentGirlWarPacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentGirlWarPacks_descriptor_;
  metadata.reflection = ToClentGirlWarPacks_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace YellowVipInfo

// @@protoc_insertion_point(global_scope)
